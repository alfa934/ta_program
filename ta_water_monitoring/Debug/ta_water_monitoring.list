
ta_water_monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7b8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800c8c8  0800c8c8  0000d8c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd7c  0800cd7c  0000e218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd7c  0800cd7c  0000dd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd84  0800cd84  0000e218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd84  0800cd84  0000dd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd88  0800cd88  0000dd88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800cd8c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000218  0800cfa4  0000e218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  0800cfa4  0000eac0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143b5  00000000  00000000  0000e241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c69  00000000  00000000  000225f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00025260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9e  00000000  00000000  000264f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5fb  00000000  00000000  0002738e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a14  00000000  00000000  00041989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094efc  00000000  00000000  0005839d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed299  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062cc  00000000  00000000  000ed2dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000f35a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c8b0 	.word	0x0800c8b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800c8b0 	.word	0x0800c8b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <__aeabi_f2uiz>:
 80010e0:	0042      	lsls	r2, r0, #1
 80010e2:	d20e      	bcs.n	8001102 <__aeabi_f2uiz+0x22>
 80010e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010e8:	d30b      	bcc.n	8001102 <__aeabi_f2uiz+0x22>
 80010ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f2:	d409      	bmi.n	8001108 <__aeabi_f2uiz+0x28>
 80010f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr
 8001108:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800110c:	d101      	bne.n	8001112 <__aeabi_f2uiz+0x32>
 800110e:	0242      	lsls	r2, r0, #9
 8001110:	d102      	bne.n	8001118 <__aeabi_f2uiz+0x38>
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	4770      	bx	lr
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_d2lz>:
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	2200      	movs	r2, #0
 8001124:	2300      	movs	r3, #0
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	f7ff fc47 	bl	80009bc <__aeabi_dcmplt>
 800112e:	b928      	cbnz	r0, 800113c <__aeabi_d2lz+0x1c>
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001138:	f000 b80a 	b.w	8001150 <__aeabi_d2ulz>
 800113c:	4620      	mov	r0, r4
 800113e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001142:	f000 f805 	bl	8001150 <__aeabi_d2ulz>
 8001146:	4240      	negs	r0, r0
 8001148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800114c:	bd38      	pop	{r3, r4, r5, pc}
 800114e:	bf00      	nop

08001150 <__aeabi_d2ulz>:
 8001150:	b5d0      	push	{r4, r6, r7, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <__aeabi_d2ulz+0x34>)
 8001156:	4606      	mov	r6, r0
 8001158:	460f      	mov	r7, r1
 800115a:	f7ff f9bd 	bl	80004d8 <__aeabi_dmul>
 800115e:	f7ff fc55 	bl	8000a0c <__aeabi_d2uiz>
 8001162:	4604      	mov	r4, r0
 8001164:	f7ff f93e 	bl	80003e4 <__aeabi_ui2d>
 8001168:	2200      	movs	r2, #0
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <__aeabi_d2ulz+0x38>)
 800116c:	f7ff f9b4 	bl	80004d8 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4630      	mov	r0, r6
 8001176:	4639      	mov	r1, r7
 8001178:	f7fe fff6 	bl	8000168 <__aeabi_dsub>
 800117c:	f7ff fc46 	bl	8000a0c <__aeabi_d2uiz>
 8001180:	4621      	mov	r1, r4
 8001182:	bdd0      	pop	{r4, r6, r7, pc}
 8001184:	3df00000 	.word	0x3df00000
 8001188:	41f00000 	.word	0x41f00000

0800118c <MS5837_Init>:
	return;
}


void MS5837_Init( I2C_HandleTypeDef *I2Cx, MS5837_t *sensor, uint16_t delay_ms )
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4613      	mov	r3, r2
 8001198:	80fb      	strh	r3, [r7, #6]
	//--- minimum time 40 ms
	sensor -> delay_ms = delay_ms - 1; //--- Offset 1, since counter starts at 0
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	3b01      	subs	r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	825a      	strh	r2, [r3, #18]

    uint8_t cmd = MS5837_RESET_CMD;
 80011a4:	231e      	movs	r3, #30
 80011a6:	74fb      	strb	r3, [r7, #19]

    HAL_I2C_Master_Transmit(I2Cx, MS5837_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY);
 80011a8:	f107 0213 	add.w	r2, r7, #19
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	21ec      	movs	r1, #236	@ 0xec
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f004 fe80 	bl	8005ebc <HAL_I2C_Master_Transmit>

    HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f003 fb37 	bl	8004830 <HAL_Delay>

    uint8_t data[2];

    for(int i = 0; i < 8; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e02b      	b.n	8001220 <MS5837_Init+0x94>
    {
        cmd = MS5837_PROM_READ + (i * 2);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3350      	adds	r3, #80	@ 0x50
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	74fb      	strb	r3, [r7, #19]

        HAL_I2C_Master_Transmit(I2Cx, MS5837_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY);
 80011d4:	f107 0213 	add.w	r2, r7, #19
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	21ec      	movs	r1, #236	@ 0xec
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f004 fe6a 	bl	8005ebc <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Receive (I2Cx, MS5837_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 80011e8:	f107 0210 	add.w	r2, r7, #16
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2302      	movs	r3, #2
 80011f4:	21ec      	movs	r1, #236	@ 0xec
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f004 ff5e 	bl	80060b8 <HAL_I2C_Master_Receive>

        sensor -> prom_coefficients[i] = (data[0] << 8) | data[1];
 80011fc:	7c3b      	ldrb	r3, [r7, #16]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7c7b      	ldrb	r3, [r7, #17]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	b299      	uxth	r1, r3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	460a      	mov	r2, r1
 8001218:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 8; i++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b07      	cmp	r3, #7
 8001224:	ddd0      	ble.n	80011c8 <MS5837_Init+0x3c>
    }

    return;
 8001226:	bf00      	nop
}
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <MS5837_StartConversion>:


void MS5837_StartConversion( I2C_HandleTypeDef *I2Cx, MS5837_t *sensor, uint8_t command )
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b088      	sub	sp, #32
 8001232:	af02      	add	r7, sp, #8
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	4613      	mov	r3, r2
 800123a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

    sensor -> current_command = command;
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
    sensor -> conversion_start_time = HAL_GetTick();
 8001242:	f003 faeb 	bl	800481c <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	615a      	str	r2, [r3, #20]

    status = HAL_I2C_Master_Transmit(I2Cx, MS5837_I2C_ADDR, &command, 1, HAL_MAX_DELAY);
 800124c:	1dfa      	adds	r2, r7, #7
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	21ec      	movs	r1, #236	@ 0xec
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f004 fe2f 	bl	8005ebc <HAL_I2C_Master_Transmit>
 800125e:	4603      	mov	r3, r0
 8001260:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <MS5837_StartConversion+0x44>
    {
        sensor -> state = START_CONVERT_D1;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return;
 8001270:	e000      	b.n	8001274 <MS5837_StartConversion+0x46>
    }

    return;
 8001272:	bf00      	nop
}
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <MS5837_ReadADC>:


void MS5837_ReadADC( I2C_HandleTypeDef *I2Cx, MS5837_t *sensor )
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b088      	sub	sp, #32
 800127e:	af02      	add	r7, sp, #8
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
    uint8_t cmd = MS5837_ADC_READ;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
    uint8_t data[3];
    HAL_StatusTypeDef status;

    status = HAL_I2C_Master_Transmit(I2Cx, MS5837_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8001288:	f107 020f 	add.w	r2, r7, #15
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	21ec      	movs	r1, #236	@ 0xec
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f004 fe10 	bl	8005ebc <HAL_I2C_Master_Transmit>
 800129c:	4603      	mov	r3, r0
 800129e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <MS5837_ReadADC+0x36>
    {
        sensor -> state = START_CONVERT_D1;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return;
 80012ae:	e02b      	b.n	8001308 <MS5837_ReadADC+0x8e>
    }

    status = HAL_I2C_Master_Receive(I2Cx, MS5837_I2C_ADDR, data, 3, HAL_MAX_DELAY);
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2303      	movs	r3, #3
 80012bc:	21ec      	movs	r1, #236	@ 0xec
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f004 fefa 	bl	80060b8 <HAL_I2C_Master_Receive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <MS5837_ReadADC+0x5e>
    {
        sensor -> state = START_CONVERT_D1;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return;
 80012d6:	e017      	b.n	8001308 <MS5837_ReadADC+0x8e>
    }

    uint32_t adc_value = (data[0] << 16) | (data[1] << 8) | data[2];
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	041a      	lsls	r2, r3, #16
 80012dc:	7b7b      	ldrb	r3, [r7, #13]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	4313      	orrs	r3, r2
 80012e2:	7bba      	ldrb	r2, [r7, #14]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if (sensor -> current_command == MS5837_CONVERT_D1)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b4a      	cmp	r3, #74	@ 0x4a
 80012ee:	d103      	bne.n	80012f8 <MS5837_ReadADC+0x7e>
    {
    	sensor -> pressure_D1 = adc_value;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	621a      	str	r2, [r3, #32]
    else if (sensor -> current_command == MS5837_CONVERT_D2)
    {
    	sensor -> temperature_D2 = adc_value;
    }

    return;
 80012f6:	e006      	b.n	8001306 <MS5837_ReadADC+0x8c>
    else if (sensor -> current_command == MS5837_CONVERT_D2)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b5a      	cmp	r3, #90	@ 0x5a
 80012fe:	d102      	bne.n	8001306 <MS5837_ReadADC+0x8c>
    	sensor -> temperature_D2 = adc_value;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
    return;
 8001306:	bf00      	nop
}
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <MS5837_Calculation>:


void MS5837_Calculation(MS5837_t *sensor)
{
 8001310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001314:	b0d6      	sub	sp, #344	@ 0x158
 8001316:	af00      	add	r7, sp, #0
 8001318:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
	// Given C1-C6 and D1, D2, calculated TEMP and P
	// Do conversion first and then second order temp compensation
	int32_t dT 		= 0;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
	int64_t SENS 	= 0;
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	int64_t OFF 	= 0;
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int32_t SENSi 	= 0;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	int32_t OFFi 	= 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	int32_t Ti 		= 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	int64_t OFF2 	= 0;
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t SENS2 	= 0;
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	//--- Terms called
	dT = sensor -> temperature_D2 - (uint32_t)(sensor -> prom_coefficients[5]) * 256;
 8001364:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800136a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800136e:	899b      	ldrh	r3, [r3, #12]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	SENS = (int64_t)(sensor -> prom_coefficients[1]) * 32768 + ((int64_t)(sensor -> prom_coefficients[3])*dT) / 256;
 8001378:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	b29b      	uxth	r3, r3
 8001380:	2200      	movs	r2, #0
 8001382:	4698      	mov	r8, r3
 8001384:	4691      	mov	r9, r2
 8001386:	f04f 0400 	mov.w	r4, #0
 800138a:	f04f 0500 	mov.w	r5, #0
 800138e:	ea4f 35c9 	mov.w	r5, r9, lsl #15
 8001392:	ea45 4558 	orr.w	r5, r5, r8, lsr #17
 8001396:	ea4f 34c8 	mov.w	r4, r8, lsl #15
 800139a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800139e:	891b      	ldrh	r3, [r3, #8]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2200      	movs	r2, #0
 80013a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80013a8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80013ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80013b0:	17da      	asrs	r2, r3, #31
 80013b2:	469a      	mov	sl, r3
 80013b4:	4693      	mov	fp, r2
 80013b6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80013ba:	460b      	mov	r3, r1
 80013bc:	fb0a f203 	mul.w	r2, sl, r3
 80013c0:	4603      	mov	r3, r0
 80013c2:	fb03 f30b 	mul.w	r3, r3, fp
 80013c6:	4413      	add	r3, r2
 80013c8:	4602      	mov	r2, r0
 80013ca:	fba2 210a 	umull	r2, r1, r2, sl
 80013ce:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 80013d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80013d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80013da:	4413      	add	r3, r2
 80013dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013e0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	da07      	bge.n	80013f8 <MS5837_Calculation+0xe8>
 80013e8:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 80013ec:	66b9      	str	r1, [r7, #104]	@ 0x68
 80013ee:	f143 0300 	adc.w	r3, r3, #0
 80013f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80013f8:	f04f 0000 	mov.w	r0, #0
 80013fc:	f04f 0100 	mov.w	r1, #0
 8001400:	0a10      	lsrs	r0, r2, #8
 8001402:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001406:	1219      	asrs	r1, r3, #8
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	18a1      	adds	r1, r4, r2
 800140e:	6639      	str	r1, [r7, #96]	@ 0x60
 8001410:	eb45 0303 	adc.w	r3, r5, r3
 8001414:	667b      	str	r3, [r7, #100]	@ 0x64
 8001416:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800141a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
	OFF  = (int64_t)(sensor -> prom_coefficients[2]) * 65536 + ((int64_t)(sensor -> prom_coefficients[4])*dT) / 128;
 800141e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001422:	88db      	ldrh	r3, [r3, #6]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800142c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001430:	f04f 0400 	mov.w	r4, #0
 8001434:	f04f 0500 	mov.w	r5, #0
 8001438:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800143c:	4613      	mov	r3, r2
 800143e:	041d      	lsls	r5, r3, #16
 8001440:	4613      	mov	r3, r2
 8001442:	460a      	mov	r2, r1
 8001444:	4611      	mov	r1, r2
 8001446:	ea45 4511 	orr.w	r5, r5, r1, lsr #16
 800144a:	4613      	mov	r3, r2
 800144c:	041c      	lsls	r4, r3, #16
 800144e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001452:	895b      	ldrh	r3, [r3, #10]
 8001454:	b29b      	uxth	r3, r3
 8001456:	2200      	movs	r2, #0
 8001458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800145c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001460:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001464:	17da      	asrs	r2, r3, #31
 8001466:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800146a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800146e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001472:	460b      	mov	r3, r1
 8001474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001478:	4642      	mov	r2, r8
 800147a:	fb02 f203 	mul.w	r2, r2, r3
 800147e:	464b      	mov	r3, r9
 8001480:	4684      	mov	ip, r0
 8001482:	fb0c f303 	mul.w	r3, ip, r3
 8001486:	4413      	add	r3, r2
 8001488:	4602      	mov	r2, r0
 800148a:	4641      	mov	r1, r8
 800148c:	fba2 2101 	umull	r2, r1, r2, r1
 8001490:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 8001494:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8001498:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800149c:	4413      	add	r3, r2
 800149e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80014a2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da07      	bge.n	80014ba <MS5837_Calculation+0x1aa>
 80014aa:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80014ae:	65b9      	str	r1, [r7, #88]	@ 0x58
 80014b0:	f143 0300 	adc.w	r3, r3, #0
 80014b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	09d0      	lsrs	r0, r2, #7
 80014c4:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80014c8:	11d9      	asrs	r1, r3, #7
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	18a1      	adds	r1, r4, r2
 80014d0:	6539      	str	r1, [r7, #80]	@ 0x50
 80014d2:	eb45 0303 	adc.w	r3, r5, r3
 80014d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80014d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80014dc:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
	sensor -> pressure_raw = (sensor -> pressure_D1 * SENS / (2097152) - OFF) / (8192);
 80014e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80014ec:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80014f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014f4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80014f8:	462a      	mov	r2, r5
 80014fa:	fb02 f203 	mul.w	r2, r2, r3
 80014fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001502:	4621      	mov	r1, r4
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	441a      	add	r2, r3
 800150a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800150e:	4621      	mov	r1, r4
 8001510:	fba3 3101 	umull	r3, r1, r3, r1
 8001514:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8001518:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800151c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001520:	18d3      	adds	r3, r2, r3
 8001522:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001526:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800152a:	2b00      	cmp	r3, #0
 800152c:	da07      	bge.n	800153e <MS5837_Calculation+0x22e>
 800152e:	4996      	ldr	r1, [pc, #600]	@ (8001788 <MS5837_Calculation+0x478>)
 8001530:	1851      	adds	r1, r2, r1
 8001532:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001534:	f143 0300 	adc.w	r3, r3, #0
 8001538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800153a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	0d50      	lsrs	r0, r2, #21
 8001548:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800154c:	1559      	asrs	r1, r3, #21
 800154e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001552:	1a84      	subs	r4, r0, r2
 8001554:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 8001558:	eb61 0303 	sbc.w	r3, r1, r3
 800155c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001560:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001564:	2b00      	cmp	r3, #0
 8001566:	da08      	bge.n	800157a <MS5837_Calculation+0x26a>
 8001568:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 800156c:	1851      	adds	r1, r2, r1
 800156e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001570:	f143 0300 	adc.w	r3, r3, #0
 8001574:	647b      	str	r3, [r7, #68]	@ 0x44
 8001576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800157a:	f04f 0000 	mov.w	r0, #0
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	0b50      	lsrs	r0, r2, #13
 8001584:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001588:	1359      	asrs	r1, r3, #13
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001592:	619a      	str	r2, [r3, #24]

	//--- Temp conversion
	sensor -> temperature_raw = 2000 + (int64_t)(dT) * sensor -> prom_coefficients[6] / 8388608;
 8001594:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001598:	17da      	asrs	r2, r3, #31
 800159a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800159e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80015a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015a6:	89db      	ldrh	r3, [r3, #14]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2200      	movs	r2, #0
 80015ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015b0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015b4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80015b8:	4622      	mov	r2, r4
 80015ba:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 80015be:	4641      	mov	r1, r8
 80015c0:	fb01 f202 	mul.w	r2, r1, r2
 80015c4:	464d      	mov	r5, r9
 80015c6:	4618      	mov	r0, r3
 80015c8:	4621      	mov	r1, r4
 80015ca:	4603      	mov	r3, r0
 80015cc:	fb03 f305 	mul.w	r3, r3, r5
 80015d0:	4413      	add	r3, r2
 80015d2:	4602      	mov	r2, r0
 80015d4:	4641      	mov	r1, r8
 80015d6:	fba2 2101 	umull	r2, r1, r2, r1
 80015da:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80015de:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80015e2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80015e6:	4413      	add	r3, r2
 80015e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015ec:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da07      	bge.n	8001604 <MS5837_Calculation+0x2f4>
 80015f4:	4965      	ldr	r1, [pc, #404]	@ (800178c <MS5837_Calculation+0x47c>)
 80015f6:	1851      	adds	r1, r2, r1
 80015f8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015fa:	f143 0300 	adc.w	r3, r3, #0
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001604:	f04f 0000 	mov.w	r0, #0
 8001608:	f04f 0100 	mov.w	r1, #0
 800160c:	0dd0      	lsrs	r0, r2, #23
 800160e:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001612:	15d9      	asrs	r1, r3, #23
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4613      	mov	r3, r2
 800161a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800161e:	461a      	mov	r2, r3
 8001620:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001624:	61da      	str	r2, [r3, #28]

	//--- Second order compensation
	if((sensor -> temperature_raw / 100) < 20) 			//--- Low temp
 8001626:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001630:	f280 80ae 	bge.w	8001790 <MS5837_Calculation+0x480>
	{
		Ti 		= (3 * (int64_t)(dT) * (int64_t)(dT)) / (8589934592);
 8001634:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800163e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001642:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001646:	17da      	asrs	r2, r3, #31
 8001648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800164c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001650:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001654:	4622      	mov	r2, r4
 8001656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800165a:	4641      	mov	r1, r8
 800165c:	fb01 f202 	mul.w	r2, r1, r2
 8001660:	464d      	mov	r5, r9
 8001662:	4618      	mov	r0, r3
 8001664:	4621      	mov	r1, r4
 8001666:	4603      	mov	r3, r0
 8001668:	fb03 f305 	mul.w	r3, r3, r5
 800166c:	4413      	add	r3, r2
 800166e:	4602      	mov	r2, r0
 8001670:	4641      	mov	r1, r8
 8001672:	fba2 2101 	umull	r2, r1, r2, r1
 8001676:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 800167a:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800167e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001682:	4413      	add	r3, r2
 8001684:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001688:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800168c:	4622      	mov	r2, r4
 800168e:	462b      	mov	r3, r5
 8001690:	1891      	adds	r1, r2, r2
 8001692:	6339      	str	r1, [r7, #48]	@ 0x30
 8001694:	415b      	adcs	r3, r3
 8001696:	637b      	str	r3, [r7, #52]	@ 0x34
 8001698:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800169c:	4621      	mov	r1, r4
 800169e:	1851      	adds	r1, r2, r1
 80016a0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80016a4:	4629      	mov	r1, r5
 80016a6:	eb43 0101 	adc.w	r1, r3, r1
 80016aa:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80016ae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da06      	bge.n	80016c4 <MS5837_Calculation+0x3b4>
 80016b6:	1e51      	subs	r1, r2, #1
 80016b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016ba:	f143 0301 	adc.w	r3, r3, #1
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	1058      	asrs	r0, r3, #1
 80016ce:	17d9      	asrs	r1, r3, #31
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4613      	mov	r3, r2
 80016d6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		OFFi 	= (3 * (sensor -> temperature_raw - 2000) * (sensor -> temperature_raw - 2000)) / 2;
 80016da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80016e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016ee:	fb03 f202 	mul.w	r2, r3, r2
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	441a      	add	r2, r3
 80016f8:	0fd3      	lsrs	r3, r2, #31
 80016fa:	4413      	add	r3, r2
 80016fc:	105b      	asrs	r3, r3, #1
 80016fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
		SENSi 	= (5 * (sensor -> temperature_raw - 2000) * (sensor -> temperature_raw - 2000)) / 8;
 8001702:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 800170c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001716:	fb03 f202 	mul.w	r2, r3, r2
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	da00      	bge.n	8001726 <MS5837_Calculation+0x416>
 8001724:	3307      	adds	r3, #7
 8001726:	10db      	asrs	r3, r3, #3
 8001728:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

		if((sensor -> temperature_raw / 100) < -15) 	//--- Very low temp
 800172c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f513 6fc8 	cmn.w	r3, #1600	@ 0x640
 8001736:	dc66      	bgt.n	8001806 <MS5837_Calculation+0x4f6>
		{
			OFFi  = OFFi + 7 * (sensor -> temperature_raw + 1500) * (sensor -> temperature_raw + 1500);
 8001738:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8001742:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800174c:	fb03 f202 	mul.w	r2, r3, r2
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9a      	subs	r2, r3, r2
 8001756:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800175a:	4413      	add	r3, r2
 800175c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
			SENSi = SENSi + 4 * (sensor -> temperature_raw + 1500) * (sensor -> temperature_raw + 1500);
 8001760:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 800176a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	009a      	lsls	r2, r3, #2
 800177a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800177e:	4413      	add	r3, r2
 8001780:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001784:	e03f      	b.n	8001806 <MS5837_Calculation+0x4f6>
 8001786:	bf00      	nop
 8001788:	001fffff 	.word	0x001fffff
 800178c:	007fffff 	.word	0x007fffff
		}
	}
	else if((sensor -> temperature_raw / 100) >= 20) 	//--- High temp
 8001790:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800179a:	db34      	blt.n	8001806 <MS5837_Calculation+0x4f6>
	{
		Ti 		= 2 * (dT * dT) / (137438953472);
 800179c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80017a0:	fb03 f303 	mul.w	r3, r3, r3
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	17da      	asrs	r2, r3, #31
 80017a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da06      	bge.n	80017c6 <MS5837_Calculation+0x4b6>
 80017b8:	1e51      	subs	r1, r2, #1
 80017ba:	6239      	str	r1, [r7, #32]
 80017bc:	f143 031f 	adc.w	r3, r3, #31
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	1158      	asrs	r0, r3, #5
 80017d0:	17d9      	asrs	r1, r3, #31
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4613      	mov	r3, r2
 80017d8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		OFFi 	= (1 * (sensor -> temperature_raw - 2000) * (sensor -> temperature_raw - 2000)) / 16;
 80017dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80017e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da00      	bge.n	80017fa <MS5837_Calculation+0x4ea>
 80017f8:	330f      	adds	r3, #15
 80017fa:	111b      	asrs	r3, r3, #4
 80017fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
		SENSi 	= 0;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	}

	//--- Calculate pressure and temp second order
	OFF2  = OFF  - OFFi;
 8001806:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800180a:	17da      	asrs	r2, r3, #31
 800180c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001810:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001814:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001818:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800181c:	4604      	mov	r4, r0
 800181e:	1b14      	subs	r4, r2, r4
 8001820:	61bc      	str	r4, [r7, #24]
 8001822:	eb63 0301 	sbc.w	r3, r3, r1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800182c:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	SENS2 = SENS - SENSi;
 8001830:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001834:	17da      	asrs	r2, r3, #31
 8001836:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800183a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800183e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001842:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001846:	4604      	mov	r4, r0
 8001848:	1b14      	subs	r4, r2, r4
 800184a:	613c      	str	r4, [r7, #16]
 800184c:	eb63 0301 	sbc.w	r3, r3, r1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001856:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128

	sensor -> temperature_raw 		= (sensor -> temperature_raw - Ti);
 800185a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001864:	1ad2      	subs	r2, r2, r3
 8001866:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800186a:	61da      	str	r2, [r3, #28]
	sensor -> pressure_raw 	  		= (((sensor -> pressure_D1 * SENS2) / 2097152 - OFF2) / 8192);
 800186c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2200      	movs	r2, #0
 8001874:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001876:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800187c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001880:	462a      	mov	r2, r5
 8001882:	fb02 f203 	mul.w	r2, r2, r3
 8001886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800188a:	4621      	mov	r1, r4
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8001896:	4621      	mov	r1, r4
 8001898:	fba2 2101 	umull	r2, r1, r2, r1
 800189c:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80018a0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80018a4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80018a8:	4413      	add	r3, r2
 80018aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80018ae:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da07      	bge.n	80018c6 <MS5837_Calculation+0x5b6>
 80018b6:	4930      	ldr	r1, [pc, #192]	@ (8001978 <MS5837_Calculation+0x668>)
 80018b8:	1851      	adds	r1, r2, r1
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	f143 0300 	adc.w	r3, r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0d50      	lsrs	r0, r2, #21
 80018d0:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80018d4:	1559      	asrs	r1, r3, #21
 80018d6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80018da:	1a84      	subs	r4, r0, r2
 80018dc:	673c      	str	r4, [r7, #112]	@ 0x70
 80018de:	eb61 0303 	sbc.w	r3, r1, r3
 80018e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80018e4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da08      	bge.n	80018fe <MS5837_Calculation+0x5ee>
 80018ec:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80018f0:	1851      	adds	r1, r2, r1
 80018f2:	6039      	str	r1, [r7, #0]
 80018f4:	f143 0300 	adc.w	r3, r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	0b50      	lsrs	r0, r2, #13
 8001908:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800190c:	1359      	asrs	r1, r3, #13
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001916:	619a      	str	r2, [r3, #24]

	sensor -> temperature_celsius 	= sensor -> temperature_raw / 100.0;
 8001918:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fd70 	bl	8000404 <__aeabi_i2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MS5837_Calculation+0x66c>)
 800192a:	f7fe feff 	bl	800072c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f889 	bl	8000a4c <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor -> pressure_mbar   		= sensor -> pressure_raw / 10.0;
 8001942:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd5b 	bl	8000404 <__aeabi_i2d>
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <MS5837_Calculation+0x670>)
 8001954:	f7fe feea 	bl	800072c <__aeabi_ddiv>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f874 	bl	8000a4c <__aeabi_d2f>
 8001964:	4602      	mov	r2, r0
 8001966:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28

	return;
 800196c:	bf00      	nop
}
 800196e:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8001972:	46bd      	mov	sp, r7
 8001974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001978:	001fffff 	.word	0x001fffff
 800197c:	40590000 	.word	0x40590000
 8001980:	40240000 	.word	0x40240000

08001984 <MS5832_Process>:


void MS5832_Process( I2C_HandleTypeDef *I2Cx, MS5837_t *sensor)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	uint16_t ADC_TIMEOUT = sensor -> delay_ms * 2;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	8a5b      	ldrh	r3, [r3, #18]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	81fb      	strh	r3, [r7, #14]

	switch (sensor -> state)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800199c:	2b06      	cmp	r3, #6
 800199e:	f200 809c 	bhi.w	8001ada <MS5832_Process+0x156>
 80019a2:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <MS5832_Process+0x24>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019c5 	.word	0x080019c5
 80019ac:	080019e1 	.word	0x080019e1
 80019b0:	08001a03 	.word	0x08001a03
 80019b4:	08001a41 	.word	0x08001a41
 80019b8:	08001a5d 	.word	0x08001a5d
 80019bc:	08001a7f 	.word	0x08001a7f
 80019c0:	08001abd 	.word	0x08001abd
	{
		case START_CONVERT_D1:
			MS5837_StartConversion(I2Cx, sensor, MS5837_CONVERT_D1);
 80019c4:	224a      	movs	r2, #74	@ 0x4a
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fc30 	bl	800122e <MS5837_StartConversion>
			sensor -> state++;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019d4:	3301      	adds	r3, #1
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 80019de:	e07c      	b.n	8001ada <MS5832_Process+0x156>

		case WAIT_CONVERT_D1:
			if(HAL_GetTick() - sensor -> conversion_start_time >= 19)
 80019e0:	f002 ff1c 	bl	800481c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d96d      	bls.n	8001acc <MS5832_Process+0x148>
			{
				sensor -> state++;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			break;
 8001a00:	e064      	b.n	8001acc <MS5832_Process+0x148>

		case READ_ADC_D1:
			MS5837_ReadADC(I2Cx, sensor);
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fc38 	bl	800127a <MS5837_ReadADC>
			if(sensor -> pressure_D1 != 0)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <MS5832_Process+0xa0>
			{
				sensor -> state++;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			else if(HAL_GetTick() - sensor -> conversion_start_time > ADC_TIMEOUT)
			{
				sensor -> state = START_CONVERT_D1;
			}
			break;
 8001a22:	e055      	b.n	8001ad0 <MS5832_Process+0x14c>
			else if(HAL_GetTick() - sensor -> conversion_start_time > ADC_TIMEOUT)
 8001a24:	f002 fefa 	bl	800481c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	1ad2      	subs	r2, r2, r3
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d94c      	bls.n	8001ad0 <MS5832_Process+0x14c>
				sensor -> state = START_CONVERT_D1;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 8001a3e:	e047      	b.n	8001ad0 <MS5832_Process+0x14c>

		case START_CONVERT_D2:
			MS5837_StartConversion(I2Cx, sensor, MS5837_CONVERT_D2);
 8001a40:	225a      	movs	r2, #90	@ 0x5a
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fbf2 	bl	800122e <MS5837_StartConversion>
			sensor -> state++;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 8001a5a:	e03e      	b.n	8001ada <MS5832_Process+0x156>

		case WAIT_CONVERT_D2:
			if(HAL_GetTick() - sensor -> conversion_start_time >= 19)
 8001a5c:	f002 fede 	bl	800481c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b12      	cmp	r3, #18
 8001a6a:	d933      	bls.n	8001ad4 <MS5832_Process+0x150>
			{
				sensor -> state++;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			break;
 8001a7c:	e02a      	b.n	8001ad4 <MS5832_Process+0x150>

		case READ_ADC_D2:
			MS5837_ReadADC(I2Cx, sensor);
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fbfa 	bl	800127a <MS5837_ReadADC>
			if(sensor -> temperature_D2 != 0)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <MS5832_Process+0x11c>
			{
				sensor -> state++;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			else if(HAL_GetTick() - sensor -> conversion_start_time > ADC_TIMEOUT)
			{
				sensor -> state = START_CONVERT_D1;
			}
			break;
 8001a9e:	e01b      	b.n	8001ad8 <MS5832_Process+0x154>
			else if(HAL_GetTick() - sensor -> conversion_start_time > ADC_TIMEOUT)
 8001aa0:	f002 febc 	bl	800481c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	1ad2      	subs	r2, r2, r3
 8001aac:	89fb      	ldrh	r3, [r7, #14]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d912      	bls.n	8001ad8 <MS5832_Process+0x154>
				sensor -> state = START_CONVERT_D1;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 8001aba:	e00d      	b.n	8001ad8 <MS5832_Process+0x154>

		case CALCULATE_D1_D2:
			MS5837_Calculation(sensor);
 8001abc:	6838      	ldr	r0, [r7, #0]
 8001abe:	f7ff fc27 	bl	8001310 <MS5837_Calculation>
			sensor -> state = START_CONVERT_D1;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 8001aca:	e006      	b.n	8001ada <MS5832_Process+0x156>
			break;
 8001acc:	bf00      	nop
 8001ace:	e004      	b.n	8001ada <MS5832_Process+0x156>
			break;
 8001ad0:	bf00      	nop
 8001ad2:	e002      	b.n	8001ada <MS5832_Process+0x156>
			break;
 8001ad4:	bf00      	nop
 8001ad6:	e000      	b.n	8001ada <MS5832_Process+0x156>
			break;
 8001ad8:	bf00      	nop
	}
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae8:	f3bf 8f4f 	dsb	sy
}
 8001aec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <__NVIC_SystemReset+0x24>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001af6:	4904      	ldr	r1, [pc, #16]	@ (8001b08 <__NVIC_SystemReset+0x24>)
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <__NVIC_SystemReset+0x28>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001afe:	f3bf 8f4f 	dsb	sy
}
 8001b02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <__NVIC_SystemReset+0x20>
 8001b08:	e000ed00 	.word	0xe000ed00
 8001b0c:	05fa0004 	.word	0x05fa0004

08001b10 <initSubmersible>:
/******************************************************************************
 * Function Definitions
 *****************************************************************************/

void initSubmersible()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b14:	213c      	movs	r1, #60	@ 0x3c
 8001b16:	4811      	ldr	r0, [pc, #68]	@ (8001b5c <initSubmersible+0x4c>)
 8001b18:	f006 f872 	bl	8007c00 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4810      	ldr	r0, [pc, #64]	@ (8001b60 <initSubmersible+0x50>)
 8001b20:	f005 ff2a 	bl	8007978 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001b24:	2104      	movs	r1, #4
 8001b26:	480e      	ldr	r0, [pc, #56]	@ (8001b60 <initSubmersible+0x50>)
 8001b28:	f005 ff26 	bl	8007978 <HAL_TIM_PWM_Start>

	PID_Init(&motor_pid, 0.6, 0, 0);
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	490b      	ldr	r1, [pc, #44]	@ (8001b64 <initSubmersible+0x54>)
 8001b36:	480c      	ldr	r0, [pc, #48]	@ (8001b68 <initSubmersible+0x58>)
 8001b38:	f000 f81e 	bl	8001b78 <PID_Init>
	PID_Init(&pressure_pid, 0, 0, 0);
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0100 	mov.w	r1, #0
 8001b48:	4808      	ldr	r0, [pc, #32]	@ (8001b6c <initSubmersible+0x5c>)
 8001b4a:	f000 f815 	bl	8001b78 <PID_Init>

	MS5837_Init(&hi2c1, &MS5837, 50);
 8001b4e:	2232      	movs	r2, #50	@ 0x32
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <initSubmersible+0x60>)
 8001b52:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <initSubmersible+0x64>)
 8001b54:	f7ff fb1a 	bl	800118c <MS5837_Init>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200003d0 	.word	0x200003d0
 8001b60:	20000418 	.word	0x20000418
 8001b64:	3f19999a 	.word	0x3f19999a
 8001b68:	20000274 	.word	0x20000274
 8001b6c:	200002a0 	.word	0x200002a0
 8001b70:	20000234 	.word	0x20000234
 8001b74:	2000037c 	.word	0x2000037c

08001b78 <PID_Init>:

/*
 * PID Control
 */
void PID_Init(pid_t *uPID, float KP, float KI, float KD)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
	uPID->kp = KP;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	601a      	str	r2, [r3, #0]
	uPID->ki = KI;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	605a      	str	r2, [r3, #4]
	uPID->kd = KD;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
	uPID->proportional = 0;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
	uPID->integral = 0;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
	uPID->derivative = 0;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
	uPID->setpoint = 0;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
	uPID->feedback = 0;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
	uPID->error = 0;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
	uPID->prev_error = 0;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24
	uPID->output = 0;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <PID_Update>:

float PID_Update(pid_t *uPID, float setpoint, float feedback, float maximum_output)
{
 8001be2:	b590      	push	{r4, r7, lr}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
	uPID->setpoint = setpoint;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	619a      	str	r2, [r3, #24]
	uPID->feedback = feedback;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	61da      	str	r2, [r3, #28]

	uPID->error = uPID->setpoint - uPID->feedback;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f7fe ff74 	bl	8000af4 <__aeabi_fsub>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	621a      	str	r2, [r3, #32]

	uPID->proportional = uPID->kp * uPID->error;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f7ff f872 	bl	8000d08 <__aeabi_fmul>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	60da      	str	r2, [r3, #12]
	uPID->integral    += uPID->ki * uPID->error;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	691c      	ldr	r4, [r3, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f7ff f864 	bl	8000d08 <__aeabi_fmul>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4619      	mov	r1, r3
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7fe ff57 	bl	8000af8 <__addsf3>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	611a      	str	r2, [r3, #16]
	uPID->derivative   = uPID->kd * (uPID->error - uPID->prev_error);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689c      	ldr	r4, [r3, #8]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f7fe ff47 	bl	8000af4 <__aeabi_fsub>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff f84c 	bl	8000d08 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	615a      	str	r2, [r3, #20]
	uPID->prev_error   = uPID->error;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a1a      	ldr	r2, [r3, #32]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24

	if(uPID->integral >= maximum_output) 			{ uPID->integral =   maximum_output;  }
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	4619      	mov	r1, r3
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f7ff f9e6 	bl	8001058 <__aeabi_fcmple>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <PID_Update+0xb8>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	e010      	b.n	8001cbc <PID_Update+0xda>
	else if(uPID->integral < -(maximum_output)) 	{ uPID->integral = -(maximum_output); }
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f7ff f9cc 	bl	8001044 <__aeabi_fcmplt>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <PID_Update+0xda>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	611a      	str	r2, [r3, #16]

	uPID->output = (uPID->proportional) + (uPID->integral) + (uPID->derivative);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f7fe ff16 	bl	8000af8 <__addsf3>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f7fe ff0e 	bl	8000af8 <__addsf3>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	629a      	str	r2, [r3, #40]	@ 0x28

	if(uPID->output >= maximum_output) 			{ uPID->output =   maximum_output;  }
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff f9b4 	bl	8001058 <__aeabi_fcmple>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <PID_Update+0x11c>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cfc:	e010      	b.n	8001d20 <PID_Update+0x13e>
	else if(uPID->output < -(maximum_output)) 	{ uPID->output = -(maximum_output); }
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff f99a 	bl	8001044 <__aeabi_fcmplt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <PID_Update+0x13e>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28

	return uPID->output;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}

08001d2c <Motor_Write>:
			break;
	}
}

void Motor_Write(short int motor, short int speed)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	460a      	mov	r2, r1
 8001d36:	80fb      	strh	r3, [r7, #6]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	80bb      	strh	r3, [r7, #4]
	int dir_a = (speed >= 0);
 8001d3c:	88bb      	ldrh	r3, [r7, #4]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	0bdb      	lsrs	r3, r3, #15
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	60fb      	str	r3, [r7, #12]
	int dir_b = (speed <  0);
 8001d48:	88bb      	ldrh	r3, [r7, #4]
 8001d4a:	0bdb      	lsrs	r3, r3, #15
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	60bb      	str	r3, [r7, #8]
	speed = abs(speed);
 8001d50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bfb8      	it	lt
 8001d58:	425b      	neglt	r3, r3
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	80bb      	strh	r3, [r7, #4]

	switch(motor)
 8001d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d002      	beq.n	8001d6c <Motor_Write+0x40>
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d016      	beq.n	8001d98 <Motor_Write+0x6c>
			TIM2->CCR2 = speed;
			break;
		}
		default:
		{
			break;
 8001d6a:	e029      	b.n	8001dc0 <Motor_Write+0x94>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, dir_b);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d76:	4814      	ldr	r0, [pc, #80]	@ (8001dc8 <Motor_Write+0x9c>)
 8001d78:	f003 ff2b 	bl	8005bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, dir_a);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d86:	4810      	ldr	r0, [pc, #64]	@ (8001dc8 <Motor_Write+0x9c>)
 8001d88:	f003 ff23 	bl	8005bd2 <HAL_GPIO_WritePin>
			TIM2->CCR1 = speed;
 8001d8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d94:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 8001d96:	e013      	b.n	8001dc0 <Motor_Write+0x94>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir_a);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2110      	movs	r1, #16
 8001da0:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <Motor_Write+0xa0>)
 8001da2:	f003 ff16 	bl	8005bd2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, dir_b);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	2120      	movs	r1, #32
 8001dae:	4807      	ldr	r0, [pc, #28]	@ (8001dcc <Motor_Write+0xa0>)
 8001db0:	f003 ff0f 	bl	8005bd2 <HAL_GPIO_WritePin>
			TIM2->CCR2 = speed;
 8001db4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001db8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dbc:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 8001dbe:	bf00      	nop
		}

	}

}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <Task_Init>:

int Task_Init(system_t *task)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	if(!task -> start)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <Task_Init+0x16>
	{
		return 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e007      	b.n	8001df6 <Task_Init+0x26>
	}
	if(task -> reset)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <Task_Init+0x24>
	{
		NVIC_SystemReset();
 8001df0:	f7ff fe78 	bl	8001ae4 <__NVIC_SystemReset>
		task -> reset = 0;
		return 0;
	}

	return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <Task_Pressure>:

void Task_Pressure()
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
//		return;
//	}

	static uint32_t pres_time = 0;

	pres_time++;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <Task_Pressure+0x30>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <Task_Pressure+0x30>)
 8001e0c:	6013      	str	r3, [r2, #0]

	if(pres_time >= MS5837.delay_ms)
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <Task_Pressure+0x34>)
 8001e10:	8a5b      	ldrh	r3, [r3, #18]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <Task_Pressure+0x30>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d807      	bhi.n	8001e2c <Task_Pressure+0x2c>
	{
		MS5832_Process(&hi2c1, &MS5837);
 8001e1c:	4905      	ldr	r1, [pc, #20]	@ (8001e34 <Task_Pressure+0x34>)
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <Task_Pressure+0x38>)
 8001e20:	f7ff fdb0 	bl	8001984 <MS5832_Process>
		pres_time = 0;
 8001e24:	4b02      	ldr	r3, [pc, #8]	@ (8001e30 <Task_Pressure+0x30>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
	}

	return;
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
}
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000304 	.word	0x20000304
 8001e34:	20000234 	.word	0x20000234
 8001e38:	2000037c 	.word	0x2000037c

08001e3c <Task_Control_Test_UpDown>:


void Task_Control_Test_UpDown()
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	if(!Task_Init(&test_task))
 8001e40:	484d      	ldr	r0, [pc, #308]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001e42:	f7ff ffc5 	bl	8001dd0 <Task_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 808a 	beq.w	8001f62 <Task_Control_Test_UpDown+0x126>
	{
		return;
	}

	Task_Pressure();
 8001e4e:	f7ff ffd7 	bl	8001e00 <Task_Pressure>

	static uint32_t counter_ms = 0;

	lim_sw1_stat = LIMIT_SW1;
 8001e52:	2102      	movs	r1, #2
 8001e54:	4849      	ldr	r0, [pc, #292]	@ (8001f7c <Task_Control_Test_UpDown+0x140>)
 8001e56:	f003 fea5 	bl	8005ba4 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	4b48      	ldr	r3, [pc, #288]	@ (8001f80 <Task_Control_Test_UpDown+0x144>)
 8001e60:	801a      	strh	r2, [r3, #0]
	lim_sw2_stat = LIMIT_SW2;
 8001e62:	2120      	movs	r1, #32
 8001e64:	4845      	ldr	r0, [pc, #276]	@ (8001f7c <Task_Control_Test_UpDown+0x140>)
 8001e66:	f003 fe9d 	bl	8005ba4 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b45      	ldr	r3, [pc, #276]	@ (8001f84 <Task_Control_Test_UpDown+0x148>)
 8001e70:	801a      	strh	r2, [r3, #0]

	switch(test_task.state)
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001e74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d80b      	bhi.n	8001e94 <Task_Control_Test_UpDown+0x58>
 8001e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e84 <Task_Control_Test_UpDown+0x48>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001e9f 	.word	0x08001e9f
 8001e88:	08001ed7 	.word	0x08001ed7
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001f3f 	.word	0x08001f3f
	{
		  default:
			  Motor_Write(1, 0);
 8001e94:	2100      	movs	r1, #0
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff48 	bl	8001d2c <Motor_Write>
			  break;
 8001e9c:	e06a      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>

		  case 0: //-- go down
			  Motor_Write(1, -300);
 8001e9e:	493a      	ldr	r1, [pc, #232]	@ (8001f88 <Task_Control_Test_UpDown+0x14c>)
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ff43 	bl	8001d2c <Motor_Write>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4838      	ldr	r0, [pc, #224]	@ (8001f8c <Task_Control_Test_UpDown+0x150>)
 8001eac:	f003 fe91 	bl	8005bd2 <HAL_GPIO_WritePin>

			  if(lim_sw2_stat == 0)
 8001eb0:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <Task_Control_Test_UpDown+0x148>)
 8001eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d155      	bne.n	8001f66 <Task_Control_Test_UpDown+0x12a>
			  {
				  Motor_Write(1, 0);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff ff35 	bl	8001d2c <Motor_Write>
				  test_task.state++;
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001ec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	4b29      	ldr	r3, [pc, #164]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001ed2:	809a      	strh	r2, [r3, #4]
			  }
			  break;
 8001ed4:	e047      	b.n	8001f66 <Task_Control_Test_UpDown+0x12a>

		  case 1: //--- hold position;
			  counter_ms++;
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	4a2c      	ldr	r2, [pc, #176]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001ede:	6013      	str	r3, [r2, #0]
			  if(counter_ms >= 20000)
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d93e      	bls.n	8001f6a <Task_Control_Test_UpDown+0x12e>
			  {
				  counter_ms = 0;
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
				  test_task.state++;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001ef4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001f02:	809a      	strh	r2, [r3, #4]
			  }
			  break;
 8001f04:	e031      	b.n	8001f6a <Task_Control_Test_UpDown+0x12e>

		  case 2:
			  Motor_Write(1, 250); //--- go up
 8001f06:	21fa      	movs	r1, #250	@ 0xfa
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff ff0f 	bl	8001d2c <Motor_Write>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <Task_Control_Test_UpDown+0x150>)
 8001f14:	f003 fe5d 	bl	8005bd2 <HAL_GPIO_WritePin>
			  if(lim_sw1_stat == 0)
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <Task_Control_Test_UpDown+0x144>)
 8001f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d125      	bne.n	8001f6e <Task_Control_Test_UpDown+0x132>
			  {
				  Motor_Write(1, 0);
 8001f22:	2100      	movs	r1, #0
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff ff01 	bl	8001d2c <Motor_Write>
				  test_task.state++;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001f2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001f3a:	809a      	strh	r2, [r3, #4]
			  }
			  break;
 8001f3c:	e017      	b.n	8001f6e <Task_Control_Test_UpDown+0x132>

		  case 3:
			  counter_ms++;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001f46:	6013      	str	r3, [r2, #0]
			  if(counter_ms >= 20000)
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d90e      	bls.n	8001f72 <Task_Control_Test_UpDown+0x136>
			  {
				  counter_ms = 0;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
				  test_task.state = 0;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	809a      	strh	r2, [r3, #4]
			  }
			  break;
 8001f60:	e007      	b.n	8001f72 <Task_Control_Test_UpDown+0x136>
		return;
 8001f62:	bf00      	nop
 8001f64:	e006      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>
			  break;
 8001f66:	bf00      	nop
 8001f68:	e004      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>
			  break;
 8001f6a:	bf00      	nop
 8001f6c:	e002      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>
			  break;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>
			  break;
 8001f72:	bf00      	nop
	}
}
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200002cc 	.word	0x200002cc
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000002 	.word	0x20000002
 8001f88:	fffffed4 	.word	0xfffffed4
 8001f8c:	40010c00 	.word	0x40010c00
 8001f90:	20000308 	.word	0x20000308

08001f94 <Task_Control_PID>:

int32_t motor_set = 0;

void Task_Control_PID()
{
 8001f94:	b598      	push	{r3, r4, r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	if(!Task_Init(&pid_task))
 8001f98:	488d      	ldr	r0, [pc, #564]	@ (80021d0 <Task_Control_PID+0x23c>)
 8001f9a:	f7ff ff19 	bl	8001dd0 <Task_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 8112 	beq.w	80021ca <Task_Control_PID+0x236>
	{
		return;
	}

	Task_Pressure();
 8001fa6:	f7ff ff2b 	bl	8001e00 <Task_Pressure>

	lim_sw1_stat = LIMIT_SW1;
 8001faa:	2102      	movs	r1, #2
 8001fac:	4889      	ldr	r0, [pc, #548]	@ (80021d4 <Task_Control_PID+0x240>)
 8001fae:	f003 fdf9 	bl	8005ba4 <HAL_GPIO_ReadPin>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	4b88      	ldr	r3, [pc, #544]	@ (80021d8 <Task_Control_PID+0x244>)
 8001fb8:	801a      	strh	r2, [r3, #0]
	lim_sw2_stat = LIMIT_SW2;
 8001fba:	2120      	movs	r1, #32
 8001fbc:	4885      	ldr	r0, [pc, #532]	@ (80021d4 <Task_Control_PID+0x240>)
 8001fbe:	f003 fdf1 	bl	8005ba4 <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4b85      	ldr	r3, [pc, #532]	@ (80021dc <Task_Control_PID+0x248>)
 8001fc8:	801a      	strh	r2, [r3, #0]

	static uint32_t pid_cnt = 0;
	static uint32_t delay_10ms = 0;

	pid_cnt++;
 8001fca:	4b85      	ldr	r3, [pc, #532]	@ (80021e0 <Task_Control_PID+0x24c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	4a83      	ldr	r2, [pc, #524]	@ (80021e0 <Task_Control_PID+0x24c>)
 8001fd2:	6013      	str	r3, [r2, #0]

	if(pid_cnt >= 10)
 8001fd4:	4b82      	ldr	r3, [pc, #520]	@ (80021e0 <Task_Control_PID+0x24c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	f240 80f7 	bls.w	80021cc <Task_Control_PID+0x238>
	{
		switch(pid_task.state)
 8001fde:	4b7c      	ldr	r3, [pc, #496]	@ (80021d0 <Task_Control_PID+0x23c>)
 8001fe0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d80b      	bhi.n	8002000 <Task_Control_PID+0x6c>
 8001fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <Task_Control_PID+0x5c>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	0800200b 	.word	0x0800200b
 8001ff4:	0800203d 	.word	0x0800203d
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	08002189 	.word	0x08002189
		{
			default:
				Motor_Write(1, 0);
 8002000:	2100      	movs	r1, #0
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff fe92 	bl	8001d2c <Motor_Write>
				break;
 8002008:	e0db      	b.n	80021c2 <Task_Control_PID+0x22e>

			case 0: //-- go down
				Motor_Write(1, -245);
 800200a:	f06f 01f4 	mvn.w	r1, #244	@ 0xf4
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff fe8c 	bl	8001d2c <Motor_Write>

				if(lim_sw2_stat == 0)
 8002014:	4b71      	ldr	r3, [pc, #452]	@ (80021dc <Task_Control_PID+0x248>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 80cc 	bne.w	80021b8 <Task_Control_PID+0x224>
				{
					Motor_Write(1, 0);
 8002020:	2100      	movs	r1, #0
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fe82 	bl	8001d2c <Motor_Write>
					pid_task.state++;
 8002028:	4b69      	ldr	r3, [pc, #420]	@ (80021d0 <Task_Control_PID+0x23c>)
 800202a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800202e:	b29b      	uxth	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	b21a      	sxth	r2, r3
 8002036:	4b66      	ldr	r3, [pc, #408]	@ (80021d0 <Task_Control_PID+0x23c>)
 8002038:	809a      	strh	r2, [r3, #4]
				}
				break;
 800203a:	e0bd      	b.n	80021b8 <Task_Control_PID+0x224>

			case 1: // wait bruh
				delay_10ms++;
 800203c:	4b69      	ldr	r3, [pc, #420]	@ (80021e4 <Task_Control_PID+0x250>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a68      	ldr	r2, [pc, #416]	@ (80021e4 <Task_Control_PID+0x250>)
 8002044:	6013      	str	r3, [r2, #0]
				if(delay_10ms >= 300)
 8002046:	4b67      	ldr	r3, [pc, #412]	@ (80021e4 <Task_Control_PID+0x250>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800204e:	f0c0 80b5 	bcc.w	80021bc <Task_Control_PID+0x228>
				{
					TIM1 -> CNT = 0;
 8002052:	4b65      	ldr	r3, [pc, #404]	@ (80021e8 <Task_Control_PID+0x254>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
					delay_10ms = 0;
 8002058:	4b62      	ldr	r3, [pc, #392]	@ (80021e4 <Task_Control_PID+0x250>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
					pid_task.state++;
 800205e:	4b5c      	ldr	r3, [pc, #368]	@ (80021d0 <Task_Control_PID+0x23c>)
 8002060:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002064:	b29b      	uxth	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	b21a      	sxth	r2, r3
 800206c:	4b58      	ldr	r3, [pc, #352]	@ (80021d0 <Task_Control_PID+0x23c>)
 800206e:	809a      	strh	r2, [r3, #4]
				}
				break;
 8002070:	e0a4      	b.n	80021bc <Task_Control_PID+0x228>

			case 2: //--- hold position;

				if(fabs(pressure_pid.error) < 50 && pressure_pid.error != 0)
 8002072:	4b5e      	ldr	r3, [pc, #376]	@ (80021ec <Task_Control_PID+0x258>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800207a:	495d      	ldr	r1, [pc, #372]	@ (80021f0 <Task_Control_PID+0x25c>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ffe1 	bl	8001044 <__aeabi_fcmplt>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <Task_Control_PID+0x10e>
 8002088:	4b58      	ldr	r3, [pc, #352]	@ (80021ec <Task_Control_PID+0x258>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f04f 0100 	mov.w	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe ffcd 	bl	8001030 <__aeabi_fcmpeq>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <Task_Control_PID+0x10e>
				{
					adaptive_start = 1;  //---- Change this to 1
 800209c:	4b55      	ldr	r3, [pc, #340]	@ (80021f4 <Task_Control_PID+0x260>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
				}

				delay_10ms++;
 80020a2:	4b50      	ldr	r3, [pc, #320]	@ (80021e4 <Task_Control_PID+0x250>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a4e      	ldr	r2, [pc, #312]	@ (80021e4 <Task_Control_PID+0x250>)
 80020aa:	6013      	str	r3, [r2, #0]

				if(delay_10ms >= 4)
 80020ac:	4b4d      	ldr	r3, [pc, #308]	@ (80021e4 <Task_Control_PID+0x250>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d920      	bls.n	80020f6 <Task_Control_PID+0x162>
				{
					pressure_pid.setpoint = depth_setpoint;
 80020b4:	4b50      	ldr	r3, [pc, #320]	@ (80021f8 <Task_Control_PID+0x264>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fdd1 	bl	8000c60 <__aeabi_i2f>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a4a      	ldr	r2, [pc, #296]	@ (80021ec <Task_Control_PID+0x258>)
 80020c2:	6193      	str	r3, [r2, #24]
					pressure_pid.kp = 200;
 80020c4:	4b49      	ldr	r3, [pc, #292]	@ (80021ec <Task_Control_PID+0x258>)
 80020c6:	4a4d      	ldr	r2, [pc, #308]	@ (80021fc <Task_Control_PID+0x268>)
 80020c8:	601a      	str	r2, [r3, #0]
					pressure_pid.ki = 0;
 80020ca:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <Task_Control_PID+0x258>)
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	605a      	str	r2, [r3, #4]
					pressure_pid.kd = 0;
 80020d2:	4b46      	ldr	r3, [pc, #280]	@ (80021ec <Task_Control_PID+0x258>)
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
					motor_pid.setpoint = PID_Update(&pressure_pid, pressure_pid.setpoint, MS5837.pressure_mbar, FULL_LENGTH_PULSE - 100);
 80020da:	4b44      	ldr	r3, [pc, #272]	@ (80021ec <Task_Control_PID+0x258>)
 80020dc:	6999      	ldr	r1, [r3, #24]
 80020de:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <Task_Control_PID+0x26c>)
 80020e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020e2:	4b48      	ldr	r3, [pc, #288]	@ (8002204 <Task_Control_PID+0x270>)
 80020e4:	4841      	ldr	r0, [pc, #260]	@ (80021ec <Task_Control_PID+0x258>)
 80020e6:	f7ff fd7c 	bl	8001be2 <PID_Update>
 80020ea:	4603      	mov	r3, r0
 80020ec:	4a46      	ldr	r2, [pc, #280]	@ (8002208 <Task_Control_PID+0x274>)
 80020ee:	6193      	str	r3, [r2, #24]

//					motor_pid.setpoint = depth_setpoint;

					delay_10ms = 0;
 80020f0:	4b3c      	ldr	r3, [pc, #240]	@ (80021e4 <Task_Control_PID+0x250>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

				}

				enc_cnt = TIM1->CNT;
 80020f6:	4b3c      	ldr	r3, [pc, #240]	@ (80021e8 <Task_Control_PID+0x254>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	b21a      	sxth	r2, r3
 80020fc:	4b43      	ldr	r3, [pc, #268]	@ (800220c <Task_Control_PID+0x278>)
 80020fe:	801a      	strh	r2, [r3, #0]
				total_enc_cnt += (long int)enc_cnt;
 8002100:	4b42      	ldr	r3, [pc, #264]	@ (800220c <Task_Control_PID+0x278>)
 8002102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002106:	461a      	mov	r2, r3
 8002108:	4b41      	ldr	r3, [pc, #260]	@ (8002210 <Task_Control_PID+0x27c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4413      	add	r3, r2
 800210e:	4a40      	ldr	r2, [pc, #256]	@ (8002210 <Task_Control_PID+0x27c>)
 8002110:	6013      	str	r3, [r2, #0]
				TIM1->CNT = 0;
 8002112:	4b35      	ldr	r3, [pc, #212]	@ (80021e8 <Task_Control_PID+0x254>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24

				pwm_output = (int16_t)(PID_Update(&motor_pid, motor_pid.setpoint, total_enc_cnt, 300));
 8002118:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <Task_Control_PID+0x274>)
 800211a:	699c      	ldr	r4, [r3, #24]
 800211c:	4b3c      	ldr	r3, [pc, #240]	@ (8002210 <Task_Control_PID+0x27c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fd9d 	bl	8000c60 <__aeabi_i2f>
 8002126:	4602      	mov	r2, r0
 8002128:	4b3a      	ldr	r3, [pc, #232]	@ (8002214 <Task_Control_PID+0x280>)
 800212a:	4621      	mov	r1, r4
 800212c:	4836      	ldr	r0, [pc, #216]	@ (8002208 <Task_Control_PID+0x274>)
 800212e:	f7ff fd58 	bl	8001be2 <PID_Update>
 8002132:	4603      	mov	r3, r0
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe ffad 	bl	8001094 <__aeabi_f2iz>
 800213a:	4603      	mov	r3, r0
 800213c:	b21a      	sxth	r2, r3
 800213e:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <Task_Control_PID+0x284>)
 8002140:	801a      	strh	r2, [r3, #0]

			    if(lim_sw2_stat == 0)
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <Task_Control_PID+0x248>)
 8002144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d108      	bne.n	800215e <Task_Control_PID+0x1ca>
			    {
			        pwm_output = (pwm_output > 0) ? pwm_output : 0;
 800214c:	4b32      	ldr	r3, [pc, #200]	@ (8002218 <Task_Control_PID+0x284>)
 800214e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002152:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002156:	b21a      	sxth	r2, r3
 8002158:	4b2f      	ldr	r3, [pc, #188]	@ (8002218 <Task_Control_PID+0x284>)
 800215a:	801a      	strh	r2, [r3, #0]
 800215c:	e00c      	b.n	8002178 <Task_Control_PID+0x1e4>
			    }
			    else if(lim_sw1_stat == 0)
 800215e:	4b1e      	ldr	r3, [pc, #120]	@ (80021d8 <Task_Control_PID+0x244>)
 8002160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d107      	bne.n	8002178 <Task_Control_PID+0x1e4>
			    {
			        pwm_output = (pwm_output < 0) ? pwm_output : 0;
 8002168:	4b2b      	ldr	r3, [pc, #172]	@ (8002218 <Task_Control_PID+0x284>)
 800216a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216e:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 8002172:	b21a      	sxth	r2, r3
 8002174:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <Task_Control_PID+0x284>)
 8002176:	801a      	strh	r2, [r3, #0]
			    }


				Motor_Write(1, pwm_output);
 8002178:	4b27      	ldr	r3, [pc, #156]	@ (8002218 <Task_Control_PID+0x284>)
 800217a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217e:	4619      	mov	r1, r3
 8002180:	2001      	movs	r0, #1
 8002182:	f7ff fdd3 	bl	8001d2c <Motor_Write>

				break;
 8002186:	e01c      	b.n	80021c2 <Task_Control_PID+0x22e>

			case 3:
				Motor_Write(1, -245);
 8002188:	f06f 01f4 	mvn.w	r1, #244	@ 0xf4
 800218c:	2001      	movs	r0, #1
 800218e:	f7ff fdcd 	bl	8001d2c <Motor_Write>

				if(lim_sw2_stat == 0)
 8002192:	4b12      	ldr	r3, [pc, #72]	@ (80021dc <Task_Control_PID+0x248>)
 8002194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d111      	bne.n	80021c0 <Task_Control_PID+0x22c>
				{
					Motor_Write(1, 0);
 800219c:	2100      	movs	r1, #0
 800219e:	2001      	movs	r0, #1
 80021a0:	f7ff fdc4 	bl	8001d2c <Motor_Write>
					pid_task.state++;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <Task_Control_PID+0x23c>)
 80021a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	3301      	adds	r3, #1
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	b21a      	sxth	r2, r3
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <Task_Control_PID+0x23c>)
 80021b4:	809a      	strh	r2, [r3, #4]
				}
				break;
 80021b6:	e003      	b.n	80021c0 <Task_Control_PID+0x22c>
				break;
 80021b8:	bf00      	nop
 80021ba:	e002      	b.n	80021c2 <Task_Control_PID+0x22e>
				break;
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <Task_Control_PID+0x22e>
				break;
 80021c0:	bf00      	nop

		}

		pid_cnt = 0;
 80021c2:	4b07      	ldr	r3, [pc, #28]	@ (80021e0 <Task_Control_PID+0x24c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e000      	b.n	80021cc <Task_Control_PID+0x238>
		return;
 80021ca:	bf00      	nop
	}
}
 80021cc:	bd98      	pop	{r3, r4, r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200002d4 	.word	0x200002d4
 80021d4:	40010800 	.word	0x40010800
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000002 	.word	0x20000002
 80021e0:	2000030c 	.word	0x2000030c
 80021e4:	20000310 	.word	0x20000310
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	200002a0 	.word	0x200002a0
 80021f0:	42480000 	.word	0x42480000
 80021f4:	200002ec 	.word	0x200002ec
 80021f8:	20000004 	.word	0x20000004
 80021fc:	43480000 	.word	0x43480000
 8002200:	20000234 	.word	0x20000234
 8002204:	46f14a00 	.word	0x46f14a00
 8002208:	20000274 	.word	0x20000274
 800220c:	2000026c 	.word	0x2000026c
 8002210:	20000270 	.word	0x20000270
 8002214:	43960000 	.word	0x43960000
 8002218:	200002ea 	.word	0x200002ea

0800221c <light_sequence>:
uint32_t light_light_cnt = 0;

void light_sequence()
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0

	if(!Task_Init(&light_task))
 8002220:	4830      	ldr	r0, [pc, #192]	@ (80022e4 <light_sequence+0xc8>)
 8002222:	f7ff fdd5 	bl	8001dd0 <Task_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d057      	beq.n	80022dc <light_sequence+0xc0>
	}

	static uint32_t light_cnt = 0;
	static uint32_t light_global = 0;

	switch(light_task.state)
 800222c:	4b2d      	ldr	r3, [pc, #180]	@ (80022e4 <light_sequence+0xc8>)
 800222e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d049      	beq.n	80022ca <light_sequence+0xae>
 8002236:	2b02      	cmp	r3, #2
 8002238:	dc53      	bgt.n	80022e2 <light_sequence+0xc6>
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <light_sequence+0x28>
 800223e:	2b01      	cmp	r3, #1
 8002240:	d02d      	beq.n	800229e <light_sequence+0x82>
 8002242:	e04e      	b.n	80022e2 <light_sequence+0xc6>
	{
		case 0:
			if(light_cnt >= 74)
 8002244:	4b28      	ldr	r3, [pc, #160]	@ (80022e8 <light_sequence+0xcc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b49      	cmp	r3, #73	@ 0x49
 800224a:	d90c      	bls.n	8002266 <light_sequence+0x4a>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800224c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002250:	4826      	ldr	r0, [pc, #152]	@ (80022ec <light_sequence+0xd0>)
 8002252:	f003 fcd6 	bl	8005c02 <HAL_GPIO_TogglePin>
				light_global++;
 8002256:	4b26      	ldr	r3, [pc, #152]	@ (80022f0 <light_sequence+0xd4>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	3301      	adds	r3, #1
 800225c:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <light_sequence+0xd4>)
 800225e:	6013      	str	r3, [r2, #0]
				light_cnt = 0;
 8002260:	4b21      	ldr	r3, [pc, #132]	@ (80022e8 <light_sequence+0xcc>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
			}
			light_cnt++;
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <light_sequence+0xcc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	4a1e      	ldr	r2, [pc, #120]	@ (80022e8 <light_sequence+0xcc>)
 800226e:	6013      	str	r3, [r2, #0]

			if(light_global >= 11)
 8002270:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <light_sequence+0xd4>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b0a      	cmp	r3, #10
 8002276:	d933      	bls.n	80022e0 <light_sequence+0xc4>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800227e:	481b      	ldr	r0, [pc, #108]	@ (80022ec <light_sequence+0xd0>)
 8002280:	f003 fca7 	bl	8005bd2 <HAL_GPIO_WritePin>
				light_global = 0;
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <light_sequence+0xd4>)
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
				light_task.state++;
 800228a:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <light_sequence+0xc8>)
 800228c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002290:	b29b      	uxth	r3, r3
 8002292:	3301      	adds	r3, #1
 8002294:	b29b      	uxth	r3, r3
 8002296:	b21a      	sxth	r2, r3
 8002298:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <light_sequence+0xc8>)
 800229a:	809a      	strh	r2, [r3, #4]
			}
			break;
 800229c:	e020      	b.n	80022e0 <light_sequence+0xc4>
		case 1:
			if(light_cnt >= 99)
 800229e:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <light_sequence+0xcc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b62      	cmp	r3, #98	@ 0x62
 80022a4:	d90b      	bls.n	80022be <light_sequence+0xa2>
			{
				light_task.state ++;
 80022a6:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <light_sequence+0xc8>)
 80022a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	3301      	adds	r3, #1
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b21a      	sxth	r2, r3
 80022b4:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <light_sequence+0xc8>)
 80022b6:	809a      	strh	r2, [r3, #4]
				light_cnt = 0;
 80022b8:	4b0b      	ldr	r3, [pc, #44]	@ (80022e8 <light_sequence+0xcc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
			}
			light_cnt++;
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <light_sequence+0xcc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a08      	ldr	r2, [pc, #32]	@ (80022e8 <light_sequence+0xcc>)
 80022c6:	6013      	str	r3, [r2, #0]
			break;
 80022c8:	e00b      	b.n	80022e2 <light_sequence+0xc6>
		case 2:
			light_light_cnt++;
 80022ca:	4b0a      	ldr	r3, [pc, #40]	@ (80022f4 <light_sequence+0xd8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a08      	ldr	r2, [pc, #32]	@ (80022f4 <light_sequence+0xd8>)
 80022d2:	6013      	str	r3, [r2, #0]
			light_task.state = 0;
 80022d4:	4b03      	ldr	r3, [pc, #12]	@ (80022e4 <light_sequence+0xc8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	809a      	strh	r2, [r3, #4]
			break;
 80022da:	e002      	b.n	80022e2 <light_sequence+0xc6>
		return;
 80022dc:	bf00      	nop
 80022de:	e000      	b.n	80022e2 <light_sequence+0xc6>
			break;
 80022e0:	bf00      	nop
	}
}
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200002e4 	.word	0x200002e4
 80022e8:	20000314 	.word	0x20000314
 80022ec:	40011000 	.word	0x40011000
 80022f0:	20000318 	.word	0x20000318
 80022f4:	20000300 	.word	0x20000300

080022f8 <my_my_task>:

uint32_t global_cnt = 0;

void my_my_task()
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	if(my_task.reset)
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <my_my_task+0x18>)
 80022fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <my_my_task+0x12>
	{
		NVIC_SystemReset();
 8002306:	f7ff fbed 	bl	8001ae4 <__NVIC_SystemReset>
//		my_cnt = 0;
//	}
//	my_cnt++;


}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200002dc 	.word	0x200002dc

08002314 <HAL_TIM_PeriodElapsedCallback>:
uint8_t send_cnt = 0;
uint32_t sys_tick_offset = 0;
uint8_t tick_once = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

	if(htim == &htim4) //--- general timer (every 1 ms)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a85      	ldr	r2, [pc, #532]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002320:	4293      	cmp	r3, r2
 8002322:	f040 8102 	bne.w	800252a <HAL_TIM_PeriodElapsedCallback+0x216>
	{
		test++;
 8002326:	4b84      	ldr	r3, [pc, #528]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	3301      	adds	r3, #1
 800232c:	4a82      	ldr	r2, [pc, #520]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800232e:	6013      	str	r3, [r2, #0]

		if(adaptive_start)
 8002330:	4b82      	ldr	r3, [pc, #520]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			globalTimerProcess(&Global_Time);
 8002338:	4881      	ldr	r0, [pc, #516]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800233a:	f001 fc77 	bl	8003c2c <globalTimerProcess>
		}


#ifdef CONTROL_SYSTEM
		my_my_task();
 800233e:	f7ff ffdb 	bl	80022f8 <my_my_task>

		light_sequence();
 8002342:	f7ff ff6b 	bl	800221c <light_sequence>

//		Task_Pressure();

		Task_Control_Test_UpDown();
 8002346:	f7ff fd79 	bl	8001e3c <Task_Control_Test_UpDown>

		if((depth_setpoint != -1) && (duration_min != 0))
 800234a:	4b7e      	ldr	r3, [pc, #504]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002352:	d006      	beq.n	8002362 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002354:	4b7c      	ldr	r3, [pc, #496]	@ (8002548 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			pid_task.start = 1; //---set this to 1
 800235c:	4b7b      	ldr	r3, [pc, #492]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x238>)
 800235e:	2201      	movs	r2, #1
 8002360:	801a      	strh	r2, [r3, #0]
		}

		Task_Control_PID();
 8002362:	f7ff fe17 	bl	8001f94 <Task_Control_PID>
#endif

#ifdef ADAPTIVE_SAMPLING

	if(adaptive_start)
 8002366:	4b75      	ldr	r3, [pc, #468]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 80dd 	beq.w	800252a <HAL_TIM_PeriodElapsedCallback+0x216>
	{

		if(Global_Time.minute_t >= duration_min)
 8002370:	4b73      	ldr	r3, [pc, #460]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002372:	789b      	ldrb	r3, [r3, #2]
 8002374:	461a      	mov	r2, r3
 8002376:	4b74      	ldr	r3, [pc, #464]	@ (8002548 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	db08      	blt.n	8002390 <HAL_TIM_PeriodElapsedCallback+0x7c>
		{
			adaptive_start = 0;
 800237e:	4b6f      	ldr	r3, [pc, #444]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
			done_state = 1;
 8002384:	4b72      	ldr	r3, [pc, #456]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
			pid_task.state = 3;
 800238a:	4b70      	ldr	r3, [pc, #448]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x238>)
 800238c:	2203      	movs	r2, #3
 800238e:	809a      	strh	r2, [r3, #4]
		}


		if(send_ph)
 8002390:	4b70      	ldr	r3, [pc, #448]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d015      	beq.n	80023c4 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			ph_ready = 1;
 8002398:	4b6f      	ldr	r3, [pc, #444]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
			ph_cnt++;
 800239e:	4b6f      	ldr	r3, [pc, #444]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b6d      	ldr	r3, [pc, #436]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80023a8:	701a      	strb	r2, [r3, #0]
			if(ph_cnt >= 99)
 80023aa:	4b6c      	ldr	r3, [pc, #432]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b62      	cmp	r3, #98	@ 0x62
 80023b0:	d908      	bls.n	80023c4 <HAL_TIM_PeriodElapsedCallback+0xb0>
			{
				ph_cnt = 0;
 80023b2:	4b6a      	ldr	r3, [pc, #424]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x248>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
				ph_ready = 0;
 80023b8:	4b67      	ldr	r3, [pc, #412]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
				send_ph = 0;
 80023be:	4b65      	ldr	r3, [pc, #404]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	701a      	strb	r2, [r3, #0]
			}
		}

		if(send_temp)
 80023c4:	4b66      	ldr	r3, [pc, #408]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <HAL_TIM_PeriodElapsedCallback+0xe4>
		{
			temp_ready = 1;
 80023cc:	4b65      	ldr	r3, [pc, #404]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
			temp_cnt++;
 80023d2:	4b65      	ldr	r3, [pc, #404]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	3301      	adds	r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b63      	ldr	r3, [pc, #396]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80023dc:	701a      	strb	r2, [r3, #0]
			if(temp_cnt >= 99)
 80023de:	4b62      	ldr	r3, [pc, #392]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b62      	cmp	r3, #98	@ 0x62
 80023e4:	d908      	bls.n	80023f8 <HAL_TIM_PeriodElapsedCallback+0xe4>
			{
				temp_cnt = 0;
 80023e6:	4b60      	ldr	r3, [pc, #384]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
				temp_ready = 0;
 80023ec:	4b5d      	ldr	r3, [pc, #372]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
				send_temp = 0;
 80023f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
			}
		}

		if(send_do)
 80023f8:	4b5c      	ldr	r3, [pc, #368]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x258>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d015      	beq.n	800242c <HAL_TIM_PeriodElapsedCallback+0x118>
		{
			do_ready = 1;
 8002400:	4b5b      	ldr	r3, [pc, #364]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002402:	2201      	movs	r2, #1
 8002404:	701a      	strb	r2, [r3, #0]
			do_cnt++;
 8002406:	4b5b      	ldr	r3, [pc, #364]	@ (8002574 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4b59      	ldr	r3, [pc, #356]	@ (8002574 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002410:	701a      	strb	r2, [r3, #0]
			if(do_cnt >= 99)
 8002412:	4b58      	ldr	r3, [pc, #352]	@ (8002574 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b62      	cmp	r3, #98	@ 0x62
 8002418:	d908      	bls.n	800242c <HAL_TIM_PeriodElapsedCallback+0x118>
			{
				do_cnt = 0;
 800241a:	4b56      	ldr	r3, [pc, #344]	@ (8002574 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
				do_ready = 0;
 8002420:	4b53      	ldr	r3, [pc, #332]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
				send_do = 0;
 8002426:	4b51      	ldr	r3, [pc, #324]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
			}
		}

		if(send_turb)
 800242c:	4b52      	ldr	r3, [pc, #328]	@ (8002578 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d015      	beq.n	8002460 <HAL_TIM_PeriodElapsedCallback+0x14c>
		{
			turb_ready = 1;
 8002434:	4b51      	ldr	r3, [pc, #324]	@ (800257c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
			turb_cnt++;
 800243a:	4b51      	ldr	r3, [pc, #324]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	3301      	adds	r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b4f      	ldr	r3, [pc, #316]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002444:	701a      	strb	r2, [r3, #0]
			if(turb_cnt >= 99)
 8002446:	4b4e      	ldr	r3, [pc, #312]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b62      	cmp	r3, #98	@ 0x62
 800244c:	d908      	bls.n	8002460 <HAL_TIM_PeriodElapsedCallback+0x14c>
			{
				turb_cnt = 0;
 800244e:	4b4c      	ldr	r3, [pc, #304]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
				turb_ready = 0;
 8002454:	4b49      	ldr	r3, [pc, #292]	@ (800257c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
				send_turb = 0;
 800245a:	4b47      	ldr	r3, [pc, #284]	@ (8002578 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
			}
		}


		if(done_state)
 8002460:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00e      	beq.n	8002486 <HAL_TIM_PeriodElapsedCallback+0x172>
		{
			ph_ready = temp_ready = do_ready = turb_ready = 0;
 8002468:	4b44      	ldr	r3, [pc, #272]	@ (800257c <HAL_TIM_PeriodElapsedCallback+0x268>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	4b43      	ldr	r3, [pc, #268]	@ (800257c <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002474:	701a      	strb	r2, [r3, #0]
 8002476:	4b3e      	ldr	r3, [pc, #248]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002478:	781a      	ldrb	r2, [r3, #0]
 800247a:	4b3a      	ldr	r3, [pc, #232]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	4b35      	ldr	r3, [pc, #212]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002484:	701a      	strb	r2, [r3, #0]
		}

		memcpy(transmit +  3, &Global_Time.hour_t, 2);
 8002486:	4a3f      	ldr	r2, [pc, #252]	@ (8002584 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002488:	4b2d      	ldr	r3, [pc, #180]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800248a:	881b      	ldrh	r3, [r3, #0]
 800248c:	8013      	strh	r3, [r2, #0]
		memcpy(transmit +  5, &Global_Time.minute_t, 1);
 800248e:	4b3e      	ldr	r3, [pc, #248]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002490:	4a2b      	ldr	r2, [pc, #172]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002492:	7892      	ldrb	r2, [r2, #2]
 8002494:	701a      	strb	r2, [r3, #0]
		memcpy(transmit +  6, &Global_Time.second_t, 1);
 8002496:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002498:	4a29      	ldr	r2, [pc, #164]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800249a:	78d2      	ldrb	r2, [r2, #3]
 800249c:	701a      	strb	r2, [r3, #0]
		memcpy(transmit +  7, &Global_Time.millisecond_t, 2);
 800249e:	4a3c      	ldr	r2, [pc, #240]	@ (8002590 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80024a0:	4b27      	ldr	r3, [pc, #156]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80024a2:	889b      	ldrh	r3, [r3, #4]
 80024a4:	8013      	strh	r3, [r2, #0]

		memcpy(transmit +  9, &ph_ready, 1);
 80024a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80024a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80024aa:	7812      	ldrb	r2, [r2, #0]
 80024ac:	701a      	strb	r2, [r3, #0]
		memcpy(transmit + 10, &ph, 4);
 80024ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80024b0:	4b3a      	ldr	r3, [pc, #232]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0x288>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6013      	str	r3, [r2, #0]
		memcpy(transmit + 14, &pHSampler.currentInterval, 4);
 80024b6:	4a3a      	ldr	r2, [pc, #232]	@ (80025a0 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80024b8:	4b3a      	ldr	r3, [pc, #232]	@ (80025a4 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	6013      	str	r3, [r2, #0]

		memcpy(transmit + 18, &temp_ready, 1);
 80024be:	4b3a      	ldr	r3, [pc, #232]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80024c0:	4a28      	ldr	r2, [pc, #160]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80024c2:	7812      	ldrb	r2, [r2, #0]
 80024c4:	701a      	strb	r2, [r3, #0]
		memcpy(transmit + 19, &temp_cal, 4);
 80024c6:	4a39      	ldr	r2, [pc, #228]	@ (80025ac <HAL_TIM_PeriodElapsedCallback+0x298>)
 80024c8:	4b39      	ldr	r3, [pc, #228]	@ (80025b0 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6013      	str	r3, [r2, #0]
		memcpy(transmit + 23, &tempSampler.currentInterval, 4);
 80024ce:	4a39      	ldr	r2, [pc, #228]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80024d0:	4b39      	ldr	r3, [pc, #228]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	6013      	str	r3, [r2, #0]

		memcpy(transmit + 27, &do_ready, 1);
 80024d6:	4b39      	ldr	r3, [pc, #228]	@ (80025bc <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80024d8:	4a25      	ldr	r2, [pc, #148]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80024da:	7812      	ldrb	r2, [r2, #0]
 80024dc:	701a      	strb	r2, [r3, #0]
		memcpy(transmit + 28, &do_data.value, 4);
 80024de:	4a38      	ldr	r2, [pc, #224]	@ (80025c0 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80024e0:	4b38      	ldr	r3, [pc, #224]	@ (80025c4 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	6013      	str	r3, [r2, #0]
		memcpy(transmit + 32, &doSampler.currentInterval, 4);
 80024e6:	4a38      	ldr	r2, [pc, #224]	@ (80025c8 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80024e8:	4b38      	ldr	r3, [pc, #224]	@ (80025cc <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	6013      	str	r3, [r2, #0]

		memcpy(transmit + 36, &turb_ready, 1);
 80024ee:	4b38      	ldr	r3, [pc, #224]	@ (80025d0 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80024f0:	4a22      	ldr	r2, [pc, #136]	@ (800257c <HAL_TIM_PeriodElapsedCallback+0x268>)
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	701a      	strb	r2, [r3, #0]
		memcpy(transmit + 37, &turbid_data.value, 4);
 80024f6:	4a37      	ldr	r2, [pc, #220]	@ (80025d4 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80024f8:	4b37      	ldr	r3, [pc, #220]	@ (80025d8 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	6013      	str	r3, [r2, #0]
		memcpy(transmit + 41, &turbidSampler.currentInterval, 4);
 80024fe:	4a37      	ldr	r2, [pc, #220]	@ (80025dc <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8002500:	4b37      	ldr	r3, [pc, #220]	@ (80025e0 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	6013      	str	r3, [r2, #0]

		send_time++;
 8002506:	4b37      	ldr	r3, [pc, #220]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b35      	ldr	r3, [pc, #212]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002510:	701a      	strb	r2, [r3, #0]
		if(send_time >= 99)
 8002512:	4b34      	ldr	r3, [pc, #208]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b62      	cmp	r3, #98	@ 0x62
 8002518:	d907      	bls.n	800252a <HAL_TIM_PeriodElapsedCallback+0x216>
		{
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)transmit, sizeof(transmit));
 800251a:	2235      	movs	r2, #53	@ 0x35
 800251c:	4932      	ldr	r1, [pc, #200]	@ (80025e8 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800251e:	4833      	ldr	r0, [pc, #204]	@ (80025ec <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8002520:	f006 fa0a 	bl	8008938 <HAL_UART_Transmit_DMA>
			send_time = 0;
 8002524:	4b2f      	ldr	r3, [pc, #188]	@ (80025e4 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
	}

#endif
	}

}
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200004a8 	.word	0x200004a8
 8002538:	20000764 	.word	0x20000764
 800253c:	200002ec 	.word	0x200002ec
 8002540:	20000780 	.word	0x20000780
 8002544:	20000004 	.word	0x20000004
 8002548:	200002f0 	.word	0x200002f0
 800254c:	200002d4 	.word	0x200002d4
 8002550:	20000760 	.word	0x20000760
 8002554:	20000969 	.word	0x20000969
 8002558:	2000076d 	.word	0x2000076d
 800255c:	20000771 	.word	0x20000771
 8002560:	20000968 	.word	0x20000968
 8002564:	2000076e 	.word	0x2000076e
 8002568:	20000772 	.word	0x20000772
 800256c:	2000096a 	.word	0x2000096a
 8002570:	2000076f 	.word	0x2000076f
 8002574:	20000773 	.word	0x20000773
 8002578:	2000096b 	.word	0x2000096b
 800257c:	20000770 	.word	0x20000770
 8002580:	20000774 	.word	0x20000774
 8002584:	2000000f 	.word	0x2000000f
 8002588:	20000011 	.word	0x20000011
 800258c:	20000012 	.word	0x20000012
 8002590:	20000013 	.word	0x20000013
 8002594:	20000015 	.word	0x20000015
 8002598:	20000016 	.word	0x20000016
 800259c:	20000810 	.word	0x20000810
 80025a0:	2000001a 	.word	0x2000001a
 80025a4:	2000093c 	.word	0x2000093c
 80025a8:	2000001e 	.word	0x2000001e
 80025ac:	2000001f 	.word	0x2000001f
 80025b0:	20000794 	.word	0x20000794
 80025b4:	20000023 	.word	0x20000023
 80025b8:	20000840 	.word	0x20000840
 80025bc:	20000027 	.word	0x20000027
 80025c0:	20000028 	.word	0x20000028
 80025c4:	20000798 	.word	0x20000798
 80025c8:	2000002c 	.word	0x2000002c
 80025cc:	20000894 	.word	0x20000894
 80025d0:	20000030 	.word	0x20000030
 80025d4:	20000031 	.word	0x20000031
 80025d8:	200007b4 	.word	0x200007b4
 80025dc:	20000035 	.word	0x20000035
 80025e0:	200008e8 	.word	0x200008e8
 80025e4:	2000076c 	.word	0x2000076c
 80025e8:	2000000c 	.word	0x2000000c
 80025ec:	200004f0 	.word	0x200004f0

080025f0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a24      	ldr	r2, [pc, #144]	@ (800268c <HAL_UART_RxCpltCallback+0x9c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d10e      	bne.n	800261e <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(&depth_setpoint, UART1_RX_BUFFER + 3, 4);
 8002600:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <HAL_UART_RxCpltCallback+0xa0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4b23      	ldr	r3, [pc, #140]	@ (8002694 <HAL_UART_RxCpltCallback+0xa4>)
 8002608:	601a      	str	r2, [r3, #0]
		memcpy(&duration_min, UART1_RX_BUFFER + 7, 4);
 800260a:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <HAL_UART_RxCpltCallback+0xa8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	4b22      	ldr	r3, [pc, #136]	@ (800269c <HAL_UART_RxCpltCallback+0xac>)
 8002612:	601a      	str	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8002614:	220c      	movs	r2, #12
 8002616:	4922      	ldr	r1, [pc, #136]	@ (80026a0 <HAL_UART_RxCpltCallback+0xb0>)
 8002618:	481c      	ldr	r0, [pc, #112]	@ (800268c <HAL_UART_RxCpltCallback+0x9c>)
 800261a:	f006 f9fd 	bl	8008a18 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a20      	ldr	r2, [pc, #128]	@ (80026a4 <HAL_UART_RxCpltCallback+0xb4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d12e      	bne.n	8002684 <HAL_UART_RxCpltCallback+0x94>
	{
		for (int i = 0 ; i< sizeof(rx) ; i++){
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	e014      	b.n	8002656 <HAL_UART_RxCpltCallback+0x66>
			if(rx[i] == '\r' || rx[i] == '\n'){
 800262c:	4a1e      	ldr	r2, [pc, #120]	@ (80026a8 <HAL_UART_RxCpltCallback+0xb8>)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b0d      	cmp	r3, #13
 8002636:	d005      	beq.n	8002644 <HAL_UART_RxCpltCallback+0x54>
 8002638:	4a1b      	ldr	r2, [pc, #108]	@ (80026a8 <HAL_UART_RxCpltCallback+0xb8>)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4413      	add	r3, r2
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b0a      	cmp	r3, #10
 8002642:	d105      	bne.n	8002650 <HAL_UART_RxCpltCallback+0x60>
				rx[i] = '\0';
 8002644:	4a18      	ldr	r2, [pc, #96]	@ (80026a8 <HAL_UART_RxCpltCallback+0xb8>)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	4413      	add	r3, r2
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
				break;
 800264e:	e005      	b.n	800265c <HAL_UART_RxCpltCallback+0x6c>
		for (int i = 0 ; i< sizeof(rx) ; i++){
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	3301      	adds	r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d9e7      	bls.n	800262c <HAL_UART_RxCpltCallback+0x3c>
				}
			}
			ph = atof(rx);
 800265c:	4812      	ldr	r0, [pc, #72]	@ (80026a8 <HAL_UART_RxCpltCallback+0xb8>)
 800265e:	f007 f995 	bl	800998c <atof>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f7fe f9ef 	bl	8000a4c <__aeabi_d2f>
 800266e:	4603      	mov	r3, r0
 8002670:	4a0e      	ldr	r2, [pc, #56]	@ (80026ac <HAL_UART_RxCpltCallback+0xbc>)
 8002672:	6013      	str	r3, [r2, #0]
			//ph_cal = (ph - 0.085) / 0.5383;

		    response_received = 1;
 8002674:	4b0e      	ldr	r3, [pc, #56]	@ (80026b0 <HAL_UART_RxCpltCallback+0xc0>)
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]

		    HAL_UART_Receive_DMA(&huart2, (uint8_t *)rx, sizeof(rx));
 800267a:	2206      	movs	r2, #6
 800267c:	490a      	ldr	r1, [pc, #40]	@ (80026a8 <HAL_UART_RxCpltCallback+0xb8>)
 800267e:	4809      	ldr	r0, [pc, #36]	@ (80026a4 <HAL_UART_RxCpltCallback+0xb4>)
 8002680:	f006 f9ca 	bl	8008a18 <HAL_UART_Receive_DMA>
	}
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200004f0 	.word	0x200004f0
 8002690:	200002f7 	.word	0x200002f7
 8002694:	20000004 	.word	0x20000004
 8002698:	200002fb 	.word	0x200002fb
 800269c:	200002f0 	.word	0x200002f0
 80026a0:	200002f4 	.word	0x200002f4
 80026a4:	20000538 	.word	0x20000538
 80026a8:	20000808 	.word	0x20000808
 80026ac:	20000810 	.word	0x20000810
 80026b0:	20000814 	.word	0x20000814

080026b4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <HAL_UART_RxHalfCpltCallback+0x40>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d113      	bne.n	80026ec <HAL_UART_RxHalfCpltCallback+0x38>
	{
		if(!(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C'))
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <HAL_UART_RxHalfCpltCallback+0x44>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b41      	cmp	r3, #65	@ 0x41
 80026ca:	d107      	bne.n	80026dc <HAL_UART_RxHalfCpltCallback+0x28>
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <HAL_UART_RxHalfCpltCallback+0x44>)
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	2b42      	cmp	r3, #66	@ 0x42
 80026d2:	d103      	bne.n	80026dc <HAL_UART_RxHalfCpltCallback+0x28>
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <HAL_UART_RxHalfCpltCallback+0x44>)
 80026d6:	789b      	ldrb	r3, [r3, #2]
 80026d8:	2b43      	cmp	r3, #67	@ 0x43
 80026da:	d007      	beq.n	80026ec <HAL_UART_RxHalfCpltCallback+0x38>
		{
			HAL_UART_AbortReceive(&huart1);
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_UART_RxHalfCpltCallback+0x40>)
 80026de:	f006 f9c0 	bl	8008a62 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 80026e2:	220c      	movs	r2, #12
 80026e4:	4904      	ldr	r1, [pc, #16]	@ (80026f8 <HAL_UART_RxHalfCpltCallback+0x44>)
 80026e6:	4803      	ldr	r0, [pc, #12]	@ (80026f4 <HAL_UART_RxHalfCpltCallback+0x40>)
 80026e8:	f006 f996 	bl	8008a18 <HAL_UART_Receive_DMA>
//		{
//			HAL_UART_AbortReceive(&huart2);
//			HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx, sizeof(rx));
//		}
	}
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200004f0 	.word	0x200004f0
 80026f8:	200002f4 	.word	0x200002f4

080026fc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a0c      	ldr	r2, [pc, #48]	@ (8002738 <HAL_UART_ErrorCallback+0x3c>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d107      	bne.n	800271c <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_AbortReceive(&huart1);
 800270c:	480a      	ldr	r0, [pc, #40]	@ (8002738 <HAL_UART_ErrorCallback+0x3c>)
 800270e:	f006 f9a8 	bl	8008a62 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8002712:	220c      	movs	r2, #12
 8002714:	4909      	ldr	r1, [pc, #36]	@ (800273c <HAL_UART_ErrorCallback+0x40>)
 8002716:	4808      	ldr	r0, [pc, #32]	@ (8002738 <HAL_UART_ErrorCallback+0x3c>)
 8002718:	f006 f97e 	bl	8008a18 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a08      	ldr	r2, [pc, #32]	@ (8002740 <HAL_UART_ErrorCallback+0x44>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d104      	bne.n	800272e <HAL_UART_ErrorCallback+0x32>
	{
		HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx, sizeof(rx));
 8002724:	2206      	movs	r2, #6
 8002726:	4907      	ldr	r1, [pc, #28]	@ (8002744 <HAL_UART_ErrorCallback+0x48>)
 8002728:	4805      	ldr	r0, [pc, #20]	@ (8002740 <HAL_UART_ErrorCallback+0x44>)
 800272a:	f006 f975 	bl	8008a18 <HAL_UART_Receive_DMA>
	}
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200004f0 	.word	0x200004f0
 800273c:	200002f4 	.word	0x200002f4
 8002740:	20000538 	.word	0x20000538
 8002744:	20000808 	.word	0x20000808

08002748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002748:	b5b0      	push	{r4, r5, r7, lr}
 800274a:	b08a      	sub	sp, #40	@ 0x28
 800274c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274e:	f002 f80d 	bl	800476c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002752:	f000 fc2d 	bl	8002fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002756:	f000 ff4d 	bl	80035f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800275a:	f000 ff05 	bl	8003568 <MX_DMA_Init>
  MX_TIM2_Init();
 800275e:	f000 fd85 	bl	800326c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002762:	f000 fe83 	bl	800346c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002766:	f000 fed5 	bl	8003514 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800276a:	f000 fcf9 	bl	8003160 <MX_I2C1_Init>
  MX_TIM1_Init();
 800276e:	f000 fd25 	bl	80031bc <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002772:	f000 fea5 	bl	80034c0 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8002776:	f000 fe2b 	bl	80033d0 <MX_TIM4_Init>
  MX_ADC1_Init();
 800277a:	f000 fc75 	bl	8003068 <MX_ADC1_Init>
  MX_TIM3_Init();
 800277e:	f000 fdd9 	bl	8003334 <MX_TIM3_Init>
  MX_ADC2_Init();
 8002782:	f000 fcaf 	bl	80030e4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

#ifdef CONTROL_SYSTEM
  initSubmersible();
 8002786:	f7ff f9c3 	bl	8001b10 <initSubmersible>
#endif

#ifdef ADAPTIVE_SAMPLING

  initSampler(&tempSampler, tempHistory, HISTORY_SIZE, 0.025, 1000, 1000, 10000);
 800278a:	4ba1      	ldr	r3, [pc, #644]	@ (8002a10 <main+0x2c8>)
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	4ba1      	ldr	r3, [pc, #644]	@ (8002a14 <main+0x2cc>)
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	4ba0      	ldr	r3, [pc, #640]	@ (8002a14 <main+0x2cc>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	4ba0      	ldr	r3, [pc, #640]	@ (8002a18 <main+0x2d0>)
 8002798:	220a      	movs	r2, #10
 800279a:	49a0      	ldr	r1, [pc, #640]	@ (8002a1c <main+0x2d4>)
 800279c:	48a0      	ldr	r0, [pc, #640]	@ (8002a20 <main+0x2d8>)
 800279e:	f001 f92b 	bl	80039f8 <initSampler>
  initSampler(&doSampler, doHistory, HISTORY_SIZE, 0.06, 90000, 90000, 300000);
 80027a2:	4ba0      	ldr	r3, [pc, #640]	@ (8002a24 <main+0x2dc>)
 80027a4:	9302      	str	r3, [sp, #8]
 80027a6:	4ba0      	ldr	r3, [pc, #640]	@ (8002a28 <main+0x2e0>)
 80027a8:	9301      	str	r3, [sp, #4]
 80027aa:	4b9f      	ldr	r3, [pc, #636]	@ (8002a28 <main+0x2e0>)
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4b9f      	ldr	r3, [pc, #636]	@ (8002a2c <main+0x2e4>)
 80027b0:	220a      	movs	r2, #10
 80027b2:	499f      	ldr	r1, [pc, #636]	@ (8002a30 <main+0x2e8>)
 80027b4:	489f      	ldr	r0, [pc, #636]	@ (8002a34 <main+0x2ec>)
 80027b6:	f001 f91f 	bl	80039f8 <initSampler>
  initSampler(&pHSampler, pHHistory, HISTORY_SIZE, 0.018, 60000, 60000, 300000);
 80027ba:	4b9a      	ldr	r3, [pc, #616]	@ (8002a24 <main+0x2dc>)
 80027bc:	9302      	str	r3, [sp, #8]
 80027be:	4b9e      	ldr	r3, [pc, #632]	@ (8002a38 <main+0x2f0>)
 80027c0:	9301      	str	r3, [sp, #4]
 80027c2:	4b9d      	ldr	r3, [pc, #628]	@ (8002a38 <main+0x2f0>)
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	4b9d      	ldr	r3, [pc, #628]	@ (8002a3c <main+0x2f4>)
 80027c8:	220a      	movs	r2, #10
 80027ca:	499d      	ldr	r1, [pc, #628]	@ (8002a40 <main+0x2f8>)
 80027cc:	489d      	ldr	r0, [pc, #628]	@ (8002a44 <main+0x2fc>)
 80027ce:	f001 f913 	bl	80039f8 <initSampler>
  initSampler(&turbidSampler, turbidHistory, HISTORY_SIZE, 0.02, 1000, 1000, 10000);
 80027d2:	4b8f      	ldr	r3, [pc, #572]	@ (8002a10 <main+0x2c8>)
 80027d4:	9302      	str	r3, [sp, #8]
 80027d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002a14 <main+0x2cc>)
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	4b8e      	ldr	r3, [pc, #568]	@ (8002a14 <main+0x2cc>)
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	4b9a      	ldr	r3, [pc, #616]	@ (8002a48 <main+0x300>)
 80027e0:	220a      	movs	r2, #10
 80027e2:	499a      	ldr	r1, [pc, #616]	@ (8002a4c <main+0x304>)
 80027e4:	489a      	ldr	r0, [pc, #616]	@ (8002a50 <main+0x308>)
 80027e6:	f001 f907 	bl	80039f8 <initSampler>

  temp_cal = 25;
 80027ea:	4b9a      	ldr	r3, [pc, #616]	@ (8002a54 <main+0x30c>)
 80027ec:	4a9a      	ldr	r2, [pc, #616]	@ (8002a58 <main+0x310>)
 80027ee:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx, sizeof(rx));
 80027f0:	2206      	movs	r2, #6
 80027f2:	499a      	ldr	r1, [pc, #616]	@ (8002a5c <main+0x314>)
 80027f4:	489a      	ldr	r0, [pc, #616]	@ (8002a60 <main+0x318>)
 80027f6:	f006 f90f 	bl	8008a18 <HAL_UART_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 80027fa:	489a      	ldr	r0, [pc, #616]	@ (8002a64 <main+0x31c>)
 80027fc:	f005 f81a 	bl	8007834 <HAL_TIM_Base_Start_IT>
#endif
//--- turn this ON
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8002800:	220c      	movs	r2, #12
 8002802:	4999      	ldr	r1, [pc, #612]	@ (8002a68 <main+0x320>)
 8002804:	4899      	ldr	r0, [pc, #612]	@ (8002a6c <main+0x324>)
 8002806:	f006 f907 	bl	8008a18 <HAL_UART_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim4);
 800280a:	4899      	ldr	r0, [pc, #612]	@ (8002a70 <main+0x328>)
 800280c:	f005 f812 	bl	8007834 <HAL_TIM_Base_Start_IT>
  while (1)
  {

#ifdef ADAPTIVE_SAMPLING

	  if(adaptive_start)
 8002810:	4b98      	ldr	r3, [pc, #608]	@ (8002a74 <main+0x32c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0fb      	beq.n	8002810 <main+0xc8>
	  {
		  if(!tick_once)
 8002818:	4b97      	ldr	r3, [pc, #604]	@ (8002a78 <main+0x330>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <main+0xee>
		  {
			  tick_once++;
 8002820:	4b95      	ldr	r3, [pc, #596]	@ (8002a78 <main+0x330>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b93      	ldr	r3, [pc, #588]	@ (8002a78 <main+0x330>)
 800282a:	701a      	strb	r2, [r3, #0]
			  sys_tick_offset = HAL_GetTick();
 800282c:	f001 fff6 	bl	800481c <HAL_GetTick>
 8002830:	4603      	mov	r3, r0
 8002832:	4a92      	ldr	r2, [pc, #584]	@ (8002a7c <main+0x334>)
 8002834:	6013      	str	r3, [r2, #0]
		  }
	  current_sys_tick = HAL_GetTick() - sys_tick_offset;
 8002836:	f001 fff1 	bl	800481c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	4b8f      	ldr	r3, [pc, #572]	@ (8002a7c <main+0x334>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	4a8f      	ldr	r2, [pc, #572]	@ (8002a80 <main+0x338>)
 8002844:	6013      	str	r3, [r2, #0]
	  switch (temp_state)
 8002846:	4b8f      	ldr	r3, [pc, #572]	@ (8002a84 <main+0x33c>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b03      	cmp	r3, #3
 800284c:	f200 80c3 	bhi.w	80029d6 <main+0x28e>
 8002850:	a201      	add	r2, pc, #4	@ (adr r2, 8002858 <main+0x110>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	08002869 	.word	0x08002869
 800285c:	080028d9 	.word	0x080028d9
 8002860:	080028f3 	.word	0x080028f3
 8002864:	08002943 	.word	0x08002943
	  {
	  	  case TEMP_STATE_IDLE:
	  		  if (current_sys_tick - last_temp_tick >= tempSampler.currentInterval-750)
 8002868:	4b85      	ldr	r3, [pc, #532]	@ (8002a80 <main+0x338>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b86      	ldr	r3, [pc, #536]	@ (8002a88 <main+0x340>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe f9f0 	bl	8000c58 <__aeabi_ui2f>
 8002878:	4604      	mov	r4, r0
 800287a:	4b69      	ldr	r3, [pc, #420]	@ (8002a20 <main+0x2d8>)
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	4983      	ldr	r1, [pc, #524]	@ (8002a8c <main+0x344>)
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe f937 	bl	8000af4 <__aeabi_fsub>
 8002886:	4603      	mov	r3, r0
 8002888:	4619      	mov	r1, r3
 800288a:	4620      	mov	r0, r4
 800288c:	f7fe fbee 	bl	800106c <__aeabi_fcmpge>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d100      	bne.n	8002898 <main+0x150>
	  			  {
	  				  last_temp_tick = current_sys_tick;
	  				  temp_state = TEMP_STATE_IDLE;
	  			  }
	  		  }
	  		  break;
 8002896:	e0a3      	b.n	80029e0 <main+0x298>
	  			  Presence = DS18B20_Start();
 8002898:	f000 ffa2 	bl	80037e0 <DS18B20_Start>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002a90 <main+0x348>)
 80028a2:	701a      	strb	r2, [r3, #0]
	  			  if (Presence == 1)
 80028a4:	4b7a      	ldr	r3, [pc, #488]	@ (8002a90 <main+0x348>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10d      	bne.n	80028c8 <main+0x180>
	  				  DS18B20_Write(0xCC);  // skip ROM
 80028ac:	20cc      	movs	r0, #204	@ 0xcc
 80028ae:	f000 ffc7 	bl	8003840 <DS18B20_Write>
	  				  DS18B20_Write(0x44);  // start temperature conversion
 80028b2:	2044      	movs	r0, #68	@ 0x44
 80028b4:	f000 ffc4 	bl	8003840 <DS18B20_Write>
	  				  last_temp_tick = current_sys_tick;  // mulai tunggu 750ms
 80028b8:	4b71      	ldr	r3, [pc, #452]	@ (8002a80 <main+0x338>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a72      	ldr	r2, [pc, #456]	@ (8002a88 <main+0x340>)
 80028be:	6013      	str	r3, [r2, #0]
	  				  temp_state = TEMP_STATE_WAIT_CONVERT;
 80028c0:	4b70      	ldr	r3, [pc, #448]	@ (8002a84 <main+0x33c>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]
	  		  break;
 80028c6:	e08b      	b.n	80029e0 <main+0x298>
	  				  last_temp_tick = current_sys_tick;
 80028c8:	4b6d      	ldr	r3, [pc, #436]	@ (8002a80 <main+0x338>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002a88 <main+0x340>)
 80028ce:	6013      	str	r3, [r2, #0]
	  				  temp_state = TEMP_STATE_IDLE;
 80028d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a84 <main+0x33c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
	  		  break;
 80028d6:	e083      	b.n	80029e0 <main+0x298>

	  	  case TEMP_STATE_WAIT_CONVERT:
	  		  if (current_sys_tick - last_temp_tick >= 750)
 80028d8:	4b69      	ldr	r3, [pc, #420]	@ (8002a80 <main+0x338>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002a88 <main+0x340>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d979      	bls.n	80029de <main+0x296>
	  		  {
	  			  temp_state = TEMP_STATE_READ_TEMP;
 80028ea:	4b66      	ldr	r3, [pc, #408]	@ (8002a84 <main+0x33c>)
 80028ec:	2202      	movs	r2, #2
 80028ee:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80028f0:	e075      	b.n	80029de <main+0x296>

	  	  case TEMP_STATE_READ_TEMP:
	  		  Presence = DS18B20_Start();
 80028f2:	f000 ff75 	bl	80037e0 <DS18B20_Start>
 80028f6:	4603      	mov	r3, r0
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b65      	ldr	r3, [pc, #404]	@ (8002a90 <main+0x348>)
 80028fc:	701a      	strb	r2, [r3, #0]
	  		  if (Presence == 1)
 80028fe:	4b64      	ldr	r3, [pc, #400]	@ (8002a90 <main+0x348>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d115      	bne.n	8002932 <main+0x1ea>
	  		  {
	  			  DS18B20_Write(0xCC);  // skip ROM
 8002906:	20cc      	movs	r0, #204	@ 0xcc
 8002908:	f000 ff9a 	bl	8003840 <DS18B20_Write>
	  			  DS18B20_Write(0xBE);  // read scratchpad
 800290c:	20be      	movs	r0, #190	@ 0xbe
 800290e:	f000 ff97 	bl	8003840 <DS18B20_Write>
	  			  Temp_byte1 = DS18B20_Read(); // LSB
 8002912:	f000 ffdb 	bl	80038cc <DS18B20_Read>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	4b5e      	ldr	r3, [pc, #376]	@ (8002a94 <main+0x34c>)
 800291c:	701a      	strb	r2, [r3, #0]
	  			  Temp_byte2 = DS18B20_Read(); // MSB
 800291e:	f000 ffd5 	bl	80038cc <DS18B20_Read>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	4b5c      	ldr	r3, [pc, #368]	@ (8002a98 <main+0x350>)
 8002928:	701a      	strb	r2, [r3, #0]
	  			  temp_state = TEMP_STATE_DONE;
 800292a:	4b56      	ldr	r3, [pc, #344]	@ (8002a84 <main+0x33c>)
 800292c:	2203      	movs	r2, #3
 800292e:	701a      	strb	r2, [r3, #0]
	  		  else
	  		  {
	  			  last_temp_tick = current_sys_tick;
	  			  temp_state = TEMP_STATE_IDLE; // gagal deteksi sensor
	  		  }
	  		  break;
 8002930:	e056      	b.n	80029e0 <main+0x298>
	  			  last_temp_tick = current_sys_tick;
 8002932:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <main+0x338>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a54      	ldr	r2, [pc, #336]	@ (8002a88 <main+0x340>)
 8002938:	6013      	str	r3, [r2, #0]
	  			  temp_state = TEMP_STATE_IDLE; // gagal deteksi sensor
 800293a:	4b52      	ldr	r3, [pc, #328]	@ (8002a84 <main+0x33c>)
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002940:	e04e      	b.n	80029e0 <main+0x298>

	  	  case TEMP_STATE_DONE:
	  		  uint16_t TEMP = (Temp_byte2 << 8) | Temp_byte1;
 8002942:	4b55      	ldr	r3, [pc, #340]	@ (8002a98 <main+0x350>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b21b      	sxth	r3, r3
 8002948:	021b      	lsls	r3, r3, #8
 800294a:	b21a      	sxth	r2, r3
 800294c:	4b51      	ldr	r3, [pc, #324]	@ (8002a94 <main+0x34c>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b21b      	sxth	r3, r3
 8002952:	4313      	orrs	r3, r2
 8002954:	b21b      	sxth	r3, r3
 8002956:	82fb      	strh	r3, [r7, #22]
	  		  temp_raw = (float)TEMP / 16.0;
 8002958:	8afb      	ldrh	r3, [r7, #22]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe f97c 	bl	8000c58 <__aeabi_ui2f>
 8002960:	4603      	mov	r3, r0
 8002962:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8002966:	4618      	mov	r0, r3
 8002968:	f7fe fa82 	bl	8000e70 <__aeabi_fdiv>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	4b4a      	ldr	r3, [pc, #296]	@ (8002a9c <main+0x354>)
 8002972:	601a      	str	r2, [r3, #0]
	  		  temp_cal = 0.9722 * temp_raw + 0.6976;
 8002974:	4b49      	ldr	r3, [pc, #292]	@ (8002a9c <main+0x354>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fd55 	bl	8000428 <__aeabi_f2d>
 800297e:	a320      	add	r3, pc, #128	@ (adr r3, 8002a00 <main+0x2b8>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fda8 	bl	80004d8 <__aeabi_dmul>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	a31d      	add	r3, pc, #116	@ (adr r3, 8002a08 <main+0x2c0>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fd fbe9 	bl	800016c <__adddf3>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	f7fe f853 	bl	8000a4c <__aeabi_d2f>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a54 <main+0x30c>)
 80029aa:	6013      	str	r3, [r2, #0]
	  		  float newIntervalTemp = updateSamplingInterval(&tempSampler, temp_cal);
 80029ac:	4b29      	ldr	r3, [pc, #164]	@ (8002a54 <main+0x30c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	481b      	ldr	r0, [pc, #108]	@ (8002a20 <main+0x2d8>)
 80029b4:	f001 f84a 	bl	8003a4c <updateSamplingInterval>
 80029b8:	6138      	str	r0, [r7, #16]
	  		  tempSampler.currentInterval = newIntervalTemp;
 80029ba:	4a19      	ldr	r2, [pc, #100]	@ (8002a20 <main+0x2d8>)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	6113      	str	r3, [r2, #16]
	  		  send_temp = 1;
 80029c0:	4b37      	ldr	r3, [pc, #220]	@ (8002aa0 <main+0x358>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
	  		  last_temp_tick = current_sys_tick;
 80029c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <main+0x338>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002a88 <main+0x340>)
 80029cc:	6013      	str	r3, [r2, #0]
	  		  temp_state = TEMP_STATE_IDLE;
 80029ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002a84 <main+0x33c>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
	  		  break;
 80029d4:	e004      	b.n	80029e0 <main+0x298>

	  	  default:
	  		  temp_state = TEMP_STATE_IDLE;
 80029d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <main+0x33c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
	  		  break;
 80029dc:	e000      	b.n	80029e0 <main+0x298>
	  		  break;
 80029de:	bf00      	nop
	  }


	  switch(do_state)
 80029e0:	4b30      	ldr	r3, [pc, #192]	@ (8002aa4 <main+0x35c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	f200 810b 	bhi.w	8002c00 <main+0x4b8>
 80029ea:	a201      	add	r2, pc, #4	@ (adr r2, 80029f0 <main+0x2a8>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002aa9 	.word	0x08002aa9
 80029f4:	08002ad7 	.word	0x08002ad7
 80029f8:	08002b0d 	.word	0x08002b0d
 80029fc:	08002bd7 	.word	0x08002bd7
 8002a00:	2ca57a78 	.word	0x2ca57a78
 8002a04:	3fef1c43 	.word	0x3fef1c43
 8002a08:	3c361134 	.word	0x3c361134
 8002a0c:	3fe652bd 	.word	0x3fe652bd
 8002a10:	461c4000 	.word	0x461c4000
 8002a14:	447a0000 	.word	0x447a0000
 8002a18:	3ccccccd 	.word	0x3ccccccd
 8002a1c:	20000818 	.word	0x20000818
 8002a20:	20000840 	.word	0x20000840
 8002a24:	48927c00 	.word	0x48927c00
 8002a28:	47afc800 	.word	0x47afc800
 8002a2c:	3d75c28f 	.word	0x3d75c28f
 8002a30:	2000086c 	.word	0x2000086c
 8002a34:	20000894 	.word	0x20000894
 8002a38:	476a6000 	.word	0x476a6000
 8002a3c:	3c9374bc 	.word	0x3c9374bc
 8002a40:	20000914 	.word	0x20000914
 8002a44:	2000093c 	.word	0x2000093c
 8002a48:	3ca3d70a 	.word	0x3ca3d70a
 8002a4c:	200008c0 	.word	0x200008c0
 8002a50:	200008e8 	.word	0x200008e8
 8002a54:	20000794 	.word	0x20000794
 8002a58:	41c80000 	.word	0x41c80000
 8002a5c:	20000808 	.word	0x20000808
 8002a60:	20000538 	.word	0x20000538
 8002a64:	20000460 	.word	0x20000460
 8002a68:	200002f4 	.word	0x200002f4
 8002a6c:	200004f0 	.word	0x200004f0
 8002a70:	200004a8 	.word	0x200004a8
 8002a74:	200002ec 	.word	0x200002ec
 8002a78:	2000077c 	.word	0x2000077c
 8002a7c:	20000778 	.word	0x20000778
 8002a80:	20000768 	.word	0x20000768
 8002a84:	20000789 	.word	0x20000789
 8002a88:	2000078c 	.word	0x2000078c
 8002a8c:	443b8000 	.word	0x443b8000
 8002a90:	20000786 	.word	0x20000786
 8002a94:	20000787 	.word	0x20000787
 8002a98:	20000788 	.word	0x20000788
 8002a9c:	20000790 	.word	0x20000790
 8002aa0:	20000968 	.word	0x20000968
 8002aa4:	200007ac 	.word	0x200007ac
	  {
	  	  case DO_STATE_IDLE:
	  		  if(current_sys_tick - last_do_tick >= doSampler.currentInterval)
 8002aa8:	4b7f      	ldr	r3, [pc, #508]	@ (8002ca8 <main+0x560>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b7f      	ldr	r3, [pc, #508]	@ (8002cac <main+0x564>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe f8d0 	bl	8000c58 <__aeabi_ui2f>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b7d      	ldr	r3, [pc, #500]	@ (8002cb0 <main+0x568>)
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f7fe fad3 	bl	800106c <__aeabi_fcmpge>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d100      	bne.n	8002ace <main+0x386>
	  		  {
	  			  do_state = DO_STATE_READ_ADC;
	  		  }
	  		  break;
 8002acc:	e09c      	b.n	8002c08 <main+0x4c0>
	  			  do_state = DO_STATE_READ_ADC;
 8002ace:	4b79      	ldr	r3, [pc, #484]	@ (8002cb4 <main+0x56c>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002ad4:	e098      	b.n	8002c08 <main+0x4c0>

	  	  case DO_STATE_READ_ADC:
	  		  HAL_ADC_Start(&hadc1);
 8002ad6:	4878      	ldr	r0, [pc, #480]	@ (8002cb8 <main+0x570>)
 8002ad8:	f001 ffa6 	bl	8004a28 <HAL_ADC_Start>
	  		  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8002adc:	2164      	movs	r1, #100	@ 0x64
 8002ade:	4876      	ldr	r0, [pc, #472]	@ (8002cb8 <main+0x570>)
 8002ae0:	f002 f87c 	bl	8004bdc <HAL_ADC_PollForConversion>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <main+0x3b0>
	  		  {
	  			  do_data.adc_raw = HAL_ADC_GetValue(&hadc1);
 8002aea:	4873      	ldr	r0, [pc, #460]	@ (8002cb8 <main+0x570>)
 8002aec:	f002 f97c 	bl	8004de8 <HAL_ADC_GetValue>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a72      	ldr	r2, [pc, #456]	@ (8002cbc <main+0x574>)
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e002      	b.n	8002afe <main+0x3b6>
	  		  }
	  		  else
	  		  {
	  			  do_data.adc_raw = 0;
 8002af8:	4b70      	ldr	r3, [pc, #448]	@ (8002cbc <main+0x574>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
	  		  }
	  		  HAL_ADC_Stop(&hadc1);
 8002afe:	486e      	ldr	r0, [pc, #440]	@ (8002cb8 <main+0x570>)
 8002b00:	f002 f840 	bl	8004b84 <HAL_ADC_Stop>
	  		  do_state = DO_STATE_CALCULATE;
 8002b04:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb4 <main+0x56c>)
 8002b06:	2202      	movs	r2, #2
 8002b08:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002b0a:	e07d      	b.n	8002c08 <main+0x4c0>

	  	  case DO_STATE_CALCULATE:
	  		  do_data.adc_voltage = VREF * do_data.adc_raw/ADC_RES;
 8002b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8002cbc <main+0x574>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002b14:	fb03 f202 	mul.w	r2, r3, r2
 8002b18:	4b69      	ldr	r3, [pc, #420]	@ (8002cc0 <main+0x578>)
 8002b1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b1e:	1ad2      	subs	r2, r2, r3
 8002b20:	0852      	lsrs	r2, r2, #1
 8002b22:	4413      	add	r3, r2
 8002b24:	0adb      	lsrs	r3, r3, #11
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe f896 	bl	8000c58 <__aeabi_ui2f>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4a63      	ldr	r2, [pc, #396]	@ (8002cbc <main+0x574>)
 8002b30:	6053      	str	r3, [r2, #4]
	  		  do_data.value = calculateDO(do_data.adc_voltage, temp_cal);
 8002b32:	4b62      	ldr	r3, [pc, #392]	@ (8002cbc <main+0x574>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fe fad2 	bl	80010e0 <__aeabi_f2uiz>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b61      	ldr	r3, [pc, #388]	@ (8002cc4 <main+0x57c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f000 feff 	bl	8003948 <calculateDO>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a5b      	ldr	r2, [pc, #364]	@ (8002cbc <main+0x574>)
 8002b4e:	6093      	str	r3, [r2, #8]
	  		  do_data.cal_value = (0.1012*do_data.value*do_data.value)+(0.2518*do_data.value)+0.3116;
 8002b50:	4b5a      	ldr	r3, [pc, #360]	@ (8002cbc <main+0x574>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fc67 	bl	8000428 <__aeabi_f2d>
 8002b5a:	a34d      	add	r3, pc, #308	@ (adr r3, 8002c90 <main+0x548>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fcba 	bl	80004d8 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	4b53      	ldr	r3, [pc, #332]	@ (8002cbc <main+0x574>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fc59 	bl	8000428 <__aeabi_f2d>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	f7fd fcab 	bl	80004d8 <__aeabi_dmul>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	4614      	mov	r4, r2
 8002b88:	461d      	mov	r5, r3
 8002b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8002cbc <main+0x574>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fc4a 	bl	8000428 <__aeabi_f2d>
 8002b94:	a340      	add	r3, pc, #256	@ (adr r3, 8002c98 <main+0x550>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	f7fd fc9d 	bl	80004d8 <__aeabi_dmul>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fae1 	bl	800016c <__adddf3>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	a33b      	add	r3, pc, #236	@ (adr r3, 8002ca0 <main+0x558>)
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f7fd fad8 	bl	800016c <__adddf3>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f7fd ff42 	bl	8000a4c <__aeabi_d2f>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4a3c      	ldr	r2, [pc, #240]	@ (8002cbc <main+0x574>)
 8002bcc:	60d3      	str	r3, [r2, #12]
	  		  do_state = DO_STATE_DONE;
 8002bce:	4b39      	ldr	r3, [pc, #228]	@ (8002cb4 <main+0x56c>)
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002bd4:	e018      	b.n	8002c08 <main+0x4c0>
	  	  case DO_STATE_DONE:
	  		  float newIntervalDO = updateSamplingInterval(&doSampler, do_data.value);
 8002bd6:	4b39      	ldr	r3, [pc, #228]	@ (8002cbc <main+0x574>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4834      	ldr	r0, [pc, #208]	@ (8002cb0 <main+0x568>)
 8002bde:	f000 ff35 	bl	8003a4c <updateSamplingInterval>
 8002be2:	60f8      	str	r0, [r7, #12]
	  		  doSampler.currentInterval = newIntervalDO;
 8002be4:	4a32      	ldr	r2, [pc, #200]	@ (8002cb0 <main+0x568>)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6113      	str	r3, [r2, #16]
	  		  last_do_tick = current_sys_tick;
 8002bea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ca8 <main+0x560>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2f      	ldr	r2, [pc, #188]	@ (8002cac <main+0x564>)
 8002bf0:	6013      	str	r3, [r2, #0]
	  		  do_state = DO_STATE_IDLE;
 8002bf2:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <main+0x56c>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
	  		  send_do = 1;
 8002bf8:	4b33      	ldr	r3, [pc, #204]	@ (8002cc8 <main+0x580>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002bfe:	e003      	b.n	8002c08 <main+0x4c0>

	  	  default:
	  		  do_state = DO_STATE_IDLE;
 8002c00:	4b2c      	ldr	r3, [pc, #176]	@ (8002cb4 <main+0x56c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002c06:	bf00      	nop
	  }


	  switch(turbid_state)
 8002c08:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <main+0x584>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	f200 812e 	bhi.w	8002e6e <main+0x726>
 8002c12:	a201      	add	r2, pc, #4	@ (adr r2, 8002c18 <main+0x4d0>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c2d 	.word	0x08002c2d
 8002c1c:	08002c5b 	.word	0x08002c5b
 8002c20:	08002ce1 	.word	0x08002ce1
 8002c24:	08002da5 	.word	0x08002da5
 8002c28:	08002e45 	.word	0x08002e45
	  {
	  	  case TURBID_STATE_IDLE:
	  		  if(current_sys_tick - last_turbid_tick >= turbidSampler.currentInterval)
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca8 <main+0x560>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b27      	ldr	r3, [pc, #156]	@ (8002cd0 <main+0x588>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe f80e 	bl	8000c58 <__aeabi_ui2f>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <main+0x58c>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f7fe fa11 	bl	800106c <__aeabi_fcmpge>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d100      	bne.n	8002c52 <main+0x50a>
	  		  {
	  			  turbid_state = TURBID_STATE_READ_ADC;
	  		  }
	  		  break;
 8002c50:	e111      	b.n	8002e76 <main+0x72e>
	  			  turbid_state = TURBID_STATE_READ_ADC;
 8002c52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ccc <main+0x584>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002c58:	e10d      	b.n	8002e76 <main+0x72e>

	  	  case TURBID_STATE_READ_ADC:
	  		  HAL_ADC_Start(&hadc2);
 8002c5a:	481f      	ldr	r0, [pc, #124]	@ (8002cd8 <main+0x590>)
 8002c5c:	f001 fee4 	bl	8004a28 <HAL_ADC_Start>
	  		  if(HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 8002c60:	2164      	movs	r1, #100	@ 0x64
 8002c62:	481d      	ldr	r0, [pc, #116]	@ (8002cd8 <main+0x590>)
 8002c64:	f001 ffba 	bl	8004bdc <HAL_ADC_PollForConversion>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <main+0x534>
	  		  {
	  			  turbid_data.adc_raw = HAL_ADC_GetValue(&hadc2);
 8002c6e:	481a      	ldr	r0, [pc, #104]	@ (8002cd8 <main+0x590>)
 8002c70:	f002 f8ba 	bl	8004de8 <HAL_ADC_GetValue>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4a19      	ldr	r2, [pc, #100]	@ (8002cdc <main+0x594>)
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	e002      	b.n	8002c82 <main+0x53a>
	  		  }
	  		  else
	  		  {
	  			  turbid_data.adc_raw = 0;
 8002c7c:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <main+0x594>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
	  		  }
	  		  HAL_ADC_Stop(&hadc2);
 8002c82:	4815      	ldr	r0, [pc, #84]	@ (8002cd8 <main+0x590>)
 8002c84:	f001 ff7e 	bl	8004b84 <HAL_ADC_Stop>
	  		  turbid_state = TURBID_STATE_FILTER;
 8002c88:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <main+0x584>)
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002c8e:	e0f2      	b.n	8002e76 <main+0x72e>
 8002c90:	425aee63 	.word	0x425aee63
 8002c94:	3fb9e83e 	.word	0x3fb9e83e
 8002c98:	bf487fcc 	.word	0xbf487fcc
 8002c9c:	3fd01d7d 	.word	0x3fd01d7d
 8002ca0:	205bc01a 	.word	0x205bc01a
 8002ca4:	3fd3f141 	.word	0x3fd3f141
 8002ca8:	20000768 	.word	0x20000768
 8002cac:	200007b0 	.word	0x200007b0
 8002cb0:	20000894 	.word	0x20000894
 8002cb4:	200007ac 	.word	0x200007ac
 8002cb8:	2000031c 	.word	0x2000031c
 8002cbc:	20000798 	.word	0x20000798
 8002cc0:	00100101 	.word	0x00100101
 8002cc4:	20000794 	.word	0x20000794
 8002cc8:	2000096a 	.word	0x2000096a
 8002ccc:	200007c8 	.word	0x200007c8
 8002cd0:	200007cc 	.word	0x200007cc
 8002cd4:	200008e8 	.word	0x200008e8
 8002cd8:	2000034c 	.word	0x2000034c
 8002cdc:	200007b4 	.word	0x200007b4

	  	  case TURBID_STATE_FILTER:
	  		  // Hapus nilai lama dari jumlah total
	  		  if (turbid_buffer_count == MOV_AVER_TURB)
 8002ce0:	4b9d      	ldr	r3, [pc, #628]	@ (8002f58 <main+0x810>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b0a      	cmp	r3, #10
 8002ce6:	d113      	bne.n	8002d10 <main+0x5c8>
	  		  {
	  			  turbid_buffer_sum -= turbid_values_buffer[turbid_buffer_index];
 8002ce8:	4b9c      	ldr	r3, [pc, #624]	@ (8002f5c <main+0x814>)
 8002cea:	681c      	ldr	r4, [r3, #0]
 8002cec:	4b9c      	ldr	r3, [pc, #624]	@ (8002f60 <main+0x818>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b9c      	ldr	r3, [pc, #624]	@ (8002f64 <main+0x81c>)
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd ffad 	bl	8000c58 <__aeabi_ui2f>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4619      	mov	r1, r3
 8002d02:	4620      	mov	r0, r4
 8002d04:	f7fd fef6 	bl	8000af4 <__aeabi_fsub>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b93      	ldr	r3, [pc, #588]	@ (8002f5c <main+0x814>)
 8002d0e:	601a      	str	r2, [r3, #0]
	  		  }

	  		  // Tambahkan nilai ADC raw baru ke buffer dan jumlah total
	  		  turbid_values_buffer[turbid_buffer_index] = turbid_data.adc_raw;
 8002d10:	4b93      	ldr	r3, [pc, #588]	@ (8002f60 <main+0x818>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	4619      	mov	r1, r3
 8002d16:	4b94      	ldr	r3, [pc, #592]	@ (8002f68 <main+0x820>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a92      	ldr	r2, [pc, #584]	@ (8002f64 <main+0x81c>)
 8002d1c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  		  turbid_buffer_sum += turbid_data.adc_raw;
 8002d20:	4b91      	ldr	r3, [pc, #580]	@ (8002f68 <main+0x820>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fd ff97 	bl	8000c58 <__aeabi_ui2f>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b8b      	ldr	r3, [pc, #556]	@ (8002f5c <main+0x814>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f7fd fee0 	bl	8000af8 <__addsf3>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b87      	ldr	r3, [pc, #540]	@ (8002f5c <main+0x814>)
 8002d3e:	601a      	str	r2, [r3, #0]

	  		  // Majukan indeks buffer
	  		  turbid_buffer_index = (turbid_buffer_index + 1) % MOV_AVER_TURB;
 8002d40:	4b87      	ldr	r3, [pc, #540]	@ (8002f60 <main+0x818>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	4b89      	ldr	r3, [pc, #548]	@ (8002f6c <main+0x824>)
 8002d48:	fb83 1302 	smull	r1, r3, r3, r2
 8002d4c:	1099      	asrs	r1, r3, #2
 8002d4e:	17d3      	asrs	r3, r2, #31
 8002d50:	1ac9      	subs	r1, r1, r3
 8002d52:	460b      	mov	r3, r1
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	1ad1      	subs	r1, r2, r3
 8002d5c:	b2ca      	uxtb	r2, r1
 8002d5e:	4b80      	ldr	r3, [pc, #512]	@ (8002f60 <main+0x818>)
 8002d60:	701a      	strb	r2, [r3, #0]

	  		  // Hitung berapa banyak data yang sudah ada di buffer (maks TURBID_MOVING_AVERAGE_N)
	  		  if (turbid_buffer_count < MOV_AVER_TURB)
 8002d62:	4b7d      	ldr	r3, [pc, #500]	@ (8002f58 <main+0x810>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b09      	cmp	r3, #9
 8002d68:	d805      	bhi.n	8002d76 <main+0x62e>
	  		  {
	  			  turbid_buffer_count++;
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f58 <main+0x810>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b79      	ldr	r3, [pc, #484]	@ (8002f58 <main+0x810>)
 8002d74:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  // Hitung nilai rata-rata ADC mentah yang difilter
	  		  turbid_data.filtered_adc_raw = (uint32_t)(turbid_buffer_sum / turbid_buffer_count);
 8002d76:	4b79      	ldr	r3, [pc, #484]	@ (8002f5c <main+0x814>)
 8002d78:	681c      	ldr	r4, [r3, #0]
 8002d7a:	4b77      	ldr	r3, [pc, #476]	@ (8002f58 <main+0x810>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd ff6e 	bl	8000c60 <__aeabi_i2f>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7fe f871 	bl	8000e70 <__aeabi_fdiv>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe f9a5 	bl	80010e0 <__aeabi_f2uiz>
 8002d96:	4603      	mov	r3, r0
 8002d98:	4a73      	ldr	r2, [pc, #460]	@ (8002f68 <main+0x820>)
 8002d9a:	6113      	str	r3, [r2, #16]

	  		  turbid_state = TURBID_STATE_CALCULATE; // Lanjut ke state perhitungan
 8002d9c:	4b74      	ldr	r3, [pc, #464]	@ (8002f70 <main+0x828>)
 8002d9e:	2203      	movs	r2, #3
 8002da0:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002da2:	e068      	b.n	8002e76 <main+0x72e>

	  	  case TURBID_STATE_CALCULATE:

	  		  turbid_data.adc_voltage = VREF * (((float)turbid_data.filtered_adc_raw * 2) / ADC_RES)/1000;
 8002da4:	4b70      	ldr	r3, [pc, #448]	@ (8002f68 <main+0x820>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd ff55 	bl	8000c58 <__aeabi_ui2f>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fd fea0 	bl	8000af8 <__addsf3>
 8002db8:	4603      	mov	r3, r0
 8002dba:	496e      	ldr	r1, [pc, #440]	@ (8002f74 <main+0x82c>)
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe f857 	bl	8000e70 <__aeabi_fdiv>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	496c      	ldr	r1, [pc, #432]	@ (8002f78 <main+0x830>)
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd ff9e 	bl	8000d08 <__aeabi_fmul>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	496b      	ldr	r1, [pc, #428]	@ (8002f7c <main+0x834>)
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe f84d 	bl	8000e70 <__aeabi_fdiv>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b63      	ldr	r3, [pc, #396]	@ (8002f68 <main+0x820>)
 8002ddc:	605a      	str	r2, [r3, #4]

	  		  turbid_data.cal_value = (turbid_data.adc_voltage - 2.1733) / -0.003;
 8002dde:	4b62      	ldr	r3, [pc, #392]	@ (8002f68 <main+0x820>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fb20 	bl	8000428 <__aeabi_f2d>
 8002de8:	a357      	add	r3, pc, #348	@ (adr r3, 8002f48 <main+0x800>)
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f7fd f9bb 	bl	8000168 <__aeabi_dsub>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	a355      	add	r3, pc, #340	@ (adr r3, 8002f50 <main+0x808>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	f7fd fc94 	bl	800072c <__aeabi_ddiv>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fe1e 	bl	8000a4c <__aeabi_d2f>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4a55      	ldr	r2, [pc, #340]	@ (8002f68 <main+0x820>)
 8002e14:	60d3      	str	r3, [r2, #12]

	  		  if(turbid_data.cal_value < 0){
 8002e16:	4b54      	ldr	r3, [pc, #336]	@ (8002f68 <main+0x820>)
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe f910 	bl	8001044 <__aeabi_fcmplt>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <main+0x6ec>

	  			  turbid_data.value = 0;
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f68 <main+0x820>)
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e003      	b.n	8002e3c <main+0x6f4>

	  		  }

	  		  else turbid_data.value = turbid_data.cal_value;
 8002e34:	4b4c      	ldr	r3, [pc, #304]	@ (8002f68 <main+0x820>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a4b      	ldr	r2, [pc, #300]	@ (8002f68 <main+0x820>)
 8002e3a:	6093      	str	r3, [r2, #8]

	  		  turbid_state = TURBID_STATE_DONE;
 8002e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002f70 <main+0x828>)
 8002e3e:	2204      	movs	r2, #4
 8002e40:	701a      	strb	r2, [r3, #0]

	  		  break;
 8002e42:	e018      	b.n	8002e76 <main+0x72e>

	  	  case TURBID_STATE_DONE:
	  		  float newIntervalTurbid = updateSamplingInterval(&turbidSampler, turbid_data.value);
 8002e44:	4b48      	ldr	r3, [pc, #288]	@ (8002f68 <main+0x820>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	484d      	ldr	r0, [pc, #308]	@ (8002f80 <main+0x838>)
 8002e4c:	f000 fdfe 	bl	8003a4c <updateSamplingInterval>
 8002e50:	60b8      	str	r0, [r7, #8]

	  		  turbidSampler.currentInterval = newIntervalTurbid;
 8002e52:	4a4b      	ldr	r2, [pc, #300]	@ (8002f80 <main+0x838>)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	6113      	str	r3, [r2, #16]

	  		  last_turbid_tick = current_sys_tick;
 8002e58:	4b4a      	ldr	r3, [pc, #296]	@ (8002f84 <main+0x83c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f88 <main+0x840>)
 8002e5e:	6013      	str	r3, [r2, #0]

	  		  turbid_state = TURBID_STATE_IDLE;
 8002e60:	4b43      	ldr	r3, [pc, #268]	@ (8002f70 <main+0x828>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]

	  		  send_turb = 1;
 8002e66:	4b49      	ldr	r3, [pc, #292]	@ (8002f8c <main+0x844>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]

	  		  break;
 8002e6c:	e003      	b.n	8002e76 <main+0x72e>

	  	  default:
	  		  turbid_state = TURBID_STATE_IDLE;
 8002e6e:	4b40      	ldr	r3, [pc, #256]	@ (8002f70 <main+0x828>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002e74:	bf00      	nop
	  }


	  switch(ph_state)
 8002e76:	4b46      	ldr	r3, [pc, #280]	@ (8002f90 <main+0x848>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d859      	bhi.n	8002f32 <main+0x7ea>
 8002e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <main+0x73c>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ec3 	.word	0x08002ec3
 8002e8c:	08002ef9 	.word	0x08002ef9
 8002e90:	08002f09 	.word	0x08002f09
	  {
	  	  case PH_STATE_IDLE:
	  		  if(current_sys_tick - last_ph_tick >= pHSampler.currentInterval)
 8002e94:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <main+0x83c>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b3e      	ldr	r3, [pc, #248]	@ (8002f94 <main+0x84c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fd feda 	bl	8000c58 <__aeabi_ui2f>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8002f98 <main+0x850>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fe f8dd 	bl	800106c <__aeabi_fcmpge>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d100      	bne.n	8002eba <main+0x772>
	  		  {
	  			  ph_state = PH_STATE_REQUEST_DATA;
	  		  }
	  		  break;
 8002eb8:	e042      	b.n	8002f40 <main+0x7f8>
	  			  ph_state = PH_STATE_REQUEST_DATA;
 8002eba:	4b35      	ldr	r3, [pc, #212]	@ (8002f90 <main+0x848>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002ec0:	e03e      	b.n	8002f40 <main+0x7f8>

	  	  case PH_STATE_REQUEST_DATA:
	  		  if(huart2.gState == HAL_UART_STATE_READY)
 8002ec2:	4b36      	ldr	r3, [pc, #216]	@ (8002f9c <main+0x854>)
 8002ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d135      	bne.n	8002f3a <main+0x7f2>
	  		  {
	  			HAL_UART_Transmit_DMA(&huart2, get_data, strlen((char*)get_data));
 8002ece:	4834      	ldr	r0, [pc, #208]	@ (8002fa0 <main+0x858>)
 8002ed0:	f7fd f93e 	bl	8000150 <strlen>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4931      	ldr	r1, [pc, #196]	@ (8002fa0 <main+0x858>)
 8002edc:	482f      	ldr	r0, [pc, #188]	@ (8002f9c <main+0x854>)
 8002ede:	f005 fd2b 	bl	8008938 <HAL_UART_Transmit_DMA>

	  			response_received = 0;
 8002ee2:	4b30      	ldr	r3, [pc, #192]	@ (8002fa4 <main+0x85c>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]

	  			last_ph_tick = current_sys_tick;
 8002ee8:	4b26      	ldr	r3, [pc, #152]	@ (8002f84 <main+0x83c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a29      	ldr	r2, [pc, #164]	@ (8002f94 <main+0x84c>)
 8002eee:	6013      	str	r3, [r2, #0]

	  			ph_state = PH_STATE_WAIT_RESPONSE;
 8002ef0:	4b27      	ldr	r3, [pc, #156]	@ (8002f90 <main+0x848>)
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8002ef6:	e020      	b.n	8002f3a <main+0x7f2>

	  	  case PH_STATE_WAIT_RESPONSE:
	  		  if(response_received)
 8002ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa4 <main+0x85c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01e      	beq.n	8002f3e <main+0x7f6>
	  		  {
	  			  ph_state = PH_STATE_DONE;
 8002f00:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <main+0x848>)
 8002f02:	2203      	movs	r2, #3
 8002f04:	701a      	strb	r2, [r3, #0]
	  		  }
//	  		  else
//	  		  {
//	  			  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rx, sizeof(rx));
//	  		  }
	  		  break;
 8002f06:	e01a      	b.n	8002f3e <main+0x7f6>

	  	  case PH_STATE_DONE:
	  		  float newIntervalPH = updateSamplingInterval(&pHSampler, ph);
 8002f08:	4b27      	ldr	r3, [pc, #156]	@ (8002fa8 <main+0x860>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	4822      	ldr	r0, [pc, #136]	@ (8002f98 <main+0x850>)
 8002f10:	f000 fd9c 	bl	8003a4c <updateSamplingInterval>
 8002f14:	6078      	str	r0, [r7, #4]

	  		  pHSampler.currentInterval = newIntervalPH;
 8002f16:	4a20      	ldr	r2, [pc, #128]	@ (8002f98 <main+0x850>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6113      	str	r3, [r2, #16]

	  		  last_ph_tick = current_sys_tick;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <main+0x83c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1c      	ldr	r2, [pc, #112]	@ (8002f94 <main+0x84c>)
 8002f22:	6013      	str	r3, [r2, #0]

	  		  send_ph = 1;
 8002f24:	4b21      	ldr	r3, [pc, #132]	@ (8002fac <main+0x864>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]

	  		  ph_state = PH_STATE_IDLE;
 8002f2a:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <main+0x848>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]

	  		  break;
 8002f30:	e006      	b.n	8002f40 <main+0x7f8>

	  	  default:
	  		  ph_state = PH_STATE_IDLE;
 8002f32:	4b17      	ldr	r3, [pc, #92]	@ (8002f90 <main+0x848>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002f38:	e002      	b.n	8002f40 <main+0x7f8>
	  		  break;
 8002f3a:	bf00      	nop
 8002f3c:	e468      	b.n	8002810 <main+0xc8>
	  		  break;
 8002f3e:	bf00      	nop
	  if(adaptive_start)
 8002f40:	e466      	b.n	8002810 <main+0xc8>
 8002f42:	bf00      	nop
 8002f44:	f3af 8000 	nop.w
 8002f48:	1c432ca5 	.word	0x1c432ca5
 8002f4c:	400162eb 	.word	0x400162eb
 8002f50:	bc6a7efa 	.word	0xbc6a7efa
 8002f54:	bf689374 	.word	0xbf689374
 8002f58:	20000800 	.word	0x20000800
 8002f5c:	200007fc 	.word	0x200007fc
 8002f60:	200007f8 	.word	0x200007f8
 8002f64:	200007d0 	.word	0x200007d0
 8002f68:	200007b4 	.word	0x200007b4
 8002f6c:	66666667 	.word	0x66666667
 8002f70:	200007c8 	.word	0x200007c8
 8002f74:	457ff000 	.word	0x457ff000
 8002f78:	454e4000 	.word	0x454e4000
 8002f7c:	447a0000 	.word	0x447a0000
 8002f80:	200008e8 	.word	0x200008e8
 8002f84:	20000768 	.word	0x20000768
 8002f88:	200007cc 	.word	0x200007cc
 8002f8c:	2000096b 	.word	0x2000096b
 8002f90:	20000801 	.word	0x20000801
 8002f94:	20000804 	.word	0x20000804
 8002f98:	2000093c 	.word	0x2000093c
 8002f9c:	20000538 	.word	0x20000538
 8002fa0:	20000008 	.word	0x20000008
 8002fa4:	20000814 	.word	0x20000814
 8002fa8:	20000810 	.word	0x20000810
 8002fac:	20000969 	.word	0x20000969

08002fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b094      	sub	sp, #80	@ 0x50
 8002fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fba:	2228      	movs	r2, #40	@ 0x28
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f007 fbf3 	bl	800a7aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fea:	2300      	movs	r3, #0
 8002fec:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ff6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002ffc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003000:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003002:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fe48 	bl	8006c9c <HAL_RCC_OscConfig>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8003012:	f000 fb8d 	bl	8003730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003016:	230f      	movs	r3, #15
 8003018:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800301a:	2302      	movs	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003026:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003028:	2300      	movs	r3, #0
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	2102      	movs	r1, #2
 8003032:	4618      	mov	r0, r3
 8003034:	f004 f8b4 	bl	80071a0 <HAL_RCC_ClockConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800303e:	f000 fb77 	bl	8003730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003042:	2302      	movs	r3, #2
 8003044:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800304a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	4618      	mov	r0, r3
 8003050:	f004 fa34 	bl	80074bc <HAL_RCCEx_PeriphCLKConfig>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800305a:	f000 fb69 	bl	8003730 <Error_Handler>
  }
}
 800305e:	bf00      	nop
 8003060:	3750      	adds	r7, #80	@ 0x50
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800306e:	1d3b      	adds	r3, r7, #4
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003078:	4b18      	ldr	r3, [pc, #96]	@ (80030dc <MX_ADC1_Init+0x74>)
 800307a:	4a19      	ldr	r2, [pc, #100]	@ (80030e0 <MX_ADC1_Init+0x78>)
 800307c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800307e:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <MX_ADC1_Init+0x74>)
 8003080:	2200      	movs	r2, #0
 8003082:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003084:	4b15      	ldr	r3, [pc, #84]	@ (80030dc <MX_ADC1_Init+0x74>)
 8003086:	2200      	movs	r2, #0
 8003088:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800308a:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <MX_ADC1_Init+0x74>)
 800308c:	2200      	movs	r2, #0
 800308e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003090:	4b12      	ldr	r3, [pc, #72]	@ (80030dc <MX_ADC1_Init+0x74>)
 8003092:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8003096:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003098:	4b10      	ldr	r3, [pc, #64]	@ (80030dc <MX_ADC1_Init+0x74>)
 800309a:	2200      	movs	r2, #0
 800309c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800309e:	4b0f      	ldr	r3, [pc, #60]	@ (80030dc <MX_ADC1_Init+0x74>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80030a4:	480d      	ldr	r0, [pc, #52]	@ (80030dc <MX_ADC1_Init+0x74>)
 80030a6:	f001 fbe7 	bl	8004878 <HAL_ADC_Init>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80030b0:	f000 fb3e 	bl	8003730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80030b4:	2307      	movs	r3, #7
 80030b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80030bc:	2300      	movs	r3, #0
 80030be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4805      	ldr	r0, [pc, #20]	@ (80030dc <MX_ADC1_Init+0x74>)
 80030c6:	f001 fe9b 	bl	8004e00 <HAL_ADC_ConfigChannel>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80030d0:	f000 fb2e 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	2000031c 	.word	0x2000031c
 80030e0:	40012400 	.word	0x40012400

080030e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80030f4:	4b18      	ldr	r3, [pc, #96]	@ (8003158 <MX_ADC2_Init+0x74>)
 80030f6:	4a19      	ldr	r2, [pc, #100]	@ (800315c <MX_ADC2_Init+0x78>)
 80030f8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80030fa:	4b17      	ldr	r3, [pc, #92]	@ (8003158 <MX_ADC2_Init+0x74>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003100:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <MX_ADC2_Init+0x74>)
 8003102:	2200      	movs	r2, #0
 8003104:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003106:	4b14      	ldr	r3, [pc, #80]	@ (8003158 <MX_ADC2_Init+0x74>)
 8003108:	2200      	movs	r2, #0
 800310a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800310c:	4b12      	ldr	r3, [pc, #72]	@ (8003158 <MX_ADC2_Init+0x74>)
 800310e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8003112:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003114:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <MX_ADC2_Init+0x74>)
 8003116:	2200      	movs	r2, #0
 8003118:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800311a:	4b0f      	ldr	r3, [pc, #60]	@ (8003158 <MX_ADC2_Init+0x74>)
 800311c:	2201      	movs	r2, #1
 800311e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003120:	480d      	ldr	r0, [pc, #52]	@ (8003158 <MX_ADC2_Init+0x74>)
 8003122:	f001 fba9 	bl	8004878 <HAL_ADC_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 800312c:	f000 fb00 	bl	8003730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003130:	2308      	movs	r3, #8
 8003132:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003134:	2301      	movs	r3, #1
 8003136:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	4619      	mov	r1, r3
 8003140:	4805      	ldr	r0, [pc, #20]	@ (8003158 <MX_ADC2_Init+0x74>)
 8003142:	f001 fe5d 	bl	8004e00 <HAL_ADC_ConfigChannel>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 800314c:	f000 faf0 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000034c 	.word	0x2000034c
 800315c:	40012800 	.word	0x40012800

08003160 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003164:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <MX_I2C1_Init+0x50>)
 8003166:	4a13      	ldr	r2, [pc, #76]	@ (80031b4 <MX_I2C1_Init+0x54>)
 8003168:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <MX_I2C1_Init+0x50>)
 800316c:	4a12      	ldr	r2, [pc, #72]	@ (80031b8 <MX_I2C1_Init+0x58>)
 800316e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003170:	4b0f      	ldr	r3, [pc, #60]	@ (80031b0 <MX_I2C1_Init+0x50>)
 8003172:	2200      	movs	r2, #0
 8003174:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003176:	4b0e      	ldr	r3, [pc, #56]	@ (80031b0 <MX_I2C1_Init+0x50>)
 8003178:	2200      	movs	r2, #0
 800317a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800317c:	4b0c      	ldr	r3, [pc, #48]	@ (80031b0 <MX_I2C1_Init+0x50>)
 800317e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003182:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003184:	4b0a      	ldr	r3, [pc, #40]	@ (80031b0 <MX_I2C1_Init+0x50>)
 8003186:	2200      	movs	r2, #0
 8003188:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800318a:	4b09      	ldr	r3, [pc, #36]	@ (80031b0 <MX_I2C1_Init+0x50>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003190:	4b07      	ldr	r3, [pc, #28]	@ (80031b0 <MX_I2C1_Init+0x50>)
 8003192:	2200      	movs	r2, #0
 8003194:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003196:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <MX_I2C1_Init+0x50>)
 8003198:	2200      	movs	r2, #0
 800319a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800319c:	4804      	ldr	r0, [pc, #16]	@ (80031b0 <MX_I2C1_Init+0x50>)
 800319e:	f002 fd49 	bl	8005c34 <HAL_I2C_Init>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80031a8:	f000 fac2 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	2000037c 	.word	0x2000037c
 80031b4:	40005400 	.word	0x40005400
 80031b8:	000186a0 	.word	0x000186a0

080031bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08c      	sub	sp, #48	@ 0x30
 80031c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	2224      	movs	r2, #36	@ 0x24
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f007 faed 	bl	800a7aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	2200      	movs	r2, #0
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031d8:	4b22      	ldr	r3, [pc, #136]	@ (8003264 <MX_TIM1_Init+0xa8>)
 80031da:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <MX_TIM1_Init+0xac>)
 80031dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031de:	4b21      	ldr	r3, [pc, #132]	@ (8003264 <MX_TIM1_Init+0xa8>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e4:	4b1f      	ldr	r3, [pc, #124]	@ (8003264 <MX_TIM1_Init+0xa8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <MX_TIM1_Init+0xa8>)
 80031ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003264 <MX_TIM1_Init+0xa8>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <MX_TIM1_Init+0xa8>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031fe:	4b19      	ldr	r3, [pc, #100]	@ (8003264 <MX_TIM1_Init+0xa8>)
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003204:	2301      	movs	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003208:	2300      	movs	r3, #0
 800320a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800320c:	2301      	movs	r3, #1
 800320e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003218:	2300      	movs	r3, #0
 800321a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800321c:	2301      	movs	r3, #1
 800321e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003220:	2300      	movs	r3, #0
 8003222:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003224:	2300      	movs	r3, #0
 8003226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	4619      	mov	r1, r3
 800322e:	480d      	ldr	r0, [pc, #52]	@ (8003264 <MX_TIM1_Init+0xa8>)
 8003230:	f004 fc44 	bl	8007abc <HAL_TIM_Encoder_Init>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800323a:	f000 fa79 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003246:	1d3b      	adds	r3, r7, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4806      	ldr	r0, [pc, #24]	@ (8003264 <MX_TIM1_Init+0xa8>)
 800324c:	f005 fab4 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8003256:	f000 fa6b 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800325a:	bf00      	nop
 800325c:	3730      	adds	r7, #48	@ 0x30
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200003d0 	.word	0x200003d0
 8003268:	40012c00 	.word	0x40012c00

0800326c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08a      	sub	sp, #40	@ 0x28
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003272:	f107 0320 	add.w	r3, r7, #32
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	60da      	str	r2, [r3, #12]
 8003288:	611a      	str	r2, [r3, #16]
 800328a:	615a      	str	r2, [r3, #20]
 800328c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800328e:	4b28      	ldr	r3, [pc, #160]	@ (8003330 <MX_TIM2_Init+0xc4>)
 8003290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003294:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8003296:	4b26      	ldr	r3, [pc, #152]	@ (8003330 <MX_TIM2_Init+0xc4>)
 8003298:	2247      	movs	r2, #71	@ 0x47
 800329a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329c:	4b24      	ldr	r3, [pc, #144]	@ (8003330 <MX_TIM2_Init+0xc4>)
 800329e:	2200      	movs	r2, #0
 80032a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80032a2:	4b23      	ldr	r3, [pc, #140]	@ (8003330 <MX_TIM2_Init+0xc4>)
 80032a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80032a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032aa:	4b21      	ldr	r3, [pc, #132]	@ (8003330 <MX_TIM2_Init+0xc4>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b0:	4b1f      	ldr	r3, [pc, #124]	@ (8003330 <MX_TIM2_Init+0xc4>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032b6:	481e      	ldr	r0, [pc, #120]	@ (8003330 <MX_TIM2_Init+0xc4>)
 80032b8:	f004 fb0e 	bl	80078d8 <HAL_TIM_PWM_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80032c2:	f000 fa35 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032ce:	f107 0320 	add.w	r3, r7, #32
 80032d2:	4619      	mov	r1, r3
 80032d4:	4816      	ldr	r0, [pc, #88]	@ (8003330 <MX_TIM2_Init+0xc4>)
 80032d6:	f005 fa6f 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80032e0:	f000 fa26 	bl	8003730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032e4:	2360      	movs	r3, #96	@ 0x60
 80032e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	2200      	movs	r2, #0
 80032f8:	4619      	mov	r1, r3
 80032fa:	480d      	ldr	r0, [pc, #52]	@ (8003330 <MX_TIM2_Init+0xc4>)
 80032fc:	f004 fdfe 	bl	8007efc <HAL_TIM_PWM_ConfigChannel>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003306:	f000 fa13 	bl	8003730 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	2204      	movs	r2, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4807      	ldr	r0, [pc, #28]	@ (8003330 <MX_TIM2_Init+0xc4>)
 8003312:	f004 fdf3 	bl	8007efc <HAL_TIM_PWM_ConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800331c:	f000 fa08 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003320:	4803      	ldr	r0, [pc, #12]	@ (8003330 <MX_TIM2_Init+0xc4>)
 8003322:	f000 fe4b 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 8003326:	bf00      	nop
 8003328:	3728      	adds	r7, #40	@ 0x28
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000418 	.word	0x20000418

08003334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800333a:	f107 0308 	add.w	r3, r7, #8
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	609a      	str	r2, [r3, #8]
 8003346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003348:	463b      	mov	r3, r7
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <MX_TIM3_Init+0x94>)
 8003352:	4a1e      	ldr	r2, [pc, #120]	@ (80033cc <MX_TIM3_Init+0x98>)
 8003354:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8003356:	4b1c      	ldr	r3, [pc, #112]	@ (80033c8 <MX_TIM3_Init+0x94>)
 8003358:	2247      	movs	r2, #71	@ 0x47
 800335a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800335c:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <MX_TIM3_Init+0x94>)
 800335e:	2200      	movs	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003362:	4b19      	ldr	r3, [pc, #100]	@ (80033c8 <MX_TIM3_Init+0x94>)
 8003364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003368:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800336a:	4b17      	ldr	r3, [pc, #92]	@ (80033c8 <MX_TIM3_Init+0x94>)
 800336c:	2200      	movs	r2, #0
 800336e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003370:	4b15      	ldr	r3, [pc, #84]	@ (80033c8 <MX_TIM3_Init+0x94>)
 8003372:	2200      	movs	r2, #0
 8003374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003376:	4814      	ldr	r0, [pc, #80]	@ (80033c8 <MX_TIM3_Init+0x94>)
 8003378:	f004 fa0c 	bl	8007794 <HAL_TIM_Base_Init>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003382:	f000 f9d5 	bl	8003730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800338a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800338c:	f107 0308 	add.w	r3, r7, #8
 8003390:	4619      	mov	r1, r3
 8003392:	480d      	ldr	r0, [pc, #52]	@ (80033c8 <MX_TIM3_Init+0x94>)
 8003394:	f004 fe74 	bl	8008080 <HAL_TIM_ConfigClockSource>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800339e:	f000 f9c7 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a2:	2300      	movs	r3, #0
 80033a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80033aa:	463b      	mov	r3, r7
 80033ac:	4619      	mov	r1, r3
 80033ae:	4806      	ldr	r0, [pc, #24]	@ (80033c8 <MX_TIM3_Init+0x94>)
 80033b0:	f005 fa02 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80033ba:	f000 f9b9 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80033be:	bf00      	nop
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	20000460 	.word	0x20000460
 80033cc:	40000400 	.word	0x40000400

080033d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	605a      	str	r2, [r3, #4]
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e4:	463b      	mov	r3, r7
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <MX_TIM4_Init+0x94>)
 80033ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003468 <MX_TIM4_Init+0x98>)
 80033f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80033f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <MX_TIM4_Init+0x94>)
 80033f4:	2247      	movs	r2, #71	@ 0x47
 80033f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003464 <MX_TIM4_Init+0x94>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80033fe:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <MX_TIM4_Init+0x94>)
 8003400:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003404:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003406:	4b17      	ldr	r3, [pc, #92]	@ (8003464 <MX_TIM4_Init+0x94>)
 8003408:	2200      	movs	r2, #0
 800340a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800340c:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <MX_TIM4_Init+0x94>)
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003412:	4814      	ldr	r0, [pc, #80]	@ (8003464 <MX_TIM4_Init+0x94>)
 8003414:	f004 f9be 	bl	8007794 <HAL_TIM_Base_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800341e:	f000 f987 	bl	8003730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003428:	f107 0308 	add.w	r3, r7, #8
 800342c:	4619      	mov	r1, r3
 800342e:	480d      	ldr	r0, [pc, #52]	@ (8003464 <MX_TIM4_Init+0x94>)
 8003430:	f004 fe26 	bl	8008080 <HAL_TIM_ConfigClockSource>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800343a:	f000 f979 	bl	8003730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003446:	463b      	mov	r3, r7
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	@ (8003464 <MX_TIM4_Init+0x94>)
 800344c:	f005 f9b4 	bl	80087b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003456:	f000 f96b 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200004a8 	.word	0x200004a8
 8003468:	40000800 	.word	0x40000800

0800346c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003472:	4a12      	ldr	r2, [pc, #72]	@ (80034bc <MX_USART1_UART_Init+0x50>)
 8003474:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800347c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800347e:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800348a:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003490:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003492:	220c      	movs	r2, #12
 8003494:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003496:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003498:	2200      	movs	r2, #0
 800349a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034a2:	4805      	ldr	r0, [pc, #20]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 80034a4:	f005 f9f8 	bl	8008898 <HAL_UART_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034ae:	f000 f93f 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	200004f0 	.word	0x200004f0
 80034bc:	40013800 	.word	0x40013800

080034c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034c4:	4b11      	ldr	r3, [pc, #68]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034c6:	4a12      	ldr	r2, [pc, #72]	@ (8003510 <MX_USART2_UART_Init+0x50>)
 80034c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80034ca:	4b10      	ldr	r3, [pc, #64]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80034d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034d2:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034d8:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034de:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034e6:	220c      	movs	r2, #12
 80034e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ea:	4b08      	ldr	r3, [pc, #32]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034f0:	4b06      	ldr	r3, [pc, #24]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034f6:	4805      	ldr	r0, [pc, #20]	@ (800350c <MX_USART2_UART_Init+0x4c>)
 80034f8:	f005 f9ce 	bl	8008898 <HAL_UART_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003502:	f000 f915 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000538 	.word	0x20000538
 8003510:	40004400 	.word	0x40004400

08003514 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003518:	4b11      	ldr	r3, [pc, #68]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 800351a:	4a12      	ldr	r2, [pc, #72]	@ (8003564 <MX_USART3_UART_Init+0x50>)
 800351c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800351e:	4b10      	ldr	r3, [pc, #64]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 8003520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003524:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003526:	4b0e      	ldr	r3, [pc, #56]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800352c:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003532:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 8003534:	2200      	movs	r2, #0
 8003536:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003538:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 800353a:	220c      	movs	r2, #12
 800353c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800353e:	4b08      	ldr	r3, [pc, #32]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 8003546:	2200      	movs	r2, #0
 8003548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800354a:	4805      	ldr	r0, [pc, #20]	@ (8003560 <MX_USART3_UART_Init+0x4c>)
 800354c:	f005 f9a4 	bl	8008898 <HAL_UART_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003556:	f000 f8eb 	bl	8003730 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000580 	.word	0x20000580
 8003564:	40004800 	.word	0x40004800

08003568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800356e:	4b20      	ldr	r3, [pc, #128]	@ (80035f0 <MX_DMA_Init+0x88>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4a1f      	ldr	r2, [pc, #124]	@ (80035f0 <MX_DMA_Init+0x88>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6153      	str	r3, [r2, #20]
 800357a:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <MX_DMA_Init+0x88>)
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	200c      	movs	r0, #12
 800358c:	f001 fea3 	bl	80052d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003590:	200c      	movs	r0, #12
 8003592:	f001 febc 	bl	800530e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003596:	2200      	movs	r2, #0
 8003598:	2100      	movs	r1, #0
 800359a:	200d      	movs	r0, #13
 800359c:	f001 fe9b 	bl	80052d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80035a0:	200d      	movs	r0, #13
 80035a2:	f001 feb4 	bl	800530e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80035a6:	2200      	movs	r2, #0
 80035a8:	2100      	movs	r1, #0
 80035aa:	200e      	movs	r0, #14
 80035ac:	f001 fe93 	bl	80052d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80035b0:	200e      	movs	r0, #14
 80035b2:	f001 feac 	bl	800530e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2100      	movs	r1, #0
 80035ba:	200f      	movs	r0, #15
 80035bc:	f001 fe8b 	bl	80052d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80035c0:	200f      	movs	r0, #15
 80035c2:	f001 fea4 	bl	800530e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2100      	movs	r1, #0
 80035ca:	2010      	movs	r0, #16
 80035cc:	f001 fe83 	bl	80052d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80035d0:	2010      	movs	r0, #16
 80035d2:	f001 fe9c 	bl	800530e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2100      	movs	r1, #0
 80035da:	2011      	movs	r0, #17
 80035dc:	f001 fe7b 	bl	80052d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80035e0:	2011      	movs	r0, #17
 80035e2:	f001 fe94 	bl	800530e <HAL_NVIC_EnableIRQ>

}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000

080035f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fa:	f107 0310 	add.w	r3, r7, #16
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003608:	4b45      	ldr	r3, [pc, #276]	@ (8003720 <MX_GPIO_Init+0x12c>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	4a44      	ldr	r2, [pc, #272]	@ (8003720 <MX_GPIO_Init+0x12c>)
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	6193      	str	r3, [r2, #24]
 8003614:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <MX_GPIO_Init+0x12c>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003620:	4b3f      	ldr	r3, [pc, #252]	@ (8003720 <MX_GPIO_Init+0x12c>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	4a3e      	ldr	r2, [pc, #248]	@ (8003720 <MX_GPIO_Init+0x12c>)
 8003626:	f043 0320 	orr.w	r3, r3, #32
 800362a:	6193      	str	r3, [r2, #24]
 800362c:	4b3c      	ldr	r3, [pc, #240]	@ (8003720 <MX_GPIO_Init+0x12c>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f003 0320 	and.w	r3, r3, #32
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003638:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <MX_GPIO_Init+0x12c>)
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	4a38      	ldr	r2, [pc, #224]	@ (8003720 <MX_GPIO_Init+0x12c>)
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	6193      	str	r3, [r2, #24]
 8003644:	4b36      	ldr	r3, [pc, #216]	@ (8003720 <MX_GPIO_Init+0x12c>)
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003650:	4b33      	ldr	r3, [pc, #204]	@ (8003720 <MX_GPIO_Init+0x12c>)
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	4a32      	ldr	r2, [pc, #200]	@ (8003720 <MX_GPIO_Init+0x12c>)
 8003656:	f043 0308 	orr.w	r3, r3, #8
 800365a:	6193      	str	r3, [r2, #24]
 800365c:	4b30      	ldr	r3, [pc, #192]	@ (8003720 <MX_GPIO_Init+0x12c>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003668:	2200      	movs	r2, #0
 800366a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800366e:	482d      	ldr	r0, [pc, #180]	@ (8003724 <MX_GPIO_Init+0x130>)
 8003670:	f002 faaf 	bl	8005bd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8003674:	2200      	movs	r2, #0
 8003676:	f641 0101 	movw	r1, #6145	@ 0x1801
 800367a:	482b      	ldr	r0, [pc, #172]	@ (8003728 <MX_GPIO_Init+0x134>)
 800367c:	f002 faa9 	bl	8005bd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003680:	2200      	movs	r2, #0
 8003682:	f244 0132 	movw	r1, #16434	@ 0x4032
 8003686:	4829      	ldr	r0, [pc, #164]	@ (800372c <MX_GPIO_Init+0x138>)
 8003688:	f002 faa3 	bl	8005bd2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800368c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003690:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003692:	2301      	movs	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800369a:	2302      	movs	r3, #2
 800369c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800369e:	f107 0310 	add.w	r3, r7, #16
 80036a2:	4619      	mov	r1, r3
 80036a4:	481f      	ldr	r0, [pc, #124]	@ (8003724 <MX_GPIO_Init+0x130>)
 80036a6:	f002 f8f9 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80036aa:	f641 0301 	movw	r3, #6145	@ 0x1801
 80036ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036b0:	2301      	movs	r3, #1
 80036b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2302      	movs	r3, #2
 80036ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036bc:	f107 0310 	add.w	r3, r7, #16
 80036c0:	4619      	mov	r1, r3
 80036c2:	4819      	ldr	r0, [pc, #100]	@ (8003728 <MX_GPIO_Init+0x134>)
 80036c4:	f002 f8ea 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80036c8:	2322      	movs	r3, #34	@ 0x22
 80036ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d0:	2301      	movs	r3, #1
 80036d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	4619      	mov	r1, r3
 80036da:	4813      	ldr	r0, [pc, #76]	@ (8003728 <MX_GPIO_Init+0x134>)
 80036dc:	f002 f8de 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB14 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5;
 80036e0:	f244 0332 	movw	r3, #16434	@ 0x4032
 80036e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e6:	2301      	movs	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ee:	2302      	movs	r3, #2
 80036f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 0310 	add.w	r3, r7, #16
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	@ (800372c <MX_GPIO_Init+0x138>)
 80036fa:	f002 f8cf 	bl	800589c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370c:	f107 0310 	add.w	r3, r7, #16
 8003710:	4619      	mov	r1, r3
 8003712:	4806      	ldr	r0, [pc, #24]	@ (800372c <MX_GPIO_Init+0x138>)
 8003714:	f002 f8c2 	bl	800589c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003718:	bf00      	nop
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	40011000 	.word	0x40011000
 8003728:	40010800 	.word	0x40010800
 800372c:	40010c00 	.word	0x40010c00

08003730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003734:	b672      	cpsid	i
}
 8003736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <Error_Handler+0x8>

0800373c <Set_Pin_Output>:
uint8_t send_turb					= 0;
/******************************************************************************
 * Functions
 *****************************************************************************/
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003748:	f107 0308 	add.w	r3, r7, #8
 800374c:	2200      	movs	r2, #0
 800374e:	601a      	str	r2, [r3, #0]
 8003750:	605a      	str	r2, [r3, #4]
 8003752:	609a      	str	r2, [r3, #8]
 8003754:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800375a:	2301      	movs	r3, #1
 800375c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375e:	2302      	movs	r3, #2
 8003760:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003762:	f107 0308 	add.w	r3, r7, #8
 8003766:	4619      	mov	r1, r3
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f002 f897 	bl	800589c <HAL_GPIO_Init>
}
 800376e:	bf00      	nop
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b086      	sub	sp, #24
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003782:	f107 0308 	add.w	r3, r7, #8
 8003786:	2200      	movs	r2, #0
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003798:	2301      	movs	r3, #1
 800379a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800379c:	f107 0308 	add.w	r3, r7, #8
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f002 f87a 	bl	800589c <HAL_GPIO_Init>
}
 80037a8:	bf00      	nop
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <delay>:

void delay(uint32_t us)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80037b8:	4b08      	ldr	r3, [pc, #32]	@ (80037dc <delay+0x2c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2200      	movs	r2, #0
 80037be:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim3)) < us);
 80037c0:	bf00      	nop
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <delay+0x2c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d8f9      	bhi.n	80037c2 <delay+0x12>
}
 80037ce:	bf00      	nop
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000460 	.word	0x20000460

080037e0 <DS18B20_Start>:

uint8_t DS18B20_Start(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN); //set pin sebagai output
 80037ea:	2101      	movs	r1, #1
 80037ec:	4813      	ldr	r0, [pc, #76]	@ (800383c <DS18B20_Start+0x5c>)
 80037ee:	f7ff ffa5 	bl	800373c <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 80037f2:	2200      	movs	r2, #0
 80037f4:	2101      	movs	r1, #1
 80037f6:	4811      	ldr	r0, [pc, #68]	@ (800383c <DS18B20_Start+0x5c>)
 80037f8:	f002 f9eb 	bl	8005bd2 <HAL_GPIO_WritePin>
	delay(480); //delay berdasarkan datasheet
 80037fc:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8003800:	f7ff ffd6 	bl	80037b0 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN); //set pin sebagai input
 8003804:	2101      	movs	r1, #1
 8003806:	480d      	ldr	r0, [pc, #52]	@ (800383c <DS18B20_Start+0x5c>)
 8003808:	f7ff ffb5 	bl	8003776 <Set_Pin_Input>
	delay(80);// delay berdasarkan datasheet
 800380c:	2050      	movs	r0, #80	@ 0x50
 800380e:	f7ff ffcf 	bl	80037b0 <delay>

	if(!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;
 8003812:	2101      	movs	r1, #1
 8003814:	4809      	ldr	r0, [pc, #36]	@ (800383c <DS18B20_Start+0x5c>)
 8003816:	f002 f9c5 	bl	8005ba4 <HAL_GPIO_ReadPin>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d102      	bne.n	8003826 <DS18B20_Start+0x46>
 8003820:	2301      	movs	r3, #1
 8003822:	71fb      	strb	r3, [r7, #7]
 8003824:	e001      	b.n	800382a <DS18B20_Start+0x4a>
	else Response = -1;
 8003826:	23ff      	movs	r3, #255	@ 0xff
 8003828:	71fb      	strb	r3, [r7, #7]
	delay(400);
 800382a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800382e:	f7ff ffbf 	bl	80037b0 <delay>

	return Response;
 8003832:	79fb      	ldrb	r3, [r7, #7]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40010800 	.word	0x40010800

08003840 <DS18B20_Write>:

void DS18B20_Write(uint8_t data)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN); //set pin sebagai output
 800384a:	2101      	movs	r1, #1
 800384c:	481e      	ldr	r0, [pc, #120]	@ (80038c8 <DS18B20_Write+0x88>)
 800384e:	f7ff ff75 	bl	800373c <Set_Pin_Output>

	for(int i=0; i<8 ; i++){
 8003852:	2300      	movs	r3, #0
 8003854:	60fb      	str	r3, [r7, #12]
 8003856:	e02e      	b.n	80038b6 <DS18B20_Write+0x76>
		if((data & (1<<i)) != 0){
 8003858:	79fa      	ldrb	r2, [r7, #7]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	fa42 f303 	asr.w	r3, r2, r3
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <DS18B20_Write+0x50>
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);//set pin sebagai output
 8003868:	2101      	movs	r1, #1
 800386a:	4817      	ldr	r0, [pc, #92]	@ (80038c8 <DS18B20_Write+0x88>)
 800386c:	f7ff ff66 	bl	800373c <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8003870:	2200      	movs	r2, #0
 8003872:	2101      	movs	r1, #1
 8003874:	4814      	ldr	r0, [pc, #80]	@ (80038c8 <DS18B20_Write+0x88>)
 8003876:	f002 f9ac 	bl	8005bd2 <HAL_GPIO_WritePin>
			delay(1);
 800387a:	2001      	movs	r0, #1
 800387c:	f7ff ff98 	bl	80037b0 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN); //set pin sebagai input
 8003880:	2101      	movs	r1, #1
 8003882:	4811      	ldr	r0, [pc, #68]	@ (80038c8 <DS18B20_Write+0x88>)
 8003884:	f7ff ff77 	bl	8003776 <Set_Pin_Input>
			delay(50);
 8003888:	2032      	movs	r0, #50	@ 0x32
 800388a:	f7ff ff91 	bl	80037b0 <delay>
 800388e:	e00f      	b.n	80038b0 <DS18B20_Write+0x70>
		}
		else {// jika bit 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8003890:	2101      	movs	r1, #1
 8003892:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <DS18B20_Write+0x88>)
 8003894:	f7ff ff52 	bl	800373c <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);
 8003898:	2200      	movs	r2, #0
 800389a:	2101      	movs	r1, #1
 800389c:	480a      	ldr	r0, [pc, #40]	@ (80038c8 <DS18B20_Write+0x88>)
 800389e:	f002 f998 	bl	8005bd2 <HAL_GPIO_WritePin>
			delay (50);
 80038a2:	2032      	movs	r0, #50	@ 0x32
 80038a4:	f7ff ff84 	bl	80037b0 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80038a8:	2101      	movs	r1, #1
 80038aa:	4807      	ldr	r0, [pc, #28]	@ (80038c8 <DS18B20_Write+0x88>)
 80038ac:	f7ff ff63 	bl	8003776 <Set_Pin_Input>
	for(int i=0; i<8 ; i++){
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3301      	adds	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b07      	cmp	r3, #7
 80038ba:	ddcd      	ble.n	8003858 <DS18B20_Write+0x18>
		}
	}
}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40010800 	.word	0x40010800

080038cc <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input (DS18B20_PORT, DS18B20_PIN);
 80038d6:	2101      	movs	r1, #1
 80038d8:	481a      	ldr	r0, [pc, #104]	@ (8003944 <DS18B20_Read+0x78>)
 80038da:	f7ff ff4c 	bl	8003776 <Set_Pin_Input>

	for (int i=0;i<8;i++){
 80038de:	2300      	movs	r3, #0
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	e026      	b.n	8003932 <DS18B20_Read+0x66>
		Set_Pin_Output (DS18B20_PORT, DS18B20_PIN); // set sebagai output
 80038e4:	2101      	movs	r1, #1
 80038e6:	4817      	ldr	r0, [pc, #92]	@ (8003944 <DS18B20_Read+0x78>)
 80038e8:	f7ff ff28 	bl	800373c <Set_Pin_Output>
		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2101      	movs	r1, #1
 80038f0:	4814      	ldr	r0, [pc, #80]	@ (8003944 <DS18B20_Read+0x78>)
 80038f2:	f002 f96e 	bl	8005bd2 <HAL_GPIO_WritePin>
		delay (2);
 80038f6:	2002      	movs	r0, #2
 80038f8:	f7ff ff5a 	bl	80037b0 <delay>
		Set_Pin_Input (DS18B20_PORT, DS18B20_PIN);
 80038fc:	2101      	movs	r1, #1
 80038fe:	4811      	ldr	r0, [pc, #68]	@ (8003944 <DS18B20_Read+0x78>)
 8003900:	f7ff ff39 	bl	8003776 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))
 8003904:	2101      	movs	r1, #1
 8003906:	480f      	ldr	r0, [pc, #60]	@ (8003944 <DS18B20_Read+0x78>)
 8003908:	f002 f94c 	bl	8005ba4 <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d009      	beq.n	8003926 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;
 8003912:	2201      	movs	r2, #1
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	b25a      	sxtb	r2, r3
 800391c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003920:	4313      	orrs	r3, r2
 8003922:	b25b      	sxtb	r3, r3
 8003924:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);
 8003926:	203c      	movs	r0, #60	@ 0x3c
 8003928:	f7ff ff42 	bl	80037b0 <delay>
	for (int i=0;i<8;i++){
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	603b      	str	r3, [r7, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b07      	cmp	r3, #7
 8003936:	ddd5      	ble.n	80038e4 <DS18B20_Read+0x18>
	}
	return value;
 8003938:	79fb      	ldrb	r3, [r7, #7]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40010800 	.word	0x40010800

08003948 <calculateDO>:

float calculateDO(uint32_t voltage_mv, float current_temp_cal)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    uint8_t temp_index = (uint8_t)roundf(current_temp_cal);
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f008 fe72 	bl	800c63c <roundf>
 8003958:	4603      	mov	r3, r0
 800395a:	4618      	mov	r0, r3
 800395c:	f7fd fbc0 	bl	80010e0 <__aeabi_f2uiz>
 8003960:	4603      	mov	r3, r0
 8003962:	75fb      	strb	r3, [r7, #23]
    if(temp_index > 40) temp_index = 40;
 8003964:	7dfb      	ldrb	r3, [r7, #23]
 8003966:	2b28      	cmp	r3, #40	@ 0x28
 8003968:	d901      	bls.n	800396e <calculateDO+0x26>
 800396a:	2328      	movs	r3, #40	@ 0x28
 800396c:	75fb      	strb	r3, [r7, #23]
    if(temp_index < 0) temp_index = 0;

    // Kalibrasi satu titik dari kode Arduino Anda:
    float V_saturation = (float)CAL1_V + 35.0f * (current_temp_cal - (float)CAL1_T);
 800396e:	491c      	ldr	r1, [pc, #112]	@ (80039e0 <calculateDO+0x98>)
 8003970:	6838      	ldr	r0, [r7, #0]
 8003972:	f7fd f8bf 	bl	8000af4 <__aeabi_fsub>
 8003976:	4603      	mov	r3, r0
 8003978:	491a      	ldr	r1, [pc, #104]	@ (80039e4 <calculateDO+0x9c>)
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd f9c4 	bl	8000d08 <__aeabi_fmul>
 8003980:	4603      	mov	r3, r0
 8003982:	4919      	ldr	r1, [pc, #100]	@ (80039e8 <calculateDO+0xa0>)
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd f8b7 	bl	8000af8 <__addsf3>
 800398a:	4603      	mov	r3, r0
 800398c:	613b      	str	r3, [r7, #16]

    if (fabsf(V_saturation) < 0.001f) V_saturation = 0.001f; // Hindari pembagian dengan nol
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003994:	4915      	ldr	r1, [pc, #84]	@ (80039ec <calculateDO+0xa4>)
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd fb54 	bl	8001044 <__aeabi_fcmplt>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <calculateDO+0x5e>
 80039a2:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <calculateDO+0xa4>)
 80039a4:	613b      	str	r3, [r7, #16]

    float calculated_do = ((float)voltage_mv * DO_Table[temp_index] / V_saturation) / 1000.0f;
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd f956 	bl	8000c58 <__aeabi_ui2f>
 80039ac:	4602      	mov	r2, r0
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	490f      	ldr	r1, [pc, #60]	@ (80039f0 <calculateDO+0xa8>)
 80039b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f7fd f9a5 	bl	8000d08 <__aeabi_fmul>
 80039be:	4603      	mov	r3, r0
 80039c0:	6939      	ldr	r1, [r7, #16]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fa54 	bl	8000e70 <__aeabi_fdiv>
 80039c8:	4603      	mov	r3, r0
 80039ca:	490a      	ldr	r1, [pc, #40]	@ (80039f4 <calculateDO+0xac>)
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd fa4f 	bl	8000e70 <__aeabi_fdiv>
 80039d2:	4603      	mov	r3, r0
 80039d4:	60fb      	str	r3, [r7, #12]

    // float do_final_cal = (0.1012f * calculated_do * calculated_do) +
    //                      (0.2518f * calculated_do) + 0.3116f;
    // return do_final_cal;
    // Jika tidak ada kalibrasi akhir, kembalikan nilai yang sudah dikompensasi suhu:
    return calculated_do;
 80039d6:	68fb      	ldr	r3, [r7, #12]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	41b80000 	.word	0x41b80000
 80039e4:	420c0000 	.word	0x420c0000
 80039e8:	43c80000 	.word	0x43c80000
 80039ec:	3a83126f 	.word	0x3a83126f
 80039f0:	0800c8c8 	.word	0x0800c8c8
 80039f4:	447a0000 	.word	0x447a0000

080039f8 <initSampler>:

void initSampler(AdaptiveSampler* sampler, float* historyBuffer, int historySize,
                float threshold, float initInterval, float minI, float maxI)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
 8003a04:	603b      	str	r3, [r7, #0]
    sampler->history = historyBuffer;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	601a      	str	r2, [r3, #0]
    sampler->historySize = historySize;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	605a      	str	r2, [r3, #4]
    sampler->t = threshold;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	615a      	str	r2, [r3, #20]
    sampler->currentInterval = initInterval;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	611a      	str	r2, [r3, #16]
    sampler->minInterval = minI;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	619a      	str	r2, [r3, #24]
    sampler->maxInterval = maxI;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a3a      	ldr	r2, [r7, #32]
 8003a28:	61da      	str	r2, [r3, #28]
    sampler->dataIndex = 0;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	609a      	str	r2, [r3, #8]
    sampler->prevValue = 0.0f;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	60da      	str	r2, [r3, #12]
    sampler->initialized = 0;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc80      	pop	{r7}
 8003a48:	4770      	bx	lr
	...

08003a4c <updateSamplingInterval>:

float updateSamplingInterval(AdaptiveSampler* sampler, float newValue)
{
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b089      	sub	sp, #36	@ 0x24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
    // Fase inisialisasi: isi buffer historis
    if(!sampler->initialized) {
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d149      	bne.n	8003af4 <updateSamplingInterval+0xa8>
        sampler->history[sampler->dataIndex] = newValue;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	601a      	str	r2, [r3, #0]
        sampler->dataIndex++;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	609a      	str	r2, [r3, #8]

        if(sampler->dataIndex == sampler->historySize) {
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d133      	bne.n	8003aee <updateSamplingInterval+0xa2>
        	sampler->initialized = 1; // fase inisialisasi selesai
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2020 	strb.w	r2, [r3, #32]
            // Hitung rata-rata awal
            float avg = 0.0f;
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
            for(int i=0; i<sampler->historySize; i++) {
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
 8003a98:	e00e      	b.n	8003ab8 <updateSamplingInterval+0x6c>
            	avg += sampler->history[i];
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	69f8      	ldr	r0, [r7, #28]
 8003aaa:	f7fd f825 	bl	8000af8 <__addsf3>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	61fb      	str	r3, [r7, #28]
            for(int i=0; i<sampler->historySize; i++) {
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	dbeb      	blt.n	8003a9a <updateSamplingInterval+0x4e>
            }
            sampler->prevValue = avg/sampler->historySize;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd f8ca 	bl	8000c60 <__aeabi_i2f>
 8003acc:	4603      	mov	r3, r0
 8003ace:	4619      	mov	r1, r3
 8003ad0:	69f8      	ldr	r0, [r7, #28]
 8003ad2:	f7fd f9cd 	bl	8000e70 <__aeabi_fdiv>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	461a      	mov	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]

            sampler->D = 0.0f;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24
            sampler->Y = 1.0f;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003aec:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        return sampler->currentInterval;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	e093      	b.n	8003c1c <updateSamplingInterval+0x1d0>
    }

    // Operasi normal: hitung interval adaptif
    float avg = 0.0f;
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]
    for(int i=0; i<sampler->historySize; i++) {
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	e00e      	b.n	8003b1e <updateSamplingInterval+0xd2>
    	avg += sampler->history[i];
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f7fc fff2 	bl	8000af8 <__addsf3>
 8003b14:	4603      	mov	r3, r0
 8003b16:	617b      	str	r3, [r7, #20]
    for(int i=0; i<sampler->historySize; i++) {
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	613b      	str	r3, [r7, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	dbeb      	blt.n	8003b00 <updateSamplingInterval+0xb4>
    }

    avg /= sampler->historySize;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd f897 	bl	8000c60 <__aeabi_i2f>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4619      	mov	r1, r3
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7fd f99a 	bl	8000e70 <__aeabi_fdiv>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	617b      	str	r3, [r7, #20]

    if(fabsf(avg) < 0.001f) avg = 0.001f;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b46:	4937      	ldr	r1, [pc, #220]	@ (8003c24 <updateSamplingInterval+0x1d8>)
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fa7b 	bl	8001044 <__aeabi_fcmplt>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <updateSamplingInterval+0x10c>
 8003b54:	4b33      	ldr	r3, [pc, #204]	@ (8003c24 <updateSamplingInterval+0x1d8>)
 8003b56:	617b      	str	r3, [r7, #20]

    sampler->D = fabsf(newValue - sampler->prevValue)/avg;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6838      	ldr	r0, [r7, #0]
 8003b60:	f7fc ffc8 	bl	8000af4 <__aeabi_fsub>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b6a:	6979      	ldr	r1, [r7, #20]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fd f97f 	bl	8000e70 <__aeabi_fdiv>
 8003b72:	4603      	mov	r3, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24
    sampler->Y = 2.0f/(1 + expf(-5.0*(sampler->D - sampler->t)));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	4619      	mov	r1, r3
 8003b84:	4610      	mov	r0, r2
 8003b86:	f7fc ffb5 	bl	8000af4 <__aeabi_fsub>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	4926      	ldr	r1, [pc, #152]	@ (8003c28 <updateSamplingInterval+0x1dc>)
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd f8ba 	bl	8000d08 <__aeabi_fmul>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f008 fcde 	bl	800c558 <expf>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7fc ffa8 	bl	8000af8 <__addsf3>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4619      	mov	r1, r3
 8003bac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003bb0:	f7fd f95e 	bl	8000e70 <__aeabi_fdiv>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28

    float newInterval = sampler->currentInterval / sampler->Y;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	f7fd f952 	bl	8000e70 <__aeabi_fdiv>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	60fb      	str	r3, [r7, #12]
    newInterval = fmaxf(sampler->minInterval, fminf(newInterval, sampler->maxInterval));
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699c      	ldr	r4, [r3, #24]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4619      	mov	r1, r3
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f008 fcff 	bl	800c5de <fminf>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4619      	mov	r1, r3
 8003be4:	4620      	mov	r0, r4
 8003be6:	f008 fce5 	bl	800c5b4 <fmaxf>
 8003bea:	60f8      	str	r0, [r7, #12]

    // Update buffer sirkuler
    sampler->history[sampler->dataIndex % sampler->historySize] = newValue;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6819      	ldr	r1, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6852      	ldr	r2, [r2, #4]
 8003bf8:	fb93 f0f2 	sdiv	r0, r3, r2
 8003bfc:	fb00 f202 	mul.w	r2, r0, r2
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	601a      	str	r2, [r3, #0]
    sampler->dataIndex++;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	609a      	str	r2, [r3, #8]
    sampler->prevValue = newValue;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	60da      	str	r2, [r3, #12]

    return newInterval;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3724      	adds	r7, #36	@ 0x24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd90      	pop	{r4, r7, pc}
 8003c24:	3a83126f 	.word	0x3a83126f
 8003c28:	c0a00000 	.word	0xc0a00000

08003c2c <globalTimerProcess>:

void globalTimerProcess(Time_t *Global_Time)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
	Global_Time->millisecond_t++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	889b      	ldrh	r3, [r3, #4]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	809a      	strh	r2, [r3, #4]

	if(Global_Time->millisecond_t > 999)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	889b      	ldrh	r3, [r3, #4]
 8003c44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c48:	d308      	bcc.n	8003c5c <globalTimerProcess+0x30>
	{
		Global_Time->second_t++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	78db      	ldrb	r3, [r3, #3]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	70da      	strb	r2, [r3, #3]
		Global_Time->millisecond_t = 0;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	809a      	strh	r2, [r3, #4]
	}

	if(Global_Time->second_t > 59)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	78db      	ldrb	r3, [r3, #3]
 8003c60:	2b3b      	cmp	r3, #59	@ 0x3b
 8003c62:	d908      	bls.n	8003c76 <globalTimerProcess+0x4a>
	{
		Global_Time->minute_t++;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	789b      	ldrb	r3, [r3, #2]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	709a      	strb	r2, [r3, #2]
		Global_Time->second_t = 0;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	70da      	strb	r2, [r3, #3]
	}

	if(Global_Time->minute_t > 59)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	789b      	ldrb	r3, [r3, #2]
 8003c7a:	2b3b      	cmp	r3, #59	@ 0x3b
 8003c7c:	d908      	bls.n	8003c90 <globalTimerProcess+0x64>
	{
		Global_Time->hour_t++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	801a      	strh	r2, [r3, #0]
		Global_Time->minute_t = 0;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	709a      	strb	r2, [r3, #2]
	}
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr
	...

08003c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ca2:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <HAL_MspInit+0x6c>)
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	4a18      	ldr	r2, [pc, #96]	@ (8003d08 <HAL_MspInit+0x6c>)
 8003ca8:	f043 0301 	orr.w	r3, r3, #1
 8003cac:	6193      	str	r3, [r2, #24]
 8003cae:	4b16      	ldr	r3, [pc, #88]	@ (8003d08 <HAL_MspInit+0x6c>)
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cba:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <HAL_MspInit+0x6c>)
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <HAL_MspInit+0x6c>)
 8003cc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc4:	61d3      	str	r3, [r2, #28]
 8003cc6:	4b10      	ldr	r3, [pc, #64]	@ (8003d08 <HAL_MspInit+0x6c>)
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	607b      	str	r3, [r7, #4]
 8003cd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2005      	movs	r0, #5
 8003cd8:	f001 fafd 	bl	80052d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003cdc:	2005      	movs	r0, #5
 8003cde:	f001 fb16 	bl	800530e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <HAL_MspInit+0x70>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <HAL_MspInit+0x70>)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40010000 	.word	0x40010000

08003d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	@ 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	f107 0318 	add.w	r3, r7, #24
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	605a      	str	r2, [r3, #4]
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a28      	ldr	r2, [pc, #160]	@ (8003dcc <HAL_ADC_MspInit+0xbc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d122      	bne.n	8003d76 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d30:	4b27      	ldr	r3, [pc, #156]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	4a26      	ldr	r2, [pc, #152]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d3a:	6193      	str	r3, [r2, #24]
 8003d3c:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d44:	617b      	str	r3, [r7, #20]
 8003d46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d48:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a20      	ldr	r2, [pc, #128]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d4e:	f043 0304 	orr.w	r3, r3, #4
 8003d52:	6193      	str	r3, [r2, #24]
 8003d54:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	613b      	str	r3, [r7, #16]
 8003d5e:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d64:	2303      	movs	r3, #3
 8003d66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d68:	f107 0318 	add.w	r3, r7, #24
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4819      	ldr	r0, [pc, #100]	@ (8003dd4 <HAL_ADC_MspInit+0xc4>)
 8003d70:	f001 fd94 	bl	800589c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003d74:	e026      	b.n	8003dc4 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a17      	ldr	r2, [pc, #92]	@ (8003dd8 <HAL_ADC_MspInit+0xc8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d121      	bne.n	8003dc4 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d80:	4b13      	ldr	r3, [pc, #76]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	4a12      	ldr	r2, [pc, #72]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d8a:	6193      	str	r3, [r2, #24]
 8003d8c:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d98:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003d9e:	f043 0308 	orr.w	r3, r3, #8
 8003da2:	6193      	str	r3, [r2, #24]
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <HAL_ADC_MspInit+0xc0>)
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f003 0308 	and.w	r3, r3, #8
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003db0:	2301      	movs	r3, #1
 8003db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003db4:	2303      	movs	r3, #3
 8003db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003db8:	f107 0318 	add.w	r3, r7, #24
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4807      	ldr	r0, [pc, #28]	@ (8003ddc <HAL_ADC_MspInit+0xcc>)
 8003dc0:	f001 fd6c 	bl	800589c <HAL_GPIO_Init>
}
 8003dc4:	bf00      	nop
 8003dc6:	3728      	adds	r7, #40	@ 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40012400 	.word	0x40012400
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40010800 	.word	0x40010800
 8003dd8:	40012800 	.word	0x40012800
 8003ddc:	40010c00 	.word	0x40010c00

08003de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	@ 0x28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8003e70 <HAL_I2C_MspInit+0x90>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d132      	bne.n	8003e66 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e00:	4b1c      	ldr	r3, [pc, #112]	@ (8003e74 <HAL_I2C_MspInit+0x94>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	4a1b      	ldr	r2, [pc, #108]	@ (8003e74 <HAL_I2C_MspInit+0x94>)
 8003e06:	f043 0308 	orr.w	r3, r3, #8
 8003e0a:	6193      	str	r3, [r2, #24]
 8003e0c:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <HAL_I2C_MspInit+0x94>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e1e:	2312      	movs	r3, #18
 8003e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e22:	2303      	movs	r3, #3
 8003e24:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e26:	f107 0314 	add.w	r3, r7, #20
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	4812      	ldr	r0, [pc, #72]	@ (8003e78 <HAL_I2C_MspInit+0x98>)
 8003e2e:	f001 fd35 	bl	800589c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003e32:	4b12      	ldr	r3, [pc, #72]	@ (8003e7c <HAL_I2C_MspInit+0x9c>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	f043 0302 	orr.w	r3, r3, #2
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e48:	4a0c      	ldr	r2, [pc, #48]	@ (8003e7c <HAL_I2C_MspInit+0x9c>)
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e4e:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <HAL_I2C_MspInit+0x94>)
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	4a08      	ldr	r2, [pc, #32]	@ (8003e74 <HAL_I2C_MspInit+0x94>)
 8003e54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e58:	61d3      	str	r3, [r2, #28]
 8003e5a:	4b06      	ldr	r3, [pc, #24]	@ (8003e74 <HAL_I2C_MspInit+0x94>)
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e66:	bf00      	nop
 8003e68:	3728      	adds	r7, #40	@ 0x28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40005400 	.word	0x40005400
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40010c00 	.word	0x40010c00
 8003e7c:	40010000 	.word	0x40010000

08003e80 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e88:	f107 0310 	add.w	r3, r7, #16
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	605a      	str	r2, [r3, #4]
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <HAL_TIM_Encoder_MspInit+0x74>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d124      	bne.n	8003eea <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ea0:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <HAL_TIM_Encoder_MspInit+0x78>)
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4a14      	ldr	r2, [pc, #80]	@ (8003ef8 <HAL_TIM_Encoder_MspInit+0x78>)
 8003ea6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003eaa:	6193      	str	r3, [r2, #24]
 8003eac:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_TIM_Encoder_MspInit+0x78>)
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef8 <HAL_TIM_Encoder_MspInit+0x78>)
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef8 <HAL_TIM_Encoder_MspInit+0x78>)
 8003ebe:	f043 0304 	orr.w	r3, r3, #4
 8003ec2:	6193      	str	r3, [r2, #24]
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <HAL_TIM_Encoder_MspInit+0x78>)
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ed0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ed4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eda:	2301      	movs	r3, #1
 8003edc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ede:	f107 0310 	add.w	r3, r7, #16
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4805      	ldr	r0, [pc, #20]	@ (8003efc <HAL_TIM_Encoder_MspInit+0x7c>)
 8003ee6:	f001 fcd9 	bl	800589c <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003eea:	bf00      	nop
 8003eec:	3720      	adds	r7, #32
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40012c00 	.word	0x40012c00
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40010800 	.word	0x40010800

08003f00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f10:	d10b      	bne.n	8003f2a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f12:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <HAL_TIM_PWM_MspInit+0x34>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4a07      	ldr	r2, [pc, #28]	@ (8003f34 <HAL_TIM_PWM_MspInit+0x34>)
 8003f18:	f043 0301 	orr.w	r3, r3, #1
 8003f1c:	61d3      	str	r3, [r2, #28]
 8003f1e:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <HAL_TIM_PWM_MspInit+0x34>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003f2a:	bf00      	nop
 8003f2c:	3714      	adds	r7, #20
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr
 8003f34:	40021000 	.word	0x40021000

08003f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1a      	ldr	r2, [pc, #104]	@ (8003fb0 <HAL_TIM_Base_MspInit+0x78>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d114      	bne.n	8003f74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8003fb4 <HAL_TIM_Base_MspInit+0x7c>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	4a19      	ldr	r2, [pc, #100]	@ (8003fb4 <HAL_TIM_Base_MspInit+0x7c>)
 8003f50:	f043 0302 	orr.w	r3, r3, #2
 8003f54:	61d3      	str	r3, [r2, #28]
 8003f56:	4b17      	ldr	r3, [pc, #92]	@ (8003fb4 <HAL_TIM_Base_MspInit+0x7c>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	201d      	movs	r0, #29
 8003f68:	f001 f9b5 	bl	80052d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f6c:	201d      	movs	r0, #29
 8003f6e:	f001 f9ce 	bl	800530e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f72:	e018      	b.n	8003fa6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0f      	ldr	r2, [pc, #60]	@ (8003fb8 <HAL_TIM_Base_MspInit+0x80>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d113      	bne.n	8003fa6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb4 <HAL_TIM_Base_MspInit+0x7c>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb4 <HAL_TIM_Base_MspInit+0x7c>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	61d3      	str	r3, [r2, #28]
 8003f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb4 <HAL_TIM_Base_MspInit+0x7c>)
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f96:	2200      	movs	r2, #0
 8003f98:	2100      	movs	r1, #0
 8003f9a:	201e      	movs	r0, #30
 8003f9c:	f001 f99b 	bl	80052d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003fa0:	201e      	movs	r0, #30
 8003fa2:	f001 f9b4 	bl	800530e <HAL_NVIC_EnableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40000800 	.word	0x40000800

08003fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	@ 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fda:	d142      	bne.n	8004062 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fdc:	4b23      	ldr	r3, [pc, #140]	@ (800406c <HAL_TIM_MspPostInit+0xb0>)
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	@ (800406c <HAL_TIM_MspPostInit+0xb0>)
 8003fe2:	f043 0304 	orr.w	r3, r3, #4
 8003fe6:	6193      	str	r3, [r2, #24]
 8003fe8:	4b20      	ldr	r3, [pc, #128]	@ (800406c <HAL_TIM_MspPostInit+0xb0>)
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800406c <HAL_TIM_MspPostInit+0xb0>)
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800406c <HAL_TIM_MspPostInit+0xb0>)
 8003ffa:	f043 0308 	orr.w	r3, r3, #8
 8003ffe:	6193      	str	r3, [r2, #24]
 8004000:	4b1a      	ldr	r3, [pc, #104]	@ (800406c <HAL_TIM_MspPostInit+0xb0>)
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	60fb      	str	r3, [r7, #12]
 800400a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800400c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004012:	2302      	movs	r3, #2
 8004014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004016:	2302      	movs	r3, #2
 8004018:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401a:	f107 0314 	add.w	r3, r7, #20
 800401e:	4619      	mov	r1, r3
 8004020:	4813      	ldr	r0, [pc, #76]	@ (8004070 <HAL_TIM_MspPostInit+0xb4>)
 8004022:	f001 fc3b 	bl	800589c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004026:	2308      	movs	r3, #8
 8004028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800402a:	2302      	movs	r3, #2
 800402c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402e:	2302      	movs	r3, #2
 8004030:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	4619      	mov	r1, r3
 8004038:	480e      	ldr	r0, [pc, #56]	@ (8004074 <HAL_TIM_MspPostInit+0xb8>)
 800403a:	f001 fc2f 	bl	800589c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800403e:	4b0e      	ldr	r3, [pc, #56]	@ (8004078 <HAL_TIM_MspPostInit+0xbc>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8004052:	627b      	str	r3, [r7, #36]	@ 0x24
 8004054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
 800405c:	4a06      	ldr	r2, [pc, #24]	@ (8004078 <HAL_TIM_MspPostInit+0xbc>)
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004062:	bf00      	nop
 8004064:	3728      	adds	r7, #40	@ 0x28
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40021000 	.word	0x40021000
 8004070:	40010800 	.word	0x40010800
 8004074:	40010c00 	.word	0x40010c00
 8004078:	40010000 	.word	0x40010000

0800407c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08e      	sub	sp, #56	@ 0x38
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	605a      	str	r2, [r3, #4]
 800408e:	609a      	str	r2, [r3, #8]
 8004090:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a91      	ldr	r2, [pc, #580]	@ (80042dc <HAL_UART_MspInit+0x260>)
 8004098:	4293      	cmp	r3, r2
 800409a:	f040 8093 	bne.w	80041c4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800409e:	4b90      	ldr	r3, [pc, #576]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	4a8f      	ldr	r2, [pc, #572]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80040a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040a8:	6193      	str	r3, [r2, #24]
 80040aa:	4b8d      	ldr	r3, [pc, #564]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040b2:	623b      	str	r3, [r7, #32]
 80040b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040b6:	4b8a      	ldr	r3, [pc, #552]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	4a89      	ldr	r2, [pc, #548]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80040bc:	f043 0308 	orr.w	r3, r3, #8
 80040c0:	6193      	str	r3, [r2, #24]
 80040c2:	4b87      	ldr	r3, [pc, #540]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80040ce:	2340      	movs	r3, #64	@ 0x40
 80040d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d2:	2302      	movs	r3, #2
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040d6:	2303      	movs	r3, #3
 80040d8:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040de:	4619      	mov	r1, r3
 80040e0:	4880      	ldr	r0, [pc, #512]	@ (80042e4 <HAL_UART_MspInit+0x268>)
 80040e2:	f001 fbdb 	bl	800589c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040e6:	2380      	movs	r3, #128	@ 0x80
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040ea:	2300      	movs	r3, #0
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040f6:	4619      	mov	r1, r3
 80040f8:	487a      	ldr	r0, [pc, #488]	@ (80042e4 <HAL_UART_MspInit+0x268>)
 80040fa:	f001 fbcf 	bl	800589c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80040fe:	4b7a      	ldr	r3, [pc, #488]	@ (80042e8 <HAL_UART_MspInit+0x26c>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	637b      	str	r3, [r7, #52]	@ 0x34
 8004104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004106:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800410a:	637b      	str	r3, [r7, #52]	@ 0x34
 800410c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800410e:	f043 0304 	orr.w	r3, r3, #4
 8004112:	637b      	str	r3, [r7, #52]	@ 0x34
 8004114:	4a74      	ldr	r2, [pc, #464]	@ (80042e8 <HAL_UART_MspInit+0x26c>)
 8004116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004118:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800411a:	4b74      	ldr	r3, [pc, #464]	@ (80042ec <HAL_UART_MspInit+0x270>)
 800411c:	4a74      	ldr	r2, [pc, #464]	@ (80042f0 <HAL_UART_MspInit+0x274>)
 800411e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004120:	4b72      	ldr	r3, [pc, #456]	@ (80042ec <HAL_UART_MspInit+0x270>)
 8004122:	2200      	movs	r2, #0
 8004124:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004126:	4b71      	ldr	r3, [pc, #452]	@ (80042ec <HAL_UART_MspInit+0x270>)
 8004128:	2200      	movs	r2, #0
 800412a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800412c:	4b6f      	ldr	r3, [pc, #444]	@ (80042ec <HAL_UART_MspInit+0x270>)
 800412e:	2280      	movs	r2, #128	@ 0x80
 8004130:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004132:	4b6e      	ldr	r3, [pc, #440]	@ (80042ec <HAL_UART_MspInit+0x270>)
 8004134:	2200      	movs	r2, #0
 8004136:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004138:	4b6c      	ldr	r3, [pc, #432]	@ (80042ec <HAL_UART_MspInit+0x270>)
 800413a:	2200      	movs	r2, #0
 800413c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800413e:	4b6b      	ldr	r3, [pc, #428]	@ (80042ec <HAL_UART_MspInit+0x270>)
 8004140:	2200      	movs	r2, #0
 8004142:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004144:	4b69      	ldr	r3, [pc, #420]	@ (80042ec <HAL_UART_MspInit+0x270>)
 8004146:	2200      	movs	r2, #0
 8004148:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800414a:	4868      	ldr	r0, [pc, #416]	@ (80042ec <HAL_UART_MspInit+0x270>)
 800414c:	f001 f8fa 	bl	8005344 <HAL_DMA_Init>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8004156:	f7ff faeb 	bl	8003730 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a63      	ldr	r2, [pc, #396]	@ (80042ec <HAL_UART_MspInit+0x270>)
 800415e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004160:	4a62      	ldr	r2, [pc, #392]	@ (80042ec <HAL_UART_MspInit+0x270>)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004166:	4b63      	ldr	r3, [pc, #396]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 8004168:	4a63      	ldr	r2, [pc, #396]	@ (80042f8 <HAL_UART_MspInit+0x27c>)
 800416a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800416c:	4b61      	ldr	r3, [pc, #388]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 800416e:	2210      	movs	r2, #16
 8004170:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004172:	4b60      	ldr	r3, [pc, #384]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004178:	4b5e      	ldr	r3, [pc, #376]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 800417a:	2280      	movs	r2, #128	@ 0x80
 800417c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800417e:	4b5d      	ldr	r3, [pc, #372]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 8004180:	2200      	movs	r2, #0
 8004182:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004184:	4b5b      	ldr	r3, [pc, #364]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 8004186:	2200      	movs	r2, #0
 8004188:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800418a:	4b5a      	ldr	r3, [pc, #360]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004190:	4b58      	ldr	r3, [pc, #352]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004196:	4857      	ldr	r0, [pc, #348]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 8004198:	f001 f8d4 	bl	8005344 <HAL_DMA_Init>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80041a2:	f7ff fac5 	bl	8003730 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a52      	ldr	r2, [pc, #328]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 80041aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80041ac:	4a51      	ldr	r2, [pc, #324]	@ (80042f4 <HAL_UART_MspInit+0x278>)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041b2:	2200      	movs	r2, #0
 80041b4:	2100      	movs	r1, #0
 80041b6:	2025      	movs	r0, #37	@ 0x25
 80041b8:	f001 f88d 	bl	80052d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041bc:	2025      	movs	r0, #37	@ 0x25
 80041be:	f001 f8a6 	bl	800530e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80041c2:	e133      	b.n	800442c <HAL_UART_MspInit+0x3b0>
  else if(huart->Instance==USART2)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a4c      	ldr	r2, [pc, #304]	@ (80042fc <HAL_UART_MspInit+0x280>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	f040 80a2 	bne.w	8004314 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 80041d0:	4b43      	ldr	r3, [pc, #268]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	4a42      	ldr	r2, [pc, #264]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80041d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041da:	61d3      	str	r3, [r2, #28]
 80041dc:	4b40      	ldr	r3, [pc, #256]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e4:	61bb      	str	r3, [r7, #24]
 80041e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e8:	4b3d      	ldr	r3, [pc, #244]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	4a3c      	ldr	r2, [pc, #240]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80041ee:	f043 0304 	orr.w	r3, r3, #4
 80041f2:	6193      	str	r3, [r2, #24]
 80041f4:	4b3a      	ldr	r3, [pc, #232]	@ (80042e0 <HAL_UART_MspInit+0x264>)
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004200:	2304      	movs	r3, #4
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004204:	2302      	movs	r3, #2
 8004206:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004208:	2303      	movs	r3, #3
 800420a:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004210:	4619      	mov	r1, r3
 8004212:	483b      	ldr	r0, [pc, #236]	@ (8004300 <HAL_UART_MspInit+0x284>)
 8004214:	f001 fb42 	bl	800589c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004218:	2308      	movs	r3, #8
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800421c:	2300      	movs	r3, #0
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	2300      	movs	r3, #0
 8004222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004224:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004228:	4619      	mov	r1, r3
 800422a:	4835      	ldr	r0, [pc, #212]	@ (8004300 <HAL_UART_MspInit+0x284>)
 800422c:	f001 fb36 	bl	800589c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004230:	4b34      	ldr	r3, [pc, #208]	@ (8004304 <HAL_UART_MspInit+0x288>)
 8004232:	4a35      	ldr	r2, [pc, #212]	@ (8004308 <HAL_UART_MspInit+0x28c>)
 8004234:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004236:	4b33      	ldr	r3, [pc, #204]	@ (8004304 <HAL_UART_MspInit+0x288>)
 8004238:	2200      	movs	r2, #0
 800423a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800423c:	4b31      	ldr	r3, [pc, #196]	@ (8004304 <HAL_UART_MspInit+0x288>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004242:	4b30      	ldr	r3, [pc, #192]	@ (8004304 <HAL_UART_MspInit+0x288>)
 8004244:	2280      	movs	r2, #128	@ 0x80
 8004246:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004248:	4b2e      	ldr	r3, [pc, #184]	@ (8004304 <HAL_UART_MspInit+0x288>)
 800424a:	2200      	movs	r2, #0
 800424c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800424e:	4b2d      	ldr	r3, [pc, #180]	@ (8004304 <HAL_UART_MspInit+0x288>)
 8004250:	2200      	movs	r2, #0
 8004252:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004254:	4b2b      	ldr	r3, [pc, #172]	@ (8004304 <HAL_UART_MspInit+0x288>)
 8004256:	2200      	movs	r2, #0
 8004258:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800425a:	4b2a      	ldr	r3, [pc, #168]	@ (8004304 <HAL_UART_MspInit+0x288>)
 800425c:	2200      	movs	r2, #0
 800425e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004260:	4828      	ldr	r0, [pc, #160]	@ (8004304 <HAL_UART_MspInit+0x288>)
 8004262:	f001 f86f 	bl	8005344 <HAL_DMA_Init>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 800426c:	f7ff fa60 	bl	8003730 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a24      	ldr	r2, [pc, #144]	@ (8004304 <HAL_UART_MspInit+0x288>)
 8004274:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004276:	4a23      	ldr	r2, [pc, #140]	@ (8004304 <HAL_UART_MspInit+0x288>)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800427c:	4b23      	ldr	r3, [pc, #140]	@ (800430c <HAL_UART_MspInit+0x290>)
 800427e:	4a24      	ldr	r2, [pc, #144]	@ (8004310 <HAL_UART_MspInit+0x294>)
 8004280:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004282:	4b22      	ldr	r3, [pc, #136]	@ (800430c <HAL_UART_MspInit+0x290>)
 8004284:	2210      	movs	r2, #16
 8004286:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004288:	4b20      	ldr	r3, [pc, #128]	@ (800430c <HAL_UART_MspInit+0x290>)
 800428a:	2200      	movs	r2, #0
 800428c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800428e:	4b1f      	ldr	r3, [pc, #124]	@ (800430c <HAL_UART_MspInit+0x290>)
 8004290:	2280      	movs	r2, #128	@ 0x80
 8004292:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004294:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <HAL_UART_MspInit+0x290>)
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800429a:	4b1c      	ldr	r3, [pc, #112]	@ (800430c <HAL_UART_MspInit+0x290>)
 800429c:	2200      	movs	r2, #0
 800429e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80042a0:	4b1a      	ldr	r3, [pc, #104]	@ (800430c <HAL_UART_MspInit+0x290>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042a6:	4b19      	ldr	r3, [pc, #100]	@ (800430c <HAL_UART_MspInit+0x290>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80042ac:	4817      	ldr	r0, [pc, #92]	@ (800430c <HAL_UART_MspInit+0x290>)
 80042ae:	f001 f849 	bl	8005344 <HAL_DMA_Init>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_UART_MspInit+0x240>
      Error_Handler();
 80042b8:	f7ff fa3a 	bl	8003730 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a13      	ldr	r2, [pc, #76]	@ (800430c <HAL_UART_MspInit+0x290>)
 80042c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80042c2:	4a12      	ldr	r2, [pc, #72]	@ (800430c <HAL_UART_MspInit+0x290>)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80042c8:	2200      	movs	r2, #0
 80042ca:	2100      	movs	r1, #0
 80042cc:	2026      	movs	r0, #38	@ 0x26
 80042ce:	f001 f802 	bl	80052d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80042d2:	2026      	movs	r0, #38	@ 0x26
 80042d4:	f001 f81b 	bl	800530e <HAL_NVIC_EnableIRQ>
}
 80042d8:	e0a8      	b.n	800442c <HAL_UART_MspInit+0x3b0>
 80042da:	bf00      	nop
 80042dc:	40013800 	.word	0x40013800
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40010c00 	.word	0x40010c00
 80042e8:	40010000 	.word	0x40010000
 80042ec:	200005c8 	.word	0x200005c8
 80042f0:	40020058 	.word	0x40020058
 80042f4:	2000060c 	.word	0x2000060c
 80042f8:	40020044 	.word	0x40020044
 80042fc:	40004400 	.word	0x40004400
 8004300:	40010800 	.word	0x40010800
 8004304:	20000650 	.word	0x20000650
 8004308:	4002006c 	.word	0x4002006c
 800430c:	20000694 	.word	0x20000694
 8004310:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a46      	ldr	r2, [pc, #280]	@ (8004434 <HAL_UART_MspInit+0x3b8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	f040 8086 	bne.w	800442c <HAL_UART_MspInit+0x3b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004320:	4b45      	ldr	r3, [pc, #276]	@ (8004438 <HAL_UART_MspInit+0x3bc>)
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	4a44      	ldr	r2, [pc, #272]	@ (8004438 <HAL_UART_MspInit+0x3bc>)
 8004326:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800432a:	61d3      	str	r3, [r2, #28]
 800432c:	4b42      	ldr	r3, [pc, #264]	@ (8004438 <HAL_UART_MspInit+0x3bc>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004338:	4b3f      	ldr	r3, [pc, #252]	@ (8004438 <HAL_UART_MspInit+0x3bc>)
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	4a3e      	ldr	r2, [pc, #248]	@ (8004438 <HAL_UART_MspInit+0x3bc>)
 800433e:	f043 0308 	orr.w	r3, r3, #8
 8004342:	6193      	str	r3, [r2, #24]
 8004344:	4b3c      	ldr	r3, [pc, #240]	@ (8004438 <HAL_UART_MspInit+0x3bc>)
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	f003 0308 	and.w	r3, r3, #8
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004356:	2302      	movs	r3, #2
 8004358:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800435a:	2303      	movs	r3, #3
 800435c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004362:	4619      	mov	r1, r3
 8004364:	4835      	ldr	r0, [pc, #212]	@ (800443c <HAL_UART_MspInit+0x3c0>)
 8004366:	f001 fa99 	bl	800589c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800436a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004370:	2300      	movs	r3, #0
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004374:	2300      	movs	r3, #0
 8004376:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004378:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800437c:	4619      	mov	r1, r3
 800437e:	482f      	ldr	r0, [pc, #188]	@ (800443c <HAL_UART_MspInit+0x3c0>)
 8004380:	f001 fa8c 	bl	800589c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004384:	4b2e      	ldr	r3, [pc, #184]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 8004386:	4a2f      	ldr	r2, [pc, #188]	@ (8004444 <HAL_UART_MspInit+0x3c8>)
 8004388:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800438a:	4b2d      	ldr	r3, [pc, #180]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 800438c:	2200      	movs	r2, #0
 800438e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004390:	4b2b      	ldr	r3, [pc, #172]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004396:	4b2a      	ldr	r3, [pc, #168]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 8004398:	2280      	movs	r2, #128	@ 0x80
 800439a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800439c:	4b28      	ldr	r3, [pc, #160]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 800439e:	2200      	movs	r2, #0
 80043a0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043a2:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80043a8:	4b25      	ldr	r3, [pc, #148]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043ae:	4b24      	ldr	r3, [pc, #144]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80043b4:	4822      	ldr	r0, [pc, #136]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 80043b6:	f000 ffc5 	bl	8005344 <HAL_DMA_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_UART_MspInit+0x348>
      Error_Handler();
 80043c0:	f7ff f9b6 	bl	8003730 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 80043c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80043ca:	4a1d      	ldr	r2, [pc, #116]	@ (8004440 <HAL_UART_MspInit+0x3c4>)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80043d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 80043d2:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <HAL_UART_MspInit+0x3d0>)
 80043d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 80043d8:	2210      	movs	r2, #16
 80043da:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043e2:	4b19      	ldr	r3, [pc, #100]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 80043e4:	2280      	movs	r2, #128	@ 0x80
 80043e6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043e8:	4b17      	ldr	r3, [pc, #92]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043ee:	4b16      	ldr	r3, [pc, #88]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80043f4:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043fa:	4b13      	ldr	r3, [pc, #76]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004400:	4811      	ldr	r0, [pc, #68]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 8004402:	f000 ff9f 	bl	8005344 <HAL_DMA_Init>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_UART_MspInit+0x394>
      Error_Handler();
 800440c:	f7ff f990 	bl	8003730 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0d      	ldr	r2, [pc, #52]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 8004414:	639a      	str	r2, [r3, #56]	@ 0x38
 8004416:	4a0c      	ldr	r2, [pc, #48]	@ (8004448 <HAL_UART_MspInit+0x3cc>)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800441c:	2200      	movs	r2, #0
 800441e:	2100      	movs	r1, #0
 8004420:	2027      	movs	r0, #39	@ 0x27
 8004422:	f000 ff58 	bl	80052d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004426:	2027      	movs	r0, #39	@ 0x27
 8004428:	f000 ff71 	bl	800530e <HAL_NVIC_EnableIRQ>
}
 800442c:	bf00      	nop
 800442e:	3738      	adds	r7, #56	@ 0x38
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40004800 	.word	0x40004800
 8004438:	40021000 	.word	0x40021000
 800443c:	40010c00 	.word	0x40010c00
 8004440:	200006d8 	.word	0x200006d8
 8004444:	40020030 	.word	0x40020030
 8004448:	2000071c 	.word	0x2000071c
 800444c:	4002001c 	.word	0x4002001c

08004450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <NMI_Handler+0x4>

08004458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <HardFault_Handler+0x4>

08004460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <MemManage_Handler+0x4>

08004468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800446c:	bf00      	nop
 800446e:	e7fd      	b.n	800446c <BusFault_Handler+0x4>

08004470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <UsageFault_Handler+0x4>

08004478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800447c:	bf00      	nop
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004488:	bf00      	nop
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	bc80      	pop	{r7}
 800449a:	4770      	bx	lr

0800449c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044a0:	f000 f9aa 	bl	80047f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044a4:	bf00      	nop
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80044b8:	4802      	ldr	r0, [pc, #8]	@ (80044c4 <DMA1_Channel2_IRQHandler+0x10>)
 80044ba:	f001 f8b1 	bl	8005620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	2000071c 	.word	0x2000071c

080044c8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044cc:	4802      	ldr	r0, [pc, #8]	@ (80044d8 <DMA1_Channel3_IRQHandler+0x10>)
 80044ce:	f001 f8a7 	bl	8005620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200006d8 	.word	0x200006d8

080044dc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80044e0:	4802      	ldr	r0, [pc, #8]	@ (80044ec <DMA1_Channel4_IRQHandler+0x10>)
 80044e2:	f001 f89d 	bl	8005620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	2000060c 	.word	0x2000060c

080044f0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80044f4:	4802      	ldr	r0, [pc, #8]	@ (8004500 <DMA1_Channel5_IRQHandler+0x10>)
 80044f6:	f001 f893 	bl	8005620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200005c8 	.word	0x200005c8

08004504 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004508:	4802      	ldr	r0, [pc, #8]	@ (8004514 <DMA1_Channel6_IRQHandler+0x10>)
 800450a:	f001 f889 	bl	8005620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000650 	.word	0x20000650

08004518 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800451c:	4802      	ldr	r0, [pc, #8]	@ (8004528 <DMA1_Channel7_IRQHandler+0x10>)
 800451e:	f001 f87f 	bl	8005620 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000694 	.word	0x20000694

0800452c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004530:	4802      	ldr	r0, [pc, #8]	@ (800453c <TIM3_IRQHandler+0x10>)
 8004532:	f003 fbf3 	bl	8007d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000460 	.word	0x20000460

08004540 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004544:	4802      	ldr	r0, [pc, #8]	@ (8004550 <TIM4_IRQHandler+0x10>)
 8004546:	f003 fbe9 	bl	8007d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	200004a8 	.word	0x200004a8

08004554 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004558:	4802      	ldr	r0, [pc, #8]	@ (8004564 <USART1_IRQHandler+0x10>)
 800455a:	f004 fb25 	bl	8008ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	200004f0 	.word	0x200004f0

08004568 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800456c:	4802      	ldr	r0, [pc, #8]	@ (8004578 <USART2_IRQHandler+0x10>)
 800456e:	f004 fb1b 	bl	8008ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000538 	.word	0x20000538

0800457c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004580:	4802      	ldr	r0, [pc, #8]	@ (800458c <USART3_IRQHandler+0x10>)
 8004582:	f004 fb11 	bl	8008ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000580 	.word	0x20000580

08004590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return 1;
 8004594:	2301      	movs	r3, #1
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr

0800459e <_kill>:

int _kill(int pid, int sig)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045a8:	f006 f960 	bl	800a86c <__errno>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2216      	movs	r2, #22
 80045b0:	601a      	str	r2, [r3, #0]
  return -1;
 80045b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <_exit>:

void _exit (int status)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045c6:	f04f 31ff 	mov.w	r1, #4294967295
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7ff ffe7 	bl	800459e <_kill>
  while (1) {}    /* Make sure we hang here */
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <_exit+0x12>

080045d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	e00a      	b.n	80045fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045e6:	f3af 8000 	nop.w
 80045ea:	4601      	mov	r1, r0
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	60ba      	str	r2, [r7, #8]
 80045f2:	b2ca      	uxtb	r2, r1
 80045f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3301      	adds	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	dbf0      	blt.n	80045e6 <_read+0x12>
  }

  return len;
 8004604:	687b      	ldr	r3, [r7, #4]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e009      	b.n	8004634 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	60ba      	str	r2, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	4618      	mov	r0, r3
 800462a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3301      	adds	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	dbf1      	blt.n	8004620 <_write+0x12>
  }
  return len;
 800463c:	687b      	ldr	r3, [r7, #4]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <_close>:

int _close(int file)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr

0800465c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800466c:	605a      	str	r2, [r3, #4]
  return 0;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <_isatty>:

int _isatty(int file)
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004682:	2301      	movs	r3, #1
}
 8004684:	4618      	mov	r0, r3
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
	...

080046a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046b0:	4a14      	ldr	r2, [pc, #80]	@ (8004704 <_sbrk+0x5c>)
 80046b2:	4b15      	ldr	r3, [pc, #84]	@ (8004708 <_sbrk+0x60>)
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046bc:	4b13      	ldr	r3, [pc, #76]	@ (800470c <_sbrk+0x64>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d102      	bne.n	80046ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046c4:	4b11      	ldr	r3, [pc, #68]	@ (800470c <_sbrk+0x64>)
 80046c6:	4a12      	ldr	r2, [pc, #72]	@ (8004710 <_sbrk+0x68>)
 80046c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046ca:	4b10      	ldr	r3, [pc, #64]	@ (800470c <_sbrk+0x64>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d207      	bcs.n	80046e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046d8:	f006 f8c8 	bl	800a86c <__errno>
 80046dc:	4603      	mov	r3, r0
 80046de:	220c      	movs	r2, #12
 80046e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046e2:	f04f 33ff 	mov.w	r3, #4294967295
 80046e6:	e009      	b.n	80046fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046e8:	4b08      	ldr	r3, [pc, #32]	@ (800470c <_sbrk+0x64>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046ee:	4b07      	ldr	r3, [pc, #28]	@ (800470c <_sbrk+0x64>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	4a05      	ldr	r2, [pc, #20]	@ (800470c <_sbrk+0x64>)
 80046f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	20005000 	.word	0x20005000
 8004708:	00000400 	.word	0x00000400
 800470c:	2000096c 	.word	0x2000096c
 8004710:	20000ac0 	.word	0x20000ac0

08004714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	bc80      	pop	{r7}
 800471e:	4770      	bx	lr

08004720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004720:	f7ff fff8 	bl	8004714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004724:	480b      	ldr	r0, [pc, #44]	@ (8004754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004726:	490c      	ldr	r1, [pc, #48]	@ (8004758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004728:	4a0c      	ldr	r2, [pc, #48]	@ (800475c <LoopFillZerobss+0x16>)
  movs r3, #0
 800472a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800472c:	e002      	b.n	8004734 <LoopCopyDataInit>

0800472e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800472e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004732:	3304      	adds	r3, #4

08004734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004738:	d3f9      	bcc.n	800472e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800473a:	4a09      	ldr	r2, [pc, #36]	@ (8004760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800473c:	4c09      	ldr	r4, [pc, #36]	@ (8004764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004740:	e001      	b.n	8004746 <LoopFillZerobss>

08004742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004744:	3204      	adds	r2, #4

08004746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004748:	d3fb      	bcc.n	8004742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800474a:	f006 f895 	bl	800a878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800474e:	f7fd fffb 	bl	8002748 <main>
  bx lr
 8004752:	4770      	bx	lr
  ldr r0, =_sdata
 8004754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004758:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 800475c:	0800cd8c 	.word	0x0800cd8c
  ldr r2, =_sbss
 8004760:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8004764:	20000ac0 	.word	0x20000ac0

08004768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004768:	e7fe      	b.n	8004768 <ADC1_2_IRQHandler>
	...

0800476c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004770:	4b08      	ldr	r3, [pc, #32]	@ (8004794 <HAL_Init+0x28>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a07      	ldr	r2, [pc, #28]	@ (8004794 <HAL_Init+0x28>)
 8004776:	f043 0310 	orr.w	r3, r3, #16
 800477a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800477c:	2003      	movs	r0, #3
 800477e:	f000 fd9f 	bl	80052c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004782:	200f      	movs	r0, #15
 8004784:	f000 f808 	bl	8004798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004788:	f7ff fa88 	bl	8003c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40022000 	.word	0x40022000

08004798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80047a0:	4b12      	ldr	r3, [pc, #72]	@ (80047ec <HAL_InitTick+0x54>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4b12      	ldr	r3, [pc, #72]	@ (80047f0 <HAL_InitTick+0x58>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	4619      	mov	r1, r3
 80047aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fdb7 	bl	800532a <HAL_SYSTICK_Config>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00e      	b.n	80047e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2b0f      	cmp	r3, #15
 80047ca:	d80a      	bhi.n	80047e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047cc:	2200      	movs	r2, #0
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	f000 fd7f 	bl	80052d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047d8:	4a06      	ldr	r2, [pc, #24]	@ (80047f4 <HAL_InitTick+0x5c>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	e000      	b.n	80047e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000044 	.word	0x20000044
 80047f0:	2000004c 	.word	0x2000004c
 80047f4:	20000048 	.word	0x20000048

080047f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047fc:	4b05      	ldr	r3, [pc, #20]	@ (8004814 <HAL_IncTick+0x1c>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <HAL_IncTick+0x20>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4413      	add	r3, r2
 8004808:	4a03      	ldr	r2, [pc, #12]	@ (8004818 <HAL_IncTick+0x20>)
 800480a:	6013      	str	r3, [r2, #0]
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr
 8004814:	2000004c 	.word	0x2000004c
 8004818:	20000970 	.word	0x20000970

0800481c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800481c:	b480      	push	{r7}
 800481e:	af00      	add	r7, sp, #0
  return uwTick;
 8004820:	4b02      	ldr	r3, [pc, #8]	@ (800482c <HAL_GetTick+0x10>)
 8004822:	681b      	ldr	r3, [r3, #0]
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr
 800482c:	20000970 	.word	0x20000970

08004830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004838:	f7ff fff0 	bl	800481c <HAL_GetTick>
 800483c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d005      	beq.n	8004856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800484a:	4b0a      	ldr	r3, [pc, #40]	@ (8004874 <HAL_Delay+0x44>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004856:	bf00      	nop
 8004858:	f7ff ffe0 	bl	800481c <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d8f7      	bhi.n	8004858 <HAL_Delay+0x28>
  {
  }
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	2000004c 	.word	0x2000004c

08004878 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004880:	2300      	movs	r3, #0
 8004882:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e0be      	b.n	8004a18 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d109      	bne.n	80048bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7ff fa2a 	bl	8003d10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fbf1 	bl	80050a4 <ADC_ConversionStop_Disable>
 80048c2:	4603      	mov	r3, r0
 80048c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 8099 	bne.w	8004a06 <HAL_ADC_Init+0x18e>
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f040 8095 	bne.w	8004a06 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048e4:	f023 0302 	bic.w	r3, r3, #2
 80048e8:	f043 0202 	orr.w	r2, r3, #2
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048f8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	7b1b      	ldrb	r3, [r3, #12]
 80048fe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004900:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4313      	orrs	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004910:	d003      	beq.n	800491a <HAL_ADC_Init+0xa2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d102      	bne.n	8004920 <HAL_ADC_Init+0xa8>
 800491a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800491e:	e000      	b.n	8004922 <HAL_ADC_Init+0xaa>
 8004920:	2300      	movs	r3, #0
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	7d1b      	ldrb	r3, [r3, #20]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d119      	bne.n	8004964 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	7b1b      	ldrb	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	3b01      	subs	r3, #1
 800493e:	035a      	lsls	r2, r3, #13
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e00b      	b.n	8004964 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	f043 0220 	orr.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	f043 0201 	orr.w	r2, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	4b28      	ldr	r3, [pc, #160]	@ (8004a20 <HAL_ADC_Init+0x1a8>)
 8004980:	4013      	ands	r3, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6812      	ldr	r2, [r2, #0]
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	430b      	orrs	r3, r1
 800498a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004994:	d003      	beq.n	800499e <HAL_ADC_Init+0x126>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d104      	bne.n	80049a8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	051b      	lsls	r3, r3, #20
 80049a6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ae:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	4b18      	ldr	r3, [pc, #96]	@ (8004a24 <HAL_ADC_Init+0x1ac>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d10b      	bne.n	80049e4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	f043 0201 	orr.w	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049e2:	e018      	b.n	8004a16 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	f023 0312 	bic.w	r3, r3, #18
 80049ec:	f043 0210 	orr.w	r2, r3, #16
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004a04:	e007      	b.n	8004a16 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	f043 0210 	orr.w	r2, r3, #16
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	ffe1f7fd 	.word	0xffe1f7fd
 8004a24:	ff1f0efe 	.word	0xff1f0efe

08004a28 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_ADC_Start+0x1a>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e098      	b.n	8004b74 <HAL_ADC_Start+0x14c>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fad0 	bl	8004ff0 <ADC_Enable>
 8004a50:	4603      	mov	r3, r0
 8004a52:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f040 8087 	bne.w	8004b6a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a41      	ldr	r2, [pc, #260]	@ (8004b7c <HAL_ADC_Start+0x154>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d105      	bne.n	8004a86 <HAL_ADC_Start+0x5e>
 8004a7a:	4b41      	ldr	r3, [pc, #260]	@ (8004b80 <HAL_ADC_Start+0x158>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d115      	bne.n	8004ab2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d026      	beq.n	8004aee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004aa8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ab0:	e01d      	b.n	8004aee <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8004b80 <HAL_ADC_Start+0x158>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_ADC_Start+0xaa>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a2b      	ldr	r2, [pc, #172]	@ (8004b7c <HAL_ADC_Start+0x154>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d10d      	bne.n	8004aee <HAL_ADC_Start+0xc6>
 8004ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b80 <HAL_ADC_Start+0x158>)
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004ae6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	f023 0206 	bic.w	r2, r3, #6
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004b06:	e002      	b.n	8004b0e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f06f 0202 	mvn.w	r2, #2
 8004b1e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004b2a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004b2e:	d113      	bne.n	8004b58 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b34:	4a11      	ldr	r2, [pc, #68]	@ (8004b7c <HAL_ADC_Start+0x154>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d105      	bne.n	8004b46 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b3a:	4b11      	ldr	r3, [pc, #68]	@ (8004b80 <HAL_ADC_Start+0x158>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d108      	bne.n	8004b58 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004b54:	609a      	str	r2, [r3, #8]
 8004b56:	e00c      	b.n	8004b72 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	e003      	b.n	8004b72 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40012800 	.word	0x40012800
 8004b80:	40012400 	.word	0x40012400

08004b84 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_ADC_Stop+0x1a>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e01a      	b.n	8004bd4 <HAL_ADC_Stop+0x50>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa7c 	bl	80050a4 <ADC_ConversionStop_Disable>
 8004bac:	4603      	mov	r3, r0
 8004bae:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d109      	bne.n	8004bca <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004bbe:	f023 0301 	bic.w	r3, r3, #1
 8004bc2:	f043 0201 	orr.w	r2, r3, #1
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004bdc:	b590      	push	{r4, r7, lr}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004bf2:	f7ff fe13 	bl	800481c <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00b      	beq.n	8004c1e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	f043 0220 	orr.w	r2, r3, #32
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e0d3      	b.n	8004dc6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d131      	bne.n	8004c90 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d12a      	bne.n	8004c90 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c3a:	e021      	b.n	8004c80 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c42:	d01d      	beq.n	8004c80 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d007      	beq.n	8004c5a <HAL_ADC_PollForConversion+0x7e>
 8004c4a:	f7ff fde7 	bl	800481c <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d212      	bcs.n	8004c80 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10b      	bne.n	8004c80 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e0a2      	b.n	8004dc6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0d6      	beq.n	8004c3c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004c8e:	e070      	b.n	8004d72 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004c90:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd0 <HAL_ADC_PollForConversion+0x1f4>)
 8004c92:	681c      	ldr	r4, [r3, #0]
 8004c94:	2002      	movs	r0, #2
 8004c96:	f002 fcc7 	bl	8007628 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6919      	ldr	r1, [r3, #16]
 8004ca6:	4b4b      	ldr	r3, [pc, #300]	@ (8004dd4 <HAL_ADC_PollForConversion+0x1f8>)
 8004ca8:	400b      	ands	r3, r1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d118      	bne.n	8004ce0 <HAL_ADC_PollForConversion+0x104>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68d9      	ldr	r1, [r3, #12]
 8004cb4:	4b48      	ldr	r3, [pc, #288]	@ (8004dd8 <HAL_ADC_PollForConversion+0x1fc>)
 8004cb6:	400b      	ands	r3, r1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d111      	bne.n	8004ce0 <HAL_ADC_PollForConversion+0x104>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6919      	ldr	r1, [r3, #16]
 8004cc2:	4b46      	ldr	r3, [pc, #280]	@ (8004ddc <HAL_ADC_PollForConversion+0x200>)
 8004cc4:	400b      	ands	r3, r1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d108      	bne.n	8004cdc <HAL_ADC_PollForConversion+0x100>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68d9      	ldr	r1, [r3, #12]
 8004cd0:	4b43      	ldr	r3, [pc, #268]	@ (8004de0 <HAL_ADC_PollForConversion+0x204>)
 8004cd2:	400b      	ands	r3, r1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d101      	bne.n	8004cdc <HAL_ADC_PollForConversion+0x100>
 8004cd8:	2314      	movs	r3, #20
 8004cda:	e020      	b.n	8004d1e <HAL_ADC_PollForConversion+0x142>
 8004cdc:	2329      	movs	r3, #41	@ 0x29
 8004cde:	e01e      	b.n	8004d1e <HAL_ADC_PollForConversion+0x142>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6919      	ldr	r1, [r3, #16]
 8004ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8004ddc <HAL_ADC_PollForConversion+0x200>)
 8004ce8:	400b      	ands	r3, r1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d106      	bne.n	8004cfc <HAL_ADC_PollForConversion+0x120>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68d9      	ldr	r1, [r3, #12]
 8004cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8004de0 <HAL_ADC_PollForConversion+0x204>)
 8004cf6:	400b      	ands	r3, r1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00d      	beq.n	8004d18 <HAL_ADC_PollForConversion+0x13c>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6919      	ldr	r1, [r3, #16]
 8004d02:	4b38      	ldr	r3, [pc, #224]	@ (8004de4 <HAL_ADC_PollForConversion+0x208>)
 8004d04:	400b      	ands	r3, r1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d108      	bne.n	8004d1c <HAL_ADC_PollForConversion+0x140>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68d9      	ldr	r1, [r3, #12]
 8004d10:	4b34      	ldr	r3, [pc, #208]	@ (8004de4 <HAL_ADC_PollForConversion+0x208>)
 8004d12:	400b      	ands	r3, r1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_ADC_PollForConversion+0x140>
 8004d18:	2354      	movs	r3, #84	@ 0x54
 8004d1a:	e000      	b.n	8004d1e <HAL_ADC_PollForConversion+0x142>
 8004d1c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d24:	e021      	b.n	8004d6a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d01a      	beq.n	8004d64 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HAL_ADC_PollForConversion+0x168>
 8004d34:	f7ff fd72 	bl	800481c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d20f      	bcs.n	8004d64 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d90b      	bls.n	8004d64 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	f043 0204 	orr.w	r2, r3, #4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e030      	b.n	8004dc6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d8d9      	bhi.n	8004d26 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0212 	mvn.w	r2, #18
 8004d7a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004d92:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004d96:	d115      	bne.n	8004dc4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d111      	bne.n	8004dc4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	f043 0201 	orr.w	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	371c      	adds	r7, #28
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd90      	pop	{r4, r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20000044 	.word	0x20000044
 8004dd4:	24924924 	.word	0x24924924
 8004dd8:	00924924 	.word	0x00924924
 8004ddc:	12492492 	.word	0x12492492
 8004de0:	00492492 	.word	0x00492492
 8004de4:	00249249 	.word	0x00249249

08004de8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d101      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x20>
 8004e1c:	2302      	movs	r3, #2
 8004e1e:	e0dc      	b.n	8004fda <HAL_ADC_ConfigChannel+0x1da>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b06      	cmp	r3, #6
 8004e2e:	d81c      	bhi.n	8004e6a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	3b05      	subs	r3, #5
 8004e42:	221f      	movs	r2, #31
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	43db      	mvns	r3, r3
 8004e4a:	4019      	ands	r1, r3
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	3b05      	subs	r3, #5
 8004e5c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e68:	e03c      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b0c      	cmp	r3, #12
 8004e70:	d81c      	bhi.n	8004eac <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	3b23      	subs	r3, #35	@ 0x23
 8004e84:	221f      	movs	r2, #31
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	4019      	ands	r1, r3
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3b23      	subs	r3, #35	@ 0x23
 8004e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eaa:	e01b      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	3b41      	subs	r3, #65	@ 0x41
 8004ebe:	221f      	movs	r2, #31
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	4019      	ands	r1, r3
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3b41      	subs	r3, #65	@ 0x41
 8004ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b09      	cmp	r3, #9
 8004eea:	d91c      	bls.n	8004f26 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68d9      	ldr	r1, [r3, #12]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	4413      	add	r3, r2
 8004efc:	3b1e      	subs	r3, #30
 8004efe:	2207      	movs	r2, #7
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	4019      	ands	r1, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6898      	ldr	r0, [r3, #8]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	3b1e      	subs	r3, #30
 8004f18:	fa00 f203 	lsl.w	r2, r0, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	e019      	b.n	8004f5a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6919      	ldr	r1, [r3, #16]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4413      	add	r3, r2
 8004f36:	2207      	movs	r2, #7
 8004f38:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3c:	43db      	mvns	r3, r3
 8004f3e:	4019      	ands	r1, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	6898      	ldr	r0, [r3, #8]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	4413      	add	r3, r2
 8004f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d003      	beq.n	8004f6a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f66:	2b11      	cmp	r3, #17
 8004f68:	d132      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe4 <HAL_ADC_ConfigChannel+0x1e4>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d125      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d126      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004f90:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d11a      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f9a:	4b13      	ldr	r3, [pc, #76]	@ (8004fe8 <HAL_ADC_ConfigChannel+0x1e8>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a13      	ldr	r2, [pc, #76]	@ (8004fec <HAL_ADC_ConfigChannel+0x1ec>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	0c9a      	lsrs	r2, r3, #18
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fb0:	e002      	b.n	8004fb8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f9      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x1b2>
 8004fbe:	e007      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	f043 0220 	orr.w	r2, r3, #32
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr
 8004fe4:	40012400 	.word	0x40012400
 8004fe8:	20000044 	.word	0x20000044
 8004fec:	431bde83 	.word	0x431bde83

08004ff0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d040      	beq.n	8005090 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f042 0201 	orr.w	r2, r2, #1
 800501c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800501e:	4b1f      	ldr	r3, [pc, #124]	@ (800509c <ADC_Enable+0xac>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1f      	ldr	r2, [pc, #124]	@ (80050a0 <ADC_Enable+0xb0>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	0c9b      	lsrs	r3, r3, #18
 800502a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800502c:	e002      	b.n	8005034 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	3b01      	subs	r3, #1
 8005032:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f9      	bne.n	800502e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800503a:	f7ff fbef 	bl	800481c <HAL_GetTick>
 800503e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005040:	e01f      	b.n	8005082 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005042:	f7ff fbeb 	bl	800481c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d918      	bls.n	8005082 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b01      	cmp	r3, #1
 800505c:	d011      	beq.n	8005082 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	f043 0210 	orr.w	r2, r3, #16
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506e:	f043 0201 	orr.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e007      	b.n	8005092 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b01      	cmp	r3, #1
 800508e:	d1d8      	bne.n	8005042 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000044 	.word	0x20000044
 80050a0:	431bde83 	.word	0x431bde83

080050a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d12e      	bne.n	800511c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0201 	bic.w	r2, r2, #1
 80050cc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80050ce:	f7ff fba5 	bl	800481c <HAL_GetTick>
 80050d2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80050d4:	e01b      	b.n	800510e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80050d6:	f7ff fba1 	bl	800481c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d914      	bls.n	800510e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d10d      	bne.n	800510e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f6:	f043 0210 	orr.w	r2, r3, #16
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005102:	f043 0201 	orr.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e007      	b.n	800511e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 0301 	and.w	r3, r3, #1
 8005118:	2b01      	cmp	r3, #1
 800511a:	d0dc      	beq.n	80050d6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <__NVIC_SetPriorityGrouping>:
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005138:	4b0c      	ldr	r3, [pc, #48]	@ (800516c <__NVIC_SetPriorityGrouping+0x44>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005144:	4013      	ands	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005150:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800515a:	4a04      	ldr	r2, [pc, #16]	@ (800516c <__NVIC_SetPriorityGrouping+0x44>)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	60d3      	str	r3, [r2, #12]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	e000ed00 	.word	0xe000ed00

08005170 <__NVIC_GetPriorityGrouping>:
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005174:	4b04      	ldr	r3, [pc, #16]	@ (8005188 <__NVIC_GetPriorityGrouping+0x18>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	f003 0307 	and.w	r3, r3, #7
}
 800517e:	4618      	mov	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <__NVIC_EnableIRQ>:
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	db0b      	blt.n	80051b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	f003 021f 	and.w	r2, r3, #31
 80051a4:	4906      	ldr	r1, [pc, #24]	@ (80051c0 <__NVIC_EnableIRQ+0x34>)
 80051a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2001      	movs	r0, #1
 80051ae:	fa00 f202 	lsl.w	r2, r0, r2
 80051b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr
 80051c0:	e000e100 	.word	0xe000e100

080051c4 <__NVIC_SetPriority>:
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	4603      	mov	r3, r0
 80051cc:	6039      	str	r1, [r7, #0]
 80051ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	db0a      	blt.n	80051ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	490c      	ldr	r1, [pc, #48]	@ (8005210 <__NVIC_SetPriority+0x4c>)
 80051de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e2:	0112      	lsls	r2, r2, #4
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	440b      	add	r3, r1
 80051e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80051ec:	e00a      	b.n	8005204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	4908      	ldr	r1, [pc, #32]	@ (8005214 <__NVIC_SetPriority+0x50>)
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	3b04      	subs	r3, #4
 80051fc:	0112      	lsls	r2, r2, #4
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	440b      	add	r3, r1
 8005202:	761a      	strb	r2, [r3, #24]
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	e000e100 	.word	0xe000e100
 8005214:	e000ed00 	.word	0xe000ed00

08005218 <NVIC_EncodePriority>:
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	@ 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f1c3 0307 	rsb	r3, r3, #7
 8005232:	2b04      	cmp	r3, #4
 8005234:	bf28      	it	cs
 8005236:	2304      	movcs	r3, #4
 8005238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3304      	adds	r3, #4
 800523e:	2b06      	cmp	r3, #6
 8005240:	d902      	bls.n	8005248 <NVIC_EncodePriority+0x30>
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3b03      	subs	r3, #3
 8005246:	e000      	b.n	800524a <NVIC_EncodePriority+0x32>
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	fa02 f303 	lsl.w	r3, r2, r3
 8005256:	43da      	mvns	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	401a      	ands	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005260:	f04f 31ff 	mov.w	r1, #4294967295
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	fa01 f303 	lsl.w	r3, r1, r3
 800526a:	43d9      	mvns	r1, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005270:	4313      	orrs	r3, r2
}
 8005272:	4618      	mov	r0, r3
 8005274:	3724      	adds	r7, #36	@ 0x24
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3b01      	subs	r3, #1
 8005288:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800528c:	d301      	bcc.n	8005292 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800528e:	2301      	movs	r3, #1
 8005290:	e00f      	b.n	80052b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005292:	4a0a      	ldr	r2, [pc, #40]	@ (80052bc <SysTick_Config+0x40>)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3b01      	subs	r3, #1
 8005298:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800529a:	210f      	movs	r1, #15
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	f7ff ff90 	bl	80051c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052a4:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <SysTick_Config+0x40>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052aa:	4b04      	ldr	r3, [pc, #16]	@ (80052bc <SysTick_Config+0x40>)
 80052ac:	2207      	movs	r2, #7
 80052ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	e000e010 	.word	0xe000e010

080052c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ff2d 	bl	8005128 <__NVIC_SetPriorityGrouping>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b086      	sub	sp, #24
 80052da:	af00      	add	r7, sp, #0
 80052dc:	4603      	mov	r3, r0
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
 80052e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052e8:	f7ff ff42 	bl	8005170 <__NVIC_GetPriorityGrouping>
 80052ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	68b9      	ldr	r1, [r7, #8]
 80052f2:	6978      	ldr	r0, [r7, #20]
 80052f4:	f7ff ff90 	bl	8005218 <NVIC_EncodePriority>
 80052f8:	4602      	mov	r2, r0
 80052fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052fe:	4611      	mov	r1, r2
 8005300:	4618      	mov	r0, r3
 8005302:	f7ff ff5f 	bl	80051c4 <__NVIC_SetPriority>
}
 8005306:	bf00      	nop
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b082      	sub	sp, #8
 8005312:	af00      	add	r7, sp, #0
 8005314:	4603      	mov	r3, r0
 8005316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff ff35 	bl	800518c <__NVIC_EnableIRQ>
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b082      	sub	sp, #8
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f7ff ffa2 	bl	800527c <SysTick_Config>
 8005338:	4603      	mov	r3, r0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e043      	b.n	80053e2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	4b22      	ldr	r3, [pc, #136]	@ (80053ec <HAL_DMA_Init+0xa8>)
 8005362:	4413      	add	r3, r2
 8005364:	4a22      	ldr	r2, [pc, #136]	@ (80053f0 <HAL_DMA_Init+0xac>)
 8005366:	fba2 2303 	umull	r2, r3, r2, r3
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	009a      	lsls	r2, r3, #2
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a1f      	ldr	r2, [pc, #124]	@ (80053f4 <HAL_DMA_Init+0xb0>)
 8005376:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800538e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005392:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800539c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	bffdfff8 	.word	0xbffdfff8
 80053f0:	cccccccd 	.word	0xcccccccd
 80053f4:	40020000 	.word	0x40020000

080053f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005406:	2300      	movs	r3, #0
 8005408:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_DMA_Start_IT+0x20>
 8005414:	2302      	movs	r3, #2
 8005416:	e04b      	b.n	80054b0 <HAL_DMA_Start_IT+0xb8>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b01      	cmp	r3, #1
 800542a:	d13a      	bne.n	80054a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f9f6 	bl	8005842 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 020e 	orr.w	r2, r2, #14
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	e00f      	b.n	8005490 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0204 	bic.w	r2, r2, #4
 800547e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 020a 	orr.w	r2, r2, #10
 800548e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e005      	b.n	80054ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80054aa:	2302      	movs	r3, #2
 80054ac:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80054ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d008      	beq.n	80054e2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2204      	movs	r2, #4
 80054d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e020      	b.n	8005524 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f022 020e 	bic.w	r2, r2, #14
 80054f0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0201 	bic.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800550a:	2101      	movs	r1, #1
 800550c:	fa01 f202 	lsl.w	r2, r1, r2
 8005510:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8005522:	7bfb      	ldrb	r3, [r7, #15]
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	bc80      	pop	{r7}
 800552c:	4770      	bx	lr
	...

08005530 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d005      	beq.n	8005554 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
 8005552:	e051      	b.n	80055f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 020e 	bic.w	r2, r2, #14
 8005562:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a22      	ldr	r2, [pc, #136]	@ (8005604 <HAL_DMA_Abort_IT+0xd4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d029      	beq.n	80055d2 <HAL_DMA_Abort_IT+0xa2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a21      	ldr	r2, [pc, #132]	@ (8005608 <HAL_DMA_Abort_IT+0xd8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d022      	beq.n	80055ce <HAL_DMA_Abort_IT+0x9e>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a1f      	ldr	r2, [pc, #124]	@ (800560c <HAL_DMA_Abort_IT+0xdc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01a      	beq.n	80055c8 <HAL_DMA_Abort_IT+0x98>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1e      	ldr	r2, [pc, #120]	@ (8005610 <HAL_DMA_Abort_IT+0xe0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d012      	beq.n	80055c2 <HAL_DMA_Abort_IT+0x92>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <HAL_DMA_Abort_IT+0xe4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00a      	beq.n	80055bc <HAL_DMA_Abort_IT+0x8c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005618 <HAL_DMA_Abort_IT+0xe8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d102      	bne.n	80055b6 <HAL_DMA_Abort_IT+0x86>
 80055b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80055b4:	e00e      	b.n	80055d4 <HAL_DMA_Abort_IT+0xa4>
 80055b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ba:	e00b      	b.n	80055d4 <HAL_DMA_Abort_IT+0xa4>
 80055bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055c0:	e008      	b.n	80055d4 <HAL_DMA_Abort_IT+0xa4>
 80055c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055c6:	e005      	b.n	80055d4 <HAL_DMA_Abort_IT+0xa4>
 80055c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055cc:	e002      	b.n	80055d4 <HAL_DMA_Abort_IT+0xa4>
 80055ce:	2310      	movs	r3, #16
 80055d0:	e000      	b.n	80055d4 <HAL_DMA_Abort_IT+0xa4>
 80055d2:	2301      	movs	r3, #1
 80055d4:	4a11      	ldr	r2, [pc, #68]	@ (800561c <HAL_DMA_Abort_IT+0xec>)
 80055d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
    } 
  }
  return status;
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40020008 	.word	0x40020008
 8005608:	4002001c 	.word	0x4002001c
 800560c:	40020030 	.word	0x40020030
 8005610:	40020044 	.word	0x40020044
 8005614:	40020058 	.word	0x40020058
 8005618:	4002006c 	.word	0x4002006c
 800561c:	40020000 	.word	0x40020000

08005620 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	2204      	movs	r2, #4
 800563e:	409a      	lsls	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d04f      	beq.n	80056e8 <HAL_DMA_IRQHandler+0xc8>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04a      	beq.n	80056e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0320 	and.w	r3, r3, #32
 800565c:	2b00      	cmp	r3, #0
 800565e:	d107      	bne.n	8005670 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 0204 	bic.w	r2, r2, #4
 800566e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a66      	ldr	r2, [pc, #408]	@ (8005810 <HAL_DMA_IRQHandler+0x1f0>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d029      	beq.n	80056ce <HAL_DMA_IRQHandler+0xae>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a65      	ldr	r2, [pc, #404]	@ (8005814 <HAL_DMA_IRQHandler+0x1f4>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d022      	beq.n	80056ca <HAL_DMA_IRQHandler+0xaa>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a63      	ldr	r2, [pc, #396]	@ (8005818 <HAL_DMA_IRQHandler+0x1f8>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01a      	beq.n	80056c4 <HAL_DMA_IRQHandler+0xa4>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a62      	ldr	r2, [pc, #392]	@ (800581c <HAL_DMA_IRQHandler+0x1fc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d012      	beq.n	80056be <HAL_DMA_IRQHandler+0x9e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a60      	ldr	r2, [pc, #384]	@ (8005820 <HAL_DMA_IRQHandler+0x200>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d00a      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x98>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a5f      	ldr	r2, [pc, #380]	@ (8005824 <HAL_DMA_IRQHandler+0x204>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d102      	bne.n	80056b2 <HAL_DMA_IRQHandler+0x92>
 80056ac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80056b0:	e00e      	b.n	80056d0 <HAL_DMA_IRQHandler+0xb0>
 80056b2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80056b6:	e00b      	b.n	80056d0 <HAL_DMA_IRQHandler+0xb0>
 80056b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80056bc:	e008      	b.n	80056d0 <HAL_DMA_IRQHandler+0xb0>
 80056be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80056c2:	e005      	b.n	80056d0 <HAL_DMA_IRQHandler+0xb0>
 80056c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056c8:	e002      	b.n	80056d0 <HAL_DMA_IRQHandler+0xb0>
 80056ca:	2340      	movs	r3, #64	@ 0x40
 80056cc:	e000      	b.n	80056d0 <HAL_DMA_IRQHandler+0xb0>
 80056ce:	2304      	movs	r3, #4
 80056d0:	4a55      	ldr	r2, [pc, #340]	@ (8005828 <HAL_DMA_IRQHandler+0x208>)
 80056d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8094 	beq.w	8005806 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80056e6:	e08e      	b.n	8005806 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ec:	2202      	movs	r2, #2
 80056ee:	409a      	lsls	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d056      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x186>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d051      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 020a 	bic.w	r2, r2, #10
 800571e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a38      	ldr	r2, [pc, #224]	@ (8005810 <HAL_DMA_IRQHandler+0x1f0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d029      	beq.n	8005786 <HAL_DMA_IRQHandler+0x166>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a37      	ldr	r2, [pc, #220]	@ (8005814 <HAL_DMA_IRQHandler+0x1f4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d022      	beq.n	8005782 <HAL_DMA_IRQHandler+0x162>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a35      	ldr	r2, [pc, #212]	@ (8005818 <HAL_DMA_IRQHandler+0x1f8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d01a      	beq.n	800577c <HAL_DMA_IRQHandler+0x15c>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a34      	ldr	r2, [pc, #208]	@ (800581c <HAL_DMA_IRQHandler+0x1fc>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d012      	beq.n	8005776 <HAL_DMA_IRQHandler+0x156>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a32      	ldr	r2, [pc, #200]	@ (8005820 <HAL_DMA_IRQHandler+0x200>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d00a      	beq.n	8005770 <HAL_DMA_IRQHandler+0x150>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a31      	ldr	r2, [pc, #196]	@ (8005824 <HAL_DMA_IRQHandler+0x204>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d102      	bne.n	800576a <HAL_DMA_IRQHandler+0x14a>
 8005764:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005768:	e00e      	b.n	8005788 <HAL_DMA_IRQHandler+0x168>
 800576a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800576e:	e00b      	b.n	8005788 <HAL_DMA_IRQHandler+0x168>
 8005770:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005774:	e008      	b.n	8005788 <HAL_DMA_IRQHandler+0x168>
 8005776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800577a:	e005      	b.n	8005788 <HAL_DMA_IRQHandler+0x168>
 800577c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005780:	e002      	b.n	8005788 <HAL_DMA_IRQHandler+0x168>
 8005782:	2320      	movs	r3, #32
 8005784:	e000      	b.n	8005788 <HAL_DMA_IRQHandler+0x168>
 8005786:	2302      	movs	r3, #2
 8005788:	4a27      	ldr	r2, [pc, #156]	@ (8005828 <HAL_DMA_IRQHandler+0x208>)
 800578a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005798:	2b00      	cmp	r3, #0
 800579a:	d034      	beq.n	8005806 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80057a4:	e02f      	b.n	8005806 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	2208      	movs	r2, #8
 80057ac:	409a      	lsls	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4013      	ands	r3, r2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d028      	beq.n	8005808 <HAL_DMA_IRQHandler+0x1e8>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d023      	beq.n	8005808 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 020e 	bic.w	r2, r2, #14
 80057ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d8:	2101      	movs	r1, #1
 80057da:	fa01 f202 	lsl.w	r2, r1, r2
 80057de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d004      	beq.n	8005808 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
    }
  }
  return;
 8005806:	bf00      	nop
 8005808:	bf00      	nop
}
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	40020008 	.word	0x40020008
 8005814:	4002001c 	.word	0x4002001c
 8005818:	40020030 	.word	0x40020030
 800581c:	40020044 	.word	0x40020044
 8005820:	40020058 	.word	0x40020058
 8005824:	4002006c 	.word	0x4002006c
 8005828:	40020000 	.word	0x40020000

0800582c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8005838:	4618      	mov	r0, r3
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	bc80      	pop	{r7}
 8005840:	4770      	bx	lr

08005842 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005842:	b480      	push	{r7}
 8005844:	b085      	sub	sp, #20
 8005846:	af00      	add	r7, sp, #0
 8005848:	60f8      	str	r0, [r7, #12]
 800584a:	60b9      	str	r1, [r7, #8]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005858:	2101      	movs	r1, #1
 800585a:	fa01 f202 	lsl.w	r2, r1, r2
 800585e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b10      	cmp	r3, #16
 800586e:	d108      	bne.n	8005882 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005880:	e007      	b.n	8005892 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800589c:	b480      	push	{r7}
 800589e:	b08b      	sub	sp, #44	@ 0x2c
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80058aa:	2300      	movs	r3, #0
 80058ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058ae:	e169      	b.n	8005b84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80058b0:	2201      	movs	r2, #1
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	4013      	ands	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	f040 8158 	bne.w	8005b7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4a9a      	ldr	r2, [pc, #616]	@ (8005b3c <HAL_GPIO_Init+0x2a0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d05e      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 80058d8:	4a98      	ldr	r2, [pc, #608]	@ (8005b3c <HAL_GPIO_Init+0x2a0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d875      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 80058de:	4a98      	ldr	r2, [pc, #608]	@ (8005b40 <HAL_GPIO_Init+0x2a4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d058      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 80058e4:	4a96      	ldr	r2, [pc, #600]	@ (8005b40 <HAL_GPIO_Init+0x2a4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d86f      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 80058ea:	4a96      	ldr	r2, [pc, #600]	@ (8005b44 <HAL_GPIO_Init+0x2a8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d052      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 80058f0:	4a94      	ldr	r2, [pc, #592]	@ (8005b44 <HAL_GPIO_Init+0x2a8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d869      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 80058f6:	4a94      	ldr	r2, [pc, #592]	@ (8005b48 <HAL_GPIO_Init+0x2ac>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d04c      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 80058fc:	4a92      	ldr	r2, [pc, #584]	@ (8005b48 <HAL_GPIO_Init+0x2ac>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d863      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 8005902:	4a92      	ldr	r2, [pc, #584]	@ (8005b4c <HAL_GPIO_Init+0x2b0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d046      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
 8005908:	4a90      	ldr	r2, [pc, #576]	@ (8005b4c <HAL_GPIO_Init+0x2b0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d85d      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 800590e:	2b12      	cmp	r3, #18
 8005910:	d82a      	bhi.n	8005968 <HAL_GPIO_Init+0xcc>
 8005912:	2b12      	cmp	r3, #18
 8005914:	d859      	bhi.n	80059ca <HAL_GPIO_Init+0x12e>
 8005916:	a201      	add	r2, pc, #4	@ (adr r2, 800591c <HAL_GPIO_Init+0x80>)
 8005918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591c:	08005997 	.word	0x08005997
 8005920:	08005971 	.word	0x08005971
 8005924:	08005983 	.word	0x08005983
 8005928:	080059c5 	.word	0x080059c5
 800592c:	080059cb 	.word	0x080059cb
 8005930:	080059cb 	.word	0x080059cb
 8005934:	080059cb 	.word	0x080059cb
 8005938:	080059cb 	.word	0x080059cb
 800593c:	080059cb 	.word	0x080059cb
 8005940:	080059cb 	.word	0x080059cb
 8005944:	080059cb 	.word	0x080059cb
 8005948:	080059cb 	.word	0x080059cb
 800594c:	080059cb 	.word	0x080059cb
 8005950:	080059cb 	.word	0x080059cb
 8005954:	080059cb 	.word	0x080059cb
 8005958:	080059cb 	.word	0x080059cb
 800595c:	080059cb 	.word	0x080059cb
 8005960:	08005979 	.word	0x08005979
 8005964:	0800598d 	.word	0x0800598d
 8005968:	4a79      	ldr	r2, [pc, #484]	@ (8005b50 <HAL_GPIO_Init+0x2b4>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d013      	beq.n	8005996 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800596e:	e02c      	b.n	80059ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	623b      	str	r3, [r7, #32]
          break;
 8005976:	e029      	b.n	80059cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	3304      	adds	r3, #4
 800597e:	623b      	str	r3, [r7, #32]
          break;
 8005980:	e024      	b.n	80059cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	3308      	adds	r3, #8
 8005988:	623b      	str	r3, [r7, #32]
          break;
 800598a:	e01f      	b.n	80059cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	330c      	adds	r3, #12
 8005992:	623b      	str	r3, [r7, #32]
          break;
 8005994:	e01a      	b.n	80059cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d102      	bne.n	80059a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800599e:	2304      	movs	r3, #4
 80059a0:	623b      	str	r3, [r7, #32]
          break;
 80059a2:	e013      	b.n	80059cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d105      	bne.n	80059b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80059ac:	2308      	movs	r3, #8
 80059ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	611a      	str	r2, [r3, #16]
          break;
 80059b6:	e009      	b.n	80059cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80059b8:	2308      	movs	r3, #8
 80059ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69fa      	ldr	r2, [r7, #28]
 80059c0:	615a      	str	r2, [r3, #20]
          break;
 80059c2:	e003      	b.n	80059cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80059c4:	2300      	movs	r3, #0
 80059c6:	623b      	str	r3, [r7, #32]
          break;
 80059c8:	e000      	b.n	80059cc <HAL_GPIO_Init+0x130>
          break;
 80059ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	2bff      	cmp	r3, #255	@ 0xff
 80059d0:	d801      	bhi.n	80059d6 <HAL_GPIO_Init+0x13a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	e001      	b.n	80059da <HAL_GPIO_Init+0x13e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3304      	adds	r3, #4
 80059da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2bff      	cmp	r3, #255	@ 0xff
 80059e0:	d802      	bhi.n	80059e8 <HAL_GPIO_Init+0x14c>
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	e002      	b.n	80059ee <HAL_GPIO_Init+0x152>
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	3b08      	subs	r3, #8
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	210f      	movs	r1, #15
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	fa01 f303 	lsl.w	r3, r1, r3
 80059fc:	43db      	mvns	r3, r3
 80059fe:	401a      	ands	r2, r3
 8005a00:	6a39      	ldr	r1, [r7, #32]
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 80b1 	beq.w	8005b7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005a1c:	4b4d      	ldr	r3, [pc, #308]	@ (8005b54 <HAL_GPIO_Init+0x2b8>)
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	4a4c      	ldr	r2, [pc, #304]	@ (8005b54 <HAL_GPIO_Init+0x2b8>)
 8005a22:	f043 0301 	orr.w	r3, r3, #1
 8005a26:	6193      	str	r3, [r2, #24]
 8005a28:	4b4a      	ldr	r3, [pc, #296]	@ (8005b54 <HAL_GPIO_Init+0x2b8>)
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	60bb      	str	r3, [r7, #8]
 8005a32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005a34:	4a48      	ldr	r2, [pc, #288]	@ (8005b58 <HAL_GPIO_Init+0x2bc>)
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	3302      	adds	r3, #2
 8005a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	220f      	movs	r2, #15
 8005a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a50:	43db      	mvns	r3, r3
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4013      	ands	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a40      	ldr	r2, [pc, #256]	@ (8005b5c <HAL_GPIO_Init+0x2c0>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <HAL_GPIO_Init+0x1ec>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a3f      	ldr	r2, [pc, #252]	@ (8005b60 <HAL_GPIO_Init+0x2c4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00d      	beq.n	8005a84 <HAL_GPIO_Init+0x1e8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3e      	ldr	r2, [pc, #248]	@ (8005b64 <HAL_GPIO_Init+0x2c8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <HAL_GPIO_Init+0x1e4>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3d      	ldr	r2, [pc, #244]	@ (8005b68 <HAL_GPIO_Init+0x2cc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d101      	bne.n	8005a7c <HAL_GPIO_Init+0x1e0>
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e006      	b.n	8005a8a <HAL_GPIO_Init+0x1ee>
 8005a7c:	2304      	movs	r3, #4
 8005a7e:	e004      	b.n	8005a8a <HAL_GPIO_Init+0x1ee>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e002      	b.n	8005a8a <HAL_GPIO_Init+0x1ee>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_GPIO_Init+0x1ee>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a8c:	f002 0203 	and.w	r2, r2, #3
 8005a90:	0092      	lsls	r2, r2, #2
 8005a92:	4093      	lsls	r3, r2
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005a9a:	492f      	ldr	r1, [pc, #188]	@ (8005b58 <HAL_GPIO_Init+0x2bc>)
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	089b      	lsrs	r3, r3, #2
 8005aa0:	3302      	adds	r3, #2
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d006      	beq.n	8005ac2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	492c      	ldr	r1, [pc, #176]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	608b      	str	r3, [r1, #8]
 8005ac0:	e006      	b.n	8005ad0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	4928      	ldr	r1, [pc, #160]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d006      	beq.n	8005aea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005adc:	4b23      	ldr	r3, [pc, #140]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	4922      	ldr	r1, [pc, #136]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	60cb      	str	r3, [r1, #12]
 8005ae8:	e006      	b.n	8005af8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005aea:	4b20      	ldr	r3, [pc, #128]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	43db      	mvns	r3, r3
 8005af2:	491e      	ldr	r1, [pc, #120]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d006      	beq.n	8005b12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005b04:	4b19      	ldr	r3, [pc, #100]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	4918      	ldr	r1, [pc, #96]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	604b      	str	r3, [r1, #4]
 8005b10:	e006      	b.n	8005b20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005b12:	4b16      	ldr	r3, [pc, #88]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	4914      	ldr	r1, [pc, #80]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d021      	beq.n	8005b70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	490e      	ldr	r1, [pc, #56]	@ (8005b6c <HAL_GPIO_Init+0x2d0>)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	600b      	str	r3, [r1, #0]
 8005b38:	e021      	b.n	8005b7e <HAL_GPIO_Init+0x2e2>
 8005b3a:	bf00      	nop
 8005b3c:	10320000 	.word	0x10320000
 8005b40:	10310000 	.word	0x10310000
 8005b44:	10220000 	.word	0x10220000
 8005b48:	10210000 	.word	0x10210000
 8005b4c:	10120000 	.word	0x10120000
 8005b50:	10110000 	.word	0x10110000
 8005b54:	40021000 	.word	0x40021000
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40010800 	.word	0x40010800
 8005b60:	40010c00 	.word	0x40010c00
 8005b64:	40011000 	.word	0x40011000
 8005b68:	40011400 	.word	0x40011400
 8005b6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <HAL_GPIO_Init+0x304>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	43db      	mvns	r3, r3
 8005b78:	4909      	ldr	r1, [pc, #36]	@ (8005ba0 <HAL_GPIO_Init+0x304>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	3301      	adds	r3, #1
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f47f ae8e 	bne.w	80058b0 <HAL_GPIO_Init+0x14>
  }
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	372c      	adds	r7, #44	@ 0x2c
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bc80      	pop	{r7}
 8005b9e:	4770      	bx	lr
 8005ba0:	40010400 	.word	0x40010400

08005ba4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	887b      	ldrh	r3, [r7, #2]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d002      	beq.n	8005bc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	73fb      	strb	r3, [r7, #15]
 8005bc0:	e001      	b.n	8005bc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3714      	adds	r7, #20
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bc80      	pop	{r7}
 8005bd0:	4770      	bx	lr

08005bd2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd2:	b480      	push	{r7}
 8005bd4:	b083      	sub	sp, #12
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	807b      	strh	r3, [r7, #2]
 8005bde:	4613      	mov	r3, r2
 8005be0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005be2:	787b      	ldrb	r3, [r7, #1]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005be8:	887a      	ldrh	r2, [r7, #2]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005bee:	e003      	b.n	8005bf8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005bf0:	887b      	ldrh	r3, [r7, #2]
 8005bf2:	041a      	lsls	r2, r3, #16
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	611a      	str	r2, [r3, #16]
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bc80      	pop	{r7}
 8005c00:	4770      	bx	lr

08005c02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c14:	887a      	ldrh	r2, [r7, #2]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4013      	ands	r3, r2
 8005c1a:	041a      	lsls	r2, r3, #16
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	43d9      	mvns	r1, r3
 8005c20:	887b      	ldrh	r3, [r7, #2]
 8005c22:	400b      	ands	r3, r1
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	611a      	str	r2, [r3, #16]
}
 8005c2a:	bf00      	nop
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bc80      	pop	{r7}
 8005c32:	4770      	bx	lr

08005c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e12b      	b.n	8005e9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fe f8c0 	bl	8003de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2224      	movs	r2, #36	@ 0x24
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c98:	f001 fbca 	bl	8007430 <HAL_RCC_GetPCLK1Freq>
 8005c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	4a81      	ldr	r2, [pc, #516]	@ (8005ea8 <HAL_I2C_Init+0x274>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d807      	bhi.n	8005cb8 <HAL_I2C_Init+0x84>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a80      	ldr	r2, [pc, #512]	@ (8005eac <HAL_I2C_Init+0x278>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	bf94      	ite	ls
 8005cb0:	2301      	movls	r3, #1
 8005cb2:	2300      	movhi	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	e006      	b.n	8005cc6 <HAL_I2C_Init+0x92>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a7d      	ldr	r2, [pc, #500]	@ (8005eb0 <HAL_I2C_Init+0x27c>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	bf94      	ite	ls
 8005cc0:	2301      	movls	r3, #1
 8005cc2:	2300      	movhi	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e0e7      	b.n	8005e9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a78      	ldr	r2, [pc, #480]	@ (8005eb4 <HAL_I2C_Init+0x280>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	0c9b      	lsrs	r3, r3, #18
 8005cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	430a      	orrs	r2, r1
 8005cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8005ea8 <HAL_I2C_Init+0x274>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d802      	bhi.n	8005d08 <HAL_I2C_Init+0xd4>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	3301      	adds	r3, #1
 8005d06:	e009      	b.n	8005d1c <HAL_I2C_Init+0xe8>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	4a69      	ldr	r2, [pc, #420]	@ (8005eb8 <HAL_I2C_Init+0x284>)
 8005d14:	fba2 2303 	umull	r2, r3, r2, r3
 8005d18:	099b      	lsrs	r3, r3, #6
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005d2e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	495c      	ldr	r1, [pc, #368]	@ (8005ea8 <HAL_I2C_Init+0x274>)
 8005d38:	428b      	cmp	r3, r1
 8005d3a:	d819      	bhi.n	8005d70 <HAL_I2C_Init+0x13c>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1e59      	subs	r1, r3, #1
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d4a:	1c59      	adds	r1, r3, #1
 8005d4c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d50:	400b      	ands	r3, r1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_I2C_Init+0x138>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	1e59      	subs	r1, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d64:	3301      	adds	r3, #1
 8005d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6a:	e051      	b.n	8005e10 <HAL_I2C_Init+0x1dc>
 8005d6c:	2304      	movs	r3, #4
 8005d6e:	e04f      	b.n	8005e10 <HAL_I2C_Init+0x1dc>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d111      	bne.n	8005d9c <HAL_I2C_Init+0x168>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1e58      	subs	r0, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6859      	ldr	r1, [r3, #4]
 8005d80:	460b      	mov	r3, r1
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	440b      	add	r3, r1
 8005d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf0c      	ite	eq
 8005d94:	2301      	moveq	r3, #1
 8005d96:	2300      	movne	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	e012      	b.n	8005dc2 <HAL_I2C_Init+0x18e>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	1e58      	subs	r0, r3, #1
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	0099      	lsls	r1, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005db2:	3301      	adds	r3, #1
 8005db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bf0c      	ite	eq
 8005dbc:	2301      	moveq	r3, #1
 8005dbe:	2300      	movne	r3, #0
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <HAL_I2C_Init+0x196>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e022      	b.n	8005e10 <HAL_I2C_Init+0x1dc>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10e      	bne.n	8005df0 <HAL_I2C_Init+0x1bc>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1e58      	subs	r0, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6859      	ldr	r1, [r3, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	440b      	add	r3, r1
 8005de0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005de4:	3301      	adds	r3, #1
 8005de6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dee:	e00f      	b.n	8005e10 <HAL_I2C_Init+0x1dc>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1e58      	subs	r0, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6859      	ldr	r1, [r3, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	440b      	add	r3, r1
 8005dfe:	0099      	lsls	r1, r3, #2
 8005e00:	440b      	add	r3, r1
 8005e02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e06:	3301      	adds	r3, #1
 8005e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	6809      	ldr	r1, [r1, #0]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	69da      	ldr	r2, [r3, #28]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005e3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6911      	ldr	r1, [r2, #16]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	68d2      	ldr	r2, [r2, #12]
 8005e4a:	4311      	orrs	r1, r2
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	430b      	orrs	r3, r1
 8005e52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	695a      	ldr	r2, [r3, #20]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0201 	orr.w	r2, r2, #1
 8005e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	000186a0 	.word	0x000186a0
 8005eac:	001e847f 	.word	0x001e847f
 8005eb0:	003d08ff 	.word	0x003d08ff
 8005eb4:	431bde83 	.word	0x431bde83
 8005eb8:	10624dd3 	.word	0x10624dd3

08005ebc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af02      	add	r7, sp, #8
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	607a      	str	r2, [r7, #4]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	460b      	mov	r3, r1
 8005eca:	817b      	strh	r3, [r7, #10]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ed0:	f7fe fca4 	bl	800481c <HAL_GetTick>
 8005ed4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b20      	cmp	r3, #32
 8005ee0:	f040 80e0 	bne.w	80060a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2319      	movs	r3, #25
 8005eea:	2201      	movs	r2, #1
 8005eec:	4970      	ldr	r1, [pc, #448]	@ (80060b0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005eee:	68f8      	ldr	r0, [r7, #12]
 8005ef0:	f000 fc9e 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d001      	beq.n	8005efe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005efa:	2302      	movs	r3, #2
 8005efc:	e0d3      	b.n	80060a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <HAL_I2C_Master_Transmit+0x50>
 8005f08:	2302      	movs	r3, #2
 8005f0a:	e0cc      	b.n	80060a6 <HAL_I2C_Master_Transmit+0x1ea>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d007      	beq.n	8005f32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0201 	orr.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2221      	movs	r2, #33	@ 0x21
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2210      	movs	r2, #16
 8005f4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	893a      	ldrh	r2, [r7, #8]
 8005f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	4a50      	ldr	r2, [pc, #320]	@ (80060b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005f72:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f74:	8979      	ldrh	r1, [r7, #10]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	6a3a      	ldr	r2, [r7, #32]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fb08 	bl	8006590 <I2C_MasterRequestWrite>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e08d      	b.n	80060a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	613b      	str	r3, [r7, #16]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	613b      	str	r3, [r7, #16]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	613b      	str	r3, [r7, #16]
 8005f9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005fa0:	e066      	b.n	8006070 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	6a39      	ldr	r1, [r7, #32]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fd5c 	bl	8006a64 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00d      	beq.n	8005fce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d107      	bne.n	8005fca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e06b      	b.n	80060a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11b      	bne.n	8006044 <HAL_I2C_Master_Transmit+0x188>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d017      	beq.n	8006044 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800602e:	b29b      	uxth	r3, r3
 8006030:	3b01      	subs	r3, #1
 8006032:	b29a      	uxth	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	6a39      	ldr	r1, [r7, #32]
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fd53 	bl	8006af4 <I2C_WaitOnBTFFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00d      	beq.n	8006070 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006058:	2b04      	cmp	r3, #4
 800605a:	d107      	bne.n	800606c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800606a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e01a      	b.n	80060a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006074:	2b00      	cmp	r3, #0
 8006076:	d194      	bne.n	8005fa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006086:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	00100002 	.word	0x00100002
 80060b4:	ffff0000 	.word	0xffff0000

080060b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08c      	sub	sp, #48	@ 0x30
 80060bc:	af02      	add	r7, sp, #8
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607a      	str	r2, [r7, #4]
 80060c2:	461a      	mov	r2, r3
 80060c4:	460b      	mov	r3, r1
 80060c6:	817b      	strh	r3, [r7, #10]
 80060c8:	4613      	mov	r3, r2
 80060ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060d0:	f7fe fba4 	bl	800481c <HAL_GetTick>
 80060d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b20      	cmp	r3, #32
 80060e0:	f040 824b 	bne.w	800657a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	2319      	movs	r3, #25
 80060ea:	2201      	movs	r2, #1
 80060ec:	497f      	ldr	r1, [pc, #508]	@ (80062ec <HAL_I2C_Master_Receive+0x234>)
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fb9e 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80060fa:	2302      	movs	r3, #2
 80060fc:	e23e      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_I2C_Master_Receive+0x54>
 8006108:	2302      	movs	r3, #2
 800610a:	e237      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b01      	cmp	r3, #1
 8006120:	d007      	beq.n	8006132 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0201 	orr.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006140:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2222      	movs	r2, #34	@ 0x22
 8006146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2210      	movs	r2, #16
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	893a      	ldrh	r2, [r7, #8]
 8006162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a5f      	ldr	r2, [pc, #380]	@ (80062f0 <HAL_I2C_Master_Receive+0x238>)
 8006172:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006174:	8979      	ldrh	r1, [r7, #10]
 8006176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006178:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 fa8a 	bl	8006694 <I2C_MasterRequestRead>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e1f8      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d113      	bne.n	80061ba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	61fb      	str	r3, [r7, #28]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	e1cc      	b.n	8006554 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d11e      	bne.n	8006200 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061d2:	b672      	cpsid	i
}
 80061d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061d6:	2300      	movs	r3, #0
 80061d8:	61bb      	str	r3, [r7, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695b      	ldr	r3, [r3, #20]
 80061e0:	61bb      	str	r3, [r7, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80061fc:	b662      	cpsie	i
}
 80061fe:	e035      	b.n	800626c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006204:	2b02      	cmp	r3, #2
 8006206:	d11e      	bne.n	8006246 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006216:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006218:	b672      	cpsid	i
}
 800621a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006240:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006242:	b662      	cpsie	i
}
 8006244:	e012      	b.n	800626c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006256:	2300      	movs	r3, #0
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800626c:	e172      	b.n	8006554 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006272:	2b03      	cmp	r3, #3
 8006274:	f200 811f 	bhi.w	80064b6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800627c:	2b01      	cmp	r3, #1
 800627e:	d123      	bne.n	80062c8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006282:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fc7d 	bl	8006b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e173      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062b0:	3b01      	subs	r3, #1
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80062c6:	e145      	b.n	8006554 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d152      	bne.n	8006376 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d6:	2200      	movs	r2, #0
 80062d8:	4906      	ldr	r1, [pc, #24]	@ (80062f4 <HAL_I2C_Master_Receive+0x23c>)
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f000 faa8 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e148      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
 80062ea:	bf00      	nop
 80062ec:	00100002 	.word	0x00100002
 80062f0:	ffff0000 	.word	0xffff0000
 80062f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80062f8:	b672      	cpsid	i
}
 80062fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800630a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	1c5a      	adds	r2, r3, #1
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006328:	3b01      	subs	r3, #1
 800632a:	b29a      	uxth	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006334:	b29b      	uxth	r3, r3
 8006336:	3b01      	subs	r3, #1
 8006338:	b29a      	uxth	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800633e:	b662      	cpsie	i
}
 8006340:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800635e:	3b01      	subs	r3, #1
 8006360:	b29a      	uxth	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636a:	b29b      	uxth	r3, r3
 800636c:	3b01      	subs	r3, #1
 800636e:	b29a      	uxth	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006374:	e0ee      	b.n	8006554 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800637c:	2200      	movs	r2, #0
 800637e:	4981      	ldr	r1, [pc, #516]	@ (8006584 <HAL_I2C_Master_Receive+0x4cc>)
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fa55 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e0f5      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800639e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063a0:	b672      	cpsid	i
}
 80063a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691a      	ldr	r2, [r3, #16]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b6:	1c5a      	adds	r2, r3, #1
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80063d6:	4b6c      	ldr	r3, [pc, #432]	@ (8006588 <HAL_I2C_Master_Receive+0x4d0>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	08db      	lsrs	r3, r3, #3
 80063dc:	4a6b      	ldr	r2, [pc, #428]	@ (800658c <HAL_I2C_Master_Receive+0x4d4>)
 80063de:	fba2 2303 	umull	r2, r3, r2, r3
 80063e2:	0a1a      	lsrs	r2, r3, #8
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	00da      	lsls	r2, r3, #3
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	3b01      	subs	r3, #1
 80063f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d118      	bne.n	800642e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006416:	f043 0220 	orr.w	r2, r3, #32
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800641e:	b662      	cpsie	i
}
 8006420:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e0a6      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	f003 0304 	and.w	r3, r3, #4
 8006438:	2b04      	cmp	r3, #4
 800643a:	d1d9      	bne.n	80063f0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800644a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800647e:	b662      	cpsie	i
}
 8006480:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064b4:	e04e      	b.n	8006554 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fb62 	bl	8006b84 <I2C_WaitOnRXNEFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e058      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	691a      	ldr	r2, [r3, #16]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e6:	3b01      	subs	r3, #1
 80064e8:	b29a      	uxth	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b04      	cmp	r3, #4
 8006508:	d124      	bne.n	8006554 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650e:	2b03      	cmp	r3, #3
 8006510:	d107      	bne.n	8006522 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006520:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006558:	2b00      	cmp	r3, #0
 800655a:	f47f ae88 	bne.w	800626e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2220      	movs	r2, #32
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006576:	2300      	movs	r3, #0
 8006578:	e000      	b.n	800657c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800657a:	2302      	movs	r3, #2
  }
}
 800657c:	4618      	mov	r0, r3
 800657e:	3728      	adds	r7, #40	@ 0x28
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	00010004 	.word	0x00010004
 8006588:	20000044 	.word	0x20000044
 800658c:	14f8b589 	.word	0x14f8b589

08006590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af02      	add	r7, sp, #8
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	460b      	mov	r3, r1
 800659e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d006      	beq.n	80065ba <I2C_MasterRequestWrite+0x2a>
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d003      	beq.n	80065ba <I2C_MasterRequestWrite+0x2a>
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065b8:	d108      	bne.n	80065cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	e00b      	b.n	80065e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	2b12      	cmp	r3, #18
 80065d2:	d107      	bne.n	80065e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f91d 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d00d      	beq.n	8006618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006606:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800660a:	d103      	bne.n	8006614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006612:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e035      	b.n	8006684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006620:	d108      	bne.n	8006634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006622:	897b      	ldrh	r3, [r7, #10]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006630:	611a      	str	r2, [r3, #16]
 8006632:	e01b      	b.n	800666c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006634:	897b      	ldrh	r3, [r7, #10]
 8006636:	11db      	asrs	r3, r3, #7
 8006638:	b2db      	uxtb	r3, r3
 800663a:	f003 0306 	and.w	r3, r3, #6
 800663e:	b2db      	uxtb	r3, r3
 8006640:	f063 030f 	orn	r3, r3, #15
 8006644:	b2da      	uxtb	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	490e      	ldr	r1, [pc, #56]	@ (800668c <I2C_MasterRequestWrite+0xfc>)
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f000 f966 	bl	8006924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e010      	b.n	8006684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006662:	897b      	ldrh	r3, [r7, #10]
 8006664:	b2da      	uxtb	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4907      	ldr	r1, [pc, #28]	@ (8006690 <I2C_MasterRequestWrite+0x100>)
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f956 	bl	8006924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e000      	b.n	8006684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	00010008 	.word	0x00010008
 8006690:	00010002 	.word	0x00010002

08006694 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	607a      	str	r2, [r7, #4]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	460b      	mov	r3, r1
 80066a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d006      	beq.n	80066ce <I2C_MasterRequestRead+0x3a>
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d003      	beq.n	80066ce <I2C_MasterRequestRead+0x3a>
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066cc:	d108      	bne.n	80066e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	e00b      	b.n	80066f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e4:	2b11      	cmp	r3, #17
 80066e6:	d107      	bne.n	80066f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 f893 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00d      	beq.n	800672c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800671e:	d103      	bne.n	8006728 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006726:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e079      	b.n	8006820 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006734:	d108      	bne.n	8006748 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006736:	897b      	ldrh	r3, [r7, #10]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	f043 0301 	orr.w	r3, r3, #1
 800673e:	b2da      	uxtb	r2, r3
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	611a      	str	r2, [r3, #16]
 8006746:	e05f      	b.n	8006808 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006748:	897b      	ldrh	r3, [r7, #10]
 800674a:	11db      	asrs	r3, r3, #7
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 0306 	and.w	r3, r3, #6
 8006752:	b2db      	uxtb	r3, r3
 8006754:	f063 030f 	orn	r3, r3, #15
 8006758:	b2da      	uxtb	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	4930      	ldr	r1, [pc, #192]	@ (8006828 <I2C_MasterRequestRead+0x194>)
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f000 f8dc 	bl	8006924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e054      	b.n	8006820 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006776:	897b      	ldrh	r3, [r7, #10]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	4929      	ldr	r1, [pc, #164]	@ (800682c <I2C_MasterRequestRead+0x198>)
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f8cc 	bl	8006924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e044      	b.n	8006820 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006796:	2300      	movs	r3, #0
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	613b      	str	r3, [r7, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80067ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f831 	bl	8006830 <I2C_WaitOnFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e2:	d103      	bne.n	80067ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e017      	b.n	8006820 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80067f0:	897b      	ldrh	r3, [r7, #10]
 80067f2:	11db      	asrs	r3, r3, #7
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	f003 0306 	and.w	r3, r3, #6
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f063 030e 	orn	r3, r3, #14
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4907      	ldr	r1, [pc, #28]	@ (800682c <I2C_MasterRequestRead+0x198>)
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f888 	bl	8006924 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	00010008 	.word	0x00010008
 800682c:	00010002 	.word	0x00010002

08006830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	603b      	str	r3, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006840:	e048      	b.n	80068d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d044      	beq.n	80068d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800684a:	f7fd ffe7 	bl	800481c <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d302      	bcc.n	8006860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d139      	bne.n	80068d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	0c1b      	lsrs	r3, r3, #16
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10d      	bne.n	8006886 <I2C_WaitOnFlagUntilTimeout+0x56>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	695b      	ldr	r3, [r3, #20]
 8006870:	43da      	mvns	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	4013      	ands	r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	bf0c      	ite	eq
 800687c:	2301      	moveq	r3, #1
 800687e:	2300      	movne	r3, #0
 8006880:	b2db      	uxtb	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	e00c      	b.n	80068a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	43da      	mvns	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4013      	ands	r3, r2
 8006892:	b29b      	uxth	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d116      	bne.n	80068d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c0:	f043 0220 	orr.w	r2, r3, #32
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e023      	b.n	800691c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	0c1b      	lsrs	r3, r3, #16
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10d      	bne.n	80068fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	43da      	mvns	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4013      	ands	r3, r2
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bf0c      	ite	eq
 80068f0:	2301      	moveq	r3, #1
 80068f2:	2300      	movne	r3, #0
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	461a      	mov	r2, r3
 80068f8:	e00c      	b.n	8006914 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	43da      	mvns	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	4013      	ands	r3, r2
 8006906:	b29b      	uxth	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	bf0c      	ite	eq
 800690c:	2301      	moveq	r3, #1
 800690e:	2300      	movne	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	461a      	mov	r2, r3
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	429a      	cmp	r2, r3
 8006918:	d093      	beq.n	8006842 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006932:	e071      	b.n	8006a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800693e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006942:	d123      	bne.n	800698c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006952:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800695c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006978:	f043 0204 	orr.w	r2, r3, #4
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e067      	b.n	8006a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d041      	beq.n	8006a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006994:	f7fd ff42 	bl	800481c <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d302      	bcc.n	80069aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d136      	bne.n	8006a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	0c1b      	lsrs	r3, r3, #16
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d10c      	bne.n	80069ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	43da      	mvns	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4013      	ands	r3, r2
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	bf14      	ite	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	2300      	moveq	r3, #0
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	e00b      	b.n	80069e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	43da      	mvns	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	4013      	ands	r3, r2
 80069da:	b29b      	uxth	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bf14      	ite	ne
 80069e0:	2301      	movne	r3, #1
 80069e2:	2300      	moveq	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d016      	beq.n	8006a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a04:	f043 0220 	orr.w	r2, r3, #32
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e021      	b.n	8006a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	0c1b      	lsrs	r3, r3, #16
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d10c      	bne.n	8006a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	43da      	mvns	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bf14      	ite	ne
 8006a34:	2301      	movne	r3, #1
 8006a36:	2300      	moveq	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	e00b      	b.n	8006a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	43da      	mvns	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4013      	ands	r3, r2
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bf14      	ite	ne
 8006a4e:	2301      	movne	r3, #1
 8006a50:	2300      	moveq	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f47f af6d 	bne.w	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a70:	e034      	b.n	8006adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f000 f8e3 	bl	8006c3e <I2C_IsAcknowledgeFailed>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e034      	b.n	8006aec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a88:	d028      	beq.n	8006adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8a:	f7fd fec7 	bl	800481c <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d302      	bcc.n	8006aa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11d      	bne.n	8006adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aaa:	2b80      	cmp	r3, #128	@ 0x80
 8006aac:	d016      	beq.n	8006adc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac8:	f043 0220 	orr.w	r2, r3, #32
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e007      	b.n	8006aec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ae6:	2b80      	cmp	r3, #128	@ 0x80
 8006ae8:	d1c3      	bne.n	8006a72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b00:	e034      	b.n	8006b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f000 f89b 	bl	8006c3e <I2C_IsAcknowledgeFailed>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e034      	b.n	8006b7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b18:	d028      	beq.n	8006b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b1a:	f7fd fe7f 	bl	800481c <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d302      	bcc.n	8006b30 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11d      	bne.n	8006b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d016      	beq.n	8006b6c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b58:	f043 0220 	orr.w	r2, r3, #32
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e007      	b.n	8006b7c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	f003 0304 	and.w	r3, r3, #4
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d1c3      	bne.n	8006b02 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b90:	e049      	b.n	8006c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	f003 0310 	and.w	r3, r3, #16
 8006b9c:	2b10      	cmp	r3, #16
 8006b9e:	d119      	bne.n	8006bd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f06f 0210 	mvn.w	r2, #16
 8006ba8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e030      	b.n	8006c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd4:	f7fd fe22 	bl	800481c <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d302      	bcc.n	8006bea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d11d      	bne.n	8006c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b40      	cmp	r3, #64	@ 0x40
 8006bf6:	d016      	beq.n	8006c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c12:	f043 0220 	orr.w	r2, r3, #32
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e007      	b.n	8006c36 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c30:	2b40      	cmp	r3, #64	@ 0x40
 8006c32:	d1ae      	bne.n	8006b92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c54:	d11b      	bne.n	8006c8e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c5e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	f043 0204 	orr.w	r2, r3, #4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr
	...

08006c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e272      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f000 8087 	beq.w	8006dca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006cbc:	4b92      	ldr	r3, [pc, #584]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	f003 030c 	and.w	r3, r3, #12
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d00c      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006cc8:	4b8f      	ldr	r3, [pc, #572]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f003 030c 	and.w	r3, r3, #12
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d112      	bne.n	8006cfa <HAL_RCC_OscConfig+0x5e>
 8006cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ce0:	d10b      	bne.n	8006cfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce2:	4b89      	ldr	r3, [pc, #548]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d06c      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x12c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d168      	bne.n	8006dc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e24c      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d02:	d106      	bne.n	8006d12 <HAL_RCC_OscConfig+0x76>
 8006d04:	4b80      	ldr	r3, [pc, #512]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a7f      	ldr	r2, [pc, #508]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d0e:	6013      	str	r3, [r2, #0]
 8006d10:	e02e      	b.n	8006d70 <HAL_RCC_OscConfig+0xd4>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x98>
 8006d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a7a      	ldr	r2, [pc, #488]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	4b78      	ldr	r3, [pc, #480]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a77      	ldr	r2, [pc, #476]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e01d      	b.n	8006d70 <HAL_RCC_OscConfig+0xd4>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d3c:	d10c      	bne.n	8006d58 <HAL_RCC_OscConfig+0xbc>
 8006d3e:	4b72      	ldr	r3, [pc, #456]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a71      	ldr	r2, [pc, #452]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e00b      	b.n	8006d70 <HAL_RCC_OscConfig+0xd4>
 8006d58:	4b6b      	ldr	r3, [pc, #428]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a6a      	ldr	r2, [pc, #424]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	4b68      	ldr	r3, [pc, #416]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a67      	ldr	r2, [pc, #412]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d013      	beq.n	8006da0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d78:	f7fd fd50 	bl	800481c <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d80:	f7fd fd4c 	bl	800481c <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b64      	cmp	r3, #100	@ 0x64
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e200      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d92:	4b5d      	ldr	r3, [pc, #372]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f0      	beq.n	8006d80 <HAL_RCC_OscConfig+0xe4>
 8006d9e:	e014      	b.n	8006dca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da0:	f7fd fd3c 	bl	800481c <HAL_GetTick>
 8006da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006da6:	e008      	b.n	8006dba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006da8:	f7fd fd38 	bl	800481c <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	2b64      	cmp	r3, #100	@ 0x64
 8006db4:	d901      	bls.n	8006dba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e1ec      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006dba:	4b53      	ldr	r3, [pc, #332]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1f0      	bne.n	8006da8 <HAL_RCC_OscConfig+0x10c>
 8006dc6:	e000      	b.n	8006dca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d063      	beq.n	8006e9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006dd6:	4b4c      	ldr	r3, [pc, #304]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f003 030c 	and.w	r3, r3, #12
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006de2:	4b49      	ldr	r3, [pc, #292]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f003 030c 	and.w	r3, r3, #12
 8006dea:	2b08      	cmp	r3, #8
 8006dec:	d11c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x18c>
 8006dee:	4b46      	ldr	r3, [pc, #280]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d116      	bne.n	8006e28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dfa:	4b43      	ldr	r3, [pc, #268]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <HAL_RCC_OscConfig+0x176>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d001      	beq.n	8006e12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e1c0      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e12:	4b3d      	ldr	r3, [pc, #244]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4939      	ldr	r1, [pc, #228]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e26:	e03a      	b.n	8006e9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d020      	beq.n	8006e72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e30:	4b36      	ldr	r3, [pc, #216]	@ (8006f0c <HAL_RCC_OscConfig+0x270>)
 8006e32:	2201      	movs	r2, #1
 8006e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e36:	f7fd fcf1 	bl	800481c <HAL_GetTick>
 8006e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e3e:	f7fd fced 	bl	800481c <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e1a1      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e50:	4b2d      	ldr	r3, [pc, #180]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0f0      	beq.n	8006e3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	4927      	ldr	r1, [pc, #156]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	600b      	str	r3, [r1, #0]
 8006e70:	e015      	b.n	8006e9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e72:	4b26      	ldr	r3, [pc, #152]	@ (8006f0c <HAL_RCC_OscConfig+0x270>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e78:	f7fd fcd0 	bl	800481c <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e80:	f7fd fccc 	bl	800481c <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e180      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e92:	4b1d      	ldr	r3, [pc, #116]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1f0      	bne.n	8006e80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d03a      	beq.n	8006f20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d019      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006eb2:	4b17      	ldr	r3, [pc, #92]	@ (8006f10 <HAL_RCC_OscConfig+0x274>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eb8:	f7fd fcb0 	bl	800481c <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ec0:	f7fd fcac 	bl	800481c <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e160      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f08 <HAL_RCC_OscConfig+0x26c>)
 8006ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0f0      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ede:	2001      	movs	r0, #1
 8006ee0:	f000 face 	bl	8007480 <RCC_Delay>
 8006ee4:	e01c      	b.n	8006f20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <HAL_RCC_OscConfig+0x274>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eec:	f7fd fc96 	bl	800481c <HAL_GetTick>
 8006ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ef2:	e00f      	b.n	8006f14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ef4:	f7fd fc92 	bl	800481c <HAL_GetTick>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	1ad3      	subs	r3, r2, r3
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d908      	bls.n	8006f14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e146      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
 8006f06:	bf00      	nop
 8006f08:	40021000 	.word	0x40021000
 8006f0c:	42420000 	.word	0x42420000
 8006f10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f14:	4b92      	ldr	r3, [pc, #584]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e9      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80a6 	beq.w	800707a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f32:	4b8b      	ldr	r3, [pc, #556]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10d      	bne.n	8006f5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f3e:	4b88      	ldr	r3, [pc, #544]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	4a87      	ldr	r2, [pc, #540]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f48:	61d3      	str	r3, [r2, #28]
 8006f4a:	4b85      	ldr	r3, [pc, #532]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f52:	60bb      	str	r3, [r7, #8]
 8006f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f56:	2301      	movs	r3, #1
 8006f58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f5a:	4b82      	ldr	r3, [pc, #520]	@ (8007164 <HAL_RCC_OscConfig+0x4c8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d118      	bne.n	8006f98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f66:	4b7f      	ldr	r3, [pc, #508]	@ (8007164 <HAL_RCC_OscConfig+0x4c8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a7e      	ldr	r2, [pc, #504]	@ (8007164 <HAL_RCC_OscConfig+0x4c8>)
 8006f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f72:	f7fd fc53 	bl	800481c <HAL_GetTick>
 8006f76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f78:	e008      	b.n	8006f8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f7a:	f7fd fc4f 	bl	800481c <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b64      	cmp	r3, #100	@ 0x64
 8006f86:	d901      	bls.n	8006f8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e103      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f8c:	4b75      	ldr	r3, [pc, #468]	@ (8007164 <HAL_RCC_OscConfig+0x4c8>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d0f0      	beq.n	8006f7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d106      	bne.n	8006fae <HAL_RCC_OscConfig+0x312>
 8006fa0:	4b6f      	ldr	r3, [pc, #444]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fa6:	f043 0301 	orr.w	r3, r3, #1
 8006faa:	6213      	str	r3, [r2, #32]
 8006fac:	e02d      	b.n	800700a <HAL_RCC_OscConfig+0x36e>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x334>
 8006fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	4a69      	ldr	r2, [pc, #420]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fbc:	f023 0301 	bic.w	r3, r3, #1
 8006fc0:	6213      	str	r3, [r2, #32]
 8006fc2:	4b67      	ldr	r3, [pc, #412]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	4a66      	ldr	r2, [pc, #408]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fc8:	f023 0304 	bic.w	r3, r3, #4
 8006fcc:	6213      	str	r3, [r2, #32]
 8006fce:	e01c      	b.n	800700a <HAL_RCC_OscConfig+0x36e>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b05      	cmp	r3, #5
 8006fd6:	d10c      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x356>
 8006fd8:	4b61      	ldr	r3, [pc, #388]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	4a60      	ldr	r2, [pc, #384]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fde:	f043 0304 	orr.w	r3, r3, #4
 8006fe2:	6213      	str	r3, [r2, #32]
 8006fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	4a5d      	ldr	r2, [pc, #372]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006fea:	f043 0301 	orr.w	r3, r3, #1
 8006fee:	6213      	str	r3, [r2, #32]
 8006ff0:	e00b      	b.n	800700a <HAL_RCC_OscConfig+0x36e>
 8006ff2:	4b5b      	ldr	r3, [pc, #364]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006ff4:	6a1b      	ldr	r3, [r3, #32]
 8006ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8006ff8:	f023 0301 	bic.w	r3, r3, #1
 8006ffc:	6213      	str	r3, [r2, #32]
 8006ffe:	4b58      	ldr	r3, [pc, #352]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	4a57      	ldr	r2, [pc, #348]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8007004:	f023 0304 	bic.w	r3, r3, #4
 8007008:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d015      	beq.n	800703e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007012:	f7fd fc03 	bl	800481c <HAL_GetTick>
 8007016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007018:	e00a      	b.n	8007030 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800701a:	f7fd fbff 	bl	800481c <HAL_GetTick>
 800701e:	4602      	mov	r2, r0
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	1ad3      	subs	r3, r2, r3
 8007024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007028:	4293      	cmp	r3, r2
 800702a:	d901      	bls.n	8007030 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e0b1      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007030:	4b4b      	ldr	r3, [pc, #300]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8007032:	6a1b      	ldr	r3, [r3, #32]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d0ee      	beq.n	800701a <HAL_RCC_OscConfig+0x37e>
 800703c:	e014      	b.n	8007068 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800703e:	f7fd fbed 	bl	800481c <HAL_GetTick>
 8007042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007044:	e00a      	b.n	800705c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007046:	f7fd fbe9 	bl	800481c <HAL_GetTick>
 800704a:	4602      	mov	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007054:	4293      	cmp	r3, r2
 8007056:	d901      	bls.n	800705c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e09b      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800705c:	4b40      	ldr	r3, [pc, #256]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 800705e:	6a1b      	ldr	r3, [r3, #32]
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1ee      	bne.n	8007046 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d105      	bne.n	800707a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800706e:	4b3c      	ldr	r3, [pc, #240]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	4a3b      	ldr	r2, [pc, #236]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8007074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007078:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f000 8087 	beq.w	8007192 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007084:	4b36      	ldr	r3, [pc, #216]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f003 030c 	and.w	r3, r3, #12
 800708c:	2b08      	cmp	r3, #8
 800708e:	d061      	beq.n	8007154 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d146      	bne.n	8007126 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007098:	4b33      	ldr	r3, [pc, #204]	@ (8007168 <HAL_RCC_OscConfig+0x4cc>)
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800709e:	f7fd fbbd 	bl	800481c <HAL_GetTick>
 80070a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070a4:	e008      	b.n	80070b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a6:	f7fd fbb9 	bl	800481c <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d901      	bls.n	80070b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e06d      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070b8:	4b29      	ldr	r3, [pc, #164]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1f0      	bne.n	80070a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070cc:	d108      	bne.n	80070e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80070ce:	4b24      	ldr	r3, [pc, #144]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	4921      	ldr	r1, [pc, #132]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a19      	ldr	r1, [r3, #32]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f0:	430b      	orrs	r3, r1
 80070f2:	491b      	ldr	r1, [pc, #108]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070f8:	4b1b      	ldr	r3, [pc, #108]	@ (8007168 <HAL_RCC_OscConfig+0x4cc>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070fe:	f7fd fb8d 	bl	800481c <HAL_GetTick>
 8007102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007104:	e008      	b.n	8007118 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007106:	f7fd fb89 	bl	800481c <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	2b02      	cmp	r3, #2
 8007112:	d901      	bls.n	8007118 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e03d      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007118:	4b11      	ldr	r3, [pc, #68]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	d0f0      	beq.n	8007106 <HAL_RCC_OscConfig+0x46a>
 8007124:	e035      	b.n	8007192 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007126:	4b10      	ldr	r3, [pc, #64]	@ (8007168 <HAL_RCC_OscConfig+0x4cc>)
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800712c:	f7fd fb76 	bl	800481c <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007134:	f7fd fb72 	bl	800481c <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e026      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007146:	4b06      	ldr	r3, [pc, #24]	@ (8007160 <HAL_RCC_OscConfig+0x4c4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1f0      	bne.n	8007134 <HAL_RCC_OscConfig+0x498>
 8007152:	e01e      	b.n	8007192 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d107      	bne.n	800716c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e019      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
 8007160:	40021000 	.word	0x40021000
 8007164:	40007000 	.word	0x40007000
 8007168:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800716c:	4b0b      	ldr	r3, [pc, #44]	@ (800719c <HAL_RCC_OscConfig+0x500>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	429a      	cmp	r2, r3
 800717e:	d106      	bne.n	800718e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800718a:	429a      	cmp	r2, r3
 800718c:	d001      	beq.n	8007192 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	40021000 	.word	0x40021000

080071a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0d0      	b.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d910      	bls.n	80071e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c2:	4b67      	ldr	r3, [pc, #412]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f023 0207 	bic.w	r2, r3, #7
 80071ca:	4965      	ldr	r1, [pc, #404]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071d2:	4b63      	ldr	r3, [pc, #396]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d001      	beq.n	80071e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e0b8      	b.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d020      	beq.n	8007232 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071fc:	4b59      	ldr	r3, [pc, #356]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	4a58      	ldr	r2, [pc, #352]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007202:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007206:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b00      	cmp	r3, #0
 8007212:	d005      	beq.n	8007220 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007214:	4b53      	ldr	r3, [pc, #332]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a52      	ldr	r2, [pc, #328]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 800721a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800721e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007220:	4b50      	ldr	r3, [pc, #320]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	494d      	ldr	r1, [pc, #308]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 800722e:	4313      	orrs	r3, r2
 8007230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d040      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d107      	bne.n	8007256 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007246:	4b47      	ldr	r3, [pc, #284]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d115      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e07f      	b.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d107      	bne.n	800726e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800725e:	4b41      	ldr	r3, [pc, #260]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e073      	b.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726e:	4b3d      	ldr	r3, [pc, #244]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e06b      	b.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800727e:	4b39      	ldr	r3, [pc, #228]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f023 0203 	bic.w	r2, r3, #3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	4936      	ldr	r1, [pc, #216]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 800728c:	4313      	orrs	r3, r2
 800728e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007290:	f7fd fac4 	bl	800481c <HAL_GetTick>
 8007294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007296:	e00a      	b.n	80072ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007298:	f7fd fac0 	bl	800481c <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e053      	b.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f003 020c 	and.w	r2, r3, #12
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	429a      	cmp	r2, r3
 80072be:	d1eb      	bne.n	8007298 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80072c0:	4b27      	ldr	r3, [pc, #156]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d210      	bcs.n	80072f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ce:	4b24      	ldr	r3, [pc, #144]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f023 0207 	bic.w	r2, r3, #7
 80072d6:	4922      	ldr	r1, [pc, #136]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	4313      	orrs	r3, r2
 80072dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072de:	4b20      	ldr	r3, [pc, #128]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	683a      	ldr	r2, [r7, #0]
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d001      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e032      	b.n	8007356 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d008      	beq.n	800730e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072fc:	4b19      	ldr	r3, [pc, #100]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4916      	ldr	r1, [pc, #88]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 800730a:	4313      	orrs	r3, r2
 800730c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 0308 	and.w	r3, r3, #8
 8007316:	2b00      	cmp	r3, #0
 8007318:	d009      	beq.n	800732e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800731a:	4b12      	ldr	r3, [pc, #72]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	00db      	lsls	r3, r3, #3
 8007328:	490e      	ldr	r1, [pc, #56]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 800732a:	4313      	orrs	r3, r2
 800732c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800732e:	f000 f821 	bl	8007374 <HAL_RCC_GetSysClockFreq>
 8007332:	4602      	mov	r2, r0
 8007334:	4b0b      	ldr	r3, [pc, #44]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	091b      	lsrs	r3, r3, #4
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	490a      	ldr	r1, [pc, #40]	@ (8007368 <HAL_RCC_ClockConfig+0x1c8>)
 8007340:	5ccb      	ldrb	r3, [r1, r3]
 8007342:	fa22 f303 	lsr.w	r3, r2, r3
 8007346:	4a09      	ldr	r2, [pc, #36]	@ (800736c <HAL_RCC_ClockConfig+0x1cc>)
 8007348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800734a:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <HAL_RCC_ClockConfig+0x1d0>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f7fd fa22 	bl	8004798 <HAL_InitTick>

  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	40022000 	.word	0x40022000
 8007364:	40021000 	.word	0x40021000
 8007368:	0800c96c 	.word	0x0800c96c
 800736c:	20000044 	.word	0x20000044
 8007370:	20000048 	.word	0x20000048

08007374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	2300      	movs	r3, #0
 8007388:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800738e:	4b1e      	ldr	r3, [pc, #120]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x94>)
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f003 030c 	and.w	r3, r3, #12
 800739a:	2b04      	cmp	r3, #4
 800739c:	d002      	beq.n	80073a4 <HAL_RCC_GetSysClockFreq+0x30>
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d003      	beq.n	80073aa <HAL_RCC_GetSysClockFreq+0x36>
 80073a2:	e027      	b.n	80073f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80073a4:	4b19      	ldr	r3, [pc, #100]	@ (800740c <HAL_RCC_GetSysClockFreq+0x98>)
 80073a6:	613b      	str	r3, [r7, #16]
      break;
 80073a8:	e027      	b.n	80073fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	0c9b      	lsrs	r3, r3, #18
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	4a17      	ldr	r2, [pc, #92]	@ (8007410 <HAL_RCC_GetSysClockFreq+0x9c>)
 80073b4:	5cd3      	ldrb	r3, [r2, r3]
 80073b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d010      	beq.n	80073e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80073c2:	4b11      	ldr	r3, [pc, #68]	@ (8007408 <HAL_RCC_GetSysClockFreq+0x94>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	0c5b      	lsrs	r3, r3, #17
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	4a11      	ldr	r2, [pc, #68]	@ (8007414 <HAL_RCC_GetSysClockFreq+0xa0>)
 80073ce:	5cd3      	ldrb	r3, [r2, r3]
 80073d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a0d      	ldr	r2, [pc, #52]	@ (800740c <HAL_RCC_GetSysClockFreq+0x98>)
 80073d6:	fb03 f202 	mul.w	r2, r3, r2
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	e004      	b.n	80073ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007418 <HAL_RCC_GetSysClockFreq+0xa4>)
 80073e8:	fb02 f303 	mul.w	r3, r2, r3
 80073ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	613b      	str	r3, [r7, #16]
      break;
 80073f2:	e002      	b.n	80073fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073f4:	4b05      	ldr	r3, [pc, #20]	@ (800740c <HAL_RCC_GetSysClockFreq+0x98>)
 80073f6:	613b      	str	r3, [r7, #16]
      break;
 80073f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073fa:	693b      	ldr	r3, [r7, #16]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	371c      	adds	r7, #28
 8007400:	46bd      	mov	sp, r7
 8007402:	bc80      	pop	{r7}
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	40021000 	.word	0x40021000
 800740c:	007a1200 	.word	0x007a1200
 8007410:	0800c984 	.word	0x0800c984
 8007414:	0800c994 	.word	0x0800c994
 8007418:	003d0900 	.word	0x003d0900

0800741c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007420:	4b02      	ldr	r3, [pc, #8]	@ (800742c <HAL_RCC_GetHCLKFreq+0x10>)
 8007422:	681b      	ldr	r3, [r3, #0]
}
 8007424:	4618      	mov	r0, r3
 8007426:	46bd      	mov	sp, r7
 8007428:	bc80      	pop	{r7}
 800742a:	4770      	bx	lr
 800742c:	20000044 	.word	0x20000044

08007430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007434:	f7ff fff2 	bl	800741c <HAL_RCC_GetHCLKFreq>
 8007438:	4602      	mov	r2, r0
 800743a:	4b05      	ldr	r3, [pc, #20]	@ (8007450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	0a1b      	lsrs	r3, r3, #8
 8007440:	f003 0307 	and.w	r3, r3, #7
 8007444:	4903      	ldr	r1, [pc, #12]	@ (8007454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007446:	5ccb      	ldrb	r3, [r1, r3]
 8007448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800744c:	4618      	mov	r0, r3
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40021000 	.word	0x40021000
 8007454:	0800c97c 	.word	0x0800c97c

08007458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800745c:	f7ff ffde 	bl	800741c <HAL_RCC_GetHCLKFreq>
 8007460:	4602      	mov	r2, r0
 8007462:	4b05      	ldr	r3, [pc, #20]	@ (8007478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	0adb      	lsrs	r3, r3, #11
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	4903      	ldr	r1, [pc, #12]	@ (800747c <HAL_RCC_GetPCLK2Freq+0x24>)
 800746e:	5ccb      	ldrb	r3, [r1, r3]
 8007470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007474:	4618      	mov	r0, r3
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40021000 	.word	0x40021000
 800747c:	0800c97c 	.word	0x0800c97c

08007480 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007488:	4b0a      	ldr	r3, [pc, #40]	@ (80074b4 <RCC_Delay+0x34>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a0a      	ldr	r2, [pc, #40]	@ (80074b8 <RCC_Delay+0x38>)
 800748e:	fba2 2303 	umull	r2, r3, r2, r3
 8007492:	0a5b      	lsrs	r3, r3, #9
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	fb02 f303 	mul.w	r3, r2, r3
 800749a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800749c:	bf00      	nop
  }
  while (Delay --);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	1e5a      	subs	r2, r3, #1
 80074a2:	60fa      	str	r2, [r7, #12]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f9      	bne.n	800749c <RCC_Delay+0x1c>
}
 80074a8:	bf00      	nop
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bc80      	pop	{r7}
 80074b2:	4770      	bx	lr
 80074b4:	20000044 	.word	0x20000044
 80074b8:	10624dd3 	.word	0x10624dd3

080074bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	2300      	movs	r3, #0
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0301 	and.w	r3, r3, #1
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d07d      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80074d8:	2300      	movs	r3, #0
 80074da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074dc:	4b4f      	ldr	r3, [pc, #316]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10d      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074e8:	4b4c      	ldr	r3, [pc, #304]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	4a4b      	ldr	r2, [pc, #300]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074f2:	61d3      	str	r3, [r2, #28]
 80074f4:	4b49      	ldr	r3, [pc, #292]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074fc:	60bb      	str	r3, [r7, #8]
 80074fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007500:	2301      	movs	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007504:	4b46      	ldr	r3, [pc, #280]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800750c:	2b00      	cmp	r3, #0
 800750e:	d118      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007510:	4b43      	ldr	r3, [pc, #268]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a42      	ldr	r2, [pc, #264]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007516:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800751a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800751c:	f7fd f97e 	bl	800481c <HAL_GetTick>
 8007520:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007522:	e008      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007524:	f7fd f97a 	bl	800481c <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b64      	cmp	r3, #100	@ 0x64
 8007530:	d901      	bls.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e06d      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007536:	4b3a      	ldr	r3, [pc, #232]	@ (8007620 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007542:	4b36      	ldr	r3, [pc, #216]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007544:	6a1b      	ldr	r3, [r3, #32]
 8007546:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800754a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02e      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	429a      	cmp	r2, r3
 800755e:	d027      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007560:	4b2e      	ldr	r3, [pc, #184]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007568:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800756a:	4b2e      	ldr	r3, [pc, #184]	@ (8007624 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800756c:	2201      	movs	r2, #1
 800756e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007570:	4b2c      	ldr	r3, [pc, #176]	@ (8007624 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007576:	4a29      	ldr	r2, [pc, #164]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	2b00      	cmp	r3, #0
 8007584:	d014      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007586:	f7fd f949 	bl	800481c <HAL_GetTick>
 800758a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800758c:	e00a      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800758e:	f7fd f945 	bl	800481c <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800759c:	4293      	cmp	r3, r2
 800759e:	d901      	bls.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e036      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075a4:	4b1d      	ldr	r3, [pc, #116]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d0ee      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075b0:	4b1a      	ldr	r3, [pc, #104]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	4917      	ldr	r1, [pc, #92]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d105      	bne.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075c8:	4b14      	ldr	r3, [pc, #80]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	4a13      	ldr	r2, [pc, #76]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d008      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075e0:	4b0e      	ldr	r3, [pc, #56]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	490b      	ldr	r1, [pc, #44]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075fe:	4b07      	ldr	r3, [pc, #28]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	4904      	ldr	r1, [pc, #16]	@ (800761c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800760c:	4313      	orrs	r3, r2
 800760e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	40021000 	.word	0x40021000
 8007620:	40007000 	.word	0x40007000
 8007624:	42420440 	.word	0x42420440

08007628 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b088      	sub	sp, #32
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	2300      	movs	r3, #0
 800763a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
 8007640:	2300      	movs	r3, #0
 8007642:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b10      	cmp	r3, #16
 8007648:	d00a      	beq.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b10      	cmp	r3, #16
 800764e:	f200 808a 	bhi.w	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d045      	beq.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b02      	cmp	r3, #2
 800765c:	d075      	beq.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800765e:	e082      	b.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007660:	4b46      	ldr	r3, [pc, #280]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007666:	4b45      	ldr	r3, [pc, #276]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d07b      	beq.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	0c9b      	lsrs	r3, r3, #18
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	4a41      	ldr	r2, [pc, #260]	@ (8007780 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800767c:	5cd3      	ldrb	r3, [r2, r3]
 800767e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d015      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800768a:	4b3c      	ldr	r3, [pc, #240]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	0c5b      	lsrs	r3, r3, #17
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	4a3b      	ldr	r2, [pc, #236]	@ (8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8007696:	5cd3      	ldrb	r3, [r2, r3]
 8007698:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d00d      	beq.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80076a4:	4a38      	ldr	r2, [pc, #224]	@ (8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	fb02 f303 	mul.w	r3, r2, r3
 80076b2:	61fb      	str	r3, [r7, #28]
 80076b4:	e004      	b.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	4a34      	ldr	r2, [pc, #208]	@ (800778c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80076ba:	fb02 f303 	mul.w	r3, r2, r3
 80076be:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80076c0:	4b2e      	ldr	r3, [pc, #184]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80076c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076cc:	d102      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	61bb      	str	r3, [r7, #24]
      break;
 80076d2:	e04a      	b.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	4a2d      	ldr	r2, [pc, #180]	@ (8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80076da:	fba2 2303 	umull	r2, r3, r2, r3
 80076de:	085b      	lsrs	r3, r3, #1
 80076e0:	61bb      	str	r3, [r7, #24]
      break;
 80076e2:	e042      	b.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80076e4:	4b25      	ldr	r3, [pc, #148]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076f4:	d108      	bne.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d003      	beq.n	8007708 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8007700:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e01f      	b.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800770e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007712:	d109      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8007714:	4b19      	ldr	r3, [pc, #100]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8007720:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007724:	61bb      	str	r3, [r7, #24]
 8007726:	e00f      	b.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800772e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007732:	d11c      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007734:	4b11      	ldr	r3, [pc, #68]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d016      	beq.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007740:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007744:	61bb      	str	r3, [r7, #24]
      break;
 8007746:	e012      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007748:	e011      	b.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800774a:	f7ff fe85 	bl	8007458 <HAL_RCC_GetPCLK2Freq>
 800774e:	4602      	mov	r2, r0
 8007750:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	0b9b      	lsrs	r3, r3, #14
 8007756:	f003 0303 	and.w	r3, r3, #3
 800775a:	3301      	adds	r3, #1
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	61bb      	str	r3, [r7, #24]
      break;
 8007764:	e004      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007766:	bf00      	nop
 8007768:	e002      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800776a:	bf00      	nop
 800776c:	e000      	b.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800776e:	bf00      	nop
    }
  }
  return (frequency);
 8007770:	69bb      	ldr	r3, [r7, #24]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3720      	adds	r7, #32
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	40021000 	.word	0x40021000
 8007780:	0800c998 	.word	0x0800c998
 8007784:	0800c9a8 	.word	0x0800c9a8
 8007788:	007a1200 	.word	0x007a1200
 800778c:	003d0900 	.word	0x003d0900
 8007790:	aaaaaaab 	.word	0xaaaaaaab

08007794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e041      	b.n	800782a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d106      	bne.n	80077c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f7fc fbbc 	bl	8003f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f000 fd40 	bl	8008258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007828:	2300      	movs	r3, #0
}
 800782a:	4618      	mov	r0, r3
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
	...

08007834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b01      	cmp	r3, #1
 8007846:	d001      	beq.n	800784c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e03a      	b.n	80078c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0201 	orr.w	r2, r2, #1
 8007862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a18      	ldr	r2, [pc, #96]	@ (80078cc <HAL_TIM_Base_Start_IT+0x98>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d00e      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x58>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007876:	d009      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x58>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a14      	ldr	r2, [pc, #80]	@ (80078d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d004      	beq.n	800788c <HAL_TIM_Base_Start_IT+0x58>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a13      	ldr	r2, [pc, #76]	@ (80078d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d111      	bne.n	80078b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b06      	cmp	r3, #6
 800789c:	d010      	beq.n	80078c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0201 	orr.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ae:	e007      	b.n	80078c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f042 0201 	orr.w	r2, r2, #1
 80078be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3714      	adds	r7, #20
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40000400 	.word	0x40000400
 80078d4:	40000800 	.word	0x40000800

080078d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e041      	b.n	800796e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fc fafe 	bl	8003f00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3304      	adds	r3, #4
 8007914:	4619      	mov	r1, r3
 8007916:	4610      	mov	r0, r2
 8007918:	f000 fc9e 	bl	8008258 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <HAL_TIM_PWM_Start+0x24>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	bf14      	ite	ne
 8007994:	2301      	movne	r3, #1
 8007996:	2300      	moveq	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	e022      	b.n	80079e2 <HAL_TIM_PWM_Start+0x6a>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b04      	cmp	r3, #4
 80079a0:	d109      	bne.n	80079b6 <HAL_TIM_PWM_Start+0x3e>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	e015      	b.n	80079e2 <HAL_TIM_PWM_Start+0x6a>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d109      	bne.n	80079d0 <HAL_TIM_PWM_Start+0x58>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	bf14      	ite	ne
 80079c8:	2301      	movne	r3, #1
 80079ca:	2300      	moveq	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	e008      	b.n	80079e2 <HAL_TIM_PWM_Start+0x6a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	bf14      	ite	ne
 80079dc:	2301      	movne	r3, #1
 80079de:	2300      	moveq	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e05e      	b.n	8007aa8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_PWM_Start+0x82>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079f8:	e013      	b.n	8007a22 <HAL_TIM_PWM_Start+0xaa>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d104      	bne.n	8007a0a <HAL_TIM_PWM_Start+0x92>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a08:	e00b      	b.n	8007a22 <HAL_TIM_PWM_Start+0xaa>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d104      	bne.n	8007a1a <HAL_TIM_PWM_Start+0xa2>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a18:	e003      	b.n	8007a22 <HAL_TIM_PWM_Start+0xaa>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2201      	movs	r2, #1
 8007a28:	6839      	ldr	r1, [r7, #0]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fea0 	bl	8008770 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab0 <HAL_TIM_PWM_Start+0x138>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d107      	bne.n	8007a4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	@ (8007ab0 <HAL_TIM_PWM_Start+0x138>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00e      	beq.n	8007a72 <HAL_TIM_PWM_Start+0xfa>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a5c:	d009      	beq.n	8007a72 <HAL_TIM_PWM_Start+0xfa>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a14      	ldr	r2, [pc, #80]	@ (8007ab4 <HAL_TIM_PWM_Start+0x13c>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d004      	beq.n	8007a72 <HAL_TIM_PWM_Start+0xfa>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a12      	ldr	r2, [pc, #72]	@ (8007ab8 <HAL_TIM_PWM_Start+0x140>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d111      	bne.n	8007a96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f003 0307 	and.w	r3, r3, #7
 8007a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b06      	cmp	r3, #6
 8007a82:	d010      	beq.n	8007aa6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a94:	e007      	b.n	8007aa6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0201 	orr.w	r2, r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	40012c00 	.word	0x40012c00
 8007ab4:	40000400 	.word	0x40000400
 8007ab8:	40000800 	.word	0x40000800

08007abc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b086      	sub	sp, #24
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e093      	b.n	8007bf8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d106      	bne.n	8007aea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7fc f9cb 	bl	8003e80 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	6812      	ldr	r2, [r2, #0]
 8007afc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b00:	f023 0307 	bic.w	r3, r3, #7
 8007b04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	4619      	mov	r1, r3
 8007b10:	4610      	mov	r0, r2
 8007b12:	f000 fba1 	bl	8008258 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b3e:	f023 0303 	bic.w	r3, r3, #3
 8007b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007b5c:	f023 030c 	bic.w	r3, r3, #12
 8007b60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	693a      	ldr	r2, [r7, #16]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	011a      	lsls	r2, r3, #4
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	031b      	lsls	r3, r3, #12
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007b9a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007c10:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007c18:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c20:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007c28:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d110      	bne.n	8007c52 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d102      	bne.n	8007c3c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c36:	7b7b      	ldrb	r3, [r7, #13]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d001      	beq.n	8007c40 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e069      	b.n	8007d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c50:	e031      	b.n	8007cb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	2b04      	cmp	r3, #4
 8007c56:	d110      	bne.n	8007c7a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c58:	7bbb      	ldrb	r3, [r7, #14]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d102      	bne.n	8007c64 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c5e:	7b3b      	ldrb	r3, [r7, #12]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d001      	beq.n	8007c68 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e055      	b.n	8007d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c78:	e01d      	b.n	8007cb6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d108      	bne.n	8007c92 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c80:	7bbb      	ldrb	r3, [r7, #14]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d105      	bne.n	8007c92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c86:	7b7b      	ldrb	r3, [r7, #13]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d102      	bne.n	8007c92 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c8c:	7b3b      	ldrb	r3, [r7, #12]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d001      	beq.n	8007c96 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007c92:	2301      	movs	r3, #1
 8007c94:	e03e      	b.n	8007d14 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2202      	movs	r2, #2
 8007c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d003      	beq.n	8007cc4 <HAL_TIM_Encoder_Start+0xc4>
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d008      	beq.n	8007cd4 <HAL_TIM_Encoder_Start+0xd4>
 8007cc2:	e00f      	b.n	8007ce4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	2100      	movs	r1, #0
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 fd4f 	bl	8008770 <TIM_CCxChannelCmd>
      break;
 8007cd2:	e016      	b.n	8007d02 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	2104      	movs	r1, #4
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f000 fd47 	bl	8008770 <TIM_CCxChannelCmd>
      break;
 8007ce2:	e00e      	b.n	8007d02 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	2100      	movs	r1, #0
 8007cec:	4618      	mov	r0, r3
 8007cee:	f000 fd3f 	bl	8008770 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	2104      	movs	r1, #4
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fd38 	bl	8008770 <TIM_CCxChannelCmd>
      break;
 8007d00:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0201 	orr.w	r2, r2, #1
 8007d10:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	691b      	ldr	r3, [r3, #16]
 8007d32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d020      	beq.n	8007d80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01b      	beq.n	8007d80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f06f 0202 	mvn.w	r2, #2
 8007d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2201      	movs	r2, #1
 8007d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d003      	beq.n	8007d6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa5a 	bl	8008220 <HAL_TIM_IC_CaptureCallback>
 8007d6c:	e005      	b.n	8007d7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa4d 	bl	800820e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fa5c 	bl	8008232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f003 0304 	and.w	r3, r3, #4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d020      	beq.n	8007dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f003 0304 	and.w	r3, r3, #4
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d01b      	beq.n	8007dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f06f 0204 	mvn.w	r2, #4
 8007d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fa34 	bl	8008220 <HAL_TIM_IC_CaptureCallback>
 8007db8:	e005      	b.n	8007dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fa27 	bl	800820e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fa36 	bl	8008232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d020      	beq.n	8007e18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d01b      	beq.n	8007e18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0208 	mvn.w	r2, #8
 8007de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2204      	movs	r2, #4
 8007dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fa0e 	bl	8008220 <HAL_TIM_IC_CaptureCallback>
 8007e04:	e005      	b.n	8007e12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa01 	bl	800820e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fa10 	bl	8008232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f003 0310 	and.w	r3, r3, #16
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d020      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01b      	beq.n	8007e64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0210 	mvn.w	r2, #16
 8007e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2208      	movs	r2, #8
 8007e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f9e8 	bl	8008220 <HAL_TIM_IC_CaptureCallback>
 8007e50:	e005      	b.n	8007e5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f9db 	bl	800820e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f9ea 	bl	8008232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00c      	beq.n	8007e88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d007      	beq.n	8007e88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0201 	mvn.w	r2, #1
 8007e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7fa fa46 	bl	8002314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00c      	beq.n	8007eac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fced 	bl	8008886 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00c      	beq.n	8007ed0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d007      	beq.n	8007ed0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9ba 	bl	8008244 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00c      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d007      	beq.n	8007ef4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f06f 0220 	mvn.w	r2, #32
 8007eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fcc0 	bl	8008874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f16:	2302      	movs	r3, #2
 8007f18:	e0ae      	b.n	8008078 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2b0c      	cmp	r3, #12
 8007f26:	f200 809f 	bhi.w	8008068 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f30:	08007f65 	.word	0x08007f65
 8007f34:	08008069 	.word	0x08008069
 8007f38:	08008069 	.word	0x08008069
 8007f3c:	08008069 	.word	0x08008069
 8007f40:	08007fa5 	.word	0x08007fa5
 8007f44:	08008069 	.word	0x08008069
 8007f48:	08008069 	.word	0x08008069
 8007f4c:	08008069 	.word	0x08008069
 8007f50:	08007fe7 	.word	0x08007fe7
 8007f54:	08008069 	.word	0x08008069
 8007f58:	08008069 	.word	0x08008069
 8007f5c:	08008069 	.word	0x08008069
 8007f60:	08008027 	.word	0x08008027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68b9      	ldr	r1, [r7, #8]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f9e2 	bl	8008334 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0208 	orr.w	r2, r2, #8
 8007f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0204 	bic.w	r2, r2, #4
 8007f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	6999      	ldr	r1, [r3, #24]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	691a      	ldr	r2, [r3, #16]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	619a      	str	r2, [r3, #24]
      break;
 8007fa2:	e064      	b.n	800806e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fa28 	bl	8008400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	699a      	ldr	r2, [r3, #24]
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007fce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6999      	ldr	r1, [r3, #24]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	021a      	lsls	r2, r3, #8
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	619a      	str	r2, [r3, #24]
      break;
 8007fe4:	e043      	b.n	800806e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f000 fa71 	bl	80084d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f042 0208 	orr.w	r2, r2, #8
 8008000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69da      	ldr	r2, [r3, #28]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0204 	bic.w	r2, r2, #4
 8008010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69d9      	ldr	r1, [r3, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	430a      	orrs	r2, r1
 8008022:	61da      	str	r2, [r3, #28]
      break;
 8008024:	e023      	b.n	800806e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68b9      	ldr	r1, [r7, #8]
 800802c:	4618      	mov	r0, r3
 800802e:	f000 fabb 	bl	80085a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69da      	ldr	r2, [r3, #28]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69d9      	ldr	r1, [r3, #28]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	021a      	lsls	r2, r3, #8
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	61da      	str	r2, [r3, #28]
      break;
 8008066:	e002      	b.n	800806e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	75fb      	strb	r3, [r7, #23]
      break;
 800806c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008076:	7dfb      	ldrb	r3, [r7, #23]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008094:	2b01      	cmp	r3, #1
 8008096:	d101      	bne.n	800809c <HAL_TIM_ConfigClockSource+0x1c>
 8008098:	2302      	movs	r3, #2
 800809a:	e0b4      	b.n	8008206 <HAL_TIM_ConfigClockSource+0x186>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2202      	movs	r2, #2
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80080ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80080c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080d4:	d03e      	beq.n	8008154 <HAL_TIM_ConfigClockSource+0xd4>
 80080d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080da:	f200 8087 	bhi.w	80081ec <HAL_TIM_ConfigClockSource+0x16c>
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080e2:	f000 8086 	beq.w	80081f2 <HAL_TIM_ConfigClockSource+0x172>
 80080e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080ea:	d87f      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x16c>
 80080ec:	2b70      	cmp	r3, #112	@ 0x70
 80080ee:	d01a      	beq.n	8008126 <HAL_TIM_ConfigClockSource+0xa6>
 80080f0:	2b70      	cmp	r3, #112	@ 0x70
 80080f2:	d87b      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x16c>
 80080f4:	2b60      	cmp	r3, #96	@ 0x60
 80080f6:	d050      	beq.n	800819a <HAL_TIM_ConfigClockSource+0x11a>
 80080f8:	2b60      	cmp	r3, #96	@ 0x60
 80080fa:	d877      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x16c>
 80080fc:	2b50      	cmp	r3, #80	@ 0x50
 80080fe:	d03c      	beq.n	800817a <HAL_TIM_ConfigClockSource+0xfa>
 8008100:	2b50      	cmp	r3, #80	@ 0x50
 8008102:	d873      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x16c>
 8008104:	2b40      	cmp	r3, #64	@ 0x40
 8008106:	d058      	beq.n	80081ba <HAL_TIM_ConfigClockSource+0x13a>
 8008108:	2b40      	cmp	r3, #64	@ 0x40
 800810a:	d86f      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x16c>
 800810c:	2b30      	cmp	r3, #48	@ 0x30
 800810e:	d064      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x15a>
 8008110:	2b30      	cmp	r3, #48	@ 0x30
 8008112:	d86b      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x16c>
 8008114:	2b20      	cmp	r3, #32
 8008116:	d060      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x15a>
 8008118:	2b20      	cmp	r3, #32
 800811a:	d867      	bhi.n	80081ec <HAL_TIM_ConfigClockSource+0x16c>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d05c      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x15a>
 8008120:	2b10      	cmp	r3, #16
 8008122:	d05a      	beq.n	80081da <HAL_TIM_ConfigClockSource+0x15a>
 8008124:	e062      	b.n	80081ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008136:	f000 fafc 	bl	8008732 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008148:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	609a      	str	r2, [r3, #8]
      break;
 8008152:	e04f      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008164:	f000 fae5 	bl	8008732 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689a      	ldr	r2, [r3, #8]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008176:	609a      	str	r2, [r3, #8]
      break;
 8008178:	e03c      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008186:	461a      	mov	r2, r3
 8008188:	f000 fa5c 	bl	8008644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2150      	movs	r1, #80	@ 0x50
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fab3 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 8008198:	e02c      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081a6:	461a      	mov	r2, r3
 80081a8:	f000 fa7a 	bl	80086a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2160      	movs	r1, #96	@ 0x60
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 faa3 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 80081b8:	e01c      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c6:	461a      	mov	r2, r3
 80081c8:	f000 fa3c 	bl	8008644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2140      	movs	r1, #64	@ 0x40
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fa93 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 80081d8:	e00c      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4619      	mov	r1, r3
 80081e4:	4610      	mov	r0, r2
 80081e6:	f000 fa8a 	bl	80086fe <TIM_ITRx_SetConfig>
      break;
 80081ea:	e003      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	73fb      	strb	r3, [r7, #15]
      break;
 80081f0:	e000      	b.n	80081f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008204:	7bfb      	ldrb	r3, [r7, #15]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008216:	bf00      	nop
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	bc80      	pop	{r7}
 800821e:	4770      	bx	lr

08008220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	bc80      	pop	{r7}
 8008230:	4770      	bx	lr

08008232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008232:	b480      	push	{r7}
 8008234:	b083      	sub	sp, #12
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800823a:	bf00      	nop
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	bc80      	pop	{r7}
 8008242:	4770      	bx	lr

08008244 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	bc80      	pop	{r7}
 8008254:	4770      	bx	lr
	...

08008258 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a2f      	ldr	r2, [pc, #188]	@ (8008328 <TIM_Base_SetConfig+0xd0>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d00b      	beq.n	8008288 <TIM_Base_SetConfig+0x30>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008276:	d007      	beq.n	8008288 <TIM_Base_SetConfig+0x30>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a2c      	ldr	r2, [pc, #176]	@ (800832c <TIM_Base_SetConfig+0xd4>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d003      	beq.n	8008288 <TIM_Base_SetConfig+0x30>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a2b      	ldr	r2, [pc, #172]	@ (8008330 <TIM_Base_SetConfig+0xd8>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d108      	bne.n	800829a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a22      	ldr	r2, [pc, #136]	@ (8008328 <TIM_Base_SetConfig+0xd0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00b      	beq.n	80082ba <TIM_Base_SetConfig+0x62>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082a8:	d007      	beq.n	80082ba <TIM_Base_SetConfig+0x62>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a1f      	ldr	r2, [pc, #124]	@ (800832c <TIM_Base_SetConfig+0xd4>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d003      	beq.n	80082ba <TIM_Base_SetConfig+0x62>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008330 <TIM_Base_SetConfig+0xd8>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d108      	bne.n	80082cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	695b      	ldr	r3, [r3, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008328 <TIM_Base_SetConfig+0xd0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d103      	bne.n	8008300 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	691a      	ldr	r2, [r3, #16]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f023 0201 	bic.w	r2, r3, #1
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	611a      	str	r2, [r3, #16]
  }
}
 800831e:	bf00      	nop
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr
 8008328:	40012c00 	.word	0x40012c00
 800832c:	40000400 	.word	0x40000400
 8008330:	40000800 	.word	0x40000800

08008334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	f023 0201 	bic.w	r2, r3, #1
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 0303 	bic.w	r3, r3, #3
 800836a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f023 0302 	bic.w	r3, r3, #2
 800837c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	697a      	ldr	r2, [r7, #20]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a1c      	ldr	r2, [pc, #112]	@ (80083fc <TIM_OC1_SetConfig+0xc8>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d10c      	bne.n	80083aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f023 0308 	bic.w	r3, r3, #8
 8008396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	f023 0304 	bic.w	r3, r3, #4
 80083a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a13      	ldr	r2, [pc, #76]	@ (80083fc <TIM_OC1_SetConfig+0xc8>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d111      	bne.n	80083d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	621a      	str	r2, [r3, #32]
}
 80083f0:	bf00      	nop
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	40012c00 	.word	0x40012c00

08008400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008400:	b480      	push	{r7}
 8008402:	b087      	sub	sp, #28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a1b      	ldr	r3, [r3, #32]
 800840e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	f023 0210 	bic.w	r2, r3, #16
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800842e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	021b      	lsls	r3, r3, #8
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	4313      	orrs	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f023 0320 	bic.w	r3, r3, #32
 800844a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	697a      	ldr	r2, [r7, #20]
 8008454:	4313      	orrs	r3, r2
 8008456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a1d      	ldr	r2, [pc, #116]	@ (80084d0 <TIM_OC2_SetConfig+0xd0>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d10d      	bne.n	800847c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	011b      	lsls	r3, r3, #4
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800847a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a14      	ldr	r2, [pc, #80]	@ (80084d0 <TIM_OC2_SetConfig+0xd0>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d113      	bne.n	80084ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800848a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	693a      	ldr	r2, [r7, #16]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	621a      	str	r2, [r3, #32]
}
 80084c6:	bf00      	nop
 80084c8:	371c      	adds	r7, #28
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bc80      	pop	{r7}
 80084ce:	4770      	bx	lr
 80084d0:	40012c00 	.word	0x40012c00

080084d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f023 0303 	bic.w	r3, r3, #3
 800850a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	4313      	orrs	r3, r2
 8008514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800851c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	4313      	orrs	r3, r2
 8008528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4a1d      	ldr	r2, [pc, #116]	@ (80085a4 <TIM_OC3_SetConfig+0xd0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d10d      	bne.n	800854e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	021b      	lsls	r3, r3, #8
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800854c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a14      	ldr	r2, [pc, #80]	@ (80085a4 <TIM_OC3_SetConfig+0xd0>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d113      	bne.n	800857e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800855c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	011b      	lsls	r3, r3, #4
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	4313      	orrs	r3, r2
 8008570:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	699b      	ldr	r3, [r3, #24]
 8008576:	011b      	lsls	r3, r3, #4
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	621a      	str	r2, [r3, #32]
}
 8008598:	bf00      	nop
 800859a:	371c      	adds	r7, #28
 800859c:	46bd      	mov	sp, r7
 800859e:	bc80      	pop	{r7}
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop
 80085a4:	40012c00 	.word	0x40012c00

080085a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	021b      	lsls	r3, r3, #8
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	031b      	lsls	r3, r3, #12
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4a0f      	ldr	r2, [pc, #60]	@ (8008640 <TIM_OC4_SetConfig+0x98>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d109      	bne.n	800861c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800860e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	019b      	lsls	r3, r3, #6
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	621a      	str	r2, [r3, #32]
}
 8008636:	bf00      	nop
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr
 8008640:	40012c00 	.word	0x40012c00

08008644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008644:	b480      	push	{r7}
 8008646:	b087      	sub	sp, #28
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	f023 0201 	bic.w	r2, r3, #1
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800866e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f023 030a 	bic.w	r3, r3, #10
 8008680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	4313      	orrs	r3, r2
 8008688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	621a      	str	r2, [r3, #32]
}
 8008696:	bf00      	nop
 8008698:	371c      	adds	r7, #28
 800869a:	46bd      	mov	sp, r7
 800869c:	bc80      	pop	{r7}
 800869e:	4770      	bx	lr

080086a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
 80086b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	f023 0210 	bic.w	r2, r3, #16
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80086ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	031b      	lsls	r3, r3, #12
 80086d0:	693a      	ldr	r2, [r7, #16]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	011b      	lsls	r3, r3, #4
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	621a      	str	r2, [r3, #32]
}
 80086f4:	bf00      	nop
 80086f6:	371c      	adds	r7, #28
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr

080086fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	f043 0307 	orr.w	r3, r3, #7
 8008720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	609a      	str	r2, [r3, #8]
}
 8008728:	bf00      	nop
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr

08008732 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008732:	b480      	push	{r7}
 8008734:	b087      	sub	sp, #28
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	607a      	str	r2, [r7, #4]
 800873e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800874c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	021a      	lsls	r2, r3, #8
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	431a      	orrs	r2, r3
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	4313      	orrs	r3, r2
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	4313      	orrs	r3, r2
 800875e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	609a      	str	r2, [r3, #8]
}
 8008766:	bf00      	nop
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	bc80      	pop	{r7}
 800876e:	4770      	bx	lr

08008770 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f003 031f 	and.w	r3, r3, #31
 8008782:	2201      	movs	r2, #1
 8008784:	fa02 f303 	lsl.w	r3, r2, r3
 8008788:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a1a      	ldr	r2, [r3, #32]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	43db      	mvns	r3, r3
 8008792:	401a      	ands	r2, r3
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1a      	ldr	r2, [r3, #32]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f003 031f 	and.w	r3, r3, #31
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	fa01 f303 	lsl.w	r3, r1, r3
 80087a8:	431a      	orrs	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	621a      	str	r2, [r3, #32]
}
 80087ae:	bf00      	nop
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bc80      	pop	{r7}
 80087b6:	4770      	bx	lr

080087b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e046      	b.n	800885e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2202      	movs	r2, #2
 80087dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a16      	ldr	r2, [pc, #88]	@ (8008868 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d00e      	beq.n	8008832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800881c:	d009      	beq.n	8008832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a12      	ldr	r2, [pc, #72]	@ (800886c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d004      	beq.n	8008832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a10      	ldr	r2, [pc, #64]	@ (8008870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d10c      	bne.n	800884c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	4313      	orrs	r3, r2
 8008842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	bc80      	pop	{r7}
 8008866:	4770      	bx	lr
 8008868:	40012c00 	.word	0x40012c00
 800886c:	40000400 	.word	0x40000400
 8008870:	40000800 	.word	0x40000800

08008874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr

08008886 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	bc80      	pop	{r7}
 8008896:	4770      	bx	lr

08008898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e042      	b.n	8008930 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fb fbdc 	bl	800407c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2224      	movs	r2, #36	@ 0x24
 80088c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68da      	ldr	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 ffc7 	bl	8009870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691a      	ldr	r2, [r3, #16]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	695a      	ldr	r2, [r3, #20]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2220      	movs	r2, #32
 8008924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b08c      	sub	sp, #48	@ 0x30
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	4613      	mov	r3, r2
 8008944:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b20      	cmp	r3, #32
 8008950:	d156      	bne.n	8008a00 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <HAL_UART_Transmit_DMA+0x26>
 8008958:	88fb      	ldrh	r3, [r7, #6]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e04f      	b.n	8008a02 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8008962:	68ba      	ldr	r2, [r7, #8]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	88fa      	ldrh	r2, [r7, #6]
 800896c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	88fa      	ldrh	r2, [r7, #6]
 8008972:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2221      	movs	r2, #33	@ 0x21
 800897e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008986:	4a21      	ldr	r2, [pc, #132]	@ (8008a0c <HAL_UART_Transmit_DMA+0xd4>)
 8008988:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800898e:	4a20      	ldr	r2, [pc, #128]	@ (8008a10 <HAL_UART_Transmit_DMA+0xd8>)
 8008990:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008996:	4a1f      	ldr	r2, [pc, #124]	@ (8008a14 <HAL_UART_Transmit_DMA+0xdc>)
 8008998:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800899e:	2200      	movs	r2, #0
 80089a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80089a2:	f107 0308 	add.w	r3, r7, #8
 80089a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80089ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ae:	6819      	ldr	r1, [r3, #0]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	3304      	adds	r3, #4
 80089b6:	461a      	mov	r2, r3
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	f7fc fd1d 	bl	80053f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80089c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3314      	adds	r3, #20
 80089ce:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	617b      	str	r3, [r7, #20]
   return(result);
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3314      	adds	r3, #20
 80089e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089e8:	627a      	str	r2, [r7, #36]	@ 0x24
 80089ea:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ec:	6a39      	ldr	r1, [r7, #32]
 80089ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089f0:	e841 2300 	strex	r3, r2, [r1]
 80089f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e5      	bne.n	80089c8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	e000      	b.n	8008a02 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8008a00:	2302      	movs	r3, #2
  }
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3730      	adds	r7, #48	@ 0x30
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	08009107 	.word	0x08009107
 8008a10:	080091a1 	.word	0x080091a1
 8008a14:	08009325 	.word	0x08009325

08008a18 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	4613      	mov	r3, r2
 8008a24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d112      	bne.n	8008a58 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d002      	beq.n	8008a3e <HAL_UART_Receive_DMA+0x26>
 8008a38:	88fb      	ldrh	r3, [r7, #6]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d101      	bne.n	8008a42 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e00b      	b.n	8008a5a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a48:	88fb      	ldrh	r3, [r7, #6]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	68b9      	ldr	r1, [r7, #8]
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fcb2 	bl	80093b8 <UART_Start_Receive_DMA>
 8008a54:	4603      	mov	r3, r0
 8008a56:	e000      	b.n	8008a5a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008a58:	2302      	movs	r3, #2
  }
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b09a      	sub	sp, #104	@ 0x68
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	330c      	adds	r3, #12
 8008a70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a80:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	330c      	adds	r3, #12
 8008a88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a8a:	657a      	str	r2, [r7, #84]	@ 0x54
 8008a8c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a92:	e841 2300 	strex	r3, r2, [r1]
 8008a96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1e5      	bne.n	8008a6a <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3314      	adds	r3, #20
 8008aa4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa8:	e853 3f00 	ldrex	r3, [r3]
 8008aac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	f023 0301 	bic.w	r3, r3, #1
 8008ab4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3314      	adds	r3, #20
 8008abc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008abe:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ac4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e5      	bne.n	8008a9e <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d119      	bne.n	8008b0e <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	330c      	adds	r3, #12
 8008ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	e853 3f00 	ldrex	r3, [r3]
 8008ae8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	f023 0310 	bic.w	r3, r3, #16
 8008af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	330c      	adds	r3, #12
 8008af8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008afc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b02:	e841 2300 	strex	r3, r2, [r1]
 8008b06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1e5      	bne.n	8008ada <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d036      	beq.n	8008b8a <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3314      	adds	r3, #20
 8008b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	3314      	adds	r3, #20
 8008b3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b3c:	61ba      	str	r2, [r7, #24]
 8008b3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6979      	ldr	r1, [r7, #20]
 8008b42:	69ba      	ldr	r2, [r7, #24]
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	613b      	str	r3, [r7, #16]
   return(result);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e5      	bne.n	8008b1c <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d018      	beq.n	8008b8a <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fc fca7 	bl	80054b8 <HAL_DMA_Abort>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00c      	beq.n	8008b8a <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fc fe59 	bl	800582c <HAL_DMA_GetError>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	d104      	bne.n	8008b8a <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2210      	movs	r2, #16
 8008b84:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e00a      	b.n	8008ba0 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2220      	movs	r2, #32
 8008b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3768      	adds	r7, #104	@ 0x68
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b0ba      	sub	sp, #232	@ 0xe8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10f      	bne.n	8008c0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf2:	f003 0320 	and.w	r3, r3, #32
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d009      	beq.n	8008c0e <HAL_UART_IRQHandler+0x66>
 8008bfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fd74 	bl	80096f4 <UART_Receive_IT>
      return;
 8008c0c:	e25b      	b.n	80090c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 80de 	beq.w	8008dd4 <HAL_UART_IRQHandler+0x22c>
 8008c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d106      	bne.n	8008c32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c28:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f000 80d1 	beq.w	8008dd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <HAL_UART_IRQHandler+0xae>
 8008c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d005      	beq.n	8008c56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4e:	f043 0201 	orr.w	r2, r3, #1
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c5a:	f003 0304 	and.w	r3, r3, #4
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <HAL_UART_IRQHandler+0xd2>
 8008c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c66:	f003 0301 	and.w	r3, r3, #1
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d005      	beq.n	8008c7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c72:	f043 0202 	orr.w	r2, r3, #2
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00b      	beq.n	8008c9e <HAL_UART_IRQHandler+0xf6>
 8008c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d005      	beq.n	8008c9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c96:	f043 0204 	orr.w	r2, r3, #4
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca2:	f003 0308 	and.w	r3, r3, #8
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d011      	beq.n	8008cce <HAL_UART_IRQHandler+0x126>
 8008caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cae:	f003 0320 	and.w	r3, r3, #32
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d105      	bne.n	8008cc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d005      	beq.n	8008cce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc6:	f043 0208 	orr.w	r2, r3, #8
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 81f2 	beq.w	80090bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d008      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x14e>
 8008ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce8:	f003 0320 	and.w	r3, r3, #32
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fcff 	bl	80096f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	bf14      	ite	ne
 8008d04:	2301      	movne	r3, #1
 8008d06:	2300      	moveq	r3, #0
 8008d08:	b2db      	uxtb	r3, r3
 8008d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d12:	f003 0308 	and.w	r3, r3, #8
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d103      	bne.n	8008d22 <HAL_UART_IRQHandler+0x17a>
 8008d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d04f      	beq.n	8008dc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fc09 	bl	800953a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	695b      	ldr	r3, [r3, #20]
 8008d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d041      	beq.n	8008dba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	3314      	adds	r3, #20
 8008d3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3314      	adds	r3, #20
 8008d5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d72:	e841 2300 	strex	r3, r2, [r1]
 8008d76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1d9      	bne.n	8008d36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d013      	beq.n	8008db2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d8e:	4a7e      	ldr	r2, [pc, #504]	@ (8008f88 <HAL_UART_IRQHandler+0x3e0>)
 8008d90:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fc fbca 	bl	8005530 <HAL_DMA_Abort_IT>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d016      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008dac:	4610      	mov	r0, r2
 8008dae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db0:	e00e      	b.n	8008dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7f9 fca2 	bl	80026fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db8:	e00a      	b.n	8008dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7f9 fc9e 	bl	80026fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc0:	e006      	b.n	8008dd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7f9 fc9a 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008dce:	e175      	b.n	80090bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd0:	bf00      	nop
    return;
 8008dd2:	e173      	b.n	80090bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	f040 814f 	bne.w	800907c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008de2:	f003 0310 	and.w	r3, r3, #16
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 8148 	beq.w	800907c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008df0:	f003 0310 	and.w	r3, r3, #16
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8141 	beq.w	800907c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	60bb      	str	r3, [r7, #8]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	60bb      	str	r3, [r7, #8]
 8008e0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f000 80b6 	beq.w	8008f8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 8145 	beq.w	80090c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	f080 813e 	bcs.w	80090c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	f000 8088 	beq.w	8008f68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e72:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e76:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	330c      	adds	r3, #12
 8008e80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008e84:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e90:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e94:	e841 2300 	strex	r3, r2, [r1]
 8008e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1d9      	bne.n	8008e58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	3314      	adds	r3, #20
 8008eaa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008eb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008eb6:	f023 0301 	bic.w	r3, r3, #1
 8008eba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3314      	adds	r3, #20
 8008ec4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ec8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ecc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ed0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ed4:	e841 2300 	strex	r3, r2, [r1]
 8008ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008eda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e1      	bne.n	8008ea4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3314      	adds	r3, #20
 8008ee6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eea:	e853 3f00 	ldrex	r3, [r3]
 8008eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ef0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	3314      	adds	r3, #20
 8008f00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008f04:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008f06:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008f0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008f12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e3      	bne.n	8008ee0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	330c      	adds	r3, #12
 8008f2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f30:	e853 3f00 	ldrex	r3, [r3]
 8008f34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f38:	f023 0310 	bic.w	r3, r3, #16
 8008f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	330c      	adds	r3, #12
 8008f46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008f4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f4c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e3      	bne.n	8008f26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fc faa8 	bl	80054b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2202      	movs	r2, #2
 8008f6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	1ad3      	subs	r3, r2, r3
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f8b6 	bl	80090f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f84:	e09c      	b.n	80090c0 <HAL_UART_IRQHandler+0x518>
 8008f86:	bf00      	nop
 8008f88:	080095ff 	.word	0x080095ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	1ad3      	subs	r3, r2, r3
 8008f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 808e 	beq.w	80090c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f000 8089 	beq.w	80090c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	330c      	adds	r3, #12
 8008fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	330c      	adds	r3, #12
 8008fd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008fd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fd8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e3      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	3314      	adds	r3, #20
 8008ff0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff4:	e853 3f00 	ldrex	r3, [r3]
 8008ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8008ffa:	6a3b      	ldr	r3, [r7, #32]
 8008ffc:	f023 0301 	bic.w	r3, r3, #1
 8009000:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3314      	adds	r3, #20
 800900a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800900e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009010:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800901c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e3      	bne.n	8008fea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2220      	movs	r2, #32
 8009026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f023 0310 	bic.w	r3, r3, #16
 8009046:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	330c      	adds	r3, #12
 8009050:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009054:	61fa      	str	r2, [r7, #28]
 8009056:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	69b9      	ldr	r1, [r7, #24]
 800905a:	69fa      	ldr	r2, [r7, #28]
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	617b      	str	r3, [r7, #20]
   return(result);
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e3      	bne.n	8009030 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800906e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f83b 	bl	80090f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800907a:	e023      	b.n	80090c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800907c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009084:	2b00      	cmp	r3, #0
 8009086:	d009      	beq.n	800909c <HAL_UART_IRQHandler+0x4f4>
 8009088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800908c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fac6 	bl	8009626 <UART_Transmit_IT>
    return;
 800909a:	e014      	b.n	80090c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800909c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00e      	beq.n	80090c6 <HAL_UART_IRQHandler+0x51e>
 80090a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d008      	beq.n	80090c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fb05 	bl	80096c4 <UART_EndTransmit_IT>
    return;
 80090ba:	e004      	b.n	80090c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80090bc:	bf00      	nop
 80090be:	e002      	b.n	80090c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80090c0:	bf00      	nop
 80090c2:	e000      	b.n	80090c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80090c4:	bf00      	nop
  }
}
 80090c6:	37e8      	adds	r7, #232	@ 0xe8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	bc80      	pop	{r7}
 80090dc:	4770      	bx	lr

080090de <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bc80      	pop	{r7}
 80090ee:	4770      	bx	lr

080090f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	bc80      	pop	{r7}
 8009104:	4770      	bx	lr

08009106 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b090      	sub	sp, #64	@ 0x40
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009112:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0320 	and.w	r3, r3, #32
 800911e:	2b00      	cmp	r3, #0
 8009120:	d137      	bne.n	8009192 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009124:	2200      	movs	r2, #0
 8009126:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3314      	adds	r3, #20
 800912e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	623b      	str	r3, [r7, #32]
   return(result);
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800913e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	3314      	adds	r3, #20
 8009146:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009148:	633a      	str	r2, [r7, #48]	@ 0x30
 800914a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800914e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e5      	bne.n	8009128 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800915c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	330c      	adds	r3, #12
 8009162:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	60fb      	str	r3, [r7, #12]
   return(result);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009172:	637b      	str	r3, [r7, #52]	@ 0x34
 8009174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	330c      	adds	r3, #12
 800917a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800917c:	61fa      	str	r2, [r7, #28]
 800917e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	69b9      	ldr	r1, [r7, #24]
 8009182:	69fa      	ldr	r2, [r7, #28]
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	617b      	str	r3, [r7, #20]
   return(result);
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e5      	bne.n	800915c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009190:	e002      	b.n	8009198 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009192:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009194:	f7ff ff9a 	bl	80090cc <HAL_UART_TxCpltCallback>
}
 8009198:	bf00      	nop
 800919a:	3740      	adds	r7, #64	@ 0x40
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ac:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff ff95 	bl	80090de <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091b4:	bf00      	nop
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b09c      	sub	sp, #112	@ 0x70
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091c8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d172      	bne.n	80092be <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80091d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091da:	2200      	movs	r2, #0
 80091dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	330c      	adds	r3, #12
 80091e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091e8:	e853 3f00 	ldrex	r3, [r3]
 80091ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	330c      	adds	r3, #12
 80091fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80091fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009200:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009202:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009206:	e841 2300 	strex	r3, r2, [r1]
 800920a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800920c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1e5      	bne.n	80091de <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	3314      	adds	r3, #20
 8009218:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921c:	e853 3f00 	ldrex	r3, [r3]
 8009220:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009224:	f023 0301 	bic.w	r3, r3, #1
 8009228:	667b      	str	r3, [r7, #100]	@ 0x64
 800922a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	3314      	adds	r3, #20
 8009230:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009232:	647a      	str	r2, [r7, #68]	@ 0x44
 8009234:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009236:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e5      	bne.n	8009212 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3314      	adds	r3, #20
 800924c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	623b      	str	r3, [r7, #32]
   return(result);
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800925c:	663b      	str	r3, [r7, #96]	@ 0x60
 800925e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3314      	adds	r3, #20
 8009264:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009266:	633a      	str	r2, [r7, #48]	@ 0x30
 8009268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800926c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800926e:	e841 2300 	strex	r3, r2, [r1]
 8009272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009276:	2b00      	cmp	r3, #0
 8009278:	d1e5      	bne.n	8009246 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800927a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800927c:	2220      	movs	r2, #32
 800927e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009286:	2b01      	cmp	r3, #1
 8009288:	d119      	bne.n	80092be <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800928a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	330c      	adds	r3, #12
 8009290:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	e853 3f00 	ldrex	r3, [r3]
 8009298:	60fb      	str	r3, [r7, #12]
   return(result);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f023 0310 	bic.w	r3, r3, #16
 80092a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80092a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	330c      	adds	r3, #12
 80092a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80092aa:	61fa      	str	r2, [r7, #28]
 80092ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ae:	69b9      	ldr	r1, [r7, #24]
 80092b0:	69fa      	ldr	r2, [r7, #28]
 80092b2:	e841 2300 	strex	r3, r2, [r1]
 80092b6:	617b      	str	r3, [r7, #20]
   return(result);
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1e5      	bne.n	800928a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092c0:	2200      	movs	r2, #0
 80092c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d106      	bne.n	80092da <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80092d0:	4619      	mov	r1, r3
 80092d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80092d4:	f7ff ff0c 	bl	80090f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092d8:	e002      	b.n	80092e0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80092da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80092dc:	f7f9 f988 	bl	80025f0 <HAL_UART_RxCpltCallback>
}
 80092e0:	bf00      	nop
 80092e2:	3770      	adds	r7, #112	@ 0x70
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2201      	movs	r2, #1
 80092fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009300:	2b01      	cmp	r3, #1
 8009302:	d108      	bne.n	8009316 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009308:	085b      	lsrs	r3, r3, #1
 800930a:	b29b      	uxth	r3, r3
 800930c:	4619      	mov	r1, r3
 800930e:	68f8      	ldr	r0, [r7, #12]
 8009310:	f7ff feee 	bl	80090f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009314:	e002      	b.n	800931c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7f9 f9cc 	bl	80026b4 <HAL_UART_RxHalfCpltCallback>
}
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800932c:	2300      	movs	r3, #0
 800932e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009334:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	695b      	ldr	r3, [r3, #20]
 800933c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009340:	2b00      	cmp	r3, #0
 8009342:	bf14      	ite	ne
 8009344:	2301      	movne	r3, #1
 8009346:	2300      	moveq	r3, #0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b21      	cmp	r3, #33	@ 0x21
 8009356:	d108      	bne.n	800936a <UART_DMAError+0x46>
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d005      	beq.n	800936a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2200      	movs	r2, #0
 8009362:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009364:	68b8      	ldr	r0, [r7, #8]
 8009366:	f000 f8c1 	bl	80094ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009374:	2b00      	cmp	r3, #0
 8009376:	bf14      	ite	ne
 8009378:	2301      	movne	r3, #1
 800937a:	2300      	moveq	r3, #0
 800937c:	b2db      	uxtb	r3, r3
 800937e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009386:	b2db      	uxtb	r3, r3
 8009388:	2b22      	cmp	r3, #34	@ 0x22
 800938a:	d108      	bne.n	800939e <UART_DMAError+0x7a>
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d005      	beq.n	800939e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2200      	movs	r2, #0
 8009396:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009398:	68b8      	ldr	r0, [r7, #8]
 800939a:	f000 f8ce 	bl	800953a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a2:	f043 0210 	orr.w	r2, r3, #16
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093aa:	68b8      	ldr	r0, [r7, #8]
 80093ac:	f7f9 f9a6 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b098      	sub	sp, #96	@ 0x60
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4613      	mov	r3, r2
 80093c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	88fa      	ldrh	r2, [r7, #6]
 80093d0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2222      	movs	r2, #34	@ 0x22
 80093dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e4:	4a3e      	ldr	r2, [pc, #248]	@ (80094e0 <UART_Start_Receive_DMA+0x128>)
 80093e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ec:	4a3d      	ldr	r2, [pc, #244]	@ (80094e4 <UART_Start_Receive_DMA+0x12c>)
 80093ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f4:	4a3c      	ldr	r2, [pc, #240]	@ (80094e8 <UART_Start_Receive_DMA+0x130>)
 80093f6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093fc:	2200      	movs	r2, #0
 80093fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009400:	f107 0308 	add.w	r3, r7, #8
 8009404:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	3304      	adds	r3, #4
 8009410:	4619      	mov	r1, r3
 8009412:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	88fb      	ldrh	r3, [r7, #6]
 8009418:	f7fb ffee 	bl	80053f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800941c:	2300      	movs	r3, #0
 800941e:	613b      	str	r3, [r7, #16]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	613b      	str	r3, [r7, #16]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	613b      	str	r3, [r7, #16]
 8009430:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d019      	beq.n	800946e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	330c      	adds	r3, #12
 8009440:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800944a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800944c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009450:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	330c      	adds	r3, #12
 8009458:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800945a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800945c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e5      	bne.n	800943a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3314      	adds	r3, #20
 8009474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	e853 3f00 	ldrex	r3, [r3]
 800947c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	f043 0301 	orr.w	r3, r3, #1
 8009484:	657b      	str	r3, [r7, #84]	@ 0x54
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3314      	adds	r3, #20
 800948c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800948e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009490:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009492:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009494:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009496:	e841 2300 	strex	r3, r2, [r1]
 800949a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1e5      	bne.n	800946e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3314      	adds	r3, #20
 80094a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	e853 3f00 	ldrex	r3, [r3]
 80094b0:	617b      	str	r3, [r7, #20]
   return(result);
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3314      	adds	r3, #20
 80094c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80094c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80094c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c6:	6a39      	ldr	r1, [r7, #32]
 80094c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094ca:	e841 2300 	strex	r3, r2, [r1]
 80094ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1e5      	bne.n	80094a2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3760      	adds	r7, #96	@ 0x60
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	080091bd 	.word	0x080091bd
 80094e4:	080092e9 	.word	0x080092e9
 80094e8:	08009325 	.word	0x08009325

080094ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b089      	sub	sp, #36	@ 0x24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	330c      	adds	r3, #12
 80094fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	e853 3f00 	ldrex	r3, [r3]
 8009502:	60bb      	str	r3, [r7, #8]
   return(result);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800950a:	61fb      	str	r3, [r7, #28]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	330c      	adds	r3, #12
 8009512:	69fa      	ldr	r2, [r7, #28]
 8009514:	61ba      	str	r2, [r7, #24]
 8009516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	6979      	ldr	r1, [r7, #20]
 800951a:	69ba      	ldr	r2, [r7, #24]
 800951c:	e841 2300 	strex	r3, r2, [r1]
 8009520:	613b      	str	r3, [r7, #16]
   return(result);
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e5      	bne.n	80094f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2220      	movs	r2, #32
 800952c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009530:	bf00      	nop
 8009532:	3724      	adds	r7, #36	@ 0x24
 8009534:	46bd      	mov	sp, r7
 8009536:	bc80      	pop	{r7}
 8009538:	4770      	bx	lr

0800953a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800953a:	b480      	push	{r7}
 800953c:	b095      	sub	sp, #84	@ 0x54
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	330c      	adds	r3, #12
 8009548:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	330c      	adds	r3, #12
 8009560:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009562:	643a      	str	r2, [r7, #64]	@ 0x40
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009568:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e5      	bne.n	8009542 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3314      	adds	r3, #20
 800957c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	61fb      	str	r3, [r7, #28]
   return(result);
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	f023 0301 	bic.w	r3, r3, #1
 800958c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3314      	adds	r3, #20
 8009594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009596:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009598:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800959c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e5      	bne.n	8009576 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d119      	bne.n	80095e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	330c      	adds	r3, #12
 80095b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	f023 0310 	bic.w	r3, r3, #16
 80095c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	330c      	adds	r3, #12
 80095d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095d2:	61ba      	str	r2, [r7, #24]
 80095d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6979      	ldr	r1, [r7, #20]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	613b      	str	r3, [r7, #16]
   return(result);
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e5      	bne.n	80095b2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2220      	movs	r2, #32
 80095ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80095f4:	bf00      	nop
 80095f6:	3754      	adds	r7, #84	@ 0x54
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr

080095fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f7f9 f86f 	bl	80026fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009626:	b480      	push	{r7}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b21      	cmp	r3, #33	@ 0x21
 8009638:	d13e      	bne.n	80096b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009642:	d114      	bne.n	800966e <UART_Transmit_IT+0x48>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d110      	bne.n	800966e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a1b      	ldr	r3, [r3, #32]
 8009650:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	881b      	ldrh	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009660:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	1c9a      	adds	r2, r3, #2
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	621a      	str	r2, [r3, #32]
 800966c:	e008      	b.n	8009680 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	1c59      	adds	r1, r3, #1
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	6211      	str	r1, [r2, #32]
 8009678:	781a      	ldrb	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009684:	b29b      	uxth	r3, r3
 8009686:	3b01      	subs	r3, #1
 8009688:	b29b      	uxth	r3, r3
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	4619      	mov	r1, r3
 800968e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10f      	bne.n	80096b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80096a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	e000      	b.n	80096ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096b8:	2302      	movs	r3, #2
  }
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3714      	adds	r7, #20
 80096be:	46bd      	mov	sp, r7
 80096c0:	bc80      	pop	{r7}
 80096c2:	4770      	bx	lr

080096c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff fcf1 	bl	80090cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08c      	sub	sp, #48	@ 0x30
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009702:	b2db      	uxtb	r3, r3
 8009704:	2b22      	cmp	r3, #34	@ 0x22
 8009706:	f040 80ae 	bne.w	8009866 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009712:	d117      	bne.n	8009744 <UART_Receive_IT+0x50>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d113      	bne.n	8009744 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009724:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	b29b      	uxth	r3, r3
 800972e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009732:	b29a      	uxth	r2, r3
 8009734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009736:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800973c:	1c9a      	adds	r2, r3, #2
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	629a      	str	r2, [r3, #40]	@ 0x28
 8009742:	e026      	b.n	8009792 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009748:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800974a:	2300      	movs	r3, #0
 800974c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009756:	d007      	beq.n	8009768 <UART_Receive_IT+0x74>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d10a      	bne.n	8009776 <UART_Receive_IT+0x82>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d106      	bne.n	8009776 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	b2da      	uxtb	r2, r3
 8009770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009772:	701a      	strb	r2, [r3, #0]
 8009774:	e008      	b.n	8009788 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	b2db      	uxtb	r3, r3
 800977e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009782:	b2da      	uxtb	r2, r3
 8009784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009786:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800978c:	1c5a      	adds	r2, r3, #1
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009796:	b29b      	uxth	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b29b      	uxth	r3, r3
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	4619      	mov	r1, r3
 80097a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d15d      	bne.n	8009862 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68da      	ldr	r2, [r3, #12]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f022 0220 	bic.w	r2, r2, #32
 80097b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80097c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	695a      	ldr	r2, [r3, #20]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d135      	bne.n	8009858 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	330c      	adds	r3, #12
 80097f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	613b      	str	r3, [r7, #16]
   return(result);
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f023 0310 	bic.w	r3, r3, #16
 8009808:	627b      	str	r3, [r7, #36]	@ 0x24
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	330c      	adds	r3, #12
 8009810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009812:	623a      	str	r2, [r7, #32]
 8009814:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	69f9      	ldr	r1, [r7, #28]
 8009818:	6a3a      	ldr	r2, [r7, #32]
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e5      	bne.n	80097f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b10      	cmp	r3, #16
 8009832:	d10a      	bne.n	800984a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	60fb      	str	r3, [r7, #12]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	60fb      	str	r3, [r7, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff fc4d 	bl	80090f0 <HAL_UARTEx_RxEventCallback>
 8009856:	e002      	b.n	800985e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f7f8 fec9 	bl	80025f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800985e:	2300      	movs	r3, #0
 8009860:	e002      	b.n	8009868 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	e000      	b.n	8009868 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009866:	2302      	movs	r3, #2
  }
}
 8009868:	4618      	mov	r0, r3
 800986a:	3730      	adds	r7, #48	@ 0x30
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	689a      	ldr	r2, [r3, #8]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	431a      	orrs	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	4313      	orrs	r3, r2
 800989e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80098aa:	f023 030c 	bic.w	r3, r3, #12
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	6812      	ldr	r2, [r2, #0]
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	430b      	orrs	r3, r1
 80098b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	430a      	orrs	r2, r1
 80098cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a2c      	ldr	r2, [pc, #176]	@ (8009984 <UART_SetConfig+0x114>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d103      	bne.n	80098e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80098d8:	f7fd fdbe 	bl	8007458 <HAL_RCC_GetPCLK2Freq>
 80098dc:	60f8      	str	r0, [r7, #12]
 80098de:	e002      	b.n	80098e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80098e0:	f7fd fda6 	bl	8007430 <HAL_RCC_GetPCLK1Freq>
 80098e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	009a      	lsls	r2, r3, #2
 80098f0:	441a      	add	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fc:	4a22      	ldr	r2, [pc, #136]	@ (8009988 <UART_SetConfig+0x118>)
 80098fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009902:	095b      	lsrs	r3, r3, #5
 8009904:	0119      	lsls	r1, r3, #4
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009a      	lsls	r2, r3, #2
 8009910:	441a      	add	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	fbb2 f2f3 	udiv	r2, r2, r3
 800991c:	4b1a      	ldr	r3, [pc, #104]	@ (8009988 <UART_SetConfig+0x118>)
 800991e:	fba3 0302 	umull	r0, r3, r3, r2
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	2064      	movs	r0, #100	@ 0x64
 8009926:	fb00 f303 	mul.w	r3, r0, r3
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	3332      	adds	r3, #50	@ 0x32
 8009930:	4a15      	ldr	r2, [pc, #84]	@ (8009988 <UART_SetConfig+0x118>)
 8009932:	fba2 2303 	umull	r2, r3, r2, r3
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800993c:	4419      	add	r1, r3
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	4613      	mov	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	009a      	lsls	r2, r3, #2
 8009948:	441a      	add	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	fbb2 f2f3 	udiv	r2, r2, r3
 8009954:	4b0c      	ldr	r3, [pc, #48]	@ (8009988 <UART_SetConfig+0x118>)
 8009956:	fba3 0302 	umull	r0, r3, r3, r2
 800995a:	095b      	lsrs	r3, r3, #5
 800995c:	2064      	movs	r0, #100	@ 0x64
 800995e:	fb00 f303 	mul.w	r3, r0, r3
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	3332      	adds	r3, #50	@ 0x32
 8009968:	4a07      	ldr	r2, [pc, #28]	@ (8009988 <UART_SetConfig+0x118>)
 800996a:	fba2 2303 	umull	r2, r3, r2, r3
 800996e:	095b      	lsrs	r3, r3, #5
 8009970:	f003 020f 	and.w	r2, r3, #15
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	440a      	add	r2, r1
 800997a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	40013800 	.word	0x40013800
 8009988:	51eb851f 	.word	0x51eb851f

0800998c <atof>:
 800998c:	2100      	movs	r1, #0
 800998e:	f000 bdfb 	b.w	800a588 <strtod>

08009992 <sulp>:
 8009992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	460f      	mov	r7, r1
 8009998:	4690      	mov	r8, r2
 800999a:	f001 ff57 	bl	800b84c <__ulp>
 800999e:	4604      	mov	r4, r0
 80099a0:	460d      	mov	r5, r1
 80099a2:	f1b8 0f00 	cmp.w	r8, #0
 80099a6:	d011      	beq.n	80099cc <sulp+0x3a>
 80099a8:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80099ac:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dd0b      	ble.n	80099cc <sulp+0x3a>
 80099b4:	2400      	movs	r4, #0
 80099b6:	051b      	lsls	r3, r3, #20
 80099b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80099bc:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80099c0:	4622      	mov	r2, r4
 80099c2:	462b      	mov	r3, r5
 80099c4:	f7f6 fd88 	bl	80004d8 <__aeabi_dmul>
 80099c8:	4604      	mov	r4, r0
 80099ca:	460d      	mov	r5, r1
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d4:	0000      	movs	r0, r0
	...

080099d8 <_strtod_l>:
 80099d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099dc:	b09f      	sub	sp, #124	@ 0x7c
 80099de:	9217      	str	r2, [sp, #92]	@ 0x5c
 80099e0:	2200      	movs	r2, #0
 80099e2:	460c      	mov	r4, r1
 80099e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80099e6:	f04f 0a00 	mov.w	sl, #0
 80099ea:	f04f 0b00 	mov.w	fp, #0
 80099ee:	460a      	mov	r2, r1
 80099f0:	9005      	str	r0, [sp, #20]
 80099f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80099f4:	7811      	ldrb	r1, [r2, #0]
 80099f6:	292b      	cmp	r1, #43	@ 0x2b
 80099f8:	d048      	beq.n	8009a8c <_strtod_l+0xb4>
 80099fa:	d836      	bhi.n	8009a6a <_strtod_l+0x92>
 80099fc:	290d      	cmp	r1, #13
 80099fe:	d830      	bhi.n	8009a62 <_strtod_l+0x8a>
 8009a00:	2908      	cmp	r1, #8
 8009a02:	d830      	bhi.n	8009a66 <_strtod_l+0x8e>
 8009a04:	2900      	cmp	r1, #0
 8009a06:	d039      	beq.n	8009a7c <_strtod_l+0xa4>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a0e:	782a      	ldrb	r2, [r5, #0]
 8009a10:	2a30      	cmp	r2, #48	@ 0x30
 8009a12:	f040 80b0 	bne.w	8009b76 <_strtod_l+0x19e>
 8009a16:	786a      	ldrb	r2, [r5, #1]
 8009a18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a1c:	2a58      	cmp	r2, #88	@ 0x58
 8009a1e:	d16c      	bne.n	8009afa <_strtod_l+0x122>
 8009a20:	9302      	str	r3, [sp, #8]
 8009a22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a24:	4a8f      	ldr	r2, [pc, #572]	@ (8009c64 <_strtod_l+0x28c>)
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	9805      	ldr	r0, [sp, #20]
 8009a2e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a30:	a919      	add	r1, sp, #100	@ 0x64
 8009a32:	f001 f80d 	bl	800aa50 <__gethex>
 8009a36:	f010 060f 	ands.w	r6, r0, #15
 8009a3a:	4604      	mov	r4, r0
 8009a3c:	d005      	beq.n	8009a4a <_strtod_l+0x72>
 8009a3e:	2e06      	cmp	r6, #6
 8009a40:	d126      	bne.n	8009a90 <_strtod_l+0xb8>
 8009a42:	2300      	movs	r3, #0
 8009a44:	3501      	adds	r5, #1
 8009a46:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a48:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f040 8582 	bne.w	800a556 <_strtod_l+0xb7e>
 8009a52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a54:	b1bb      	cbz	r3, 8009a86 <_strtod_l+0xae>
 8009a56:	4650      	mov	r0, sl
 8009a58:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009a5c:	b01f      	add	sp, #124	@ 0x7c
 8009a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a62:	2920      	cmp	r1, #32
 8009a64:	d1d0      	bne.n	8009a08 <_strtod_l+0x30>
 8009a66:	3201      	adds	r2, #1
 8009a68:	e7c3      	b.n	80099f2 <_strtod_l+0x1a>
 8009a6a:	292d      	cmp	r1, #45	@ 0x2d
 8009a6c:	d1cc      	bne.n	8009a08 <_strtod_l+0x30>
 8009a6e:	2101      	movs	r1, #1
 8009a70:	910e      	str	r1, [sp, #56]	@ 0x38
 8009a72:	1c51      	adds	r1, r2, #1
 8009a74:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a76:	7852      	ldrb	r2, [r2, #1]
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	d1c7      	bne.n	8009a0c <_strtod_l+0x34>
 8009a7c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a7e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f040 8566 	bne.w	800a552 <_strtod_l+0xb7a>
 8009a86:	4650      	mov	r0, sl
 8009a88:	4659      	mov	r1, fp
 8009a8a:	e7e7      	b.n	8009a5c <_strtod_l+0x84>
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	e7ef      	b.n	8009a70 <_strtod_l+0x98>
 8009a90:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a92:	b13a      	cbz	r2, 8009aa4 <_strtod_l+0xcc>
 8009a94:	2135      	movs	r1, #53	@ 0x35
 8009a96:	a81c      	add	r0, sp, #112	@ 0x70
 8009a98:	f001 ffc8 	bl	800ba2c <__copybits>
 8009a9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a9e:	9805      	ldr	r0, [sp, #20]
 8009aa0:	f001 fba8 	bl	800b1f4 <_Bfree>
 8009aa4:	3e01      	subs	r6, #1
 8009aa6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009aa8:	2e04      	cmp	r6, #4
 8009aaa:	d806      	bhi.n	8009aba <_strtod_l+0xe2>
 8009aac:	e8df f006 	tbb	[pc, r6]
 8009ab0:	201d0314 	.word	0x201d0314
 8009ab4:	14          	.byte	0x14
 8009ab5:	00          	.byte	0x00
 8009ab6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009aba:	05e1      	lsls	r1, r4, #23
 8009abc:	bf48      	it	mi
 8009abe:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ac2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ac6:	0d1b      	lsrs	r3, r3, #20
 8009ac8:	051b      	lsls	r3, r3, #20
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1bd      	bne.n	8009a4a <_strtod_l+0x72>
 8009ace:	f000 fecd 	bl	800a86c <__errno>
 8009ad2:	2322      	movs	r3, #34	@ 0x22
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	e7b8      	b.n	8009a4a <_strtod_l+0x72>
 8009ad8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009adc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ae0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ae4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ae8:	e7e7      	b.n	8009aba <_strtod_l+0xe2>
 8009aea:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009c68 <_strtod_l+0x290>
 8009aee:	e7e4      	b.n	8009aba <_strtod_l+0xe2>
 8009af0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009af4:	f04f 3aff 	mov.w	sl, #4294967295
 8009af8:	e7df      	b.n	8009aba <_strtod_l+0xe2>
 8009afa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b00:	785b      	ldrb	r3, [r3, #1]
 8009b02:	2b30      	cmp	r3, #48	@ 0x30
 8009b04:	d0f9      	beq.n	8009afa <_strtod_l+0x122>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d09f      	beq.n	8009a4a <_strtod_l+0x72>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	2700      	movs	r7, #0
 8009b0e:	220a      	movs	r2, #10
 8009b10:	46b9      	mov	r9, r7
 8009b12:	9308      	str	r3, [sp, #32]
 8009b14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b16:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009b18:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b1a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b1c:	7805      	ldrb	r5, [r0, #0]
 8009b1e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b22:	b2d9      	uxtb	r1, r3
 8009b24:	2909      	cmp	r1, #9
 8009b26:	d928      	bls.n	8009b7a <_strtod_l+0x1a2>
 8009b28:	2201      	movs	r2, #1
 8009b2a:	4950      	ldr	r1, [pc, #320]	@ (8009c6c <_strtod_l+0x294>)
 8009b2c:	f000 fe45 	bl	800a7ba <strncmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	d032      	beq.n	8009b9a <_strtod_l+0x1c2>
 8009b34:	2000      	movs	r0, #0
 8009b36:	462a      	mov	r2, r5
 8009b38:	4603      	mov	r3, r0
 8009b3a:	464d      	mov	r5, r9
 8009b3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b3e:	2a65      	cmp	r2, #101	@ 0x65
 8009b40:	d001      	beq.n	8009b46 <_strtod_l+0x16e>
 8009b42:	2a45      	cmp	r2, #69	@ 0x45
 8009b44:	d114      	bne.n	8009b70 <_strtod_l+0x198>
 8009b46:	b91d      	cbnz	r5, 8009b50 <_strtod_l+0x178>
 8009b48:	9a08      	ldr	r2, [sp, #32]
 8009b4a:	4302      	orrs	r2, r0
 8009b4c:	d096      	beq.n	8009a7c <_strtod_l+0xa4>
 8009b4e:	2500      	movs	r5, #0
 8009b50:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009b52:	1c62      	adds	r2, r4, #1
 8009b54:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b56:	7862      	ldrb	r2, [r4, #1]
 8009b58:	2a2b      	cmp	r2, #43	@ 0x2b
 8009b5a:	d07a      	beq.n	8009c52 <_strtod_l+0x27a>
 8009b5c:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b5e:	d07e      	beq.n	8009c5e <_strtod_l+0x286>
 8009b60:	f04f 0c00 	mov.w	ip, #0
 8009b64:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b68:	2909      	cmp	r1, #9
 8009b6a:	f240 8085 	bls.w	8009c78 <_strtod_l+0x2a0>
 8009b6e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b70:	f04f 0800 	mov.w	r8, #0
 8009b74:	e0a5      	b.n	8009cc2 <_strtod_l+0x2ea>
 8009b76:	2300      	movs	r3, #0
 8009b78:	e7c8      	b.n	8009b0c <_strtod_l+0x134>
 8009b7a:	f1b9 0f08 	cmp.w	r9, #8
 8009b7e:	bfd8      	it	le
 8009b80:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009b82:	f100 0001 	add.w	r0, r0, #1
 8009b86:	bfd6      	itet	le
 8009b88:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b8c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009b90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009b92:	f109 0901 	add.w	r9, r9, #1
 8009b96:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b98:	e7bf      	b.n	8009b1a <_strtod_l+0x142>
 8009b9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b9c:	1c5a      	adds	r2, r3, #1
 8009b9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ba0:	785a      	ldrb	r2, [r3, #1]
 8009ba2:	f1b9 0f00 	cmp.w	r9, #0
 8009ba6:	d03b      	beq.n	8009c20 <_strtod_l+0x248>
 8009ba8:	464d      	mov	r5, r9
 8009baa:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bac:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009bb0:	2b09      	cmp	r3, #9
 8009bb2:	d912      	bls.n	8009bda <_strtod_l+0x202>
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e7c2      	b.n	8009b3e <_strtod_l+0x166>
 8009bb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bba:	3001      	adds	r0, #1
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bc0:	785a      	ldrb	r2, [r3, #1]
 8009bc2:	2a30      	cmp	r2, #48	@ 0x30
 8009bc4:	d0f8      	beq.n	8009bb8 <_strtod_l+0x1e0>
 8009bc6:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009bca:	2b08      	cmp	r3, #8
 8009bcc:	f200 84c8 	bhi.w	800a560 <_strtod_l+0xb88>
 8009bd0:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	4605      	mov	r5, r0
 8009bd6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bd8:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bda:	3a30      	subs	r2, #48	@ 0x30
 8009bdc:	f100 0301 	add.w	r3, r0, #1
 8009be0:	d018      	beq.n	8009c14 <_strtod_l+0x23c>
 8009be2:	462e      	mov	r6, r5
 8009be4:	f04f 0e0a 	mov.w	lr, #10
 8009be8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bea:	4419      	add	r1, r3
 8009bec:	910a      	str	r1, [sp, #40]	@ 0x28
 8009bee:	1c71      	adds	r1, r6, #1
 8009bf0:	eba1 0c05 	sub.w	ip, r1, r5
 8009bf4:	4563      	cmp	r3, ip
 8009bf6:	dc15      	bgt.n	8009c24 <_strtod_l+0x24c>
 8009bf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009bfc:	182b      	adds	r3, r5, r0
 8009bfe:	2b08      	cmp	r3, #8
 8009c00:	f105 0501 	add.w	r5, r5, #1
 8009c04:	4405      	add	r5, r0
 8009c06:	dc1a      	bgt.n	8009c3e <_strtod_l+0x266>
 8009c08:	230a      	movs	r3, #10
 8009c0a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c0c:	fb03 2301 	mla	r3, r3, r1, r2
 8009c10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c12:	2300      	movs	r3, #0
 8009c14:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c16:	4618      	mov	r0, r3
 8009c18:	1c51      	adds	r1, r2, #1
 8009c1a:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c1c:	7852      	ldrb	r2, [r2, #1]
 8009c1e:	e7c5      	b.n	8009bac <_strtod_l+0x1d4>
 8009c20:	4648      	mov	r0, r9
 8009c22:	e7ce      	b.n	8009bc2 <_strtod_l+0x1ea>
 8009c24:	2e08      	cmp	r6, #8
 8009c26:	dc05      	bgt.n	8009c34 <_strtod_l+0x25c>
 8009c28:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009c2a:	fb0e f606 	mul.w	r6, lr, r6
 8009c2e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009c30:	460e      	mov	r6, r1
 8009c32:	e7dc      	b.n	8009bee <_strtod_l+0x216>
 8009c34:	2910      	cmp	r1, #16
 8009c36:	bfd8      	it	le
 8009c38:	fb0e f707 	mulle.w	r7, lr, r7
 8009c3c:	e7f8      	b.n	8009c30 <_strtod_l+0x258>
 8009c3e:	2b0f      	cmp	r3, #15
 8009c40:	bfdc      	itt	le
 8009c42:	230a      	movle	r3, #10
 8009c44:	fb03 2707 	mlale	r7, r3, r7, r2
 8009c48:	e7e3      	b.n	8009c12 <_strtod_l+0x23a>
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e77a      	b.n	8009b48 <_strtod_l+0x170>
 8009c52:	f04f 0c00 	mov.w	ip, #0
 8009c56:	1ca2      	adds	r2, r4, #2
 8009c58:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c5a:	78a2      	ldrb	r2, [r4, #2]
 8009c5c:	e782      	b.n	8009b64 <_strtod_l+0x18c>
 8009c5e:	f04f 0c01 	mov.w	ip, #1
 8009c62:	e7f8      	b.n	8009c56 <_strtod_l+0x27e>
 8009c64:	0800cb24 	.word	0x0800cb24
 8009c68:	7ff00000 	.word	0x7ff00000
 8009c6c:	0800c9aa 	.word	0x0800c9aa
 8009c70:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c72:	1c51      	adds	r1, r2, #1
 8009c74:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c76:	7852      	ldrb	r2, [r2, #1]
 8009c78:	2a30      	cmp	r2, #48	@ 0x30
 8009c7a:	d0f9      	beq.n	8009c70 <_strtod_l+0x298>
 8009c7c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009c80:	2908      	cmp	r1, #8
 8009c82:	f63f af75 	bhi.w	8009b70 <_strtod_l+0x198>
 8009c86:	f04f 080a 	mov.w	r8, #10
 8009c8a:	3a30      	subs	r2, #48	@ 0x30
 8009c8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009c92:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c94:	1c56      	adds	r6, r2, #1
 8009c96:	9619      	str	r6, [sp, #100]	@ 0x64
 8009c98:	7852      	ldrb	r2, [r2, #1]
 8009c9a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009c9e:	f1be 0f09 	cmp.w	lr, #9
 8009ca2:	d939      	bls.n	8009d18 <_strtod_l+0x340>
 8009ca4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ca6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009caa:	1a76      	subs	r6, r6, r1
 8009cac:	2e08      	cmp	r6, #8
 8009cae:	dc03      	bgt.n	8009cb8 <_strtod_l+0x2e0>
 8009cb0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cb2:	4588      	cmp	r8, r1
 8009cb4:	bfa8      	it	ge
 8009cb6:	4688      	movge	r8, r1
 8009cb8:	f1bc 0f00 	cmp.w	ip, #0
 8009cbc:	d001      	beq.n	8009cc2 <_strtod_l+0x2ea>
 8009cbe:	f1c8 0800 	rsb	r8, r8, #0
 8009cc2:	2d00      	cmp	r5, #0
 8009cc4:	d14e      	bne.n	8009d64 <_strtod_l+0x38c>
 8009cc6:	9908      	ldr	r1, [sp, #32]
 8009cc8:	4308      	orrs	r0, r1
 8009cca:	f47f aebe 	bne.w	8009a4a <_strtod_l+0x72>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f47f aed4 	bne.w	8009a7c <_strtod_l+0xa4>
 8009cd4:	2a69      	cmp	r2, #105	@ 0x69
 8009cd6:	d028      	beq.n	8009d2a <_strtod_l+0x352>
 8009cd8:	dc25      	bgt.n	8009d26 <_strtod_l+0x34e>
 8009cda:	2a49      	cmp	r2, #73	@ 0x49
 8009cdc:	d025      	beq.n	8009d2a <_strtod_l+0x352>
 8009cde:	2a4e      	cmp	r2, #78	@ 0x4e
 8009ce0:	f47f aecc 	bne.w	8009a7c <_strtod_l+0xa4>
 8009ce4:	4999      	ldr	r1, [pc, #612]	@ (8009f4c <_strtod_l+0x574>)
 8009ce6:	a819      	add	r0, sp, #100	@ 0x64
 8009ce8:	f001 f8d4 	bl	800ae94 <__match>
 8009cec:	2800      	cmp	r0, #0
 8009cee:	f43f aec5 	beq.w	8009a7c <_strtod_l+0xa4>
 8009cf2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	2b28      	cmp	r3, #40	@ 0x28
 8009cf8:	d12e      	bne.n	8009d58 <_strtod_l+0x380>
 8009cfa:	4995      	ldr	r1, [pc, #596]	@ (8009f50 <_strtod_l+0x578>)
 8009cfc:	aa1c      	add	r2, sp, #112	@ 0x70
 8009cfe:	a819      	add	r0, sp, #100	@ 0x64
 8009d00:	f001 f8dc 	bl	800aebc <__hexnan>
 8009d04:	2805      	cmp	r0, #5
 8009d06:	d127      	bne.n	8009d58 <_strtod_l+0x380>
 8009d08:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d0a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d0e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d12:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d16:	e698      	b.n	8009a4a <_strtod_l+0x72>
 8009d18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d1a:	fb08 2101 	mla	r1, r8, r1, r2
 8009d1e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d22:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d24:	e7b5      	b.n	8009c92 <_strtod_l+0x2ba>
 8009d26:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d28:	e7da      	b.n	8009ce0 <_strtod_l+0x308>
 8009d2a:	498a      	ldr	r1, [pc, #552]	@ (8009f54 <_strtod_l+0x57c>)
 8009d2c:	a819      	add	r0, sp, #100	@ 0x64
 8009d2e:	f001 f8b1 	bl	800ae94 <__match>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f43f aea2 	beq.w	8009a7c <_strtod_l+0xa4>
 8009d38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d3a:	4987      	ldr	r1, [pc, #540]	@ (8009f58 <_strtod_l+0x580>)
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	a819      	add	r0, sp, #100	@ 0x64
 8009d40:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d42:	f001 f8a7 	bl	800ae94 <__match>
 8009d46:	b910      	cbnz	r0, 8009d4e <_strtod_l+0x376>
 8009d48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d4e:	f04f 0a00 	mov.w	sl, #0
 8009d52:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8009f5c <_strtod_l+0x584>
 8009d56:	e678      	b.n	8009a4a <_strtod_l+0x72>
 8009d58:	4881      	ldr	r0, [pc, #516]	@ (8009f60 <_strtod_l+0x588>)
 8009d5a:	f000 fdc3 	bl	800a8e4 <nan>
 8009d5e:	4682      	mov	sl, r0
 8009d60:	468b      	mov	fp, r1
 8009d62:	e672      	b.n	8009a4a <_strtod_l+0x72>
 8009d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d66:	f1b9 0f00 	cmp.w	r9, #0
 8009d6a:	bf08      	it	eq
 8009d6c:	46a9      	moveq	r9, r5
 8009d6e:	eba8 0303 	sub.w	r3, r8, r3
 8009d72:	2d10      	cmp	r5, #16
 8009d74:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009d76:	462c      	mov	r4, r5
 8009d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7a:	bfa8      	it	ge
 8009d7c:	2410      	movge	r4, #16
 8009d7e:	f7f6 fb31 	bl	80003e4 <__aeabi_ui2d>
 8009d82:	2d09      	cmp	r5, #9
 8009d84:	4682      	mov	sl, r0
 8009d86:	468b      	mov	fp, r1
 8009d88:	dc11      	bgt.n	8009dae <_strtod_l+0x3d6>
 8009d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f43f ae5c 	beq.w	8009a4a <_strtod_l+0x72>
 8009d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d94:	dd76      	ble.n	8009e84 <_strtod_l+0x4ac>
 8009d96:	2b16      	cmp	r3, #22
 8009d98:	dc5d      	bgt.n	8009e56 <_strtod_l+0x47e>
 8009d9a:	4972      	ldr	r1, [pc, #456]	@ (8009f64 <_strtod_l+0x58c>)
 8009d9c:	4652      	mov	r2, sl
 8009d9e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009da2:	465b      	mov	r3, fp
 8009da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009da8:	f7f6 fb96 	bl	80004d8 <__aeabi_dmul>
 8009dac:	e7d7      	b.n	8009d5e <_strtod_l+0x386>
 8009dae:	4b6d      	ldr	r3, [pc, #436]	@ (8009f64 <_strtod_l+0x58c>)
 8009db0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009db4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009db8:	f7f6 fb8e 	bl	80004d8 <__aeabi_dmul>
 8009dbc:	4682      	mov	sl, r0
 8009dbe:	4638      	mov	r0, r7
 8009dc0:	468b      	mov	fp, r1
 8009dc2:	f7f6 fb0f 	bl	80003e4 <__aeabi_ui2d>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4650      	mov	r0, sl
 8009dcc:	4659      	mov	r1, fp
 8009dce:	f7f6 f9cd 	bl	800016c <__adddf3>
 8009dd2:	2d0f      	cmp	r5, #15
 8009dd4:	4682      	mov	sl, r0
 8009dd6:	468b      	mov	fp, r1
 8009dd8:	ddd7      	ble.n	8009d8a <_strtod_l+0x3b2>
 8009dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ddc:	1b2c      	subs	r4, r5, r4
 8009dde:	441c      	add	r4, r3
 8009de0:	2c00      	cmp	r4, #0
 8009de2:	f340 8093 	ble.w	8009f0c <_strtod_l+0x534>
 8009de6:	f014 030f 	ands.w	r3, r4, #15
 8009dea:	d00a      	beq.n	8009e02 <_strtod_l+0x42a>
 8009dec:	495d      	ldr	r1, [pc, #372]	@ (8009f64 <_strtod_l+0x58c>)
 8009dee:	4652      	mov	r2, sl
 8009df0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009df4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009df8:	465b      	mov	r3, fp
 8009dfa:	f7f6 fb6d 	bl	80004d8 <__aeabi_dmul>
 8009dfe:	4682      	mov	sl, r0
 8009e00:	468b      	mov	fp, r1
 8009e02:	f034 040f 	bics.w	r4, r4, #15
 8009e06:	d073      	beq.n	8009ef0 <_strtod_l+0x518>
 8009e08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e0c:	dd49      	ble.n	8009ea2 <_strtod_l+0x4ca>
 8009e0e:	2400      	movs	r4, #0
 8009e10:	46a0      	mov	r8, r4
 8009e12:	46a1      	mov	r9, r4
 8009e14:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e16:	2322      	movs	r3, #34	@ 0x22
 8009e18:	f04f 0a00 	mov.w	sl, #0
 8009e1c:	9a05      	ldr	r2, [sp, #20]
 8009e1e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8009f5c <_strtod_l+0x584>
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f43f ae0f 	beq.w	8009a4a <_strtod_l+0x72>
 8009e2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e2e:	9805      	ldr	r0, [sp, #20]
 8009e30:	f001 f9e0 	bl	800b1f4 <_Bfree>
 8009e34:	4649      	mov	r1, r9
 8009e36:	9805      	ldr	r0, [sp, #20]
 8009e38:	f001 f9dc 	bl	800b1f4 <_Bfree>
 8009e3c:	4641      	mov	r1, r8
 8009e3e:	9805      	ldr	r0, [sp, #20]
 8009e40:	f001 f9d8 	bl	800b1f4 <_Bfree>
 8009e44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e46:	9805      	ldr	r0, [sp, #20]
 8009e48:	f001 f9d4 	bl	800b1f4 <_Bfree>
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	9805      	ldr	r0, [sp, #20]
 8009e50:	f001 f9d0 	bl	800b1f4 <_Bfree>
 8009e54:	e5f9      	b.n	8009a4a <_strtod_l+0x72>
 8009e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	dbbc      	blt.n	8009dda <_strtod_l+0x402>
 8009e60:	4c40      	ldr	r4, [pc, #256]	@ (8009f64 <_strtod_l+0x58c>)
 8009e62:	f1c5 050f 	rsb	r5, r5, #15
 8009e66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e6a:	4652      	mov	r2, sl
 8009e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e70:	465b      	mov	r3, fp
 8009e72:	f7f6 fb31 	bl	80004d8 <__aeabi_dmul>
 8009e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e78:	1b5d      	subs	r5, r3, r5
 8009e7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e82:	e791      	b.n	8009da8 <_strtod_l+0x3d0>
 8009e84:	3316      	adds	r3, #22
 8009e86:	dba8      	blt.n	8009dda <_strtod_l+0x402>
 8009e88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e8a:	4650      	mov	r0, sl
 8009e8c:	eba3 0808 	sub.w	r8, r3, r8
 8009e90:	4b34      	ldr	r3, [pc, #208]	@ (8009f64 <_strtod_l+0x58c>)
 8009e92:	4659      	mov	r1, fp
 8009e94:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009e98:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009e9c:	f7f6 fc46 	bl	800072c <__aeabi_ddiv>
 8009ea0:	e75d      	b.n	8009d5e <_strtod_l+0x386>
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	4650      	mov	r0, sl
 8009ea6:	4659      	mov	r1, fp
 8009ea8:	461e      	mov	r6, r3
 8009eaa:	4f2f      	ldr	r7, [pc, #188]	@ (8009f68 <_strtod_l+0x590>)
 8009eac:	1124      	asrs	r4, r4, #4
 8009eae:	2c01      	cmp	r4, #1
 8009eb0:	dc21      	bgt.n	8009ef6 <_strtod_l+0x51e>
 8009eb2:	b10b      	cbz	r3, 8009eb8 <_strtod_l+0x4e0>
 8009eb4:	4682      	mov	sl, r0
 8009eb6:	468b      	mov	fp, r1
 8009eb8:	492b      	ldr	r1, [pc, #172]	@ (8009f68 <_strtod_l+0x590>)
 8009eba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009ebe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009ec2:	4652      	mov	r2, sl
 8009ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ec8:	465b      	mov	r3, fp
 8009eca:	f7f6 fb05 	bl	80004d8 <__aeabi_dmul>
 8009ece:	4b23      	ldr	r3, [pc, #140]	@ (8009f5c <_strtod_l+0x584>)
 8009ed0:	460a      	mov	r2, r1
 8009ed2:	400b      	ands	r3, r1
 8009ed4:	4925      	ldr	r1, [pc, #148]	@ (8009f6c <_strtod_l+0x594>)
 8009ed6:	4682      	mov	sl, r0
 8009ed8:	428b      	cmp	r3, r1
 8009eda:	d898      	bhi.n	8009e0e <_strtod_l+0x436>
 8009edc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ee0:	428b      	cmp	r3, r1
 8009ee2:	bf86      	itte	hi
 8009ee4:	f04f 3aff 	movhi.w	sl, #4294967295
 8009ee8:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009f70 <_strtod_l+0x598>
 8009eec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	9308      	str	r3, [sp, #32]
 8009ef4:	e076      	b.n	8009fe4 <_strtod_l+0x60c>
 8009ef6:	07e2      	lsls	r2, r4, #31
 8009ef8:	d504      	bpl.n	8009f04 <_strtod_l+0x52c>
 8009efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009efe:	f7f6 faeb 	bl	80004d8 <__aeabi_dmul>
 8009f02:	2301      	movs	r3, #1
 8009f04:	3601      	adds	r6, #1
 8009f06:	1064      	asrs	r4, r4, #1
 8009f08:	3708      	adds	r7, #8
 8009f0a:	e7d0      	b.n	8009eae <_strtod_l+0x4d6>
 8009f0c:	d0f0      	beq.n	8009ef0 <_strtod_l+0x518>
 8009f0e:	4264      	negs	r4, r4
 8009f10:	f014 020f 	ands.w	r2, r4, #15
 8009f14:	d00a      	beq.n	8009f2c <_strtod_l+0x554>
 8009f16:	4b13      	ldr	r3, [pc, #76]	@ (8009f64 <_strtod_l+0x58c>)
 8009f18:	4650      	mov	r0, sl
 8009f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f1e:	4659      	mov	r1, fp
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	f7f6 fc02 	bl	800072c <__aeabi_ddiv>
 8009f28:	4682      	mov	sl, r0
 8009f2a:	468b      	mov	fp, r1
 8009f2c:	1124      	asrs	r4, r4, #4
 8009f2e:	d0df      	beq.n	8009ef0 <_strtod_l+0x518>
 8009f30:	2c1f      	cmp	r4, #31
 8009f32:	dd1f      	ble.n	8009f74 <_strtod_l+0x59c>
 8009f34:	2400      	movs	r4, #0
 8009f36:	46a0      	mov	r8, r4
 8009f38:	46a1      	mov	r9, r4
 8009f3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f3c:	2322      	movs	r3, #34	@ 0x22
 8009f3e:	9a05      	ldr	r2, [sp, #20]
 8009f40:	f04f 0a00 	mov.w	sl, #0
 8009f44:	f04f 0b00 	mov.w	fp, #0
 8009f48:	6013      	str	r3, [r2, #0]
 8009f4a:	e76b      	b.n	8009e24 <_strtod_l+0x44c>
 8009f4c:	0800c9b5 	.word	0x0800c9b5
 8009f50:	0800cb10 	.word	0x0800cb10
 8009f54:	0800c9ac 	.word	0x0800c9ac
 8009f58:	0800c9af 	.word	0x0800c9af
 8009f5c:	7ff00000 	.word	0x7ff00000
 8009f60:	0800cadc 	.word	0x0800cadc
 8009f64:	0800cb98 	.word	0x0800cb98
 8009f68:	0800cb70 	.word	0x0800cb70
 8009f6c:	7ca00000 	.word	0x7ca00000
 8009f70:	7fefffff 	.word	0x7fefffff
 8009f74:	f014 0310 	ands.w	r3, r4, #16
 8009f78:	bf18      	it	ne
 8009f7a:	236a      	movne	r3, #106	@ 0x6a
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	9308      	str	r3, [sp, #32]
 8009f80:	4659      	mov	r1, fp
 8009f82:	2300      	movs	r3, #0
 8009f84:	4e77      	ldr	r6, [pc, #476]	@ (800a164 <_strtod_l+0x78c>)
 8009f86:	07e7      	lsls	r7, r4, #31
 8009f88:	d504      	bpl.n	8009f94 <_strtod_l+0x5bc>
 8009f8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f8e:	f7f6 faa3 	bl	80004d8 <__aeabi_dmul>
 8009f92:	2301      	movs	r3, #1
 8009f94:	1064      	asrs	r4, r4, #1
 8009f96:	f106 0608 	add.w	r6, r6, #8
 8009f9a:	d1f4      	bne.n	8009f86 <_strtod_l+0x5ae>
 8009f9c:	b10b      	cbz	r3, 8009fa2 <_strtod_l+0x5ca>
 8009f9e:	4682      	mov	sl, r0
 8009fa0:	468b      	mov	fp, r1
 8009fa2:	9b08      	ldr	r3, [sp, #32]
 8009fa4:	b1b3      	cbz	r3, 8009fd4 <_strtod_l+0x5fc>
 8009fa6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009faa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	4659      	mov	r1, fp
 8009fb2:	dd0f      	ble.n	8009fd4 <_strtod_l+0x5fc>
 8009fb4:	2b1f      	cmp	r3, #31
 8009fb6:	dd58      	ble.n	800a06a <_strtod_l+0x692>
 8009fb8:	2b34      	cmp	r3, #52	@ 0x34
 8009fba:	bfd8      	it	le
 8009fbc:	f04f 33ff 	movle.w	r3, #4294967295
 8009fc0:	f04f 0a00 	mov.w	sl, #0
 8009fc4:	bfcf      	iteee	gt
 8009fc6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009fca:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009fce:	4093      	lslle	r3, r2
 8009fd0:	ea03 0b01 	andle.w	fp, r3, r1
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4650      	mov	r0, sl
 8009fda:	4659      	mov	r1, fp
 8009fdc:	f7f6 fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1a7      	bne.n	8009f34 <_strtod_l+0x55c>
 8009fe4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fe6:	464a      	mov	r2, r9
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009fec:	462b      	mov	r3, r5
 8009fee:	9805      	ldr	r0, [sp, #20]
 8009ff0:	f001 f968 	bl	800b2c4 <__s2b>
 8009ff4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	f43f af09 	beq.w	8009e0e <_strtod_l+0x436>
 8009ffc:	2400      	movs	r4, #0
 8009ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a002:	2a00      	cmp	r2, #0
 800a004:	eba3 0308 	sub.w	r3, r3, r8
 800a008:	bfa8      	it	ge
 800a00a:	2300      	movge	r3, #0
 800a00c:	46a0      	mov	r8, r4
 800a00e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a010:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a014:	9316      	str	r3, [sp, #88]	@ 0x58
 800a016:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a018:	9805      	ldr	r0, [sp, #20]
 800a01a:	6859      	ldr	r1, [r3, #4]
 800a01c:	f001 f8aa 	bl	800b174 <_Balloc>
 800a020:	4681      	mov	r9, r0
 800a022:	2800      	cmp	r0, #0
 800a024:	f43f aef7 	beq.w	8009e16 <_strtod_l+0x43e>
 800a028:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a02a:	300c      	adds	r0, #12
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	f103 010c 	add.w	r1, r3, #12
 800a032:	3202      	adds	r2, #2
 800a034:	0092      	lsls	r2, r2, #2
 800a036:	f000 fc46 	bl	800a8c6 <memcpy>
 800a03a:	ab1c      	add	r3, sp, #112	@ 0x70
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a040:	9300      	str	r3, [sp, #0]
 800a042:	4652      	mov	r2, sl
 800a044:	465b      	mov	r3, fp
 800a046:	9805      	ldr	r0, [sp, #20]
 800a048:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a04c:	f001 fc66 	bl	800b91c <__d2b>
 800a050:	901a      	str	r0, [sp, #104]	@ 0x68
 800a052:	2800      	cmp	r0, #0
 800a054:	f43f aedf 	beq.w	8009e16 <_strtod_l+0x43e>
 800a058:	2101      	movs	r1, #1
 800a05a:	9805      	ldr	r0, [sp, #20]
 800a05c:	f001 f9c8 	bl	800b3f0 <__i2b>
 800a060:	4680      	mov	r8, r0
 800a062:	b948      	cbnz	r0, 800a078 <_strtod_l+0x6a0>
 800a064:	f04f 0800 	mov.w	r8, #0
 800a068:	e6d5      	b.n	8009e16 <_strtod_l+0x43e>
 800a06a:	f04f 32ff 	mov.w	r2, #4294967295
 800a06e:	fa02 f303 	lsl.w	r3, r2, r3
 800a072:	ea03 0a0a 	and.w	sl, r3, sl
 800a076:	e7ad      	b.n	8009fd4 <_strtod_l+0x5fc>
 800a078:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a07a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	bfab      	itete	ge
 800a080:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a082:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a084:	18ef      	addge	r7, r5, r3
 800a086:	1b5e      	sublt	r6, r3, r5
 800a088:	9b08      	ldr	r3, [sp, #32]
 800a08a:	bfa8      	it	ge
 800a08c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a08e:	eba5 0503 	sub.w	r5, r5, r3
 800a092:	4415      	add	r5, r2
 800a094:	4b34      	ldr	r3, [pc, #208]	@ (800a168 <_strtod_l+0x790>)
 800a096:	f105 35ff 	add.w	r5, r5, #4294967295
 800a09a:	bfb8      	it	lt
 800a09c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0a4:	da50      	bge.n	800a148 <_strtod_l+0x770>
 800a0a6:	1b5b      	subs	r3, r3, r5
 800a0a8:	2b1f      	cmp	r3, #31
 800a0aa:	f04f 0101 	mov.w	r1, #1
 800a0ae:	eba2 0203 	sub.w	r2, r2, r3
 800a0b2:	dc3d      	bgt.n	800a130 <_strtod_l+0x758>
 800a0b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0be:	18bd      	adds	r5, r7, r2
 800a0c0:	9b08      	ldr	r3, [sp, #32]
 800a0c2:	42af      	cmp	r7, r5
 800a0c4:	4416      	add	r6, r2
 800a0c6:	441e      	add	r6, r3
 800a0c8:	463b      	mov	r3, r7
 800a0ca:	bfa8      	it	ge
 800a0cc:	462b      	movge	r3, r5
 800a0ce:	42b3      	cmp	r3, r6
 800a0d0:	bfa8      	it	ge
 800a0d2:	4633      	movge	r3, r6
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	bfc2      	ittt	gt
 800a0d8:	1aed      	subgt	r5, r5, r3
 800a0da:	1af6      	subgt	r6, r6, r3
 800a0dc:	1aff      	subgt	r7, r7, r3
 800a0de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dd16      	ble.n	800a112 <_strtod_l+0x73a>
 800a0e4:	4641      	mov	r1, r8
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	9805      	ldr	r0, [sp, #20]
 800a0ea:	f001 fa39 	bl	800b560 <__pow5mult>
 800a0ee:	4680      	mov	r8, r0
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d0b7      	beq.n	800a064 <_strtod_l+0x68c>
 800a0f4:	4601      	mov	r1, r0
 800a0f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a0f8:	9805      	ldr	r0, [sp, #20]
 800a0fa:	f001 f98f 	bl	800b41c <__multiply>
 800a0fe:	900a      	str	r0, [sp, #40]	@ 0x28
 800a100:	2800      	cmp	r0, #0
 800a102:	f43f ae88 	beq.w	8009e16 <_strtod_l+0x43e>
 800a106:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a108:	9805      	ldr	r0, [sp, #20]
 800a10a:	f001 f873 	bl	800b1f4 <_Bfree>
 800a10e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a110:	931a      	str	r3, [sp, #104]	@ 0x68
 800a112:	2d00      	cmp	r5, #0
 800a114:	dc1d      	bgt.n	800a152 <_strtod_l+0x77a>
 800a116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a118:	2b00      	cmp	r3, #0
 800a11a:	dd27      	ble.n	800a16c <_strtod_l+0x794>
 800a11c:	4649      	mov	r1, r9
 800a11e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a120:	9805      	ldr	r0, [sp, #20]
 800a122:	f001 fa1d 	bl	800b560 <__pow5mult>
 800a126:	4681      	mov	r9, r0
 800a128:	bb00      	cbnz	r0, 800a16c <_strtod_l+0x794>
 800a12a:	f04f 0900 	mov.w	r9, #0
 800a12e:	e672      	b.n	8009e16 <_strtod_l+0x43e>
 800a130:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a134:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a138:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a13c:	35e2      	adds	r5, #226	@ 0xe2
 800a13e:	fa01 f305 	lsl.w	r3, r1, r5
 800a142:	9310      	str	r3, [sp, #64]	@ 0x40
 800a144:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a146:	e7ba      	b.n	800a0be <_strtod_l+0x6e6>
 800a148:	2300      	movs	r3, #0
 800a14a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a14c:	2301      	movs	r3, #1
 800a14e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a150:	e7b5      	b.n	800a0be <_strtod_l+0x6e6>
 800a152:	462a      	mov	r2, r5
 800a154:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a156:	9805      	ldr	r0, [sp, #20]
 800a158:	f001 fa5c 	bl	800b614 <__lshift>
 800a15c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a15e:	2800      	cmp	r0, #0
 800a160:	d1d9      	bne.n	800a116 <_strtod_l+0x73e>
 800a162:	e658      	b.n	8009e16 <_strtod_l+0x43e>
 800a164:	0800cb38 	.word	0x0800cb38
 800a168:	fffffc02 	.word	0xfffffc02
 800a16c:	2e00      	cmp	r6, #0
 800a16e:	dd07      	ble.n	800a180 <_strtod_l+0x7a8>
 800a170:	4649      	mov	r1, r9
 800a172:	4632      	mov	r2, r6
 800a174:	9805      	ldr	r0, [sp, #20]
 800a176:	f001 fa4d 	bl	800b614 <__lshift>
 800a17a:	4681      	mov	r9, r0
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d0d4      	beq.n	800a12a <_strtod_l+0x752>
 800a180:	2f00      	cmp	r7, #0
 800a182:	dd08      	ble.n	800a196 <_strtod_l+0x7be>
 800a184:	4641      	mov	r1, r8
 800a186:	463a      	mov	r2, r7
 800a188:	9805      	ldr	r0, [sp, #20]
 800a18a:	f001 fa43 	bl	800b614 <__lshift>
 800a18e:	4680      	mov	r8, r0
 800a190:	2800      	cmp	r0, #0
 800a192:	f43f ae40 	beq.w	8009e16 <_strtod_l+0x43e>
 800a196:	464a      	mov	r2, r9
 800a198:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a19a:	9805      	ldr	r0, [sp, #20]
 800a19c:	f001 fac2 	bl	800b724 <__mdiff>
 800a1a0:	4604      	mov	r4, r0
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	f43f ae37 	beq.w	8009e16 <_strtod_l+0x43e>
 800a1a8:	68c3      	ldr	r3, [r0, #12]
 800a1aa:	4641      	mov	r1, r8
 800a1ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	60c3      	str	r3, [r0, #12]
 800a1b2:	f001 fa9b 	bl	800b6ec <__mcmp>
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	da3d      	bge.n	800a236 <_strtod_l+0x85e>
 800a1ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1bc:	ea53 030a 	orrs.w	r3, r3, sl
 800a1c0:	d163      	bne.n	800a28a <_strtod_l+0x8b2>
 800a1c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d15f      	bne.n	800a28a <_strtod_l+0x8b2>
 800a1ca:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1ce:	0d1b      	lsrs	r3, r3, #20
 800a1d0:	051b      	lsls	r3, r3, #20
 800a1d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a1d6:	d958      	bls.n	800a28a <_strtod_l+0x8b2>
 800a1d8:	6963      	ldr	r3, [r4, #20]
 800a1da:	b913      	cbnz	r3, 800a1e2 <_strtod_l+0x80a>
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	dd53      	ble.n	800a28a <_strtod_l+0x8b2>
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	9805      	ldr	r0, [sp, #20]
 800a1e8:	f001 fa14 	bl	800b614 <__lshift>
 800a1ec:	4641      	mov	r1, r8
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	f001 fa7c 	bl	800b6ec <__mcmp>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	dd48      	ble.n	800a28a <_strtod_l+0x8b2>
 800a1f8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1fc:	9a08      	ldr	r2, [sp, #32]
 800a1fe:	0d1b      	lsrs	r3, r3, #20
 800a200:	051b      	lsls	r3, r3, #20
 800a202:	2a00      	cmp	r2, #0
 800a204:	d062      	beq.n	800a2cc <_strtod_l+0x8f4>
 800a206:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a20a:	d85f      	bhi.n	800a2cc <_strtod_l+0x8f4>
 800a20c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a210:	f67f ae94 	bls.w	8009f3c <_strtod_l+0x564>
 800a214:	4650      	mov	r0, sl
 800a216:	4659      	mov	r1, fp
 800a218:	4ba3      	ldr	r3, [pc, #652]	@ (800a4a8 <_strtod_l+0xad0>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	f7f6 f95c 	bl	80004d8 <__aeabi_dmul>
 800a220:	4ba2      	ldr	r3, [pc, #648]	@ (800a4ac <_strtod_l+0xad4>)
 800a222:	4682      	mov	sl, r0
 800a224:	400b      	ands	r3, r1
 800a226:	468b      	mov	fp, r1
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f47f adff 	bne.w	8009e2c <_strtod_l+0x454>
 800a22e:	2322      	movs	r3, #34	@ 0x22
 800a230:	9a05      	ldr	r2, [sp, #20]
 800a232:	6013      	str	r3, [r2, #0]
 800a234:	e5fa      	b.n	8009e2c <_strtod_l+0x454>
 800a236:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a23a:	d165      	bne.n	800a308 <_strtod_l+0x930>
 800a23c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a23e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a242:	b35a      	cbz	r2, 800a29c <_strtod_l+0x8c4>
 800a244:	4a9a      	ldr	r2, [pc, #616]	@ (800a4b0 <_strtod_l+0xad8>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d12b      	bne.n	800a2a2 <_strtod_l+0x8ca>
 800a24a:	9b08      	ldr	r3, [sp, #32]
 800a24c:	4651      	mov	r1, sl
 800a24e:	b303      	cbz	r3, 800a292 <_strtod_l+0x8ba>
 800a250:	465a      	mov	r2, fp
 800a252:	4b96      	ldr	r3, [pc, #600]	@ (800a4ac <_strtod_l+0xad4>)
 800a254:	4013      	ands	r3, r2
 800a256:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a25a:	f04f 32ff 	mov.w	r2, #4294967295
 800a25e:	d81b      	bhi.n	800a298 <_strtod_l+0x8c0>
 800a260:	0d1b      	lsrs	r3, r3, #20
 800a262:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a266:	fa02 f303 	lsl.w	r3, r2, r3
 800a26a:	4299      	cmp	r1, r3
 800a26c:	d119      	bne.n	800a2a2 <_strtod_l+0x8ca>
 800a26e:	4b91      	ldr	r3, [pc, #580]	@ (800a4b4 <_strtod_l+0xadc>)
 800a270:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a272:	429a      	cmp	r2, r3
 800a274:	d102      	bne.n	800a27c <_strtod_l+0x8a4>
 800a276:	3101      	adds	r1, #1
 800a278:	f43f adcd 	beq.w	8009e16 <_strtod_l+0x43e>
 800a27c:	f04f 0a00 	mov.w	sl, #0
 800a280:	4b8a      	ldr	r3, [pc, #552]	@ (800a4ac <_strtod_l+0xad4>)
 800a282:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a284:	401a      	ands	r2, r3
 800a286:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a28a:	9b08      	ldr	r3, [sp, #32]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1c1      	bne.n	800a214 <_strtod_l+0x83c>
 800a290:	e5cc      	b.n	8009e2c <_strtod_l+0x454>
 800a292:	f04f 33ff 	mov.w	r3, #4294967295
 800a296:	e7e8      	b.n	800a26a <_strtod_l+0x892>
 800a298:	4613      	mov	r3, r2
 800a29a:	e7e6      	b.n	800a26a <_strtod_l+0x892>
 800a29c:	ea53 030a 	orrs.w	r3, r3, sl
 800a2a0:	d0aa      	beq.n	800a1f8 <_strtod_l+0x820>
 800a2a2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2a4:	b1db      	cbz	r3, 800a2de <_strtod_l+0x906>
 800a2a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2a8:	4213      	tst	r3, r2
 800a2aa:	d0ee      	beq.n	800a28a <_strtod_l+0x8b2>
 800a2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	4659      	mov	r1, fp
 800a2b2:	9a08      	ldr	r2, [sp, #32]
 800a2b4:	b1bb      	cbz	r3, 800a2e6 <_strtod_l+0x90e>
 800a2b6:	f7ff fb6c 	bl	8009992 <sulp>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2c2:	f7f5 ff53 	bl	800016c <__adddf3>
 800a2c6:	4682      	mov	sl, r0
 800a2c8:	468b      	mov	fp, r1
 800a2ca:	e7de      	b.n	800a28a <_strtod_l+0x8b2>
 800a2cc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a2d0:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a2d4:	f04f 3aff 	mov.w	sl, #4294967295
 800a2d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2dc:	e7d5      	b.n	800a28a <_strtod_l+0x8b2>
 800a2de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2e0:	ea13 0f0a 	tst.w	r3, sl
 800a2e4:	e7e1      	b.n	800a2aa <_strtod_l+0x8d2>
 800a2e6:	f7ff fb54 	bl	8009992 <sulp>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2f2:	f7f5 ff39 	bl	8000168 <__aeabi_dsub>
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	f7f6 fb53 	bl	80009a8 <__aeabi_dcmpeq>
 800a302:	2800      	cmp	r0, #0
 800a304:	d0c1      	beq.n	800a28a <_strtod_l+0x8b2>
 800a306:	e619      	b.n	8009f3c <_strtod_l+0x564>
 800a308:	4641      	mov	r1, r8
 800a30a:	4620      	mov	r0, r4
 800a30c:	f001 fb5e 	bl	800b9cc <__ratio>
 800a310:	2200      	movs	r2, #0
 800a312:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a316:	4606      	mov	r6, r0
 800a318:	460f      	mov	r7, r1
 800a31a:	f7f6 fb59 	bl	80009d0 <__aeabi_dcmple>
 800a31e:	2800      	cmp	r0, #0
 800a320:	d06d      	beq.n	800a3fe <_strtod_l+0xa26>
 800a322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d178      	bne.n	800a41a <_strtod_l+0xa42>
 800a328:	f1ba 0f00 	cmp.w	sl, #0
 800a32c:	d156      	bne.n	800a3dc <_strtod_l+0xa04>
 800a32e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a334:	2b00      	cmp	r3, #0
 800a336:	d158      	bne.n	800a3ea <_strtod_l+0xa12>
 800a338:	2200      	movs	r2, #0
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	4b5e      	ldr	r3, [pc, #376]	@ (800a4b8 <_strtod_l+0xae0>)
 800a340:	f7f6 fb3c 	bl	80009bc <__aeabi_dcmplt>
 800a344:	2800      	cmp	r0, #0
 800a346:	d157      	bne.n	800a3f8 <_strtod_l+0xa20>
 800a348:	4630      	mov	r0, r6
 800a34a:	4639      	mov	r1, r7
 800a34c:	2200      	movs	r2, #0
 800a34e:	4b5b      	ldr	r3, [pc, #364]	@ (800a4bc <_strtod_l+0xae4>)
 800a350:	f7f6 f8c2 	bl	80004d8 <__aeabi_dmul>
 800a354:	4606      	mov	r6, r0
 800a356:	460f      	mov	r7, r1
 800a358:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a35c:	9606      	str	r6, [sp, #24]
 800a35e:	9307      	str	r3, [sp, #28]
 800a360:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a364:	4d51      	ldr	r5, [pc, #324]	@ (800a4ac <_strtod_l+0xad4>)
 800a366:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a36a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a36c:	401d      	ands	r5, r3
 800a36e:	4b54      	ldr	r3, [pc, #336]	@ (800a4c0 <_strtod_l+0xae8>)
 800a370:	429d      	cmp	r5, r3
 800a372:	f040 80ab 	bne.w	800a4cc <_strtod_l+0xaf4>
 800a376:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a378:	4650      	mov	r0, sl
 800a37a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a37e:	4659      	mov	r1, fp
 800a380:	f001 fa64 	bl	800b84c <__ulp>
 800a384:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a388:	f7f6 f8a6 	bl	80004d8 <__aeabi_dmul>
 800a38c:	4652      	mov	r2, sl
 800a38e:	465b      	mov	r3, fp
 800a390:	f7f5 feec 	bl	800016c <__adddf3>
 800a394:	460b      	mov	r3, r1
 800a396:	4945      	ldr	r1, [pc, #276]	@ (800a4ac <_strtod_l+0xad4>)
 800a398:	4a4a      	ldr	r2, [pc, #296]	@ (800a4c4 <_strtod_l+0xaec>)
 800a39a:	4019      	ands	r1, r3
 800a39c:	4291      	cmp	r1, r2
 800a39e:	4682      	mov	sl, r0
 800a3a0:	d942      	bls.n	800a428 <_strtod_l+0xa50>
 800a3a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a3a4:	4b43      	ldr	r3, [pc, #268]	@ (800a4b4 <_strtod_l+0xadc>)
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d103      	bne.n	800a3b2 <_strtod_l+0x9da>
 800a3aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	f43f ad32 	beq.w	8009e16 <_strtod_l+0x43e>
 800a3b2:	f04f 3aff 	mov.w	sl, #4294967295
 800a3b6:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800a4b4 <_strtod_l+0xadc>
 800a3ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3bc:	9805      	ldr	r0, [sp, #20]
 800a3be:	f000 ff19 	bl	800b1f4 <_Bfree>
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	9805      	ldr	r0, [sp, #20]
 800a3c6:	f000 ff15 	bl	800b1f4 <_Bfree>
 800a3ca:	4641      	mov	r1, r8
 800a3cc:	9805      	ldr	r0, [sp, #20]
 800a3ce:	f000 ff11 	bl	800b1f4 <_Bfree>
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	9805      	ldr	r0, [sp, #20]
 800a3d6:	f000 ff0d 	bl	800b1f4 <_Bfree>
 800a3da:	e61c      	b.n	800a016 <_strtod_l+0x63e>
 800a3dc:	f1ba 0f01 	cmp.w	sl, #1
 800a3e0:	d103      	bne.n	800a3ea <_strtod_l+0xa12>
 800a3e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f43f ada9 	beq.w	8009f3c <_strtod_l+0x564>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	4b36      	ldr	r3, [pc, #216]	@ (800a4c8 <_strtod_l+0xaf0>)
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3f4:	4f30      	ldr	r7, [pc, #192]	@ (800a4b8 <_strtod_l+0xae0>)
 800a3f6:	e7b3      	b.n	800a360 <_strtod_l+0x988>
 800a3f8:	2600      	movs	r6, #0
 800a3fa:	4f30      	ldr	r7, [pc, #192]	@ (800a4bc <_strtod_l+0xae4>)
 800a3fc:	e7ac      	b.n	800a358 <_strtod_l+0x980>
 800a3fe:	4630      	mov	r0, r6
 800a400:	4639      	mov	r1, r7
 800a402:	4b2e      	ldr	r3, [pc, #184]	@ (800a4bc <_strtod_l+0xae4>)
 800a404:	2200      	movs	r2, #0
 800a406:	f7f6 f867 	bl	80004d8 <__aeabi_dmul>
 800a40a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a40c:	4606      	mov	r6, r0
 800a40e:	460f      	mov	r7, r1
 800a410:	2b00      	cmp	r3, #0
 800a412:	d0a1      	beq.n	800a358 <_strtod_l+0x980>
 800a414:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a418:	e7a2      	b.n	800a360 <_strtod_l+0x988>
 800a41a:	2200      	movs	r2, #0
 800a41c:	4b26      	ldr	r3, [pc, #152]	@ (800a4b8 <_strtod_l+0xae0>)
 800a41e:	4616      	mov	r6, r2
 800a420:	461f      	mov	r7, r3
 800a422:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a426:	e79b      	b.n	800a360 <_strtod_l+0x988>
 800a428:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a42c:	9b08      	ldr	r3, [sp, #32]
 800a42e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1c1      	bne.n	800a3ba <_strtod_l+0x9e2>
 800a436:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a43a:	0d1b      	lsrs	r3, r3, #20
 800a43c:	051b      	lsls	r3, r3, #20
 800a43e:	429d      	cmp	r5, r3
 800a440:	d1bb      	bne.n	800a3ba <_strtod_l+0x9e2>
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7f6 fe6b 	bl	8001120 <__aeabi_d2lz>
 800a44a:	f7f6 f817 	bl	800047c <__aeabi_l2d>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	f7f5 fe87 	bl	8000168 <__aeabi_dsub>
 800a45a:	460b      	mov	r3, r1
 800a45c:	4602      	mov	r2, r0
 800a45e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a462:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a466:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a468:	ea46 060a 	orr.w	r6, r6, sl
 800a46c:	431e      	orrs	r6, r3
 800a46e:	d06a      	beq.n	800a546 <_strtod_l+0xb6e>
 800a470:	a309      	add	r3, pc, #36	@ (adr r3, 800a498 <_strtod_l+0xac0>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f7f6 faa1 	bl	80009bc <__aeabi_dcmplt>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	f47f acd6 	bne.w	8009e2c <_strtod_l+0x454>
 800a480:	a307      	add	r3, pc, #28	@ (adr r3, 800a4a0 <_strtod_l+0xac8>)
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a48a:	f7f6 fab5 	bl	80009f8 <__aeabi_dcmpgt>
 800a48e:	2800      	cmp	r0, #0
 800a490:	d093      	beq.n	800a3ba <_strtod_l+0x9e2>
 800a492:	e4cb      	b.n	8009e2c <_strtod_l+0x454>
 800a494:	f3af 8000 	nop.w
 800a498:	94a03595 	.word	0x94a03595
 800a49c:	3fdfffff 	.word	0x3fdfffff
 800a4a0:	35afe535 	.word	0x35afe535
 800a4a4:	3fe00000 	.word	0x3fe00000
 800a4a8:	39500000 	.word	0x39500000
 800a4ac:	7ff00000 	.word	0x7ff00000
 800a4b0:	000fffff 	.word	0x000fffff
 800a4b4:	7fefffff 	.word	0x7fefffff
 800a4b8:	3ff00000 	.word	0x3ff00000
 800a4bc:	3fe00000 	.word	0x3fe00000
 800a4c0:	7fe00000 	.word	0x7fe00000
 800a4c4:	7c9fffff 	.word	0x7c9fffff
 800a4c8:	bff00000 	.word	0xbff00000
 800a4cc:	9b08      	ldr	r3, [sp, #32]
 800a4ce:	b323      	cbz	r3, 800a51a <_strtod_l+0xb42>
 800a4d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a4d4:	d821      	bhi.n	800a51a <_strtod_l+0xb42>
 800a4d6:	a328      	add	r3, pc, #160	@ (adr r3, 800a578 <_strtod_l+0xba0>)
 800a4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f7f6 fa76 	bl	80009d0 <__aeabi_dcmple>
 800a4e4:	b1a0      	cbz	r0, 800a510 <_strtod_l+0xb38>
 800a4e6:	4639      	mov	r1, r7
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f7f6 fa8f 	bl	8000a0c <__aeabi_d2uiz>
 800a4ee:	2801      	cmp	r0, #1
 800a4f0:	bf38      	it	cc
 800a4f2:	2001      	movcc	r0, #1
 800a4f4:	f7f5 ff76 	bl	80003e4 <__aeabi_ui2d>
 800a4f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460f      	mov	r7, r1
 800a4fe:	b9fb      	cbnz	r3, 800a540 <_strtod_l+0xb68>
 800a500:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a504:	9014      	str	r0, [sp, #80]	@ 0x50
 800a506:	9315      	str	r3, [sp, #84]	@ 0x54
 800a508:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a50c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a510:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a512:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a516:	1b5b      	subs	r3, r3, r5
 800a518:	9311      	str	r3, [sp, #68]	@ 0x44
 800a51a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a51e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a522:	f001 f993 	bl	800b84c <__ulp>
 800a526:	4602      	mov	r2, r0
 800a528:	460b      	mov	r3, r1
 800a52a:	4650      	mov	r0, sl
 800a52c:	4659      	mov	r1, fp
 800a52e:	f7f5 ffd3 	bl	80004d8 <__aeabi_dmul>
 800a532:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a536:	f7f5 fe19 	bl	800016c <__adddf3>
 800a53a:	4682      	mov	sl, r0
 800a53c:	468b      	mov	fp, r1
 800a53e:	e775      	b.n	800a42c <_strtod_l+0xa54>
 800a540:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a544:	e7e0      	b.n	800a508 <_strtod_l+0xb30>
 800a546:	a30e      	add	r3, pc, #56	@ (adr r3, 800a580 <_strtod_l+0xba8>)
 800a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54c:	f7f6 fa36 	bl	80009bc <__aeabi_dcmplt>
 800a550:	e79d      	b.n	800a48e <_strtod_l+0xab6>
 800a552:	2300      	movs	r3, #0
 800a554:	930e      	str	r3, [sp, #56]	@ 0x38
 800a556:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a558:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a55a:	6013      	str	r3, [r2, #0]
 800a55c:	f7ff ba79 	b.w	8009a52 <_strtod_l+0x7a>
 800a560:	2a65      	cmp	r2, #101	@ 0x65
 800a562:	f43f ab72 	beq.w	8009c4a <_strtod_l+0x272>
 800a566:	2a45      	cmp	r2, #69	@ 0x45
 800a568:	f43f ab6f 	beq.w	8009c4a <_strtod_l+0x272>
 800a56c:	2301      	movs	r3, #1
 800a56e:	f7ff bbaa 	b.w	8009cc6 <_strtod_l+0x2ee>
 800a572:	bf00      	nop
 800a574:	f3af 8000 	nop.w
 800a578:	ffc00000 	.word	0xffc00000
 800a57c:	41dfffff 	.word	0x41dfffff
 800a580:	94a03595 	.word	0x94a03595
 800a584:	3fcfffff 	.word	0x3fcfffff

0800a588 <strtod>:
 800a588:	460a      	mov	r2, r1
 800a58a:	4601      	mov	r1, r0
 800a58c:	4802      	ldr	r0, [pc, #8]	@ (800a598 <strtod+0x10>)
 800a58e:	4b03      	ldr	r3, [pc, #12]	@ (800a59c <strtod+0x14>)
 800a590:	6800      	ldr	r0, [r0, #0]
 800a592:	f7ff ba21 	b.w	80099d8 <_strtod_l>
 800a596:	bf00      	nop
 800a598:	200001c8 	.word	0x200001c8
 800a59c:	2000005c 	.word	0x2000005c

0800a5a0 <std>:
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	b510      	push	{r4, lr}
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	e9c0 3300 	strd	r3, r3, [r0]
 800a5aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ae:	6083      	str	r3, [r0, #8]
 800a5b0:	8181      	strh	r1, [r0, #12]
 800a5b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800a5b4:	81c2      	strh	r2, [r0, #14]
 800a5b6:	6183      	str	r3, [r0, #24]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	2208      	movs	r2, #8
 800a5bc:	305c      	adds	r0, #92	@ 0x5c
 800a5be:	f000 f8f4 	bl	800a7aa <memset>
 800a5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f8 <std+0x58>)
 800a5c4:	6224      	str	r4, [r4, #32]
 800a5c6:	6263      	str	r3, [r4, #36]	@ 0x24
 800a5c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a5fc <std+0x5c>)
 800a5ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a600 <std+0x60>)
 800a5ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a5d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a604 <std+0x64>)
 800a5d2:	6323      	str	r3, [r4, #48]	@ 0x30
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a608 <std+0x68>)
 800a5d6:	429c      	cmp	r4, r3
 800a5d8:	d006      	beq.n	800a5e8 <std+0x48>
 800a5da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5de:	4294      	cmp	r4, r2
 800a5e0:	d002      	beq.n	800a5e8 <std+0x48>
 800a5e2:	33d0      	adds	r3, #208	@ 0xd0
 800a5e4:	429c      	cmp	r4, r3
 800a5e6:	d105      	bne.n	800a5f4 <std+0x54>
 800a5e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f0:	f000 b966 	b.w	800a8c0 <__retarget_lock_init_recursive>
 800a5f4:	bd10      	pop	{r4, pc}
 800a5f6:	bf00      	nop
 800a5f8:	0800a725 	.word	0x0800a725
 800a5fc:	0800a747 	.word	0x0800a747
 800a600:	0800a77f 	.word	0x0800a77f
 800a604:	0800a7a3 	.word	0x0800a7a3
 800a608:	20000974 	.word	0x20000974

0800a60c <stdio_exit_handler>:
 800a60c:	4a02      	ldr	r2, [pc, #8]	@ (800a618 <stdio_exit_handler+0xc>)
 800a60e:	4903      	ldr	r1, [pc, #12]	@ (800a61c <stdio_exit_handler+0x10>)
 800a610:	4803      	ldr	r0, [pc, #12]	@ (800a620 <stdio_exit_handler+0x14>)
 800a612:	f000 b869 	b.w	800a6e8 <_fwalk_sglue>
 800a616:	bf00      	nop
 800a618:	20000050 	.word	0x20000050
 800a61c:	0800bbd1 	.word	0x0800bbd1
 800a620:	200001cc 	.word	0x200001cc

0800a624 <cleanup_stdio>:
 800a624:	6841      	ldr	r1, [r0, #4]
 800a626:	4b0c      	ldr	r3, [pc, #48]	@ (800a658 <cleanup_stdio+0x34>)
 800a628:	b510      	push	{r4, lr}
 800a62a:	4299      	cmp	r1, r3
 800a62c:	4604      	mov	r4, r0
 800a62e:	d001      	beq.n	800a634 <cleanup_stdio+0x10>
 800a630:	f001 face 	bl	800bbd0 <_fflush_r>
 800a634:	68a1      	ldr	r1, [r4, #8]
 800a636:	4b09      	ldr	r3, [pc, #36]	@ (800a65c <cleanup_stdio+0x38>)
 800a638:	4299      	cmp	r1, r3
 800a63a:	d002      	beq.n	800a642 <cleanup_stdio+0x1e>
 800a63c:	4620      	mov	r0, r4
 800a63e:	f001 fac7 	bl	800bbd0 <_fflush_r>
 800a642:	68e1      	ldr	r1, [r4, #12]
 800a644:	4b06      	ldr	r3, [pc, #24]	@ (800a660 <cleanup_stdio+0x3c>)
 800a646:	4299      	cmp	r1, r3
 800a648:	d004      	beq.n	800a654 <cleanup_stdio+0x30>
 800a64a:	4620      	mov	r0, r4
 800a64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a650:	f001 babe 	b.w	800bbd0 <_fflush_r>
 800a654:	bd10      	pop	{r4, pc}
 800a656:	bf00      	nop
 800a658:	20000974 	.word	0x20000974
 800a65c:	200009dc 	.word	0x200009dc
 800a660:	20000a44 	.word	0x20000a44

0800a664 <global_stdio_init.part.0>:
 800a664:	b510      	push	{r4, lr}
 800a666:	4b0b      	ldr	r3, [pc, #44]	@ (800a694 <global_stdio_init.part.0+0x30>)
 800a668:	4c0b      	ldr	r4, [pc, #44]	@ (800a698 <global_stdio_init.part.0+0x34>)
 800a66a:	4a0c      	ldr	r2, [pc, #48]	@ (800a69c <global_stdio_init.part.0+0x38>)
 800a66c:	4620      	mov	r0, r4
 800a66e:	601a      	str	r2, [r3, #0]
 800a670:	2104      	movs	r1, #4
 800a672:	2200      	movs	r2, #0
 800a674:	f7ff ff94 	bl	800a5a0 <std>
 800a678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a67c:	2201      	movs	r2, #1
 800a67e:	2109      	movs	r1, #9
 800a680:	f7ff ff8e 	bl	800a5a0 <std>
 800a684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a688:	2202      	movs	r2, #2
 800a68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a68e:	2112      	movs	r1, #18
 800a690:	f7ff bf86 	b.w	800a5a0 <std>
 800a694:	20000aac 	.word	0x20000aac
 800a698:	20000974 	.word	0x20000974
 800a69c:	0800a60d 	.word	0x0800a60d

0800a6a0 <__sfp_lock_acquire>:
 800a6a0:	4801      	ldr	r0, [pc, #4]	@ (800a6a8 <__sfp_lock_acquire+0x8>)
 800a6a2:	f000 b90e 	b.w	800a8c2 <__retarget_lock_acquire_recursive>
 800a6a6:	bf00      	nop
 800a6a8:	20000ab5 	.word	0x20000ab5

0800a6ac <__sfp_lock_release>:
 800a6ac:	4801      	ldr	r0, [pc, #4]	@ (800a6b4 <__sfp_lock_release+0x8>)
 800a6ae:	f000 b909 	b.w	800a8c4 <__retarget_lock_release_recursive>
 800a6b2:	bf00      	nop
 800a6b4:	20000ab5 	.word	0x20000ab5

0800a6b8 <__sinit>:
 800a6b8:	b510      	push	{r4, lr}
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	f7ff fff0 	bl	800a6a0 <__sfp_lock_acquire>
 800a6c0:	6a23      	ldr	r3, [r4, #32]
 800a6c2:	b11b      	cbz	r3, 800a6cc <__sinit+0x14>
 800a6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6c8:	f7ff bff0 	b.w	800a6ac <__sfp_lock_release>
 800a6cc:	4b04      	ldr	r3, [pc, #16]	@ (800a6e0 <__sinit+0x28>)
 800a6ce:	6223      	str	r3, [r4, #32]
 800a6d0:	4b04      	ldr	r3, [pc, #16]	@ (800a6e4 <__sinit+0x2c>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1f5      	bne.n	800a6c4 <__sinit+0xc>
 800a6d8:	f7ff ffc4 	bl	800a664 <global_stdio_init.part.0>
 800a6dc:	e7f2      	b.n	800a6c4 <__sinit+0xc>
 800a6de:	bf00      	nop
 800a6e0:	0800a625 	.word	0x0800a625
 800a6e4:	20000aac 	.word	0x20000aac

0800a6e8 <_fwalk_sglue>:
 800a6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	4688      	mov	r8, r1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	2600      	movs	r6, #0
 800a6f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6f8:	f1b9 0901 	subs.w	r9, r9, #1
 800a6fc:	d505      	bpl.n	800a70a <_fwalk_sglue+0x22>
 800a6fe:	6824      	ldr	r4, [r4, #0]
 800a700:	2c00      	cmp	r4, #0
 800a702:	d1f7      	bne.n	800a6f4 <_fwalk_sglue+0xc>
 800a704:	4630      	mov	r0, r6
 800a706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a70a:	89ab      	ldrh	r3, [r5, #12]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d907      	bls.n	800a720 <_fwalk_sglue+0x38>
 800a710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a714:	3301      	adds	r3, #1
 800a716:	d003      	beq.n	800a720 <_fwalk_sglue+0x38>
 800a718:	4629      	mov	r1, r5
 800a71a:	4638      	mov	r0, r7
 800a71c:	47c0      	blx	r8
 800a71e:	4306      	orrs	r6, r0
 800a720:	3568      	adds	r5, #104	@ 0x68
 800a722:	e7e9      	b.n	800a6f8 <_fwalk_sglue+0x10>

0800a724 <__sread>:
 800a724:	b510      	push	{r4, lr}
 800a726:	460c      	mov	r4, r1
 800a728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72c:	f000 f87a 	bl	800a824 <_read_r>
 800a730:	2800      	cmp	r0, #0
 800a732:	bfab      	itete	ge
 800a734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a736:	89a3      	ldrhlt	r3, [r4, #12]
 800a738:	181b      	addge	r3, r3, r0
 800a73a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a73e:	bfac      	ite	ge
 800a740:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a742:	81a3      	strhlt	r3, [r4, #12]
 800a744:	bd10      	pop	{r4, pc}

0800a746 <__swrite>:
 800a746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74a:	461f      	mov	r7, r3
 800a74c:	898b      	ldrh	r3, [r1, #12]
 800a74e:	4605      	mov	r5, r0
 800a750:	05db      	lsls	r3, r3, #23
 800a752:	460c      	mov	r4, r1
 800a754:	4616      	mov	r6, r2
 800a756:	d505      	bpl.n	800a764 <__swrite+0x1e>
 800a758:	2302      	movs	r3, #2
 800a75a:	2200      	movs	r2, #0
 800a75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a760:	f000 f84e 	bl	800a800 <_lseek_r>
 800a764:	89a3      	ldrh	r3, [r4, #12]
 800a766:	4632      	mov	r2, r6
 800a768:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	4628      	mov	r0, r5
 800a770:	463b      	mov	r3, r7
 800a772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a77a:	f000 b865 	b.w	800a848 <_write_r>

0800a77e <__sseek>:
 800a77e:	b510      	push	{r4, lr}
 800a780:	460c      	mov	r4, r1
 800a782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a786:	f000 f83b 	bl	800a800 <_lseek_r>
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	bf15      	itete	ne
 800a790:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a79a:	81a3      	strheq	r3, [r4, #12]
 800a79c:	bf18      	it	ne
 800a79e:	81a3      	strhne	r3, [r4, #12]
 800a7a0:	bd10      	pop	{r4, pc}

0800a7a2 <__sclose>:
 800a7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7a6:	f000 b81b 	b.w	800a7e0 <_close_r>

0800a7aa <memset>:
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	4402      	add	r2, r0
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d100      	bne.n	800a7b4 <memset+0xa>
 800a7b2:	4770      	bx	lr
 800a7b4:	f803 1b01 	strb.w	r1, [r3], #1
 800a7b8:	e7f9      	b.n	800a7ae <memset+0x4>

0800a7ba <strncmp>:
 800a7ba:	b510      	push	{r4, lr}
 800a7bc:	b16a      	cbz	r2, 800a7da <strncmp+0x20>
 800a7be:	3901      	subs	r1, #1
 800a7c0:	1884      	adds	r4, r0, r2
 800a7c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d103      	bne.n	800a7d6 <strncmp+0x1c>
 800a7ce:	42a0      	cmp	r0, r4
 800a7d0:	d001      	beq.n	800a7d6 <strncmp+0x1c>
 800a7d2:	2a00      	cmp	r2, #0
 800a7d4:	d1f5      	bne.n	800a7c2 <strncmp+0x8>
 800a7d6:	1ad0      	subs	r0, r2, r3
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	4610      	mov	r0, r2
 800a7dc:	e7fc      	b.n	800a7d8 <strncmp+0x1e>
	...

0800a7e0 <_close_r>:
 800a7e0:	b538      	push	{r3, r4, r5, lr}
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4d05      	ldr	r5, [pc, #20]	@ (800a7fc <_close_r+0x1c>)
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	4608      	mov	r0, r1
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	f7f9 ff2b 	bl	8004646 <_close>
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d102      	bne.n	800a7fa <_close_r+0x1a>
 800a7f4:	682b      	ldr	r3, [r5, #0]
 800a7f6:	b103      	cbz	r3, 800a7fa <_close_r+0x1a>
 800a7f8:	6023      	str	r3, [r4, #0]
 800a7fa:	bd38      	pop	{r3, r4, r5, pc}
 800a7fc:	20000ab0 	.word	0x20000ab0

0800a800 <_lseek_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4604      	mov	r4, r0
 800a804:	4608      	mov	r0, r1
 800a806:	4611      	mov	r1, r2
 800a808:	2200      	movs	r2, #0
 800a80a:	4d05      	ldr	r5, [pc, #20]	@ (800a820 <_lseek_r+0x20>)
 800a80c:	602a      	str	r2, [r5, #0]
 800a80e:	461a      	mov	r2, r3
 800a810:	f7f9 ff3d 	bl	800468e <_lseek>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d102      	bne.n	800a81e <_lseek_r+0x1e>
 800a818:	682b      	ldr	r3, [r5, #0]
 800a81a:	b103      	cbz	r3, 800a81e <_lseek_r+0x1e>
 800a81c:	6023      	str	r3, [r4, #0]
 800a81e:	bd38      	pop	{r3, r4, r5, pc}
 800a820:	20000ab0 	.word	0x20000ab0

0800a824 <_read_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4604      	mov	r4, r0
 800a828:	4608      	mov	r0, r1
 800a82a:	4611      	mov	r1, r2
 800a82c:	2200      	movs	r2, #0
 800a82e:	4d05      	ldr	r5, [pc, #20]	@ (800a844 <_read_r+0x20>)
 800a830:	602a      	str	r2, [r5, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	f7f9 fece 	bl	80045d4 <_read>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_read_r+0x1e>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_read_r+0x1e>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	20000ab0 	.word	0x20000ab0

0800a848 <_write_r>:
 800a848:	b538      	push	{r3, r4, r5, lr}
 800a84a:	4604      	mov	r4, r0
 800a84c:	4608      	mov	r0, r1
 800a84e:	4611      	mov	r1, r2
 800a850:	2200      	movs	r2, #0
 800a852:	4d05      	ldr	r5, [pc, #20]	@ (800a868 <_write_r+0x20>)
 800a854:	602a      	str	r2, [r5, #0]
 800a856:	461a      	mov	r2, r3
 800a858:	f7f9 fed9 	bl	800460e <_write>
 800a85c:	1c43      	adds	r3, r0, #1
 800a85e:	d102      	bne.n	800a866 <_write_r+0x1e>
 800a860:	682b      	ldr	r3, [r5, #0]
 800a862:	b103      	cbz	r3, 800a866 <_write_r+0x1e>
 800a864:	6023      	str	r3, [r4, #0]
 800a866:	bd38      	pop	{r3, r4, r5, pc}
 800a868:	20000ab0 	.word	0x20000ab0

0800a86c <__errno>:
 800a86c:	4b01      	ldr	r3, [pc, #4]	@ (800a874 <__errno+0x8>)
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	200001c8 	.word	0x200001c8

0800a878 <__libc_init_array>:
 800a878:	b570      	push	{r4, r5, r6, lr}
 800a87a:	2600      	movs	r6, #0
 800a87c:	4d0c      	ldr	r5, [pc, #48]	@ (800a8b0 <__libc_init_array+0x38>)
 800a87e:	4c0d      	ldr	r4, [pc, #52]	@ (800a8b4 <__libc_init_array+0x3c>)
 800a880:	1b64      	subs	r4, r4, r5
 800a882:	10a4      	asrs	r4, r4, #2
 800a884:	42a6      	cmp	r6, r4
 800a886:	d109      	bne.n	800a89c <__libc_init_array+0x24>
 800a888:	f002 f812 	bl	800c8b0 <_init>
 800a88c:	2600      	movs	r6, #0
 800a88e:	4d0a      	ldr	r5, [pc, #40]	@ (800a8b8 <__libc_init_array+0x40>)
 800a890:	4c0a      	ldr	r4, [pc, #40]	@ (800a8bc <__libc_init_array+0x44>)
 800a892:	1b64      	subs	r4, r4, r5
 800a894:	10a4      	asrs	r4, r4, #2
 800a896:	42a6      	cmp	r6, r4
 800a898:	d105      	bne.n	800a8a6 <__libc_init_array+0x2e>
 800a89a:	bd70      	pop	{r4, r5, r6, pc}
 800a89c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a0:	4798      	blx	r3
 800a8a2:	3601      	adds	r6, #1
 800a8a4:	e7ee      	b.n	800a884 <__libc_init_array+0xc>
 800a8a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8aa:	4798      	blx	r3
 800a8ac:	3601      	adds	r6, #1
 800a8ae:	e7f2      	b.n	800a896 <__libc_init_array+0x1e>
 800a8b0:	0800cd84 	.word	0x0800cd84
 800a8b4:	0800cd84 	.word	0x0800cd84
 800a8b8:	0800cd84 	.word	0x0800cd84
 800a8bc:	0800cd88 	.word	0x0800cd88

0800a8c0 <__retarget_lock_init_recursive>:
 800a8c0:	4770      	bx	lr

0800a8c2 <__retarget_lock_acquire_recursive>:
 800a8c2:	4770      	bx	lr

0800a8c4 <__retarget_lock_release_recursive>:
 800a8c4:	4770      	bx	lr

0800a8c6 <memcpy>:
 800a8c6:	440a      	add	r2, r1
 800a8c8:	4291      	cmp	r1, r2
 800a8ca:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8ce:	d100      	bne.n	800a8d2 <memcpy+0xc>
 800a8d0:	4770      	bx	lr
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d8:	4291      	cmp	r1, r2
 800a8da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8de:	d1f9      	bne.n	800a8d4 <memcpy+0xe>
 800a8e0:	bd10      	pop	{r4, pc}
	...

0800a8e4 <nan>:
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	4901      	ldr	r1, [pc, #4]	@ (800a8ec <nan+0x8>)
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	7ff80000 	.word	0x7ff80000

0800a8f0 <_free_r>:
 800a8f0:	b538      	push	{r3, r4, r5, lr}
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	2900      	cmp	r1, #0
 800a8f6:	d040      	beq.n	800a97a <_free_r+0x8a>
 800a8f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8fc:	1f0c      	subs	r4, r1, #4
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfb8      	it	lt
 800a902:	18e4      	addlt	r4, r4, r3
 800a904:	f000 fc2a 	bl	800b15c <__malloc_lock>
 800a908:	4a1c      	ldr	r2, [pc, #112]	@ (800a97c <_free_r+0x8c>)
 800a90a:	6813      	ldr	r3, [r2, #0]
 800a90c:	b933      	cbnz	r3, 800a91c <_free_r+0x2c>
 800a90e:	6063      	str	r3, [r4, #4]
 800a910:	6014      	str	r4, [r2, #0]
 800a912:	4628      	mov	r0, r5
 800a914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a918:	f000 bc26 	b.w	800b168 <__malloc_unlock>
 800a91c:	42a3      	cmp	r3, r4
 800a91e:	d908      	bls.n	800a932 <_free_r+0x42>
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	1821      	adds	r1, r4, r0
 800a924:	428b      	cmp	r3, r1
 800a926:	bf01      	itttt	eq
 800a928:	6819      	ldreq	r1, [r3, #0]
 800a92a:	685b      	ldreq	r3, [r3, #4]
 800a92c:	1809      	addeq	r1, r1, r0
 800a92e:	6021      	streq	r1, [r4, #0]
 800a930:	e7ed      	b.n	800a90e <_free_r+0x1e>
 800a932:	461a      	mov	r2, r3
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	b10b      	cbz	r3, 800a93c <_free_r+0x4c>
 800a938:	42a3      	cmp	r3, r4
 800a93a:	d9fa      	bls.n	800a932 <_free_r+0x42>
 800a93c:	6811      	ldr	r1, [r2, #0]
 800a93e:	1850      	adds	r0, r2, r1
 800a940:	42a0      	cmp	r0, r4
 800a942:	d10b      	bne.n	800a95c <_free_r+0x6c>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	4401      	add	r1, r0
 800a948:	1850      	adds	r0, r2, r1
 800a94a:	4283      	cmp	r3, r0
 800a94c:	6011      	str	r1, [r2, #0]
 800a94e:	d1e0      	bne.n	800a912 <_free_r+0x22>
 800a950:	6818      	ldr	r0, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	4408      	add	r0, r1
 800a956:	6010      	str	r0, [r2, #0]
 800a958:	6053      	str	r3, [r2, #4]
 800a95a:	e7da      	b.n	800a912 <_free_r+0x22>
 800a95c:	d902      	bls.n	800a964 <_free_r+0x74>
 800a95e:	230c      	movs	r3, #12
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	e7d6      	b.n	800a912 <_free_r+0x22>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	1821      	adds	r1, r4, r0
 800a968:	428b      	cmp	r3, r1
 800a96a:	bf01      	itttt	eq
 800a96c:	6819      	ldreq	r1, [r3, #0]
 800a96e:	685b      	ldreq	r3, [r3, #4]
 800a970:	1809      	addeq	r1, r1, r0
 800a972:	6021      	streq	r1, [r4, #0]
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	6054      	str	r4, [r2, #4]
 800a978:	e7cb      	b.n	800a912 <_free_r+0x22>
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20000abc 	.word	0x20000abc

0800a980 <rshift>:
 800a980:	6903      	ldr	r3, [r0, #16]
 800a982:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a986:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a98a:	f100 0414 	add.w	r4, r0, #20
 800a98e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a992:	dd46      	ble.n	800aa22 <rshift+0xa2>
 800a994:	f011 011f 	ands.w	r1, r1, #31
 800a998:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a99c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a9a0:	d10c      	bne.n	800a9bc <rshift+0x3c>
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f100 0710 	add.w	r7, r0, #16
 800a9a8:	42b1      	cmp	r1, r6
 800a9aa:	d335      	bcc.n	800aa18 <rshift+0x98>
 800a9ac:	1a9b      	subs	r3, r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	1eea      	subs	r2, r5, #3
 800a9b2:	4296      	cmp	r6, r2
 800a9b4:	bf38      	it	cc
 800a9b6:	2300      	movcc	r3, #0
 800a9b8:	4423      	add	r3, r4
 800a9ba:	e015      	b.n	800a9e8 <rshift+0x68>
 800a9bc:	46a1      	mov	r9, r4
 800a9be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a9c2:	f1c1 0820 	rsb	r8, r1, #32
 800a9c6:	40cf      	lsrs	r7, r1
 800a9c8:	f105 0e04 	add.w	lr, r5, #4
 800a9cc:	4576      	cmp	r6, lr
 800a9ce:	46f4      	mov	ip, lr
 800a9d0:	d816      	bhi.n	800aa00 <rshift+0x80>
 800a9d2:	1a9a      	subs	r2, r3, r2
 800a9d4:	0092      	lsls	r2, r2, #2
 800a9d6:	3a04      	subs	r2, #4
 800a9d8:	3501      	adds	r5, #1
 800a9da:	42ae      	cmp	r6, r5
 800a9dc:	bf38      	it	cc
 800a9de:	2200      	movcc	r2, #0
 800a9e0:	18a3      	adds	r3, r4, r2
 800a9e2:	50a7      	str	r7, [r4, r2]
 800a9e4:	b107      	cbz	r7, 800a9e8 <rshift+0x68>
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	42a3      	cmp	r3, r4
 800a9ea:	eba3 0204 	sub.w	r2, r3, r4
 800a9ee:	bf08      	it	eq
 800a9f0:	2300      	moveq	r3, #0
 800a9f2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9f6:	6102      	str	r2, [r0, #16]
 800a9f8:	bf08      	it	eq
 800a9fa:	6143      	streq	r3, [r0, #20]
 800a9fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa00:	f8dc c000 	ldr.w	ip, [ip]
 800aa04:	fa0c fc08 	lsl.w	ip, ip, r8
 800aa08:	ea4c 0707 	orr.w	r7, ip, r7
 800aa0c:	f849 7b04 	str.w	r7, [r9], #4
 800aa10:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa14:	40cf      	lsrs	r7, r1
 800aa16:	e7d9      	b.n	800a9cc <rshift+0x4c>
 800aa18:	f851 cb04 	ldr.w	ip, [r1], #4
 800aa1c:	f847 cf04 	str.w	ip, [r7, #4]!
 800aa20:	e7c2      	b.n	800a9a8 <rshift+0x28>
 800aa22:	4623      	mov	r3, r4
 800aa24:	e7e0      	b.n	800a9e8 <rshift+0x68>

0800aa26 <__hexdig_fun>:
 800aa26:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aa2a:	2b09      	cmp	r3, #9
 800aa2c:	d802      	bhi.n	800aa34 <__hexdig_fun+0xe>
 800aa2e:	3820      	subs	r0, #32
 800aa30:	b2c0      	uxtb	r0, r0
 800aa32:	4770      	bx	lr
 800aa34:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa38:	2b05      	cmp	r3, #5
 800aa3a:	d801      	bhi.n	800aa40 <__hexdig_fun+0x1a>
 800aa3c:	3847      	subs	r0, #71	@ 0x47
 800aa3e:	e7f7      	b.n	800aa30 <__hexdig_fun+0xa>
 800aa40:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa44:	2b05      	cmp	r3, #5
 800aa46:	d801      	bhi.n	800aa4c <__hexdig_fun+0x26>
 800aa48:	3827      	subs	r0, #39	@ 0x27
 800aa4a:	e7f1      	b.n	800aa30 <__hexdig_fun+0xa>
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	4770      	bx	lr

0800aa50 <__gethex>:
 800aa50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa54:	468a      	mov	sl, r1
 800aa56:	4690      	mov	r8, r2
 800aa58:	b085      	sub	sp, #20
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	680b      	ldr	r3, [r1, #0]
 800aa5e:	9001      	str	r0, [sp, #4]
 800aa60:	1c9c      	adds	r4, r3, #2
 800aa62:	46a1      	mov	r9, r4
 800aa64:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa68:	2830      	cmp	r0, #48	@ 0x30
 800aa6a:	d0fa      	beq.n	800aa62 <__gethex+0x12>
 800aa6c:	eba9 0303 	sub.w	r3, r9, r3
 800aa70:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa74:	f7ff ffd7 	bl	800aa26 <__hexdig_fun>
 800aa78:	4605      	mov	r5, r0
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d168      	bne.n	800ab50 <__gethex+0x100>
 800aa7e:	2201      	movs	r2, #1
 800aa80:	4648      	mov	r0, r9
 800aa82:	499f      	ldr	r1, [pc, #636]	@ (800ad00 <__gethex+0x2b0>)
 800aa84:	f7ff fe99 	bl	800a7ba <strncmp>
 800aa88:	4607      	mov	r7, r0
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d167      	bne.n	800ab5e <__gethex+0x10e>
 800aa8e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa92:	4626      	mov	r6, r4
 800aa94:	f7ff ffc7 	bl	800aa26 <__hexdig_fun>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d062      	beq.n	800ab62 <__gethex+0x112>
 800aa9c:	4623      	mov	r3, r4
 800aa9e:	7818      	ldrb	r0, [r3, #0]
 800aaa0:	4699      	mov	r9, r3
 800aaa2:	2830      	cmp	r0, #48	@ 0x30
 800aaa4:	f103 0301 	add.w	r3, r3, #1
 800aaa8:	d0f9      	beq.n	800aa9e <__gethex+0x4e>
 800aaaa:	f7ff ffbc 	bl	800aa26 <__hexdig_fun>
 800aaae:	fab0 f580 	clz	r5, r0
 800aab2:	f04f 0b01 	mov.w	fp, #1
 800aab6:	096d      	lsrs	r5, r5, #5
 800aab8:	464a      	mov	r2, r9
 800aaba:	4616      	mov	r6, r2
 800aabc:	7830      	ldrb	r0, [r6, #0]
 800aabe:	3201      	adds	r2, #1
 800aac0:	f7ff ffb1 	bl	800aa26 <__hexdig_fun>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d1f8      	bne.n	800aaba <__gethex+0x6a>
 800aac8:	2201      	movs	r2, #1
 800aaca:	4630      	mov	r0, r6
 800aacc:	498c      	ldr	r1, [pc, #560]	@ (800ad00 <__gethex+0x2b0>)
 800aace:	f7ff fe74 	bl	800a7ba <strncmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	d13f      	bne.n	800ab56 <__gethex+0x106>
 800aad6:	b944      	cbnz	r4, 800aaea <__gethex+0x9a>
 800aad8:	1c74      	adds	r4, r6, #1
 800aada:	4622      	mov	r2, r4
 800aadc:	4616      	mov	r6, r2
 800aade:	7830      	ldrb	r0, [r6, #0]
 800aae0:	3201      	adds	r2, #1
 800aae2:	f7ff ffa0 	bl	800aa26 <__hexdig_fun>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	d1f8      	bne.n	800aadc <__gethex+0x8c>
 800aaea:	1ba4      	subs	r4, r4, r6
 800aaec:	00a7      	lsls	r7, r4, #2
 800aaee:	7833      	ldrb	r3, [r6, #0]
 800aaf0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aaf4:	2b50      	cmp	r3, #80	@ 0x50
 800aaf6:	d13e      	bne.n	800ab76 <__gethex+0x126>
 800aaf8:	7873      	ldrb	r3, [r6, #1]
 800aafa:	2b2b      	cmp	r3, #43	@ 0x2b
 800aafc:	d033      	beq.n	800ab66 <__gethex+0x116>
 800aafe:	2b2d      	cmp	r3, #45	@ 0x2d
 800ab00:	d034      	beq.n	800ab6c <__gethex+0x11c>
 800ab02:	2400      	movs	r4, #0
 800ab04:	1c71      	adds	r1, r6, #1
 800ab06:	7808      	ldrb	r0, [r1, #0]
 800ab08:	f7ff ff8d 	bl	800aa26 <__hexdig_fun>
 800ab0c:	1e43      	subs	r3, r0, #1
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b18      	cmp	r3, #24
 800ab12:	d830      	bhi.n	800ab76 <__gethex+0x126>
 800ab14:	f1a0 0210 	sub.w	r2, r0, #16
 800ab18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ab1c:	f7ff ff83 	bl	800aa26 <__hexdig_fun>
 800ab20:	f100 3cff 	add.w	ip, r0, #4294967295
 800ab24:	fa5f fc8c 	uxtb.w	ip, ip
 800ab28:	f1bc 0f18 	cmp.w	ip, #24
 800ab2c:	f04f 030a 	mov.w	r3, #10
 800ab30:	d91e      	bls.n	800ab70 <__gethex+0x120>
 800ab32:	b104      	cbz	r4, 800ab36 <__gethex+0xe6>
 800ab34:	4252      	negs	r2, r2
 800ab36:	4417      	add	r7, r2
 800ab38:	f8ca 1000 	str.w	r1, [sl]
 800ab3c:	b1ed      	cbz	r5, 800ab7a <__gethex+0x12a>
 800ab3e:	f1bb 0f00 	cmp.w	fp, #0
 800ab42:	bf0c      	ite	eq
 800ab44:	2506      	moveq	r5, #6
 800ab46:	2500      	movne	r5, #0
 800ab48:	4628      	mov	r0, r5
 800ab4a:	b005      	add	sp, #20
 800ab4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab50:	2500      	movs	r5, #0
 800ab52:	462c      	mov	r4, r5
 800ab54:	e7b0      	b.n	800aab8 <__gethex+0x68>
 800ab56:	2c00      	cmp	r4, #0
 800ab58:	d1c7      	bne.n	800aaea <__gethex+0x9a>
 800ab5a:	4627      	mov	r7, r4
 800ab5c:	e7c7      	b.n	800aaee <__gethex+0x9e>
 800ab5e:	464e      	mov	r6, r9
 800ab60:	462f      	mov	r7, r5
 800ab62:	2501      	movs	r5, #1
 800ab64:	e7c3      	b.n	800aaee <__gethex+0x9e>
 800ab66:	2400      	movs	r4, #0
 800ab68:	1cb1      	adds	r1, r6, #2
 800ab6a:	e7cc      	b.n	800ab06 <__gethex+0xb6>
 800ab6c:	2401      	movs	r4, #1
 800ab6e:	e7fb      	b.n	800ab68 <__gethex+0x118>
 800ab70:	fb03 0002 	mla	r0, r3, r2, r0
 800ab74:	e7ce      	b.n	800ab14 <__gethex+0xc4>
 800ab76:	4631      	mov	r1, r6
 800ab78:	e7de      	b.n	800ab38 <__gethex+0xe8>
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	eba6 0309 	sub.w	r3, r6, r9
 800ab80:	3b01      	subs	r3, #1
 800ab82:	2b07      	cmp	r3, #7
 800ab84:	dc0a      	bgt.n	800ab9c <__gethex+0x14c>
 800ab86:	9801      	ldr	r0, [sp, #4]
 800ab88:	f000 faf4 	bl	800b174 <_Balloc>
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	b940      	cbnz	r0, 800aba2 <__gethex+0x152>
 800ab90:	4602      	mov	r2, r0
 800ab92:	21e4      	movs	r1, #228	@ 0xe4
 800ab94:	4b5b      	ldr	r3, [pc, #364]	@ (800ad04 <__gethex+0x2b4>)
 800ab96:	485c      	ldr	r0, [pc, #368]	@ (800ad08 <__gethex+0x2b8>)
 800ab98:	f001 f852 	bl	800bc40 <__assert_func>
 800ab9c:	3101      	adds	r1, #1
 800ab9e:	105b      	asrs	r3, r3, #1
 800aba0:	e7ef      	b.n	800ab82 <__gethex+0x132>
 800aba2:	2300      	movs	r3, #0
 800aba4:	f100 0a14 	add.w	sl, r0, #20
 800aba8:	4655      	mov	r5, sl
 800abaa:	469b      	mov	fp, r3
 800abac:	45b1      	cmp	r9, r6
 800abae:	d337      	bcc.n	800ac20 <__gethex+0x1d0>
 800abb0:	f845 bb04 	str.w	fp, [r5], #4
 800abb4:	eba5 050a 	sub.w	r5, r5, sl
 800abb8:	10ad      	asrs	r5, r5, #2
 800abba:	6125      	str	r5, [r4, #16]
 800abbc:	4658      	mov	r0, fp
 800abbe:	f000 fbcb 	bl	800b358 <__hi0bits>
 800abc2:	016d      	lsls	r5, r5, #5
 800abc4:	f8d8 6000 	ldr.w	r6, [r8]
 800abc8:	1a2d      	subs	r5, r5, r0
 800abca:	42b5      	cmp	r5, r6
 800abcc:	dd54      	ble.n	800ac78 <__gethex+0x228>
 800abce:	1bad      	subs	r5, r5, r6
 800abd0:	4629      	mov	r1, r5
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 ff4d 	bl	800ba72 <__any_on>
 800abd8:	4681      	mov	r9, r0
 800abda:	b178      	cbz	r0, 800abfc <__gethex+0x1ac>
 800abdc:	f04f 0901 	mov.w	r9, #1
 800abe0:	1e6b      	subs	r3, r5, #1
 800abe2:	1159      	asrs	r1, r3, #5
 800abe4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800abe8:	f003 021f 	and.w	r2, r3, #31
 800abec:	fa09 f202 	lsl.w	r2, r9, r2
 800abf0:	420a      	tst	r2, r1
 800abf2:	d003      	beq.n	800abfc <__gethex+0x1ac>
 800abf4:	454b      	cmp	r3, r9
 800abf6:	dc36      	bgt.n	800ac66 <__gethex+0x216>
 800abf8:	f04f 0902 	mov.w	r9, #2
 800abfc:	4629      	mov	r1, r5
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7ff febe 	bl	800a980 <rshift>
 800ac04:	442f      	add	r7, r5
 800ac06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac0a:	42bb      	cmp	r3, r7
 800ac0c:	da42      	bge.n	800ac94 <__gethex+0x244>
 800ac0e:	4621      	mov	r1, r4
 800ac10:	9801      	ldr	r0, [sp, #4]
 800ac12:	f000 faef 	bl	800b1f4 <_Bfree>
 800ac16:	2300      	movs	r3, #0
 800ac18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac1a:	25a3      	movs	r5, #163	@ 0xa3
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	e793      	b.n	800ab48 <__gethex+0xf8>
 800ac20:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ac24:	2a2e      	cmp	r2, #46	@ 0x2e
 800ac26:	d012      	beq.n	800ac4e <__gethex+0x1fe>
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d104      	bne.n	800ac36 <__gethex+0x1e6>
 800ac2c:	f845 bb04 	str.w	fp, [r5], #4
 800ac30:	f04f 0b00 	mov.w	fp, #0
 800ac34:	465b      	mov	r3, fp
 800ac36:	7830      	ldrb	r0, [r6, #0]
 800ac38:	9303      	str	r3, [sp, #12]
 800ac3a:	f7ff fef4 	bl	800aa26 <__hexdig_fun>
 800ac3e:	9b03      	ldr	r3, [sp, #12]
 800ac40:	f000 000f 	and.w	r0, r0, #15
 800ac44:	4098      	lsls	r0, r3
 800ac46:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	e7ae      	b.n	800abac <__gethex+0x15c>
 800ac4e:	45b1      	cmp	r9, r6
 800ac50:	d8ea      	bhi.n	800ac28 <__gethex+0x1d8>
 800ac52:	2201      	movs	r2, #1
 800ac54:	4630      	mov	r0, r6
 800ac56:	492a      	ldr	r1, [pc, #168]	@ (800ad00 <__gethex+0x2b0>)
 800ac58:	9303      	str	r3, [sp, #12]
 800ac5a:	f7ff fdae 	bl	800a7ba <strncmp>
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1e1      	bne.n	800ac28 <__gethex+0x1d8>
 800ac64:	e7a2      	b.n	800abac <__gethex+0x15c>
 800ac66:	4620      	mov	r0, r4
 800ac68:	1ea9      	subs	r1, r5, #2
 800ac6a:	f000 ff02 	bl	800ba72 <__any_on>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d0c2      	beq.n	800abf8 <__gethex+0x1a8>
 800ac72:	f04f 0903 	mov.w	r9, #3
 800ac76:	e7c1      	b.n	800abfc <__gethex+0x1ac>
 800ac78:	da09      	bge.n	800ac8e <__gethex+0x23e>
 800ac7a:	1b75      	subs	r5, r6, r5
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	462a      	mov	r2, r5
 800ac80:	9801      	ldr	r0, [sp, #4]
 800ac82:	f000 fcc7 	bl	800b614 <__lshift>
 800ac86:	4604      	mov	r4, r0
 800ac88:	1b7f      	subs	r7, r7, r5
 800ac8a:	f100 0a14 	add.w	sl, r0, #20
 800ac8e:	f04f 0900 	mov.w	r9, #0
 800ac92:	e7b8      	b.n	800ac06 <__gethex+0x1b6>
 800ac94:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac98:	42bd      	cmp	r5, r7
 800ac9a:	dd6f      	ble.n	800ad7c <__gethex+0x32c>
 800ac9c:	1bed      	subs	r5, r5, r7
 800ac9e:	42ae      	cmp	r6, r5
 800aca0:	dc34      	bgt.n	800ad0c <__gethex+0x2bc>
 800aca2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d022      	beq.n	800acf0 <__gethex+0x2a0>
 800acaa:	2b03      	cmp	r3, #3
 800acac:	d024      	beq.n	800acf8 <__gethex+0x2a8>
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d115      	bne.n	800acde <__gethex+0x28e>
 800acb2:	42ae      	cmp	r6, r5
 800acb4:	d113      	bne.n	800acde <__gethex+0x28e>
 800acb6:	2e01      	cmp	r6, #1
 800acb8:	d10b      	bne.n	800acd2 <__gethex+0x282>
 800acba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800acbe:	9a02      	ldr	r2, [sp, #8]
 800acc0:	2562      	movs	r5, #98	@ 0x62
 800acc2:	6013      	str	r3, [r2, #0]
 800acc4:	2301      	movs	r3, #1
 800acc6:	6123      	str	r3, [r4, #16]
 800acc8:	f8ca 3000 	str.w	r3, [sl]
 800accc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acce:	601c      	str	r4, [r3, #0]
 800acd0:	e73a      	b.n	800ab48 <__gethex+0xf8>
 800acd2:	4620      	mov	r0, r4
 800acd4:	1e71      	subs	r1, r6, #1
 800acd6:	f000 fecc 	bl	800ba72 <__any_on>
 800acda:	2800      	cmp	r0, #0
 800acdc:	d1ed      	bne.n	800acba <__gethex+0x26a>
 800acde:	4621      	mov	r1, r4
 800ace0:	9801      	ldr	r0, [sp, #4]
 800ace2:	f000 fa87 	bl	800b1f4 <_Bfree>
 800ace6:	2300      	movs	r3, #0
 800ace8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acea:	2550      	movs	r5, #80	@ 0x50
 800acec:	6013      	str	r3, [r2, #0]
 800acee:	e72b      	b.n	800ab48 <__gethex+0xf8>
 800acf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f3      	bne.n	800acde <__gethex+0x28e>
 800acf6:	e7e0      	b.n	800acba <__gethex+0x26a>
 800acf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1dd      	bne.n	800acba <__gethex+0x26a>
 800acfe:	e7ee      	b.n	800acde <__gethex+0x28e>
 800ad00:	0800c9aa 	.word	0x0800c9aa
 800ad04:	0800c9c0 	.word	0x0800c9c0
 800ad08:	0800c9d1 	.word	0x0800c9d1
 800ad0c:	1e6f      	subs	r7, r5, #1
 800ad0e:	f1b9 0f00 	cmp.w	r9, #0
 800ad12:	d130      	bne.n	800ad76 <__gethex+0x326>
 800ad14:	b127      	cbz	r7, 800ad20 <__gethex+0x2d0>
 800ad16:	4639      	mov	r1, r7
 800ad18:	4620      	mov	r0, r4
 800ad1a:	f000 feaa 	bl	800ba72 <__any_on>
 800ad1e:	4681      	mov	r9, r0
 800ad20:	2301      	movs	r3, #1
 800ad22:	4629      	mov	r1, r5
 800ad24:	1b76      	subs	r6, r6, r5
 800ad26:	2502      	movs	r5, #2
 800ad28:	117a      	asrs	r2, r7, #5
 800ad2a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ad2e:	f007 071f 	and.w	r7, r7, #31
 800ad32:	40bb      	lsls	r3, r7
 800ad34:	4213      	tst	r3, r2
 800ad36:	4620      	mov	r0, r4
 800ad38:	bf18      	it	ne
 800ad3a:	f049 0902 	orrne.w	r9, r9, #2
 800ad3e:	f7ff fe1f 	bl	800a980 <rshift>
 800ad42:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad46:	f1b9 0f00 	cmp.w	r9, #0
 800ad4a:	d047      	beq.n	800addc <__gethex+0x38c>
 800ad4c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d015      	beq.n	800ad80 <__gethex+0x330>
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d017      	beq.n	800ad88 <__gethex+0x338>
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d109      	bne.n	800ad70 <__gethex+0x320>
 800ad5c:	f019 0f02 	tst.w	r9, #2
 800ad60:	d006      	beq.n	800ad70 <__gethex+0x320>
 800ad62:	f8da 3000 	ldr.w	r3, [sl]
 800ad66:	ea49 0903 	orr.w	r9, r9, r3
 800ad6a:	f019 0f01 	tst.w	r9, #1
 800ad6e:	d10e      	bne.n	800ad8e <__gethex+0x33e>
 800ad70:	f045 0510 	orr.w	r5, r5, #16
 800ad74:	e032      	b.n	800addc <__gethex+0x38c>
 800ad76:	f04f 0901 	mov.w	r9, #1
 800ad7a:	e7d1      	b.n	800ad20 <__gethex+0x2d0>
 800ad7c:	2501      	movs	r5, #1
 800ad7e:	e7e2      	b.n	800ad46 <__gethex+0x2f6>
 800ad80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad82:	f1c3 0301 	rsb	r3, r3, #1
 800ad86:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0f0      	beq.n	800ad70 <__gethex+0x320>
 800ad8e:	f04f 0c00 	mov.w	ip, #0
 800ad92:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad96:	f104 0314 	add.w	r3, r4, #20
 800ad9a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad9e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800adac:	d01b      	beq.n	800ade6 <__gethex+0x396>
 800adae:	3201      	adds	r2, #1
 800adb0:	6002      	str	r2, [r0, #0]
 800adb2:	2d02      	cmp	r5, #2
 800adb4:	f104 0314 	add.w	r3, r4, #20
 800adb8:	d13c      	bne.n	800ae34 <__gethex+0x3e4>
 800adba:	f8d8 2000 	ldr.w	r2, [r8]
 800adbe:	3a01      	subs	r2, #1
 800adc0:	42b2      	cmp	r2, r6
 800adc2:	d109      	bne.n	800add8 <__gethex+0x388>
 800adc4:	2201      	movs	r2, #1
 800adc6:	1171      	asrs	r1, r6, #5
 800adc8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800adcc:	f006 061f 	and.w	r6, r6, #31
 800add0:	fa02 f606 	lsl.w	r6, r2, r6
 800add4:	421e      	tst	r6, r3
 800add6:	d13a      	bne.n	800ae4e <__gethex+0x3fe>
 800add8:	f045 0520 	orr.w	r5, r5, #32
 800addc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adde:	601c      	str	r4, [r3, #0]
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	601f      	str	r7, [r3, #0]
 800ade4:	e6b0      	b.n	800ab48 <__gethex+0xf8>
 800ade6:	4299      	cmp	r1, r3
 800ade8:	f843 cc04 	str.w	ip, [r3, #-4]
 800adec:	d8d9      	bhi.n	800ada2 <__gethex+0x352>
 800adee:	68a3      	ldr	r3, [r4, #8]
 800adf0:	459b      	cmp	fp, r3
 800adf2:	db17      	blt.n	800ae24 <__gethex+0x3d4>
 800adf4:	6861      	ldr	r1, [r4, #4]
 800adf6:	9801      	ldr	r0, [sp, #4]
 800adf8:	3101      	adds	r1, #1
 800adfa:	f000 f9bb 	bl	800b174 <_Balloc>
 800adfe:	4681      	mov	r9, r0
 800ae00:	b918      	cbnz	r0, 800ae0a <__gethex+0x3ba>
 800ae02:	4602      	mov	r2, r0
 800ae04:	2184      	movs	r1, #132	@ 0x84
 800ae06:	4b19      	ldr	r3, [pc, #100]	@ (800ae6c <__gethex+0x41c>)
 800ae08:	e6c5      	b.n	800ab96 <__gethex+0x146>
 800ae0a:	6922      	ldr	r2, [r4, #16]
 800ae0c:	f104 010c 	add.w	r1, r4, #12
 800ae10:	3202      	adds	r2, #2
 800ae12:	0092      	lsls	r2, r2, #2
 800ae14:	300c      	adds	r0, #12
 800ae16:	f7ff fd56 	bl	800a8c6 <memcpy>
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	9801      	ldr	r0, [sp, #4]
 800ae1e:	f000 f9e9 	bl	800b1f4 <_Bfree>
 800ae22:	464c      	mov	r4, r9
 800ae24:	6923      	ldr	r3, [r4, #16]
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	6122      	str	r2, [r4, #16]
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ae30:	615a      	str	r2, [r3, #20]
 800ae32:	e7be      	b.n	800adb2 <__gethex+0x362>
 800ae34:	6922      	ldr	r2, [r4, #16]
 800ae36:	455a      	cmp	r2, fp
 800ae38:	dd0b      	ble.n	800ae52 <__gethex+0x402>
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	4620      	mov	r0, r4
 800ae3e:	f7ff fd9f 	bl	800a980 <rshift>
 800ae42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae46:	3701      	adds	r7, #1
 800ae48:	42bb      	cmp	r3, r7
 800ae4a:	f6ff aee0 	blt.w	800ac0e <__gethex+0x1be>
 800ae4e:	2501      	movs	r5, #1
 800ae50:	e7c2      	b.n	800add8 <__gethex+0x388>
 800ae52:	f016 061f 	ands.w	r6, r6, #31
 800ae56:	d0fa      	beq.n	800ae4e <__gethex+0x3fe>
 800ae58:	4453      	add	r3, sl
 800ae5a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae5e:	f000 fa7b 	bl	800b358 <__hi0bits>
 800ae62:	f1c6 0620 	rsb	r6, r6, #32
 800ae66:	42b0      	cmp	r0, r6
 800ae68:	dbe7      	blt.n	800ae3a <__gethex+0x3ea>
 800ae6a:	e7f0      	b.n	800ae4e <__gethex+0x3fe>
 800ae6c:	0800c9c0 	.word	0x0800c9c0

0800ae70 <L_shift>:
 800ae70:	f1c2 0208 	rsb	r2, r2, #8
 800ae74:	0092      	lsls	r2, r2, #2
 800ae76:	b570      	push	{r4, r5, r6, lr}
 800ae78:	f1c2 0620 	rsb	r6, r2, #32
 800ae7c:	6843      	ldr	r3, [r0, #4]
 800ae7e:	6804      	ldr	r4, [r0, #0]
 800ae80:	fa03 f506 	lsl.w	r5, r3, r6
 800ae84:	432c      	orrs	r4, r5
 800ae86:	40d3      	lsrs	r3, r2
 800ae88:	6004      	str	r4, [r0, #0]
 800ae8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae8e:	4288      	cmp	r0, r1
 800ae90:	d3f4      	bcc.n	800ae7c <L_shift+0xc>
 800ae92:	bd70      	pop	{r4, r5, r6, pc}

0800ae94 <__match>:
 800ae94:	b530      	push	{r4, r5, lr}
 800ae96:	6803      	ldr	r3, [r0, #0]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae9e:	b914      	cbnz	r4, 800aea6 <__match+0x12>
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	2001      	movs	r0, #1
 800aea4:	bd30      	pop	{r4, r5, pc}
 800aea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aeaa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aeae:	2d19      	cmp	r5, #25
 800aeb0:	bf98      	it	ls
 800aeb2:	3220      	addls	r2, #32
 800aeb4:	42a2      	cmp	r2, r4
 800aeb6:	d0f0      	beq.n	800ae9a <__match+0x6>
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e7f3      	b.n	800aea4 <__match+0x10>

0800aebc <__hexnan>:
 800aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aec0:	2500      	movs	r5, #0
 800aec2:	680b      	ldr	r3, [r1, #0]
 800aec4:	4682      	mov	sl, r0
 800aec6:	115e      	asrs	r6, r3, #5
 800aec8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aecc:	f013 031f 	ands.w	r3, r3, #31
 800aed0:	bf18      	it	ne
 800aed2:	3604      	addne	r6, #4
 800aed4:	1f37      	subs	r7, r6, #4
 800aed6:	4690      	mov	r8, r2
 800aed8:	46b9      	mov	r9, r7
 800aeda:	463c      	mov	r4, r7
 800aedc:	46ab      	mov	fp, r5
 800aede:	b087      	sub	sp, #28
 800aee0:	6801      	ldr	r1, [r0, #0]
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	f846 5c04 	str.w	r5, [r6, #-4]
 800aee8:	9502      	str	r5, [sp, #8]
 800aeea:	784a      	ldrb	r2, [r1, #1]
 800aeec:	1c4b      	adds	r3, r1, #1
 800aeee:	9303      	str	r3, [sp, #12]
 800aef0:	b342      	cbz	r2, 800af44 <__hexnan+0x88>
 800aef2:	4610      	mov	r0, r2
 800aef4:	9105      	str	r1, [sp, #20]
 800aef6:	9204      	str	r2, [sp, #16]
 800aef8:	f7ff fd95 	bl	800aa26 <__hexdig_fun>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	d151      	bne.n	800afa4 <__hexnan+0xe8>
 800af00:	9a04      	ldr	r2, [sp, #16]
 800af02:	9905      	ldr	r1, [sp, #20]
 800af04:	2a20      	cmp	r2, #32
 800af06:	d818      	bhi.n	800af3a <__hexnan+0x7e>
 800af08:	9b02      	ldr	r3, [sp, #8]
 800af0a:	459b      	cmp	fp, r3
 800af0c:	dd13      	ble.n	800af36 <__hexnan+0x7a>
 800af0e:	454c      	cmp	r4, r9
 800af10:	d206      	bcs.n	800af20 <__hexnan+0x64>
 800af12:	2d07      	cmp	r5, #7
 800af14:	dc04      	bgt.n	800af20 <__hexnan+0x64>
 800af16:	462a      	mov	r2, r5
 800af18:	4649      	mov	r1, r9
 800af1a:	4620      	mov	r0, r4
 800af1c:	f7ff ffa8 	bl	800ae70 <L_shift>
 800af20:	4544      	cmp	r4, r8
 800af22:	d952      	bls.n	800afca <__hexnan+0x10e>
 800af24:	2300      	movs	r3, #0
 800af26:	f1a4 0904 	sub.w	r9, r4, #4
 800af2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800af2e:	461d      	mov	r5, r3
 800af30:	464c      	mov	r4, r9
 800af32:	f8cd b008 	str.w	fp, [sp, #8]
 800af36:	9903      	ldr	r1, [sp, #12]
 800af38:	e7d7      	b.n	800aeea <__hexnan+0x2e>
 800af3a:	2a29      	cmp	r2, #41	@ 0x29
 800af3c:	d157      	bne.n	800afee <__hexnan+0x132>
 800af3e:	3102      	adds	r1, #2
 800af40:	f8ca 1000 	str.w	r1, [sl]
 800af44:	f1bb 0f00 	cmp.w	fp, #0
 800af48:	d051      	beq.n	800afee <__hexnan+0x132>
 800af4a:	454c      	cmp	r4, r9
 800af4c:	d206      	bcs.n	800af5c <__hexnan+0xa0>
 800af4e:	2d07      	cmp	r5, #7
 800af50:	dc04      	bgt.n	800af5c <__hexnan+0xa0>
 800af52:	462a      	mov	r2, r5
 800af54:	4649      	mov	r1, r9
 800af56:	4620      	mov	r0, r4
 800af58:	f7ff ff8a 	bl	800ae70 <L_shift>
 800af5c:	4544      	cmp	r4, r8
 800af5e:	d936      	bls.n	800afce <__hexnan+0x112>
 800af60:	4623      	mov	r3, r4
 800af62:	f1a8 0204 	sub.w	r2, r8, #4
 800af66:	f853 1b04 	ldr.w	r1, [r3], #4
 800af6a:	429f      	cmp	r7, r3
 800af6c:	f842 1f04 	str.w	r1, [r2, #4]!
 800af70:	d2f9      	bcs.n	800af66 <__hexnan+0xaa>
 800af72:	1b3b      	subs	r3, r7, r4
 800af74:	f023 0303 	bic.w	r3, r3, #3
 800af78:	3304      	adds	r3, #4
 800af7a:	3401      	adds	r4, #1
 800af7c:	3e03      	subs	r6, #3
 800af7e:	42b4      	cmp	r4, r6
 800af80:	bf88      	it	hi
 800af82:	2304      	movhi	r3, #4
 800af84:	2200      	movs	r2, #0
 800af86:	4443      	add	r3, r8
 800af88:	f843 2b04 	str.w	r2, [r3], #4
 800af8c:	429f      	cmp	r7, r3
 800af8e:	d2fb      	bcs.n	800af88 <__hexnan+0xcc>
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	b91b      	cbnz	r3, 800af9c <__hexnan+0xe0>
 800af94:	4547      	cmp	r7, r8
 800af96:	d128      	bne.n	800afea <__hexnan+0x12e>
 800af98:	2301      	movs	r3, #1
 800af9a:	603b      	str	r3, [r7, #0]
 800af9c:	2005      	movs	r0, #5
 800af9e:	b007      	add	sp, #28
 800afa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa4:	3501      	adds	r5, #1
 800afa6:	2d08      	cmp	r5, #8
 800afa8:	f10b 0b01 	add.w	fp, fp, #1
 800afac:	dd06      	ble.n	800afbc <__hexnan+0x100>
 800afae:	4544      	cmp	r4, r8
 800afb0:	d9c1      	bls.n	800af36 <__hexnan+0x7a>
 800afb2:	2300      	movs	r3, #0
 800afb4:	2501      	movs	r5, #1
 800afb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800afba:	3c04      	subs	r4, #4
 800afbc:	6822      	ldr	r2, [r4, #0]
 800afbe:	f000 000f 	and.w	r0, r0, #15
 800afc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800afc6:	6020      	str	r0, [r4, #0]
 800afc8:	e7b5      	b.n	800af36 <__hexnan+0x7a>
 800afca:	2508      	movs	r5, #8
 800afcc:	e7b3      	b.n	800af36 <__hexnan+0x7a>
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0dd      	beq.n	800af90 <__hexnan+0xd4>
 800afd4:	f04f 32ff 	mov.w	r2, #4294967295
 800afd8:	f1c3 0320 	rsb	r3, r3, #32
 800afdc:	40da      	lsrs	r2, r3
 800afde:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800afe2:	4013      	ands	r3, r2
 800afe4:	f846 3c04 	str.w	r3, [r6, #-4]
 800afe8:	e7d2      	b.n	800af90 <__hexnan+0xd4>
 800afea:	3f04      	subs	r7, #4
 800afec:	e7d0      	b.n	800af90 <__hexnan+0xd4>
 800afee:	2004      	movs	r0, #4
 800aff0:	e7d5      	b.n	800af9e <__hexnan+0xe2>
	...

0800aff4 <sbrk_aligned>:
 800aff4:	b570      	push	{r4, r5, r6, lr}
 800aff6:	4e0f      	ldr	r6, [pc, #60]	@ (800b034 <sbrk_aligned+0x40>)
 800aff8:	460c      	mov	r4, r1
 800affa:	6831      	ldr	r1, [r6, #0]
 800affc:	4605      	mov	r5, r0
 800affe:	b911      	cbnz	r1, 800b006 <sbrk_aligned+0x12>
 800b000:	f000 fe0e 	bl	800bc20 <_sbrk_r>
 800b004:	6030      	str	r0, [r6, #0]
 800b006:	4621      	mov	r1, r4
 800b008:	4628      	mov	r0, r5
 800b00a:	f000 fe09 	bl	800bc20 <_sbrk_r>
 800b00e:	1c43      	adds	r3, r0, #1
 800b010:	d103      	bne.n	800b01a <sbrk_aligned+0x26>
 800b012:	f04f 34ff 	mov.w	r4, #4294967295
 800b016:	4620      	mov	r0, r4
 800b018:	bd70      	pop	{r4, r5, r6, pc}
 800b01a:	1cc4      	adds	r4, r0, #3
 800b01c:	f024 0403 	bic.w	r4, r4, #3
 800b020:	42a0      	cmp	r0, r4
 800b022:	d0f8      	beq.n	800b016 <sbrk_aligned+0x22>
 800b024:	1a21      	subs	r1, r4, r0
 800b026:	4628      	mov	r0, r5
 800b028:	f000 fdfa 	bl	800bc20 <_sbrk_r>
 800b02c:	3001      	adds	r0, #1
 800b02e:	d1f2      	bne.n	800b016 <sbrk_aligned+0x22>
 800b030:	e7ef      	b.n	800b012 <sbrk_aligned+0x1e>
 800b032:	bf00      	nop
 800b034:	20000ab8 	.word	0x20000ab8

0800b038 <_malloc_r>:
 800b038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b03c:	1ccd      	adds	r5, r1, #3
 800b03e:	f025 0503 	bic.w	r5, r5, #3
 800b042:	3508      	adds	r5, #8
 800b044:	2d0c      	cmp	r5, #12
 800b046:	bf38      	it	cc
 800b048:	250c      	movcc	r5, #12
 800b04a:	2d00      	cmp	r5, #0
 800b04c:	4606      	mov	r6, r0
 800b04e:	db01      	blt.n	800b054 <_malloc_r+0x1c>
 800b050:	42a9      	cmp	r1, r5
 800b052:	d904      	bls.n	800b05e <_malloc_r+0x26>
 800b054:	230c      	movs	r3, #12
 800b056:	6033      	str	r3, [r6, #0]
 800b058:	2000      	movs	r0, #0
 800b05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b134 <_malloc_r+0xfc>
 800b062:	f000 f87b 	bl	800b15c <__malloc_lock>
 800b066:	f8d8 3000 	ldr.w	r3, [r8]
 800b06a:	461c      	mov	r4, r3
 800b06c:	bb44      	cbnz	r4, 800b0c0 <_malloc_r+0x88>
 800b06e:	4629      	mov	r1, r5
 800b070:	4630      	mov	r0, r6
 800b072:	f7ff ffbf 	bl	800aff4 <sbrk_aligned>
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	4604      	mov	r4, r0
 800b07a:	d158      	bne.n	800b12e <_malloc_r+0xf6>
 800b07c:	f8d8 4000 	ldr.w	r4, [r8]
 800b080:	4627      	mov	r7, r4
 800b082:	2f00      	cmp	r7, #0
 800b084:	d143      	bne.n	800b10e <_malloc_r+0xd6>
 800b086:	2c00      	cmp	r4, #0
 800b088:	d04b      	beq.n	800b122 <_malloc_r+0xea>
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	4639      	mov	r1, r7
 800b08e:	4630      	mov	r0, r6
 800b090:	eb04 0903 	add.w	r9, r4, r3
 800b094:	f000 fdc4 	bl	800bc20 <_sbrk_r>
 800b098:	4581      	cmp	r9, r0
 800b09a:	d142      	bne.n	800b122 <_malloc_r+0xea>
 800b09c:	6821      	ldr	r1, [r4, #0]
 800b09e:	4630      	mov	r0, r6
 800b0a0:	1a6d      	subs	r5, r5, r1
 800b0a2:	4629      	mov	r1, r5
 800b0a4:	f7ff ffa6 	bl	800aff4 <sbrk_aligned>
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d03a      	beq.n	800b122 <_malloc_r+0xea>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	442b      	add	r3, r5
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b0b6:	685a      	ldr	r2, [r3, #4]
 800b0b8:	bb62      	cbnz	r2, 800b114 <_malloc_r+0xdc>
 800b0ba:	f8c8 7000 	str.w	r7, [r8]
 800b0be:	e00f      	b.n	800b0e0 <_malloc_r+0xa8>
 800b0c0:	6822      	ldr	r2, [r4, #0]
 800b0c2:	1b52      	subs	r2, r2, r5
 800b0c4:	d420      	bmi.n	800b108 <_malloc_r+0xd0>
 800b0c6:	2a0b      	cmp	r2, #11
 800b0c8:	d917      	bls.n	800b0fa <_malloc_r+0xc2>
 800b0ca:	1961      	adds	r1, r4, r5
 800b0cc:	42a3      	cmp	r3, r4
 800b0ce:	6025      	str	r5, [r4, #0]
 800b0d0:	bf18      	it	ne
 800b0d2:	6059      	strne	r1, [r3, #4]
 800b0d4:	6863      	ldr	r3, [r4, #4]
 800b0d6:	bf08      	it	eq
 800b0d8:	f8c8 1000 	streq.w	r1, [r8]
 800b0dc:	5162      	str	r2, [r4, r5]
 800b0de:	604b      	str	r3, [r1, #4]
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f000 f841 	bl	800b168 <__malloc_unlock>
 800b0e6:	f104 000b 	add.w	r0, r4, #11
 800b0ea:	1d23      	adds	r3, r4, #4
 800b0ec:	f020 0007 	bic.w	r0, r0, #7
 800b0f0:	1ac2      	subs	r2, r0, r3
 800b0f2:	bf1c      	itt	ne
 800b0f4:	1a1b      	subne	r3, r3, r0
 800b0f6:	50a3      	strne	r3, [r4, r2]
 800b0f8:	e7af      	b.n	800b05a <_malloc_r+0x22>
 800b0fa:	6862      	ldr	r2, [r4, #4]
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	bf0c      	ite	eq
 800b100:	f8c8 2000 	streq.w	r2, [r8]
 800b104:	605a      	strne	r2, [r3, #4]
 800b106:	e7eb      	b.n	800b0e0 <_malloc_r+0xa8>
 800b108:	4623      	mov	r3, r4
 800b10a:	6864      	ldr	r4, [r4, #4]
 800b10c:	e7ae      	b.n	800b06c <_malloc_r+0x34>
 800b10e:	463c      	mov	r4, r7
 800b110:	687f      	ldr	r7, [r7, #4]
 800b112:	e7b6      	b.n	800b082 <_malloc_r+0x4a>
 800b114:	461a      	mov	r2, r3
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	42a3      	cmp	r3, r4
 800b11a:	d1fb      	bne.n	800b114 <_malloc_r+0xdc>
 800b11c:	2300      	movs	r3, #0
 800b11e:	6053      	str	r3, [r2, #4]
 800b120:	e7de      	b.n	800b0e0 <_malloc_r+0xa8>
 800b122:	230c      	movs	r3, #12
 800b124:	4630      	mov	r0, r6
 800b126:	6033      	str	r3, [r6, #0]
 800b128:	f000 f81e 	bl	800b168 <__malloc_unlock>
 800b12c:	e794      	b.n	800b058 <_malloc_r+0x20>
 800b12e:	6005      	str	r5, [r0, #0]
 800b130:	e7d6      	b.n	800b0e0 <_malloc_r+0xa8>
 800b132:	bf00      	nop
 800b134:	20000abc 	.word	0x20000abc

0800b138 <__ascii_mbtowc>:
 800b138:	b082      	sub	sp, #8
 800b13a:	b901      	cbnz	r1, 800b13e <__ascii_mbtowc+0x6>
 800b13c:	a901      	add	r1, sp, #4
 800b13e:	b142      	cbz	r2, 800b152 <__ascii_mbtowc+0x1a>
 800b140:	b14b      	cbz	r3, 800b156 <__ascii_mbtowc+0x1e>
 800b142:	7813      	ldrb	r3, [r2, #0]
 800b144:	600b      	str	r3, [r1, #0]
 800b146:	7812      	ldrb	r2, [r2, #0]
 800b148:	1e10      	subs	r0, r2, #0
 800b14a:	bf18      	it	ne
 800b14c:	2001      	movne	r0, #1
 800b14e:	b002      	add	sp, #8
 800b150:	4770      	bx	lr
 800b152:	4610      	mov	r0, r2
 800b154:	e7fb      	b.n	800b14e <__ascii_mbtowc+0x16>
 800b156:	f06f 0001 	mvn.w	r0, #1
 800b15a:	e7f8      	b.n	800b14e <__ascii_mbtowc+0x16>

0800b15c <__malloc_lock>:
 800b15c:	4801      	ldr	r0, [pc, #4]	@ (800b164 <__malloc_lock+0x8>)
 800b15e:	f7ff bbb0 	b.w	800a8c2 <__retarget_lock_acquire_recursive>
 800b162:	bf00      	nop
 800b164:	20000ab4 	.word	0x20000ab4

0800b168 <__malloc_unlock>:
 800b168:	4801      	ldr	r0, [pc, #4]	@ (800b170 <__malloc_unlock+0x8>)
 800b16a:	f7ff bbab 	b.w	800a8c4 <__retarget_lock_release_recursive>
 800b16e:	bf00      	nop
 800b170:	20000ab4 	.word	0x20000ab4

0800b174 <_Balloc>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	69c6      	ldr	r6, [r0, #28]
 800b178:	4604      	mov	r4, r0
 800b17a:	460d      	mov	r5, r1
 800b17c:	b976      	cbnz	r6, 800b19c <_Balloc+0x28>
 800b17e:	2010      	movs	r0, #16
 800b180:	f000 fd90 	bl	800bca4 <malloc>
 800b184:	4602      	mov	r2, r0
 800b186:	61e0      	str	r0, [r4, #28]
 800b188:	b920      	cbnz	r0, 800b194 <_Balloc+0x20>
 800b18a:	216b      	movs	r1, #107	@ 0x6b
 800b18c:	4b17      	ldr	r3, [pc, #92]	@ (800b1ec <_Balloc+0x78>)
 800b18e:	4818      	ldr	r0, [pc, #96]	@ (800b1f0 <_Balloc+0x7c>)
 800b190:	f000 fd56 	bl	800bc40 <__assert_func>
 800b194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b198:	6006      	str	r6, [r0, #0]
 800b19a:	60c6      	str	r6, [r0, #12]
 800b19c:	69e6      	ldr	r6, [r4, #28]
 800b19e:	68f3      	ldr	r3, [r6, #12]
 800b1a0:	b183      	cbz	r3, 800b1c4 <_Balloc+0x50>
 800b1a2:	69e3      	ldr	r3, [r4, #28]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1aa:	b9b8      	cbnz	r0, 800b1dc <_Balloc+0x68>
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	fa01 f605 	lsl.w	r6, r1, r5
 800b1b2:	1d72      	adds	r2, r6, #5
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	0092      	lsls	r2, r2, #2
 800b1b8:	f000 fd60 	bl	800bc7c <_calloc_r>
 800b1bc:	b160      	cbz	r0, 800b1d8 <_Balloc+0x64>
 800b1be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1c2:	e00e      	b.n	800b1e2 <_Balloc+0x6e>
 800b1c4:	2221      	movs	r2, #33	@ 0x21
 800b1c6:	2104      	movs	r1, #4
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 fd57 	bl	800bc7c <_calloc_r>
 800b1ce:	69e3      	ldr	r3, [r4, #28]
 800b1d0:	60f0      	str	r0, [r6, #12]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e4      	bne.n	800b1a2 <_Balloc+0x2e>
 800b1d8:	2000      	movs	r0, #0
 800b1da:	bd70      	pop	{r4, r5, r6, pc}
 800b1dc:	6802      	ldr	r2, [r0, #0]
 800b1de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1e8:	e7f7      	b.n	800b1da <_Balloc+0x66>
 800b1ea:	bf00      	nop
 800b1ec:	0800ca31 	.word	0x0800ca31
 800b1f0:	0800ca48 	.word	0x0800ca48

0800b1f4 <_Bfree>:
 800b1f4:	b570      	push	{r4, r5, r6, lr}
 800b1f6:	69c6      	ldr	r6, [r0, #28]
 800b1f8:	4605      	mov	r5, r0
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	b976      	cbnz	r6, 800b21c <_Bfree+0x28>
 800b1fe:	2010      	movs	r0, #16
 800b200:	f000 fd50 	bl	800bca4 <malloc>
 800b204:	4602      	mov	r2, r0
 800b206:	61e8      	str	r0, [r5, #28]
 800b208:	b920      	cbnz	r0, 800b214 <_Bfree+0x20>
 800b20a:	218f      	movs	r1, #143	@ 0x8f
 800b20c:	4b08      	ldr	r3, [pc, #32]	@ (800b230 <_Bfree+0x3c>)
 800b20e:	4809      	ldr	r0, [pc, #36]	@ (800b234 <_Bfree+0x40>)
 800b210:	f000 fd16 	bl	800bc40 <__assert_func>
 800b214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b218:	6006      	str	r6, [r0, #0]
 800b21a:	60c6      	str	r6, [r0, #12]
 800b21c:	b13c      	cbz	r4, 800b22e <_Bfree+0x3a>
 800b21e:	69eb      	ldr	r3, [r5, #28]
 800b220:	6862      	ldr	r2, [r4, #4]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b228:	6021      	str	r1, [r4, #0]
 800b22a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b22e:	bd70      	pop	{r4, r5, r6, pc}
 800b230:	0800ca31 	.word	0x0800ca31
 800b234:	0800ca48 	.word	0x0800ca48

0800b238 <__multadd>:
 800b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b23c:	4607      	mov	r7, r0
 800b23e:	460c      	mov	r4, r1
 800b240:	461e      	mov	r6, r3
 800b242:	2000      	movs	r0, #0
 800b244:	690d      	ldr	r5, [r1, #16]
 800b246:	f101 0c14 	add.w	ip, r1, #20
 800b24a:	f8dc 3000 	ldr.w	r3, [ip]
 800b24e:	3001      	adds	r0, #1
 800b250:	b299      	uxth	r1, r3
 800b252:	fb02 6101 	mla	r1, r2, r1, r6
 800b256:	0c1e      	lsrs	r6, r3, #16
 800b258:	0c0b      	lsrs	r3, r1, #16
 800b25a:	fb02 3306 	mla	r3, r2, r6, r3
 800b25e:	b289      	uxth	r1, r1
 800b260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b264:	4285      	cmp	r5, r0
 800b266:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b26a:	f84c 1b04 	str.w	r1, [ip], #4
 800b26e:	dcec      	bgt.n	800b24a <__multadd+0x12>
 800b270:	b30e      	cbz	r6, 800b2b6 <__multadd+0x7e>
 800b272:	68a3      	ldr	r3, [r4, #8]
 800b274:	42ab      	cmp	r3, r5
 800b276:	dc19      	bgt.n	800b2ac <__multadd+0x74>
 800b278:	6861      	ldr	r1, [r4, #4]
 800b27a:	4638      	mov	r0, r7
 800b27c:	3101      	adds	r1, #1
 800b27e:	f7ff ff79 	bl	800b174 <_Balloc>
 800b282:	4680      	mov	r8, r0
 800b284:	b928      	cbnz	r0, 800b292 <__multadd+0x5a>
 800b286:	4602      	mov	r2, r0
 800b288:	21ba      	movs	r1, #186	@ 0xba
 800b28a:	4b0c      	ldr	r3, [pc, #48]	@ (800b2bc <__multadd+0x84>)
 800b28c:	480c      	ldr	r0, [pc, #48]	@ (800b2c0 <__multadd+0x88>)
 800b28e:	f000 fcd7 	bl	800bc40 <__assert_func>
 800b292:	6922      	ldr	r2, [r4, #16]
 800b294:	f104 010c 	add.w	r1, r4, #12
 800b298:	3202      	adds	r2, #2
 800b29a:	0092      	lsls	r2, r2, #2
 800b29c:	300c      	adds	r0, #12
 800b29e:	f7ff fb12 	bl	800a8c6 <memcpy>
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ffa5 	bl	800b1f4 <_Bfree>
 800b2aa:	4644      	mov	r4, r8
 800b2ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b2b0:	3501      	adds	r5, #1
 800b2b2:	615e      	str	r6, [r3, #20]
 800b2b4:	6125      	str	r5, [r4, #16]
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2bc:	0800c9c0 	.word	0x0800c9c0
 800b2c0:	0800ca48 	.word	0x0800ca48

0800b2c4 <__s2b>:
 800b2c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2c8:	4615      	mov	r5, r2
 800b2ca:	2209      	movs	r2, #9
 800b2cc:	461f      	mov	r7, r3
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	2201      	movs	r2, #1
 800b2da:	2100      	movs	r1, #0
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	db09      	blt.n	800b2f4 <__s2b+0x30>
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f7ff ff47 	bl	800b174 <_Balloc>
 800b2e6:	b940      	cbnz	r0, 800b2fa <__s2b+0x36>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	21d3      	movs	r1, #211	@ 0xd3
 800b2ec:	4b18      	ldr	r3, [pc, #96]	@ (800b350 <__s2b+0x8c>)
 800b2ee:	4819      	ldr	r0, [pc, #100]	@ (800b354 <__s2b+0x90>)
 800b2f0:	f000 fca6 	bl	800bc40 <__assert_func>
 800b2f4:	0052      	lsls	r2, r2, #1
 800b2f6:	3101      	adds	r1, #1
 800b2f8:	e7f0      	b.n	800b2dc <__s2b+0x18>
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	2d09      	cmp	r5, #9
 800b2fe:	6143      	str	r3, [r0, #20]
 800b300:	f04f 0301 	mov.w	r3, #1
 800b304:	6103      	str	r3, [r0, #16]
 800b306:	dd16      	ble.n	800b336 <__s2b+0x72>
 800b308:	f104 0909 	add.w	r9, r4, #9
 800b30c:	46c8      	mov	r8, r9
 800b30e:	442c      	add	r4, r5
 800b310:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b314:	4601      	mov	r1, r0
 800b316:	220a      	movs	r2, #10
 800b318:	4630      	mov	r0, r6
 800b31a:	3b30      	subs	r3, #48	@ 0x30
 800b31c:	f7ff ff8c 	bl	800b238 <__multadd>
 800b320:	45a0      	cmp	r8, r4
 800b322:	d1f5      	bne.n	800b310 <__s2b+0x4c>
 800b324:	f1a5 0408 	sub.w	r4, r5, #8
 800b328:	444c      	add	r4, r9
 800b32a:	1b2d      	subs	r5, r5, r4
 800b32c:	1963      	adds	r3, r4, r5
 800b32e:	42bb      	cmp	r3, r7
 800b330:	db04      	blt.n	800b33c <__s2b+0x78>
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	2509      	movs	r5, #9
 800b338:	340a      	adds	r4, #10
 800b33a:	e7f6      	b.n	800b32a <__s2b+0x66>
 800b33c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b340:	4601      	mov	r1, r0
 800b342:	220a      	movs	r2, #10
 800b344:	4630      	mov	r0, r6
 800b346:	3b30      	subs	r3, #48	@ 0x30
 800b348:	f7ff ff76 	bl	800b238 <__multadd>
 800b34c:	e7ee      	b.n	800b32c <__s2b+0x68>
 800b34e:	bf00      	nop
 800b350:	0800c9c0 	.word	0x0800c9c0
 800b354:	0800ca48 	.word	0x0800ca48

0800b358 <__hi0bits>:
 800b358:	4603      	mov	r3, r0
 800b35a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b35e:	bf3a      	itte	cc
 800b360:	0403      	lslcc	r3, r0, #16
 800b362:	2010      	movcc	r0, #16
 800b364:	2000      	movcs	r0, #0
 800b366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b36a:	bf3c      	itt	cc
 800b36c:	021b      	lslcc	r3, r3, #8
 800b36e:	3008      	addcc	r0, #8
 800b370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b374:	bf3c      	itt	cc
 800b376:	011b      	lslcc	r3, r3, #4
 800b378:	3004      	addcc	r0, #4
 800b37a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b37e:	bf3c      	itt	cc
 800b380:	009b      	lslcc	r3, r3, #2
 800b382:	3002      	addcc	r0, #2
 800b384:	2b00      	cmp	r3, #0
 800b386:	db05      	blt.n	800b394 <__hi0bits+0x3c>
 800b388:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b38c:	f100 0001 	add.w	r0, r0, #1
 800b390:	bf08      	it	eq
 800b392:	2020      	moveq	r0, #32
 800b394:	4770      	bx	lr

0800b396 <__lo0bits>:
 800b396:	6803      	ldr	r3, [r0, #0]
 800b398:	4602      	mov	r2, r0
 800b39a:	f013 0007 	ands.w	r0, r3, #7
 800b39e:	d00b      	beq.n	800b3b8 <__lo0bits+0x22>
 800b3a0:	07d9      	lsls	r1, r3, #31
 800b3a2:	d421      	bmi.n	800b3e8 <__lo0bits+0x52>
 800b3a4:	0798      	lsls	r0, r3, #30
 800b3a6:	bf49      	itett	mi
 800b3a8:	085b      	lsrmi	r3, r3, #1
 800b3aa:	089b      	lsrpl	r3, r3, #2
 800b3ac:	2001      	movmi	r0, #1
 800b3ae:	6013      	strmi	r3, [r2, #0]
 800b3b0:	bf5c      	itt	pl
 800b3b2:	2002      	movpl	r0, #2
 800b3b4:	6013      	strpl	r3, [r2, #0]
 800b3b6:	4770      	bx	lr
 800b3b8:	b299      	uxth	r1, r3
 800b3ba:	b909      	cbnz	r1, 800b3c0 <__lo0bits+0x2a>
 800b3bc:	2010      	movs	r0, #16
 800b3be:	0c1b      	lsrs	r3, r3, #16
 800b3c0:	b2d9      	uxtb	r1, r3
 800b3c2:	b909      	cbnz	r1, 800b3c8 <__lo0bits+0x32>
 800b3c4:	3008      	adds	r0, #8
 800b3c6:	0a1b      	lsrs	r3, r3, #8
 800b3c8:	0719      	lsls	r1, r3, #28
 800b3ca:	bf04      	itt	eq
 800b3cc:	091b      	lsreq	r3, r3, #4
 800b3ce:	3004      	addeq	r0, #4
 800b3d0:	0799      	lsls	r1, r3, #30
 800b3d2:	bf04      	itt	eq
 800b3d4:	089b      	lsreq	r3, r3, #2
 800b3d6:	3002      	addeq	r0, #2
 800b3d8:	07d9      	lsls	r1, r3, #31
 800b3da:	d403      	bmi.n	800b3e4 <__lo0bits+0x4e>
 800b3dc:	085b      	lsrs	r3, r3, #1
 800b3de:	f100 0001 	add.w	r0, r0, #1
 800b3e2:	d003      	beq.n	800b3ec <__lo0bits+0x56>
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	4770      	bx	lr
 800b3e8:	2000      	movs	r0, #0
 800b3ea:	4770      	bx	lr
 800b3ec:	2020      	movs	r0, #32
 800b3ee:	4770      	bx	lr

0800b3f0 <__i2b>:
 800b3f0:	b510      	push	{r4, lr}
 800b3f2:	460c      	mov	r4, r1
 800b3f4:	2101      	movs	r1, #1
 800b3f6:	f7ff febd 	bl	800b174 <_Balloc>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	b928      	cbnz	r0, 800b40a <__i2b+0x1a>
 800b3fe:	f240 1145 	movw	r1, #325	@ 0x145
 800b402:	4b04      	ldr	r3, [pc, #16]	@ (800b414 <__i2b+0x24>)
 800b404:	4804      	ldr	r0, [pc, #16]	@ (800b418 <__i2b+0x28>)
 800b406:	f000 fc1b 	bl	800bc40 <__assert_func>
 800b40a:	2301      	movs	r3, #1
 800b40c:	6144      	str	r4, [r0, #20]
 800b40e:	6103      	str	r3, [r0, #16]
 800b410:	bd10      	pop	{r4, pc}
 800b412:	bf00      	nop
 800b414:	0800c9c0 	.word	0x0800c9c0
 800b418:	0800ca48 	.word	0x0800ca48

0800b41c <__multiply>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	4617      	mov	r7, r2
 800b422:	690a      	ldr	r2, [r1, #16]
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	4689      	mov	r9, r1
 800b428:	429a      	cmp	r2, r3
 800b42a:	bfa2      	ittt	ge
 800b42c:	463b      	movge	r3, r7
 800b42e:	460f      	movge	r7, r1
 800b430:	4699      	movge	r9, r3
 800b432:	693d      	ldr	r5, [r7, #16]
 800b434:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	eb05 060a 	add.w	r6, r5, sl
 800b440:	42b3      	cmp	r3, r6
 800b442:	b085      	sub	sp, #20
 800b444:	bfb8      	it	lt
 800b446:	3101      	addlt	r1, #1
 800b448:	f7ff fe94 	bl	800b174 <_Balloc>
 800b44c:	b930      	cbnz	r0, 800b45c <__multiply+0x40>
 800b44e:	4602      	mov	r2, r0
 800b450:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b454:	4b40      	ldr	r3, [pc, #256]	@ (800b558 <__multiply+0x13c>)
 800b456:	4841      	ldr	r0, [pc, #260]	@ (800b55c <__multiply+0x140>)
 800b458:	f000 fbf2 	bl	800bc40 <__assert_func>
 800b45c:	f100 0414 	add.w	r4, r0, #20
 800b460:	4623      	mov	r3, r4
 800b462:	2200      	movs	r2, #0
 800b464:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b468:	4573      	cmp	r3, lr
 800b46a:	d320      	bcc.n	800b4ae <__multiply+0x92>
 800b46c:	f107 0814 	add.w	r8, r7, #20
 800b470:	f109 0114 	add.w	r1, r9, #20
 800b474:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b478:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b47c:	9302      	str	r3, [sp, #8]
 800b47e:	1beb      	subs	r3, r5, r7
 800b480:	3b15      	subs	r3, #21
 800b482:	f023 0303 	bic.w	r3, r3, #3
 800b486:	3304      	adds	r3, #4
 800b488:	3715      	adds	r7, #21
 800b48a:	42bd      	cmp	r5, r7
 800b48c:	bf38      	it	cc
 800b48e:	2304      	movcc	r3, #4
 800b490:	9301      	str	r3, [sp, #4]
 800b492:	9b02      	ldr	r3, [sp, #8]
 800b494:	9103      	str	r1, [sp, #12]
 800b496:	428b      	cmp	r3, r1
 800b498:	d80c      	bhi.n	800b4b4 <__multiply+0x98>
 800b49a:	2e00      	cmp	r6, #0
 800b49c:	dd03      	ble.n	800b4a6 <__multiply+0x8a>
 800b49e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d055      	beq.n	800b552 <__multiply+0x136>
 800b4a6:	6106      	str	r6, [r0, #16]
 800b4a8:	b005      	add	sp, #20
 800b4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ae:	f843 2b04 	str.w	r2, [r3], #4
 800b4b2:	e7d9      	b.n	800b468 <__multiply+0x4c>
 800b4b4:	f8b1 a000 	ldrh.w	sl, [r1]
 800b4b8:	f1ba 0f00 	cmp.w	sl, #0
 800b4bc:	d01f      	beq.n	800b4fe <__multiply+0xe2>
 800b4be:	46c4      	mov	ip, r8
 800b4c0:	46a1      	mov	r9, r4
 800b4c2:	2700      	movs	r7, #0
 800b4c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b4c8:	f8d9 3000 	ldr.w	r3, [r9]
 800b4cc:	fa1f fb82 	uxth.w	fp, r2
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	fb0a 330b 	mla	r3, sl, fp, r3
 800b4d6:	443b      	add	r3, r7
 800b4d8:	f8d9 7000 	ldr.w	r7, [r9]
 800b4dc:	0c12      	lsrs	r2, r2, #16
 800b4de:	0c3f      	lsrs	r7, r7, #16
 800b4e0:	fb0a 7202 	mla	r2, sl, r2, r7
 800b4e4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4ee:	4565      	cmp	r5, ip
 800b4f0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b4f4:	f849 3b04 	str.w	r3, [r9], #4
 800b4f8:	d8e4      	bhi.n	800b4c4 <__multiply+0xa8>
 800b4fa:	9b01      	ldr	r3, [sp, #4]
 800b4fc:	50e7      	str	r7, [r4, r3]
 800b4fe:	9b03      	ldr	r3, [sp, #12]
 800b500:	3104      	adds	r1, #4
 800b502:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b506:	f1b9 0f00 	cmp.w	r9, #0
 800b50a:	d020      	beq.n	800b54e <__multiply+0x132>
 800b50c:	4647      	mov	r7, r8
 800b50e:	46a4      	mov	ip, r4
 800b510:	f04f 0a00 	mov.w	sl, #0
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	f8b7 b000 	ldrh.w	fp, [r7]
 800b51a:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b51e:	b29b      	uxth	r3, r3
 800b520:	fb09 220b 	mla	r2, r9, fp, r2
 800b524:	4452      	add	r2, sl
 800b526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b52a:	f84c 3b04 	str.w	r3, [ip], #4
 800b52e:	f857 3b04 	ldr.w	r3, [r7], #4
 800b532:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b536:	f8bc 3000 	ldrh.w	r3, [ip]
 800b53a:	42bd      	cmp	r5, r7
 800b53c:	fb09 330a 	mla	r3, r9, sl, r3
 800b540:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b548:	d8e5      	bhi.n	800b516 <__multiply+0xfa>
 800b54a:	9a01      	ldr	r2, [sp, #4]
 800b54c:	50a3      	str	r3, [r4, r2]
 800b54e:	3404      	adds	r4, #4
 800b550:	e79f      	b.n	800b492 <__multiply+0x76>
 800b552:	3e01      	subs	r6, #1
 800b554:	e7a1      	b.n	800b49a <__multiply+0x7e>
 800b556:	bf00      	nop
 800b558:	0800c9c0 	.word	0x0800c9c0
 800b55c:	0800ca48 	.word	0x0800ca48

0800b560 <__pow5mult>:
 800b560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b564:	4615      	mov	r5, r2
 800b566:	f012 0203 	ands.w	r2, r2, #3
 800b56a:	4607      	mov	r7, r0
 800b56c:	460e      	mov	r6, r1
 800b56e:	d007      	beq.n	800b580 <__pow5mult+0x20>
 800b570:	4c25      	ldr	r4, [pc, #148]	@ (800b608 <__pow5mult+0xa8>)
 800b572:	3a01      	subs	r2, #1
 800b574:	2300      	movs	r3, #0
 800b576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b57a:	f7ff fe5d 	bl	800b238 <__multadd>
 800b57e:	4606      	mov	r6, r0
 800b580:	10ad      	asrs	r5, r5, #2
 800b582:	d03d      	beq.n	800b600 <__pow5mult+0xa0>
 800b584:	69fc      	ldr	r4, [r7, #28]
 800b586:	b97c      	cbnz	r4, 800b5a8 <__pow5mult+0x48>
 800b588:	2010      	movs	r0, #16
 800b58a:	f000 fb8b 	bl	800bca4 <malloc>
 800b58e:	4602      	mov	r2, r0
 800b590:	61f8      	str	r0, [r7, #28]
 800b592:	b928      	cbnz	r0, 800b5a0 <__pow5mult+0x40>
 800b594:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b598:	4b1c      	ldr	r3, [pc, #112]	@ (800b60c <__pow5mult+0xac>)
 800b59a:	481d      	ldr	r0, [pc, #116]	@ (800b610 <__pow5mult+0xb0>)
 800b59c:	f000 fb50 	bl	800bc40 <__assert_func>
 800b5a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5a4:	6004      	str	r4, [r0, #0]
 800b5a6:	60c4      	str	r4, [r0, #12]
 800b5a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b5ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5b0:	b94c      	cbnz	r4, 800b5c6 <__pow5mult+0x66>
 800b5b2:	f240 2171 	movw	r1, #625	@ 0x271
 800b5b6:	4638      	mov	r0, r7
 800b5b8:	f7ff ff1a 	bl	800b3f0 <__i2b>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	4604      	mov	r4, r0
 800b5c0:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5c4:	6003      	str	r3, [r0, #0]
 800b5c6:	f04f 0900 	mov.w	r9, #0
 800b5ca:	07eb      	lsls	r3, r5, #31
 800b5cc:	d50a      	bpl.n	800b5e4 <__pow5mult+0x84>
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	4622      	mov	r2, r4
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	f7ff ff22 	bl	800b41c <__multiply>
 800b5d8:	4680      	mov	r8, r0
 800b5da:	4631      	mov	r1, r6
 800b5dc:	4638      	mov	r0, r7
 800b5de:	f7ff fe09 	bl	800b1f4 <_Bfree>
 800b5e2:	4646      	mov	r6, r8
 800b5e4:	106d      	asrs	r5, r5, #1
 800b5e6:	d00b      	beq.n	800b600 <__pow5mult+0xa0>
 800b5e8:	6820      	ldr	r0, [r4, #0]
 800b5ea:	b938      	cbnz	r0, 800b5fc <__pow5mult+0x9c>
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4621      	mov	r1, r4
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f7ff ff13 	bl	800b41c <__multiply>
 800b5f6:	6020      	str	r0, [r4, #0]
 800b5f8:	f8c0 9000 	str.w	r9, [r0]
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	e7e4      	b.n	800b5ca <__pow5mult+0x6a>
 800b600:	4630      	mov	r0, r6
 800b602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b606:	bf00      	nop
 800b608:	0800cb60 	.word	0x0800cb60
 800b60c:	0800ca31 	.word	0x0800ca31
 800b610:	0800ca48 	.word	0x0800ca48

0800b614 <__lshift>:
 800b614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b618:	460c      	mov	r4, r1
 800b61a:	4607      	mov	r7, r0
 800b61c:	4691      	mov	r9, r2
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	6849      	ldr	r1, [r1, #4]
 800b622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b626:	68a3      	ldr	r3, [r4, #8]
 800b628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b62c:	f108 0601 	add.w	r6, r8, #1
 800b630:	42b3      	cmp	r3, r6
 800b632:	db0b      	blt.n	800b64c <__lshift+0x38>
 800b634:	4638      	mov	r0, r7
 800b636:	f7ff fd9d 	bl	800b174 <_Balloc>
 800b63a:	4605      	mov	r5, r0
 800b63c:	b948      	cbnz	r0, 800b652 <__lshift+0x3e>
 800b63e:	4602      	mov	r2, r0
 800b640:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b644:	4b27      	ldr	r3, [pc, #156]	@ (800b6e4 <__lshift+0xd0>)
 800b646:	4828      	ldr	r0, [pc, #160]	@ (800b6e8 <__lshift+0xd4>)
 800b648:	f000 fafa 	bl	800bc40 <__assert_func>
 800b64c:	3101      	adds	r1, #1
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	e7ee      	b.n	800b630 <__lshift+0x1c>
 800b652:	2300      	movs	r3, #0
 800b654:	f100 0114 	add.w	r1, r0, #20
 800b658:	f100 0210 	add.w	r2, r0, #16
 800b65c:	4618      	mov	r0, r3
 800b65e:	4553      	cmp	r3, sl
 800b660:	db33      	blt.n	800b6ca <__lshift+0xb6>
 800b662:	6920      	ldr	r0, [r4, #16]
 800b664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b668:	f104 0314 	add.w	r3, r4, #20
 800b66c:	f019 091f 	ands.w	r9, r9, #31
 800b670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b678:	d02b      	beq.n	800b6d2 <__lshift+0xbe>
 800b67a:	468a      	mov	sl, r1
 800b67c:	2200      	movs	r2, #0
 800b67e:	f1c9 0e20 	rsb	lr, r9, #32
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	fa00 f009 	lsl.w	r0, r0, r9
 800b688:	4310      	orrs	r0, r2
 800b68a:	f84a 0b04 	str.w	r0, [sl], #4
 800b68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b692:	459c      	cmp	ip, r3
 800b694:	fa22 f20e 	lsr.w	r2, r2, lr
 800b698:	d8f3      	bhi.n	800b682 <__lshift+0x6e>
 800b69a:	ebac 0304 	sub.w	r3, ip, r4
 800b69e:	3b15      	subs	r3, #21
 800b6a0:	f023 0303 	bic.w	r3, r3, #3
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	f104 0015 	add.w	r0, r4, #21
 800b6aa:	4560      	cmp	r0, ip
 800b6ac:	bf88      	it	hi
 800b6ae:	2304      	movhi	r3, #4
 800b6b0:	50ca      	str	r2, [r1, r3]
 800b6b2:	b10a      	cbz	r2, 800b6b8 <__lshift+0xa4>
 800b6b4:	f108 0602 	add.w	r6, r8, #2
 800b6b8:	3e01      	subs	r6, #1
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	4621      	mov	r1, r4
 800b6be:	612e      	str	r6, [r5, #16]
 800b6c0:	f7ff fd98 	bl	800b1f4 <_Bfree>
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	e7c5      	b.n	800b65e <__lshift+0x4a>
 800b6d2:	3904      	subs	r1, #4
 800b6d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6d8:	459c      	cmp	ip, r3
 800b6da:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6de:	d8f9      	bhi.n	800b6d4 <__lshift+0xc0>
 800b6e0:	e7ea      	b.n	800b6b8 <__lshift+0xa4>
 800b6e2:	bf00      	nop
 800b6e4:	0800c9c0 	.word	0x0800c9c0
 800b6e8:	0800ca48 	.word	0x0800ca48

0800b6ec <__mcmp>:
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	690a      	ldr	r2, [r1, #16]
 800b6f0:	6900      	ldr	r0, [r0, #16]
 800b6f2:	b530      	push	{r4, r5, lr}
 800b6f4:	1a80      	subs	r0, r0, r2
 800b6f6:	d10e      	bne.n	800b716 <__mcmp+0x2a>
 800b6f8:	3314      	adds	r3, #20
 800b6fa:	3114      	adds	r1, #20
 800b6fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b70c:	4295      	cmp	r5, r2
 800b70e:	d003      	beq.n	800b718 <__mcmp+0x2c>
 800b710:	d205      	bcs.n	800b71e <__mcmp+0x32>
 800b712:	f04f 30ff 	mov.w	r0, #4294967295
 800b716:	bd30      	pop	{r4, r5, pc}
 800b718:	42a3      	cmp	r3, r4
 800b71a:	d3f3      	bcc.n	800b704 <__mcmp+0x18>
 800b71c:	e7fb      	b.n	800b716 <__mcmp+0x2a>
 800b71e:	2001      	movs	r0, #1
 800b720:	e7f9      	b.n	800b716 <__mcmp+0x2a>
	...

0800b724 <__mdiff>:
 800b724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b728:	4689      	mov	r9, r1
 800b72a:	4606      	mov	r6, r0
 800b72c:	4611      	mov	r1, r2
 800b72e:	4648      	mov	r0, r9
 800b730:	4614      	mov	r4, r2
 800b732:	f7ff ffdb 	bl	800b6ec <__mcmp>
 800b736:	1e05      	subs	r5, r0, #0
 800b738:	d112      	bne.n	800b760 <__mdiff+0x3c>
 800b73a:	4629      	mov	r1, r5
 800b73c:	4630      	mov	r0, r6
 800b73e:	f7ff fd19 	bl	800b174 <_Balloc>
 800b742:	4602      	mov	r2, r0
 800b744:	b928      	cbnz	r0, 800b752 <__mdiff+0x2e>
 800b746:	f240 2137 	movw	r1, #567	@ 0x237
 800b74a:	4b3e      	ldr	r3, [pc, #248]	@ (800b844 <__mdiff+0x120>)
 800b74c:	483e      	ldr	r0, [pc, #248]	@ (800b848 <__mdiff+0x124>)
 800b74e:	f000 fa77 	bl	800bc40 <__assert_func>
 800b752:	2301      	movs	r3, #1
 800b754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b758:	4610      	mov	r0, r2
 800b75a:	b003      	add	sp, #12
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	bfbc      	itt	lt
 800b762:	464b      	movlt	r3, r9
 800b764:	46a1      	movlt	r9, r4
 800b766:	4630      	mov	r0, r6
 800b768:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b76c:	bfba      	itte	lt
 800b76e:	461c      	movlt	r4, r3
 800b770:	2501      	movlt	r5, #1
 800b772:	2500      	movge	r5, #0
 800b774:	f7ff fcfe 	bl	800b174 <_Balloc>
 800b778:	4602      	mov	r2, r0
 800b77a:	b918      	cbnz	r0, 800b784 <__mdiff+0x60>
 800b77c:	f240 2145 	movw	r1, #581	@ 0x245
 800b780:	4b30      	ldr	r3, [pc, #192]	@ (800b844 <__mdiff+0x120>)
 800b782:	e7e3      	b.n	800b74c <__mdiff+0x28>
 800b784:	f100 0b14 	add.w	fp, r0, #20
 800b788:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b78c:	f109 0310 	add.w	r3, r9, #16
 800b790:	60c5      	str	r5, [r0, #12]
 800b792:	f04f 0c00 	mov.w	ip, #0
 800b796:	f109 0514 	add.w	r5, r9, #20
 800b79a:	46d9      	mov	r9, fp
 800b79c:	6926      	ldr	r6, [r4, #16]
 800b79e:	f104 0e14 	add.w	lr, r4, #20
 800b7a2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b7a6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b7aa:	9301      	str	r3, [sp, #4]
 800b7ac:	9b01      	ldr	r3, [sp, #4]
 800b7ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b7b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b7b6:	b281      	uxth	r1, r0
 800b7b8:	9301      	str	r3, [sp, #4]
 800b7ba:	fa1f f38a 	uxth.w	r3, sl
 800b7be:	1a5b      	subs	r3, r3, r1
 800b7c0:	0c00      	lsrs	r0, r0, #16
 800b7c2:	4463      	add	r3, ip
 800b7c4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b7c8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b7d2:	4576      	cmp	r6, lr
 800b7d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7d8:	f849 3b04 	str.w	r3, [r9], #4
 800b7dc:	d8e6      	bhi.n	800b7ac <__mdiff+0x88>
 800b7de:	1b33      	subs	r3, r6, r4
 800b7e0:	3b15      	subs	r3, #21
 800b7e2:	f023 0303 	bic.w	r3, r3, #3
 800b7e6:	3415      	adds	r4, #21
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	42a6      	cmp	r6, r4
 800b7ec:	bf38      	it	cc
 800b7ee:	2304      	movcc	r3, #4
 800b7f0:	441d      	add	r5, r3
 800b7f2:	445b      	add	r3, fp
 800b7f4:	461e      	mov	r6, r3
 800b7f6:	462c      	mov	r4, r5
 800b7f8:	4544      	cmp	r4, r8
 800b7fa:	d30e      	bcc.n	800b81a <__mdiff+0xf6>
 800b7fc:	f108 0103 	add.w	r1, r8, #3
 800b800:	1b49      	subs	r1, r1, r5
 800b802:	f021 0103 	bic.w	r1, r1, #3
 800b806:	3d03      	subs	r5, #3
 800b808:	45a8      	cmp	r8, r5
 800b80a:	bf38      	it	cc
 800b80c:	2100      	movcc	r1, #0
 800b80e:	440b      	add	r3, r1
 800b810:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b814:	b199      	cbz	r1, 800b83e <__mdiff+0x11a>
 800b816:	6117      	str	r7, [r2, #16]
 800b818:	e79e      	b.n	800b758 <__mdiff+0x34>
 800b81a:	46e6      	mov	lr, ip
 800b81c:	f854 1b04 	ldr.w	r1, [r4], #4
 800b820:	fa1f fc81 	uxth.w	ip, r1
 800b824:	44f4      	add	ip, lr
 800b826:	0c08      	lsrs	r0, r1, #16
 800b828:	4471      	add	r1, lr
 800b82a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b82e:	b289      	uxth	r1, r1
 800b830:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b834:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b838:	f846 1b04 	str.w	r1, [r6], #4
 800b83c:	e7dc      	b.n	800b7f8 <__mdiff+0xd4>
 800b83e:	3f01      	subs	r7, #1
 800b840:	e7e6      	b.n	800b810 <__mdiff+0xec>
 800b842:	bf00      	nop
 800b844:	0800c9c0 	.word	0x0800c9c0
 800b848:	0800ca48 	.word	0x0800ca48

0800b84c <__ulp>:
 800b84c:	4b0e      	ldr	r3, [pc, #56]	@ (800b888 <__ulp+0x3c>)
 800b84e:	400b      	ands	r3, r1
 800b850:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b854:	2b00      	cmp	r3, #0
 800b856:	dc08      	bgt.n	800b86a <__ulp+0x1e>
 800b858:	425b      	negs	r3, r3
 800b85a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b85e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b862:	da04      	bge.n	800b86e <__ulp+0x22>
 800b864:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b868:	4113      	asrs	r3, r2
 800b86a:	2200      	movs	r2, #0
 800b86c:	e008      	b.n	800b880 <__ulp+0x34>
 800b86e:	f1a2 0314 	sub.w	r3, r2, #20
 800b872:	2b1e      	cmp	r3, #30
 800b874:	bfd6      	itet	le
 800b876:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b87a:	2201      	movgt	r2, #1
 800b87c:	40da      	lsrle	r2, r3
 800b87e:	2300      	movs	r3, #0
 800b880:	4619      	mov	r1, r3
 800b882:	4610      	mov	r0, r2
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	7ff00000 	.word	0x7ff00000

0800b88c <__b2d>:
 800b88c:	6902      	ldr	r2, [r0, #16]
 800b88e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b890:	f100 0614 	add.w	r6, r0, #20
 800b894:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b898:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b89c:	4f1e      	ldr	r7, [pc, #120]	@ (800b918 <__b2d+0x8c>)
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7ff fd5a 	bl	800b358 <__hi0bits>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	f1c0 0020 	rsb	r0, r0, #32
 800b8aa:	2b0a      	cmp	r3, #10
 800b8ac:	f1a2 0504 	sub.w	r5, r2, #4
 800b8b0:	6008      	str	r0, [r1, #0]
 800b8b2:	dc12      	bgt.n	800b8da <__b2d+0x4e>
 800b8b4:	42ae      	cmp	r6, r5
 800b8b6:	bf2c      	ite	cs
 800b8b8:	2200      	movcs	r2, #0
 800b8ba:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b8be:	f1c3 0c0b 	rsb	ip, r3, #11
 800b8c2:	3315      	adds	r3, #21
 800b8c4:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b8c8:	fa04 f303 	lsl.w	r3, r4, r3
 800b8cc:	fa22 f20c 	lsr.w	r2, r2, ip
 800b8d0:	ea4e 0107 	orr.w	r1, lr, r7
 800b8d4:	431a      	orrs	r2, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8da:	42ae      	cmp	r6, r5
 800b8dc:	bf36      	itet	cc
 800b8de:	f1a2 0508 	subcc.w	r5, r2, #8
 800b8e2:	2200      	movcs	r2, #0
 800b8e4:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b8e8:	3b0b      	subs	r3, #11
 800b8ea:	d012      	beq.n	800b912 <__b2d+0x86>
 800b8ec:	f1c3 0720 	rsb	r7, r3, #32
 800b8f0:	fa22 f107 	lsr.w	r1, r2, r7
 800b8f4:	409c      	lsls	r4, r3
 800b8f6:	430c      	orrs	r4, r1
 800b8f8:	42b5      	cmp	r5, r6
 800b8fa:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b8fe:	bf94      	ite	ls
 800b900:	2400      	movls	r4, #0
 800b902:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b906:	409a      	lsls	r2, r3
 800b908:	40fc      	lsrs	r4, r7
 800b90a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b90e:	4322      	orrs	r2, r4
 800b910:	e7e1      	b.n	800b8d6 <__b2d+0x4a>
 800b912:	ea44 0107 	orr.w	r1, r4, r7
 800b916:	e7de      	b.n	800b8d6 <__b2d+0x4a>
 800b918:	3ff00000 	.word	0x3ff00000

0800b91c <__d2b>:
 800b91c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b920:	2101      	movs	r1, #1
 800b922:	4690      	mov	r8, r2
 800b924:	4699      	mov	r9, r3
 800b926:	9e08      	ldr	r6, [sp, #32]
 800b928:	f7ff fc24 	bl	800b174 <_Balloc>
 800b92c:	4604      	mov	r4, r0
 800b92e:	b930      	cbnz	r0, 800b93e <__d2b+0x22>
 800b930:	4602      	mov	r2, r0
 800b932:	f240 310f 	movw	r1, #783	@ 0x30f
 800b936:	4b23      	ldr	r3, [pc, #140]	@ (800b9c4 <__d2b+0xa8>)
 800b938:	4823      	ldr	r0, [pc, #140]	@ (800b9c8 <__d2b+0xac>)
 800b93a:	f000 f981 	bl	800bc40 <__assert_func>
 800b93e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b946:	b10d      	cbz	r5, 800b94c <__d2b+0x30>
 800b948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b94c:	9301      	str	r3, [sp, #4]
 800b94e:	f1b8 0300 	subs.w	r3, r8, #0
 800b952:	d024      	beq.n	800b99e <__d2b+0x82>
 800b954:	4668      	mov	r0, sp
 800b956:	9300      	str	r3, [sp, #0]
 800b958:	f7ff fd1d 	bl	800b396 <__lo0bits>
 800b95c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b960:	b1d8      	cbz	r0, 800b99a <__d2b+0x7e>
 800b962:	f1c0 0320 	rsb	r3, r0, #32
 800b966:	fa02 f303 	lsl.w	r3, r2, r3
 800b96a:	430b      	orrs	r3, r1
 800b96c:	40c2      	lsrs	r2, r0
 800b96e:	6163      	str	r3, [r4, #20]
 800b970:	9201      	str	r2, [sp, #4]
 800b972:	9b01      	ldr	r3, [sp, #4]
 800b974:	2b00      	cmp	r3, #0
 800b976:	bf0c      	ite	eq
 800b978:	2201      	moveq	r2, #1
 800b97a:	2202      	movne	r2, #2
 800b97c:	61a3      	str	r3, [r4, #24]
 800b97e:	6122      	str	r2, [r4, #16]
 800b980:	b1ad      	cbz	r5, 800b9ae <__d2b+0x92>
 800b982:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b986:	4405      	add	r5, r0
 800b988:	6035      	str	r5, [r6, #0]
 800b98a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b990:	6018      	str	r0, [r3, #0]
 800b992:	4620      	mov	r0, r4
 800b994:	b002      	add	sp, #8
 800b996:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b99a:	6161      	str	r1, [r4, #20]
 800b99c:	e7e9      	b.n	800b972 <__d2b+0x56>
 800b99e:	a801      	add	r0, sp, #4
 800b9a0:	f7ff fcf9 	bl	800b396 <__lo0bits>
 800b9a4:	9b01      	ldr	r3, [sp, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	6163      	str	r3, [r4, #20]
 800b9aa:	3020      	adds	r0, #32
 800b9ac:	e7e7      	b.n	800b97e <__d2b+0x62>
 800b9ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b9b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9b6:	6030      	str	r0, [r6, #0]
 800b9b8:	6918      	ldr	r0, [r3, #16]
 800b9ba:	f7ff fccd 	bl	800b358 <__hi0bits>
 800b9be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9c2:	e7e4      	b.n	800b98e <__d2b+0x72>
 800b9c4:	0800c9c0 	.word	0x0800c9c0
 800b9c8:	0800ca48 	.word	0x0800ca48

0800b9cc <__ratio>:
 800b9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	e9cd 1000 	strd	r1, r0, [sp]
 800b9d6:	a902      	add	r1, sp, #8
 800b9d8:	f7ff ff58 	bl	800b88c <__b2d>
 800b9dc:	468b      	mov	fp, r1
 800b9de:	4606      	mov	r6, r0
 800b9e0:	460f      	mov	r7, r1
 800b9e2:	9800      	ldr	r0, [sp, #0]
 800b9e4:	a903      	add	r1, sp, #12
 800b9e6:	f7ff ff51 	bl	800b88c <__b2d>
 800b9ea:	460d      	mov	r5, r1
 800b9ec:	9b01      	ldr	r3, [sp, #4]
 800b9ee:	4689      	mov	r9, r1
 800b9f0:	6919      	ldr	r1, [r3, #16]
 800b9f2:	9b00      	ldr	r3, [sp, #0]
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	1ac9      	subs	r1, r1, r3
 800b9fc:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ba00:	1a9b      	subs	r3, r3, r2
 800ba02:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	bfcd      	iteet	gt
 800ba0a:	463a      	movgt	r2, r7
 800ba0c:	462a      	movle	r2, r5
 800ba0e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba12:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ba16:	bfd8      	it	le
 800ba18:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ba1c:	464b      	mov	r3, r9
 800ba1e:	4622      	mov	r2, r4
 800ba20:	4659      	mov	r1, fp
 800ba22:	f7f4 fe83 	bl	800072c <__aeabi_ddiv>
 800ba26:	b005      	add	sp, #20
 800ba28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ba2c <__copybits>:
 800ba2c:	3901      	subs	r1, #1
 800ba2e:	b570      	push	{r4, r5, r6, lr}
 800ba30:	1149      	asrs	r1, r1, #5
 800ba32:	6914      	ldr	r4, [r2, #16]
 800ba34:	3101      	adds	r1, #1
 800ba36:	f102 0314 	add.w	r3, r2, #20
 800ba3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba42:	1f05      	subs	r5, r0, #4
 800ba44:	42a3      	cmp	r3, r4
 800ba46:	d30c      	bcc.n	800ba62 <__copybits+0x36>
 800ba48:	1aa3      	subs	r3, r4, r2
 800ba4a:	3b11      	subs	r3, #17
 800ba4c:	f023 0303 	bic.w	r3, r3, #3
 800ba50:	3211      	adds	r2, #17
 800ba52:	42a2      	cmp	r2, r4
 800ba54:	bf88      	it	hi
 800ba56:	2300      	movhi	r3, #0
 800ba58:	4418      	add	r0, r3
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	4288      	cmp	r0, r1
 800ba5e:	d305      	bcc.n	800ba6c <__copybits+0x40>
 800ba60:	bd70      	pop	{r4, r5, r6, pc}
 800ba62:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba66:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba6a:	e7eb      	b.n	800ba44 <__copybits+0x18>
 800ba6c:	f840 3b04 	str.w	r3, [r0], #4
 800ba70:	e7f4      	b.n	800ba5c <__copybits+0x30>

0800ba72 <__any_on>:
 800ba72:	f100 0214 	add.w	r2, r0, #20
 800ba76:	6900      	ldr	r0, [r0, #16]
 800ba78:	114b      	asrs	r3, r1, #5
 800ba7a:	4298      	cmp	r0, r3
 800ba7c:	b510      	push	{r4, lr}
 800ba7e:	db11      	blt.n	800baa4 <__any_on+0x32>
 800ba80:	dd0a      	ble.n	800ba98 <__any_on+0x26>
 800ba82:	f011 011f 	ands.w	r1, r1, #31
 800ba86:	d007      	beq.n	800ba98 <__any_on+0x26>
 800ba88:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba8c:	fa24 f001 	lsr.w	r0, r4, r1
 800ba90:	fa00 f101 	lsl.w	r1, r0, r1
 800ba94:	428c      	cmp	r4, r1
 800ba96:	d10b      	bne.n	800bab0 <__any_on+0x3e>
 800ba98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d803      	bhi.n	800baa8 <__any_on+0x36>
 800baa0:	2000      	movs	r0, #0
 800baa2:	bd10      	pop	{r4, pc}
 800baa4:	4603      	mov	r3, r0
 800baa6:	e7f7      	b.n	800ba98 <__any_on+0x26>
 800baa8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800baac:	2900      	cmp	r1, #0
 800baae:	d0f5      	beq.n	800ba9c <__any_on+0x2a>
 800bab0:	2001      	movs	r0, #1
 800bab2:	e7f6      	b.n	800baa2 <__any_on+0x30>

0800bab4 <__ascii_wctomb>:
 800bab4:	4603      	mov	r3, r0
 800bab6:	4608      	mov	r0, r1
 800bab8:	b141      	cbz	r1, 800bacc <__ascii_wctomb+0x18>
 800baba:	2aff      	cmp	r2, #255	@ 0xff
 800babc:	d904      	bls.n	800bac8 <__ascii_wctomb+0x14>
 800babe:	228a      	movs	r2, #138	@ 0x8a
 800bac0:	f04f 30ff 	mov.w	r0, #4294967295
 800bac4:	601a      	str	r2, [r3, #0]
 800bac6:	4770      	bx	lr
 800bac8:	2001      	movs	r0, #1
 800baca:	700a      	strb	r2, [r1, #0]
 800bacc:	4770      	bx	lr
	...

0800bad0 <__sflush_r>:
 800bad0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	0716      	lsls	r6, r2, #28
 800bad8:	4605      	mov	r5, r0
 800bada:	460c      	mov	r4, r1
 800badc:	d454      	bmi.n	800bb88 <__sflush_r+0xb8>
 800bade:	684b      	ldr	r3, [r1, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	dc02      	bgt.n	800baea <__sflush_r+0x1a>
 800bae4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	dd48      	ble.n	800bb7c <__sflush_r+0xac>
 800baea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800baec:	2e00      	cmp	r6, #0
 800baee:	d045      	beq.n	800bb7c <__sflush_r+0xac>
 800baf0:	2300      	movs	r3, #0
 800baf2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800baf6:	682f      	ldr	r7, [r5, #0]
 800baf8:	6a21      	ldr	r1, [r4, #32]
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	d030      	beq.n	800bb60 <__sflush_r+0x90>
 800bafe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb00:	89a3      	ldrh	r3, [r4, #12]
 800bb02:	0759      	lsls	r1, r3, #29
 800bb04:	d505      	bpl.n	800bb12 <__sflush_r+0x42>
 800bb06:	6863      	ldr	r3, [r4, #4]
 800bb08:	1ad2      	subs	r2, r2, r3
 800bb0a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb0c:	b10b      	cbz	r3, 800bb12 <__sflush_r+0x42>
 800bb0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb10:	1ad2      	subs	r2, r2, r3
 800bb12:	2300      	movs	r3, #0
 800bb14:	4628      	mov	r0, r5
 800bb16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb18:	6a21      	ldr	r1, [r4, #32]
 800bb1a:	47b0      	blx	r6
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	89a3      	ldrh	r3, [r4, #12]
 800bb20:	d106      	bne.n	800bb30 <__sflush_r+0x60>
 800bb22:	6829      	ldr	r1, [r5, #0]
 800bb24:	291d      	cmp	r1, #29
 800bb26:	d82b      	bhi.n	800bb80 <__sflush_r+0xb0>
 800bb28:	4a28      	ldr	r2, [pc, #160]	@ (800bbcc <__sflush_r+0xfc>)
 800bb2a:	40ca      	lsrs	r2, r1
 800bb2c:	07d6      	lsls	r6, r2, #31
 800bb2e:	d527      	bpl.n	800bb80 <__sflush_r+0xb0>
 800bb30:	2200      	movs	r2, #0
 800bb32:	6062      	str	r2, [r4, #4]
 800bb34:	6922      	ldr	r2, [r4, #16]
 800bb36:	04d9      	lsls	r1, r3, #19
 800bb38:	6022      	str	r2, [r4, #0]
 800bb3a:	d504      	bpl.n	800bb46 <__sflush_r+0x76>
 800bb3c:	1c42      	adds	r2, r0, #1
 800bb3e:	d101      	bne.n	800bb44 <__sflush_r+0x74>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b903      	cbnz	r3, 800bb46 <__sflush_r+0x76>
 800bb44:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb48:	602f      	str	r7, [r5, #0]
 800bb4a:	b1b9      	cbz	r1, 800bb7c <__sflush_r+0xac>
 800bb4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb50:	4299      	cmp	r1, r3
 800bb52:	d002      	beq.n	800bb5a <__sflush_r+0x8a>
 800bb54:	4628      	mov	r0, r5
 800bb56:	f7fe fecb 	bl	800a8f0 <_free_r>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb5e:	e00d      	b.n	800bb7c <__sflush_r+0xac>
 800bb60:	2301      	movs	r3, #1
 800bb62:	4628      	mov	r0, r5
 800bb64:	47b0      	blx	r6
 800bb66:	4602      	mov	r2, r0
 800bb68:	1c50      	adds	r0, r2, #1
 800bb6a:	d1c9      	bne.n	800bb00 <__sflush_r+0x30>
 800bb6c:	682b      	ldr	r3, [r5, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d0c6      	beq.n	800bb00 <__sflush_r+0x30>
 800bb72:	2b1d      	cmp	r3, #29
 800bb74:	d001      	beq.n	800bb7a <__sflush_r+0xaa>
 800bb76:	2b16      	cmp	r3, #22
 800bb78:	d11d      	bne.n	800bbb6 <__sflush_r+0xe6>
 800bb7a:	602f      	str	r7, [r5, #0]
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	e021      	b.n	800bbc4 <__sflush_r+0xf4>
 800bb80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb84:	b21b      	sxth	r3, r3
 800bb86:	e01a      	b.n	800bbbe <__sflush_r+0xee>
 800bb88:	690f      	ldr	r7, [r1, #16]
 800bb8a:	2f00      	cmp	r7, #0
 800bb8c:	d0f6      	beq.n	800bb7c <__sflush_r+0xac>
 800bb8e:	0793      	lsls	r3, r2, #30
 800bb90:	bf18      	it	ne
 800bb92:	2300      	movne	r3, #0
 800bb94:	680e      	ldr	r6, [r1, #0]
 800bb96:	bf08      	it	eq
 800bb98:	694b      	ldreq	r3, [r1, #20]
 800bb9a:	1bf6      	subs	r6, r6, r7
 800bb9c:	600f      	str	r7, [r1, #0]
 800bb9e:	608b      	str	r3, [r1, #8]
 800bba0:	2e00      	cmp	r6, #0
 800bba2:	ddeb      	ble.n	800bb7c <__sflush_r+0xac>
 800bba4:	4633      	mov	r3, r6
 800bba6:	463a      	mov	r2, r7
 800bba8:	4628      	mov	r0, r5
 800bbaa:	6a21      	ldr	r1, [r4, #32]
 800bbac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bbb0:	47e0      	blx	ip
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	dc07      	bgt.n	800bbc6 <__sflush_r+0xf6>
 800bbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc2:	81a3      	strh	r3, [r4, #12]
 800bbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc6:	4407      	add	r7, r0
 800bbc8:	1a36      	subs	r6, r6, r0
 800bbca:	e7e9      	b.n	800bba0 <__sflush_r+0xd0>
 800bbcc:	20400001 	.word	0x20400001

0800bbd0 <_fflush_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	690b      	ldr	r3, [r1, #16]
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	460c      	mov	r4, r1
 800bbd8:	b913      	cbnz	r3, 800bbe0 <_fflush_r+0x10>
 800bbda:	2500      	movs	r5, #0
 800bbdc:	4628      	mov	r0, r5
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	b118      	cbz	r0, 800bbea <_fflush_r+0x1a>
 800bbe2:	6a03      	ldr	r3, [r0, #32]
 800bbe4:	b90b      	cbnz	r3, 800bbea <_fflush_r+0x1a>
 800bbe6:	f7fe fd67 	bl	800a6b8 <__sinit>
 800bbea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d0f3      	beq.n	800bbda <_fflush_r+0xa>
 800bbf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbf4:	07d0      	lsls	r0, r2, #31
 800bbf6:	d404      	bmi.n	800bc02 <_fflush_r+0x32>
 800bbf8:	0599      	lsls	r1, r3, #22
 800bbfa:	d402      	bmi.n	800bc02 <_fflush_r+0x32>
 800bbfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbfe:	f7fe fe60 	bl	800a8c2 <__retarget_lock_acquire_recursive>
 800bc02:	4628      	mov	r0, r5
 800bc04:	4621      	mov	r1, r4
 800bc06:	f7ff ff63 	bl	800bad0 <__sflush_r>
 800bc0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	07da      	lsls	r2, r3, #31
 800bc10:	d4e4      	bmi.n	800bbdc <_fflush_r+0xc>
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	059b      	lsls	r3, r3, #22
 800bc16:	d4e1      	bmi.n	800bbdc <_fflush_r+0xc>
 800bc18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc1a:	f7fe fe53 	bl	800a8c4 <__retarget_lock_release_recursive>
 800bc1e:	e7dd      	b.n	800bbdc <_fflush_r+0xc>

0800bc20 <_sbrk_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	2300      	movs	r3, #0
 800bc24:	4d05      	ldr	r5, [pc, #20]	@ (800bc3c <_sbrk_r+0x1c>)
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	f7f8 fd3c 	bl	80046a8 <_sbrk>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_sbrk_r+0x1a>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_sbrk_r+0x1a>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	20000ab0 	.word	0x20000ab0

0800bc40 <__assert_func>:
 800bc40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc42:	4614      	mov	r4, r2
 800bc44:	461a      	mov	r2, r3
 800bc46:	4b09      	ldr	r3, [pc, #36]	@ (800bc6c <__assert_func+0x2c>)
 800bc48:	4605      	mov	r5, r0
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	68d8      	ldr	r0, [r3, #12]
 800bc4e:	b14c      	cbz	r4, 800bc64 <__assert_func+0x24>
 800bc50:	4b07      	ldr	r3, [pc, #28]	@ (800bc70 <__assert_func+0x30>)
 800bc52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc56:	9100      	str	r1, [sp, #0]
 800bc58:	462b      	mov	r3, r5
 800bc5a:	4906      	ldr	r1, [pc, #24]	@ (800bc74 <__assert_func+0x34>)
 800bc5c:	f000 f82a 	bl	800bcb4 <fiprintf>
 800bc60:	f000 f83a 	bl	800bcd8 <abort>
 800bc64:	4b04      	ldr	r3, [pc, #16]	@ (800bc78 <__assert_func+0x38>)
 800bc66:	461c      	mov	r4, r3
 800bc68:	e7f3      	b.n	800bc52 <__assert_func+0x12>
 800bc6a:	bf00      	nop
 800bc6c:	200001c8 	.word	0x200001c8
 800bc70:	0800caa1 	.word	0x0800caa1
 800bc74:	0800caae 	.word	0x0800caae
 800bc78:	0800cadc 	.word	0x0800cadc

0800bc7c <_calloc_r>:
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	fba1 5402 	umull	r5, r4, r1, r2
 800bc82:	b934      	cbnz	r4, 800bc92 <_calloc_r+0x16>
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7ff f9d7 	bl	800b038 <_malloc_r>
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	b928      	cbnz	r0, 800bc9a <_calloc_r+0x1e>
 800bc8e:	4630      	mov	r0, r6
 800bc90:	bd70      	pop	{r4, r5, r6, pc}
 800bc92:	220c      	movs	r2, #12
 800bc94:	2600      	movs	r6, #0
 800bc96:	6002      	str	r2, [r0, #0]
 800bc98:	e7f9      	b.n	800bc8e <_calloc_r+0x12>
 800bc9a:	462a      	mov	r2, r5
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	f7fe fd84 	bl	800a7aa <memset>
 800bca2:	e7f4      	b.n	800bc8e <_calloc_r+0x12>

0800bca4 <malloc>:
 800bca4:	4b02      	ldr	r3, [pc, #8]	@ (800bcb0 <malloc+0xc>)
 800bca6:	4601      	mov	r1, r0
 800bca8:	6818      	ldr	r0, [r3, #0]
 800bcaa:	f7ff b9c5 	b.w	800b038 <_malloc_r>
 800bcae:	bf00      	nop
 800bcb0:	200001c8 	.word	0x200001c8

0800bcb4 <fiprintf>:
 800bcb4:	b40e      	push	{r1, r2, r3}
 800bcb6:	b503      	push	{r0, r1, lr}
 800bcb8:	4601      	mov	r1, r0
 800bcba:	ab03      	add	r3, sp, #12
 800bcbc:	4805      	ldr	r0, [pc, #20]	@ (800bcd4 <fiprintf+0x20>)
 800bcbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcc2:	6800      	ldr	r0, [r0, #0]
 800bcc4:	9301      	str	r3, [sp, #4]
 800bcc6:	f000 f835 	bl	800bd34 <_vfiprintf_r>
 800bcca:	b002      	add	sp, #8
 800bccc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd0:	b003      	add	sp, #12
 800bcd2:	4770      	bx	lr
 800bcd4:	200001c8 	.word	0x200001c8

0800bcd8 <abort>:
 800bcd8:	2006      	movs	r0, #6
 800bcda:	b508      	push	{r3, lr}
 800bcdc:	f000 fb8e 	bl	800c3fc <raise>
 800bce0:	2001      	movs	r0, #1
 800bce2:	f7f8 fc6c 	bl	80045be <_exit>

0800bce6 <__sfputc_r>:
 800bce6:	6893      	ldr	r3, [r2, #8]
 800bce8:	b410      	push	{r4}
 800bcea:	3b01      	subs	r3, #1
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	6093      	str	r3, [r2, #8]
 800bcf0:	da07      	bge.n	800bd02 <__sfputc_r+0x1c>
 800bcf2:	6994      	ldr	r4, [r2, #24]
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	db01      	blt.n	800bcfc <__sfputc_r+0x16>
 800bcf8:	290a      	cmp	r1, #10
 800bcfa:	d102      	bne.n	800bd02 <__sfputc_r+0x1c>
 800bcfc:	bc10      	pop	{r4}
 800bcfe:	f000 bac1 	b.w	800c284 <__swbuf_r>
 800bd02:	6813      	ldr	r3, [r2, #0]
 800bd04:	1c58      	adds	r0, r3, #1
 800bd06:	6010      	str	r0, [r2, #0]
 800bd08:	7019      	strb	r1, [r3, #0]
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	bc10      	pop	{r4}
 800bd0e:	4770      	bx	lr

0800bd10 <__sfputs_r>:
 800bd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd12:	4606      	mov	r6, r0
 800bd14:	460f      	mov	r7, r1
 800bd16:	4614      	mov	r4, r2
 800bd18:	18d5      	adds	r5, r2, r3
 800bd1a:	42ac      	cmp	r4, r5
 800bd1c:	d101      	bne.n	800bd22 <__sfputs_r+0x12>
 800bd1e:	2000      	movs	r0, #0
 800bd20:	e007      	b.n	800bd32 <__sfputs_r+0x22>
 800bd22:	463a      	mov	r2, r7
 800bd24:	4630      	mov	r0, r6
 800bd26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2a:	f7ff ffdc 	bl	800bce6 <__sfputc_r>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	d1f3      	bne.n	800bd1a <__sfputs_r+0xa>
 800bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd34 <_vfiprintf_r>:
 800bd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd38:	460d      	mov	r5, r1
 800bd3a:	4614      	mov	r4, r2
 800bd3c:	4698      	mov	r8, r3
 800bd3e:	4606      	mov	r6, r0
 800bd40:	b09d      	sub	sp, #116	@ 0x74
 800bd42:	b118      	cbz	r0, 800bd4c <_vfiprintf_r+0x18>
 800bd44:	6a03      	ldr	r3, [r0, #32]
 800bd46:	b90b      	cbnz	r3, 800bd4c <_vfiprintf_r+0x18>
 800bd48:	f7fe fcb6 	bl	800a6b8 <__sinit>
 800bd4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd4e:	07d9      	lsls	r1, r3, #31
 800bd50:	d405      	bmi.n	800bd5e <_vfiprintf_r+0x2a>
 800bd52:	89ab      	ldrh	r3, [r5, #12]
 800bd54:	059a      	lsls	r2, r3, #22
 800bd56:	d402      	bmi.n	800bd5e <_vfiprintf_r+0x2a>
 800bd58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd5a:	f7fe fdb2 	bl	800a8c2 <__retarget_lock_acquire_recursive>
 800bd5e:	89ab      	ldrh	r3, [r5, #12]
 800bd60:	071b      	lsls	r3, r3, #28
 800bd62:	d501      	bpl.n	800bd68 <_vfiprintf_r+0x34>
 800bd64:	692b      	ldr	r3, [r5, #16]
 800bd66:	b99b      	cbnz	r3, 800bd90 <_vfiprintf_r+0x5c>
 800bd68:	4629      	mov	r1, r5
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f000 fac8 	bl	800c300 <__swsetup_r>
 800bd70:	b170      	cbz	r0, 800bd90 <_vfiprintf_r+0x5c>
 800bd72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd74:	07dc      	lsls	r4, r3, #31
 800bd76:	d504      	bpl.n	800bd82 <_vfiprintf_r+0x4e>
 800bd78:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7c:	b01d      	add	sp, #116	@ 0x74
 800bd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd82:	89ab      	ldrh	r3, [r5, #12]
 800bd84:	0598      	lsls	r0, r3, #22
 800bd86:	d4f7      	bmi.n	800bd78 <_vfiprintf_r+0x44>
 800bd88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd8a:	f7fe fd9b 	bl	800a8c4 <__retarget_lock_release_recursive>
 800bd8e:	e7f3      	b.n	800bd78 <_vfiprintf_r+0x44>
 800bd90:	2300      	movs	r3, #0
 800bd92:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd94:	2320      	movs	r3, #32
 800bd96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd9a:	2330      	movs	r3, #48	@ 0x30
 800bd9c:	f04f 0901 	mov.w	r9, #1
 800bda0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bda4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bf50 <_vfiprintf_r+0x21c>
 800bda8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdac:	4623      	mov	r3, r4
 800bdae:	469a      	mov	sl, r3
 800bdb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdb4:	b10a      	cbz	r2, 800bdba <_vfiprintf_r+0x86>
 800bdb6:	2a25      	cmp	r2, #37	@ 0x25
 800bdb8:	d1f9      	bne.n	800bdae <_vfiprintf_r+0x7a>
 800bdba:	ebba 0b04 	subs.w	fp, sl, r4
 800bdbe:	d00b      	beq.n	800bdd8 <_vfiprintf_r+0xa4>
 800bdc0:	465b      	mov	r3, fp
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f7ff ffa2 	bl	800bd10 <__sfputs_r>
 800bdcc:	3001      	adds	r0, #1
 800bdce:	f000 80a7 	beq.w	800bf20 <_vfiprintf_r+0x1ec>
 800bdd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdd4:	445a      	add	r2, fp
 800bdd6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	f000 809f 	beq.w	800bf20 <_vfiprintf_r+0x1ec>
 800bde2:	2300      	movs	r3, #0
 800bde4:	f04f 32ff 	mov.w	r2, #4294967295
 800bde8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdec:	f10a 0a01 	add.w	sl, sl, #1
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	9307      	str	r3, [sp, #28]
 800bdf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdf8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdfa:	4654      	mov	r4, sl
 800bdfc:	2205      	movs	r2, #5
 800bdfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be02:	4853      	ldr	r0, [pc, #332]	@ (800bf50 <_vfiprintf_r+0x21c>)
 800be04:	f000 fb16 	bl	800c434 <memchr>
 800be08:	9a04      	ldr	r2, [sp, #16]
 800be0a:	b9d8      	cbnz	r0, 800be44 <_vfiprintf_r+0x110>
 800be0c:	06d1      	lsls	r1, r2, #27
 800be0e:	bf44      	itt	mi
 800be10:	2320      	movmi	r3, #32
 800be12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be16:	0713      	lsls	r3, r2, #28
 800be18:	bf44      	itt	mi
 800be1a:	232b      	movmi	r3, #43	@ 0x2b
 800be1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be20:	f89a 3000 	ldrb.w	r3, [sl]
 800be24:	2b2a      	cmp	r3, #42	@ 0x2a
 800be26:	d015      	beq.n	800be54 <_vfiprintf_r+0x120>
 800be28:	4654      	mov	r4, sl
 800be2a:	2000      	movs	r0, #0
 800be2c:	f04f 0c0a 	mov.w	ip, #10
 800be30:	9a07      	ldr	r2, [sp, #28]
 800be32:	4621      	mov	r1, r4
 800be34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be38:	3b30      	subs	r3, #48	@ 0x30
 800be3a:	2b09      	cmp	r3, #9
 800be3c:	d94b      	bls.n	800bed6 <_vfiprintf_r+0x1a2>
 800be3e:	b1b0      	cbz	r0, 800be6e <_vfiprintf_r+0x13a>
 800be40:	9207      	str	r2, [sp, #28]
 800be42:	e014      	b.n	800be6e <_vfiprintf_r+0x13a>
 800be44:	eba0 0308 	sub.w	r3, r0, r8
 800be48:	fa09 f303 	lsl.w	r3, r9, r3
 800be4c:	4313      	orrs	r3, r2
 800be4e:	46a2      	mov	sl, r4
 800be50:	9304      	str	r3, [sp, #16]
 800be52:	e7d2      	b.n	800bdfa <_vfiprintf_r+0xc6>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	1d19      	adds	r1, r3, #4
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	9103      	str	r1, [sp, #12]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	bfbb      	ittet	lt
 800be60:	425b      	neglt	r3, r3
 800be62:	f042 0202 	orrlt.w	r2, r2, #2
 800be66:	9307      	strge	r3, [sp, #28]
 800be68:	9307      	strlt	r3, [sp, #28]
 800be6a:	bfb8      	it	lt
 800be6c:	9204      	strlt	r2, [sp, #16]
 800be6e:	7823      	ldrb	r3, [r4, #0]
 800be70:	2b2e      	cmp	r3, #46	@ 0x2e
 800be72:	d10a      	bne.n	800be8a <_vfiprintf_r+0x156>
 800be74:	7863      	ldrb	r3, [r4, #1]
 800be76:	2b2a      	cmp	r3, #42	@ 0x2a
 800be78:	d132      	bne.n	800bee0 <_vfiprintf_r+0x1ac>
 800be7a:	9b03      	ldr	r3, [sp, #12]
 800be7c:	3402      	adds	r4, #2
 800be7e:	1d1a      	adds	r2, r3, #4
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	9203      	str	r2, [sp, #12]
 800be84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be88:	9305      	str	r3, [sp, #20]
 800be8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bf54 <_vfiprintf_r+0x220>
 800be8e:	2203      	movs	r2, #3
 800be90:	4650      	mov	r0, sl
 800be92:	7821      	ldrb	r1, [r4, #0]
 800be94:	f000 face 	bl	800c434 <memchr>
 800be98:	b138      	cbz	r0, 800beaa <_vfiprintf_r+0x176>
 800be9a:	2240      	movs	r2, #64	@ 0x40
 800be9c:	9b04      	ldr	r3, [sp, #16]
 800be9e:	eba0 000a 	sub.w	r0, r0, sl
 800bea2:	4082      	lsls	r2, r0
 800bea4:	4313      	orrs	r3, r2
 800bea6:	3401      	adds	r4, #1
 800bea8:	9304      	str	r3, [sp, #16]
 800beaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beae:	2206      	movs	r2, #6
 800beb0:	4829      	ldr	r0, [pc, #164]	@ (800bf58 <_vfiprintf_r+0x224>)
 800beb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800beb6:	f000 fabd 	bl	800c434 <memchr>
 800beba:	2800      	cmp	r0, #0
 800bebc:	d03f      	beq.n	800bf3e <_vfiprintf_r+0x20a>
 800bebe:	4b27      	ldr	r3, [pc, #156]	@ (800bf5c <_vfiprintf_r+0x228>)
 800bec0:	bb1b      	cbnz	r3, 800bf0a <_vfiprintf_r+0x1d6>
 800bec2:	9b03      	ldr	r3, [sp, #12]
 800bec4:	3307      	adds	r3, #7
 800bec6:	f023 0307 	bic.w	r3, r3, #7
 800beca:	3308      	adds	r3, #8
 800becc:	9303      	str	r3, [sp, #12]
 800bece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed0:	443b      	add	r3, r7
 800bed2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bed4:	e76a      	b.n	800bdac <_vfiprintf_r+0x78>
 800bed6:	460c      	mov	r4, r1
 800bed8:	2001      	movs	r0, #1
 800beda:	fb0c 3202 	mla	r2, ip, r2, r3
 800bede:	e7a8      	b.n	800be32 <_vfiprintf_r+0xfe>
 800bee0:	2300      	movs	r3, #0
 800bee2:	f04f 0c0a 	mov.w	ip, #10
 800bee6:	4619      	mov	r1, r3
 800bee8:	3401      	adds	r4, #1
 800beea:	9305      	str	r3, [sp, #20]
 800beec:	4620      	mov	r0, r4
 800beee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bef2:	3a30      	subs	r2, #48	@ 0x30
 800bef4:	2a09      	cmp	r2, #9
 800bef6:	d903      	bls.n	800bf00 <_vfiprintf_r+0x1cc>
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d0c6      	beq.n	800be8a <_vfiprintf_r+0x156>
 800befc:	9105      	str	r1, [sp, #20]
 800befe:	e7c4      	b.n	800be8a <_vfiprintf_r+0x156>
 800bf00:	4604      	mov	r4, r0
 800bf02:	2301      	movs	r3, #1
 800bf04:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf08:	e7f0      	b.n	800beec <_vfiprintf_r+0x1b8>
 800bf0a:	ab03      	add	r3, sp, #12
 800bf0c:	9300      	str	r3, [sp, #0]
 800bf0e:	462a      	mov	r2, r5
 800bf10:	4630      	mov	r0, r6
 800bf12:	4b13      	ldr	r3, [pc, #76]	@ (800bf60 <_vfiprintf_r+0x22c>)
 800bf14:	a904      	add	r1, sp, #16
 800bf16:	f3af 8000 	nop.w
 800bf1a:	4607      	mov	r7, r0
 800bf1c:	1c78      	adds	r0, r7, #1
 800bf1e:	d1d6      	bne.n	800bece <_vfiprintf_r+0x19a>
 800bf20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf22:	07d9      	lsls	r1, r3, #31
 800bf24:	d405      	bmi.n	800bf32 <_vfiprintf_r+0x1fe>
 800bf26:	89ab      	ldrh	r3, [r5, #12]
 800bf28:	059a      	lsls	r2, r3, #22
 800bf2a:	d402      	bmi.n	800bf32 <_vfiprintf_r+0x1fe>
 800bf2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf2e:	f7fe fcc9 	bl	800a8c4 <__retarget_lock_release_recursive>
 800bf32:	89ab      	ldrh	r3, [r5, #12]
 800bf34:	065b      	lsls	r3, r3, #25
 800bf36:	f53f af1f 	bmi.w	800bd78 <_vfiprintf_r+0x44>
 800bf3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf3c:	e71e      	b.n	800bd7c <_vfiprintf_r+0x48>
 800bf3e:	ab03      	add	r3, sp, #12
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	462a      	mov	r2, r5
 800bf44:	4630      	mov	r0, r6
 800bf46:	4b06      	ldr	r3, [pc, #24]	@ (800bf60 <_vfiprintf_r+0x22c>)
 800bf48:	a904      	add	r1, sp, #16
 800bf4a:	f000 f87d 	bl	800c048 <_printf_i>
 800bf4e:	e7e4      	b.n	800bf1a <_vfiprintf_r+0x1e6>
 800bf50:	0800cadd 	.word	0x0800cadd
 800bf54:	0800cae3 	.word	0x0800cae3
 800bf58:	0800cae7 	.word	0x0800cae7
 800bf5c:	00000000 	.word	0x00000000
 800bf60:	0800bd11 	.word	0x0800bd11

0800bf64 <_printf_common>:
 800bf64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf68:	4616      	mov	r6, r2
 800bf6a:	4698      	mov	r8, r3
 800bf6c:	688a      	ldr	r2, [r1, #8]
 800bf6e:	690b      	ldr	r3, [r1, #16]
 800bf70:	4607      	mov	r7, r0
 800bf72:	4293      	cmp	r3, r2
 800bf74:	bfb8      	it	lt
 800bf76:	4613      	movlt	r3, r2
 800bf78:	6033      	str	r3, [r6, #0]
 800bf7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf7e:	460c      	mov	r4, r1
 800bf80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf84:	b10a      	cbz	r2, 800bf8a <_printf_common+0x26>
 800bf86:	3301      	adds	r3, #1
 800bf88:	6033      	str	r3, [r6, #0]
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	0699      	lsls	r1, r3, #26
 800bf8e:	bf42      	ittt	mi
 800bf90:	6833      	ldrmi	r3, [r6, #0]
 800bf92:	3302      	addmi	r3, #2
 800bf94:	6033      	strmi	r3, [r6, #0]
 800bf96:	6825      	ldr	r5, [r4, #0]
 800bf98:	f015 0506 	ands.w	r5, r5, #6
 800bf9c:	d106      	bne.n	800bfac <_printf_common+0x48>
 800bf9e:	f104 0a19 	add.w	sl, r4, #25
 800bfa2:	68e3      	ldr	r3, [r4, #12]
 800bfa4:	6832      	ldr	r2, [r6, #0]
 800bfa6:	1a9b      	subs	r3, r3, r2
 800bfa8:	42ab      	cmp	r3, r5
 800bfaa:	dc2b      	bgt.n	800c004 <_printf_common+0xa0>
 800bfac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bfb0:	6822      	ldr	r2, [r4, #0]
 800bfb2:	3b00      	subs	r3, #0
 800bfb4:	bf18      	it	ne
 800bfb6:	2301      	movne	r3, #1
 800bfb8:	0692      	lsls	r2, r2, #26
 800bfba:	d430      	bmi.n	800c01e <_printf_common+0xba>
 800bfbc:	4641      	mov	r1, r8
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bfc4:	47c8      	blx	r9
 800bfc6:	3001      	adds	r0, #1
 800bfc8:	d023      	beq.n	800c012 <_printf_common+0xae>
 800bfca:	6823      	ldr	r3, [r4, #0]
 800bfcc:	6922      	ldr	r2, [r4, #16]
 800bfce:	f003 0306 	and.w	r3, r3, #6
 800bfd2:	2b04      	cmp	r3, #4
 800bfd4:	bf14      	ite	ne
 800bfd6:	2500      	movne	r5, #0
 800bfd8:	6833      	ldreq	r3, [r6, #0]
 800bfda:	f04f 0600 	mov.w	r6, #0
 800bfde:	bf08      	it	eq
 800bfe0:	68e5      	ldreq	r5, [r4, #12]
 800bfe2:	f104 041a 	add.w	r4, r4, #26
 800bfe6:	bf08      	it	eq
 800bfe8:	1aed      	subeq	r5, r5, r3
 800bfea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bfee:	bf08      	it	eq
 800bff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bff4:	4293      	cmp	r3, r2
 800bff6:	bfc4      	itt	gt
 800bff8:	1a9b      	subgt	r3, r3, r2
 800bffa:	18ed      	addgt	r5, r5, r3
 800bffc:	42b5      	cmp	r5, r6
 800bffe:	d11a      	bne.n	800c036 <_printf_common+0xd2>
 800c000:	2000      	movs	r0, #0
 800c002:	e008      	b.n	800c016 <_printf_common+0xb2>
 800c004:	2301      	movs	r3, #1
 800c006:	4652      	mov	r2, sl
 800c008:	4641      	mov	r1, r8
 800c00a:	4638      	mov	r0, r7
 800c00c:	47c8      	blx	r9
 800c00e:	3001      	adds	r0, #1
 800c010:	d103      	bne.n	800c01a <_printf_common+0xb6>
 800c012:	f04f 30ff 	mov.w	r0, #4294967295
 800c016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c01a:	3501      	adds	r5, #1
 800c01c:	e7c1      	b.n	800bfa2 <_printf_common+0x3e>
 800c01e:	2030      	movs	r0, #48	@ 0x30
 800c020:	18e1      	adds	r1, r4, r3
 800c022:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c026:	1c5a      	adds	r2, r3, #1
 800c028:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c02c:	4422      	add	r2, r4
 800c02e:	3302      	adds	r3, #2
 800c030:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c034:	e7c2      	b.n	800bfbc <_printf_common+0x58>
 800c036:	2301      	movs	r3, #1
 800c038:	4622      	mov	r2, r4
 800c03a:	4641      	mov	r1, r8
 800c03c:	4638      	mov	r0, r7
 800c03e:	47c8      	blx	r9
 800c040:	3001      	adds	r0, #1
 800c042:	d0e6      	beq.n	800c012 <_printf_common+0xae>
 800c044:	3601      	adds	r6, #1
 800c046:	e7d9      	b.n	800bffc <_printf_common+0x98>

0800c048 <_printf_i>:
 800c048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c04c:	7e0f      	ldrb	r7, [r1, #24]
 800c04e:	4691      	mov	r9, r2
 800c050:	2f78      	cmp	r7, #120	@ 0x78
 800c052:	4680      	mov	r8, r0
 800c054:	460c      	mov	r4, r1
 800c056:	469a      	mov	sl, r3
 800c058:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c05a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c05e:	d807      	bhi.n	800c070 <_printf_i+0x28>
 800c060:	2f62      	cmp	r7, #98	@ 0x62
 800c062:	d80a      	bhi.n	800c07a <_printf_i+0x32>
 800c064:	2f00      	cmp	r7, #0
 800c066:	f000 80d1 	beq.w	800c20c <_printf_i+0x1c4>
 800c06a:	2f58      	cmp	r7, #88	@ 0x58
 800c06c:	f000 80b8 	beq.w	800c1e0 <_printf_i+0x198>
 800c070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c074:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c078:	e03a      	b.n	800c0f0 <_printf_i+0xa8>
 800c07a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c07e:	2b15      	cmp	r3, #21
 800c080:	d8f6      	bhi.n	800c070 <_printf_i+0x28>
 800c082:	a101      	add	r1, pc, #4	@ (adr r1, 800c088 <_printf_i+0x40>)
 800c084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c088:	0800c0e1 	.word	0x0800c0e1
 800c08c:	0800c0f5 	.word	0x0800c0f5
 800c090:	0800c071 	.word	0x0800c071
 800c094:	0800c071 	.word	0x0800c071
 800c098:	0800c071 	.word	0x0800c071
 800c09c:	0800c071 	.word	0x0800c071
 800c0a0:	0800c0f5 	.word	0x0800c0f5
 800c0a4:	0800c071 	.word	0x0800c071
 800c0a8:	0800c071 	.word	0x0800c071
 800c0ac:	0800c071 	.word	0x0800c071
 800c0b0:	0800c071 	.word	0x0800c071
 800c0b4:	0800c1f3 	.word	0x0800c1f3
 800c0b8:	0800c11f 	.word	0x0800c11f
 800c0bc:	0800c1ad 	.word	0x0800c1ad
 800c0c0:	0800c071 	.word	0x0800c071
 800c0c4:	0800c071 	.word	0x0800c071
 800c0c8:	0800c215 	.word	0x0800c215
 800c0cc:	0800c071 	.word	0x0800c071
 800c0d0:	0800c11f 	.word	0x0800c11f
 800c0d4:	0800c071 	.word	0x0800c071
 800c0d8:	0800c071 	.word	0x0800c071
 800c0dc:	0800c1b5 	.word	0x0800c1b5
 800c0e0:	6833      	ldr	r3, [r6, #0]
 800c0e2:	1d1a      	adds	r2, r3, #4
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	6032      	str	r2, [r6, #0]
 800c0e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	e09c      	b.n	800c22e <_printf_i+0x1e6>
 800c0f4:	6833      	ldr	r3, [r6, #0]
 800c0f6:	6820      	ldr	r0, [r4, #0]
 800c0f8:	1d19      	adds	r1, r3, #4
 800c0fa:	6031      	str	r1, [r6, #0]
 800c0fc:	0606      	lsls	r6, r0, #24
 800c0fe:	d501      	bpl.n	800c104 <_printf_i+0xbc>
 800c100:	681d      	ldr	r5, [r3, #0]
 800c102:	e003      	b.n	800c10c <_printf_i+0xc4>
 800c104:	0645      	lsls	r5, r0, #25
 800c106:	d5fb      	bpl.n	800c100 <_printf_i+0xb8>
 800c108:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c10c:	2d00      	cmp	r5, #0
 800c10e:	da03      	bge.n	800c118 <_printf_i+0xd0>
 800c110:	232d      	movs	r3, #45	@ 0x2d
 800c112:	426d      	negs	r5, r5
 800c114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c118:	230a      	movs	r3, #10
 800c11a:	4858      	ldr	r0, [pc, #352]	@ (800c27c <_printf_i+0x234>)
 800c11c:	e011      	b.n	800c142 <_printf_i+0xfa>
 800c11e:	6821      	ldr	r1, [r4, #0]
 800c120:	6833      	ldr	r3, [r6, #0]
 800c122:	0608      	lsls	r0, r1, #24
 800c124:	f853 5b04 	ldr.w	r5, [r3], #4
 800c128:	d402      	bmi.n	800c130 <_printf_i+0xe8>
 800c12a:	0649      	lsls	r1, r1, #25
 800c12c:	bf48      	it	mi
 800c12e:	b2ad      	uxthmi	r5, r5
 800c130:	2f6f      	cmp	r7, #111	@ 0x6f
 800c132:	6033      	str	r3, [r6, #0]
 800c134:	bf14      	ite	ne
 800c136:	230a      	movne	r3, #10
 800c138:	2308      	moveq	r3, #8
 800c13a:	4850      	ldr	r0, [pc, #320]	@ (800c27c <_printf_i+0x234>)
 800c13c:	2100      	movs	r1, #0
 800c13e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c142:	6866      	ldr	r6, [r4, #4]
 800c144:	2e00      	cmp	r6, #0
 800c146:	60a6      	str	r6, [r4, #8]
 800c148:	db05      	blt.n	800c156 <_printf_i+0x10e>
 800c14a:	6821      	ldr	r1, [r4, #0]
 800c14c:	432e      	orrs	r6, r5
 800c14e:	f021 0104 	bic.w	r1, r1, #4
 800c152:	6021      	str	r1, [r4, #0]
 800c154:	d04b      	beq.n	800c1ee <_printf_i+0x1a6>
 800c156:	4616      	mov	r6, r2
 800c158:	fbb5 f1f3 	udiv	r1, r5, r3
 800c15c:	fb03 5711 	mls	r7, r3, r1, r5
 800c160:	5dc7      	ldrb	r7, [r0, r7]
 800c162:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c166:	462f      	mov	r7, r5
 800c168:	42bb      	cmp	r3, r7
 800c16a:	460d      	mov	r5, r1
 800c16c:	d9f4      	bls.n	800c158 <_printf_i+0x110>
 800c16e:	2b08      	cmp	r3, #8
 800c170:	d10b      	bne.n	800c18a <_printf_i+0x142>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	07df      	lsls	r7, r3, #31
 800c176:	d508      	bpl.n	800c18a <_printf_i+0x142>
 800c178:	6923      	ldr	r3, [r4, #16]
 800c17a:	6861      	ldr	r1, [r4, #4]
 800c17c:	4299      	cmp	r1, r3
 800c17e:	bfde      	ittt	le
 800c180:	2330      	movle	r3, #48	@ 0x30
 800c182:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c186:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c18a:	1b92      	subs	r2, r2, r6
 800c18c:	6122      	str	r2, [r4, #16]
 800c18e:	464b      	mov	r3, r9
 800c190:	4621      	mov	r1, r4
 800c192:	4640      	mov	r0, r8
 800c194:	f8cd a000 	str.w	sl, [sp]
 800c198:	aa03      	add	r2, sp, #12
 800c19a:	f7ff fee3 	bl	800bf64 <_printf_common>
 800c19e:	3001      	adds	r0, #1
 800c1a0:	d14a      	bne.n	800c238 <_printf_i+0x1f0>
 800c1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a6:	b004      	add	sp, #16
 800c1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ac:	6823      	ldr	r3, [r4, #0]
 800c1ae:	f043 0320 	orr.w	r3, r3, #32
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	2778      	movs	r7, #120	@ 0x78
 800c1b6:	4832      	ldr	r0, [pc, #200]	@ (800c280 <_printf_i+0x238>)
 800c1b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	6831      	ldr	r1, [r6, #0]
 800c1c0:	061f      	lsls	r7, r3, #24
 800c1c2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c1c6:	d402      	bmi.n	800c1ce <_printf_i+0x186>
 800c1c8:	065f      	lsls	r7, r3, #25
 800c1ca:	bf48      	it	mi
 800c1cc:	b2ad      	uxthmi	r5, r5
 800c1ce:	6031      	str	r1, [r6, #0]
 800c1d0:	07d9      	lsls	r1, r3, #31
 800c1d2:	bf44      	itt	mi
 800c1d4:	f043 0320 	orrmi.w	r3, r3, #32
 800c1d8:	6023      	strmi	r3, [r4, #0]
 800c1da:	b11d      	cbz	r5, 800c1e4 <_printf_i+0x19c>
 800c1dc:	2310      	movs	r3, #16
 800c1de:	e7ad      	b.n	800c13c <_printf_i+0xf4>
 800c1e0:	4826      	ldr	r0, [pc, #152]	@ (800c27c <_printf_i+0x234>)
 800c1e2:	e7e9      	b.n	800c1b8 <_printf_i+0x170>
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	f023 0320 	bic.w	r3, r3, #32
 800c1ea:	6023      	str	r3, [r4, #0]
 800c1ec:	e7f6      	b.n	800c1dc <_printf_i+0x194>
 800c1ee:	4616      	mov	r6, r2
 800c1f0:	e7bd      	b.n	800c16e <_printf_i+0x126>
 800c1f2:	6833      	ldr	r3, [r6, #0]
 800c1f4:	6825      	ldr	r5, [r4, #0]
 800c1f6:	1d18      	adds	r0, r3, #4
 800c1f8:	6961      	ldr	r1, [r4, #20]
 800c1fa:	6030      	str	r0, [r6, #0]
 800c1fc:	062e      	lsls	r6, r5, #24
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	d501      	bpl.n	800c206 <_printf_i+0x1be>
 800c202:	6019      	str	r1, [r3, #0]
 800c204:	e002      	b.n	800c20c <_printf_i+0x1c4>
 800c206:	0668      	lsls	r0, r5, #25
 800c208:	d5fb      	bpl.n	800c202 <_printf_i+0x1ba>
 800c20a:	8019      	strh	r1, [r3, #0]
 800c20c:	2300      	movs	r3, #0
 800c20e:	4616      	mov	r6, r2
 800c210:	6123      	str	r3, [r4, #16]
 800c212:	e7bc      	b.n	800c18e <_printf_i+0x146>
 800c214:	6833      	ldr	r3, [r6, #0]
 800c216:	2100      	movs	r1, #0
 800c218:	1d1a      	adds	r2, r3, #4
 800c21a:	6032      	str	r2, [r6, #0]
 800c21c:	681e      	ldr	r6, [r3, #0]
 800c21e:	6862      	ldr	r2, [r4, #4]
 800c220:	4630      	mov	r0, r6
 800c222:	f000 f907 	bl	800c434 <memchr>
 800c226:	b108      	cbz	r0, 800c22c <_printf_i+0x1e4>
 800c228:	1b80      	subs	r0, r0, r6
 800c22a:	6060      	str	r0, [r4, #4]
 800c22c:	6863      	ldr	r3, [r4, #4]
 800c22e:	6123      	str	r3, [r4, #16]
 800c230:	2300      	movs	r3, #0
 800c232:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c236:	e7aa      	b.n	800c18e <_printf_i+0x146>
 800c238:	4632      	mov	r2, r6
 800c23a:	4649      	mov	r1, r9
 800c23c:	4640      	mov	r0, r8
 800c23e:	6923      	ldr	r3, [r4, #16]
 800c240:	47d0      	blx	sl
 800c242:	3001      	adds	r0, #1
 800c244:	d0ad      	beq.n	800c1a2 <_printf_i+0x15a>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	079b      	lsls	r3, r3, #30
 800c24a:	d413      	bmi.n	800c274 <_printf_i+0x22c>
 800c24c:	68e0      	ldr	r0, [r4, #12]
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	4298      	cmp	r0, r3
 800c252:	bfb8      	it	lt
 800c254:	4618      	movlt	r0, r3
 800c256:	e7a6      	b.n	800c1a6 <_printf_i+0x15e>
 800c258:	2301      	movs	r3, #1
 800c25a:	4632      	mov	r2, r6
 800c25c:	4649      	mov	r1, r9
 800c25e:	4640      	mov	r0, r8
 800c260:	47d0      	blx	sl
 800c262:	3001      	adds	r0, #1
 800c264:	d09d      	beq.n	800c1a2 <_printf_i+0x15a>
 800c266:	3501      	adds	r5, #1
 800c268:	68e3      	ldr	r3, [r4, #12]
 800c26a:	9903      	ldr	r1, [sp, #12]
 800c26c:	1a5b      	subs	r3, r3, r1
 800c26e:	42ab      	cmp	r3, r5
 800c270:	dcf2      	bgt.n	800c258 <_printf_i+0x210>
 800c272:	e7eb      	b.n	800c24c <_printf_i+0x204>
 800c274:	2500      	movs	r5, #0
 800c276:	f104 0619 	add.w	r6, r4, #25
 800c27a:	e7f5      	b.n	800c268 <_printf_i+0x220>
 800c27c:	0800caee 	.word	0x0800caee
 800c280:	0800caff 	.word	0x0800caff

0800c284 <__swbuf_r>:
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	460e      	mov	r6, r1
 800c288:	4614      	mov	r4, r2
 800c28a:	4605      	mov	r5, r0
 800c28c:	b118      	cbz	r0, 800c296 <__swbuf_r+0x12>
 800c28e:	6a03      	ldr	r3, [r0, #32]
 800c290:	b90b      	cbnz	r3, 800c296 <__swbuf_r+0x12>
 800c292:	f7fe fa11 	bl	800a6b8 <__sinit>
 800c296:	69a3      	ldr	r3, [r4, #24]
 800c298:	60a3      	str	r3, [r4, #8]
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	071a      	lsls	r2, r3, #28
 800c29e:	d501      	bpl.n	800c2a4 <__swbuf_r+0x20>
 800c2a0:	6923      	ldr	r3, [r4, #16]
 800c2a2:	b943      	cbnz	r3, 800c2b6 <__swbuf_r+0x32>
 800c2a4:	4621      	mov	r1, r4
 800c2a6:	4628      	mov	r0, r5
 800c2a8:	f000 f82a 	bl	800c300 <__swsetup_r>
 800c2ac:	b118      	cbz	r0, 800c2b6 <__swbuf_r+0x32>
 800c2ae:	f04f 37ff 	mov.w	r7, #4294967295
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2b6:	6823      	ldr	r3, [r4, #0]
 800c2b8:	6922      	ldr	r2, [r4, #16]
 800c2ba:	b2f6      	uxtb	r6, r6
 800c2bc:	1a98      	subs	r0, r3, r2
 800c2be:	6963      	ldr	r3, [r4, #20]
 800c2c0:	4637      	mov	r7, r6
 800c2c2:	4283      	cmp	r3, r0
 800c2c4:	dc05      	bgt.n	800c2d2 <__swbuf_r+0x4e>
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7ff fc81 	bl	800bbd0 <_fflush_r>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d1ed      	bne.n	800c2ae <__swbuf_r+0x2a>
 800c2d2:	68a3      	ldr	r3, [r4, #8]
 800c2d4:	3b01      	subs	r3, #1
 800c2d6:	60a3      	str	r3, [r4, #8]
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	1c5a      	adds	r2, r3, #1
 800c2dc:	6022      	str	r2, [r4, #0]
 800c2de:	701e      	strb	r6, [r3, #0]
 800c2e0:	6962      	ldr	r2, [r4, #20]
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d004      	beq.n	800c2f2 <__swbuf_r+0x6e>
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	07db      	lsls	r3, r3, #31
 800c2ec:	d5e1      	bpl.n	800c2b2 <__swbuf_r+0x2e>
 800c2ee:	2e0a      	cmp	r6, #10
 800c2f0:	d1df      	bne.n	800c2b2 <__swbuf_r+0x2e>
 800c2f2:	4621      	mov	r1, r4
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	f7ff fc6b 	bl	800bbd0 <_fflush_r>
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d0d9      	beq.n	800c2b2 <__swbuf_r+0x2e>
 800c2fe:	e7d6      	b.n	800c2ae <__swbuf_r+0x2a>

0800c300 <__swsetup_r>:
 800c300:	b538      	push	{r3, r4, r5, lr}
 800c302:	4b29      	ldr	r3, [pc, #164]	@ (800c3a8 <__swsetup_r+0xa8>)
 800c304:	4605      	mov	r5, r0
 800c306:	6818      	ldr	r0, [r3, #0]
 800c308:	460c      	mov	r4, r1
 800c30a:	b118      	cbz	r0, 800c314 <__swsetup_r+0x14>
 800c30c:	6a03      	ldr	r3, [r0, #32]
 800c30e:	b90b      	cbnz	r3, 800c314 <__swsetup_r+0x14>
 800c310:	f7fe f9d2 	bl	800a6b8 <__sinit>
 800c314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c318:	0719      	lsls	r1, r3, #28
 800c31a:	d422      	bmi.n	800c362 <__swsetup_r+0x62>
 800c31c:	06da      	lsls	r2, r3, #27
 800c31e:	d407      	bmi.n	800c330 <__swsetup_r+0x30>
 800c320:	2209      	movs	r2, #9
 800c322:	602a      	str	r2, [r5, #0]
 800c324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c328:	f04f 30ff 	mov.w	r0, #4294967295
 800c32c:	81a3      	strh	r3, [r4, #12]
 800c32e:	e033      	b.n	800c398 <__swsetup_r+0x98>
 800c330:	0758      	lsls	r0, r3, #29
 800c332:	d512      	bpl.n	800c35a <__swsetup_r+0x5a>
 800c334:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c336:	b141      	cbz	r1, 800c34a <__swsetup_r+0x4a>
 800c338:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c33c:	4299      	cmp	r1, r3
 800c33e:	d002      	beq.n	800c346 <__swsetup_r+0x46>
 800c340:	4628      	mov	r0, r5
 800c342:	f7fe fad5 	bl	800a8f0 <_free_r>
 800c346:	2300      	movs	r3, #0
 800c348:	6363      	str	r3, [r4, #52]	@ 0x34
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c350:	81a3      	strh	r3, [r4, #12]
 800c352:	2300      	movs	r3, #0
 800c354:	6063      	str	r3, [r4, #4]
 800c356:	6923      	ldr	r3, [r4, #16]
 800c358:	6023      	str	r3, [r4, #0]
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f043 0308 	orr.w	r3, r3, #8
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	6923      	ldr	r3, [r4, #16]
 800c364:	b94b      	cbnz	r3, 800c37a <__swsetup_r+0x7a>
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c36c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c370:	d003      	beq.n	800c37a <__swsetup_r+0x7a>
 800c372:	4621      	mov	r1, r4
 800c374:	4628      	mov	r0, r5
 800c376:	f000 f890 	bl	800c49a <__smakebuf_r>
 800c37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c37e:	f013 0201 	ands.w	r2, r3, #1
 800c382:	d00a      	beq.n	800c39a <__swsetup_r+0x9a>
 800c384:	2200      	movs	r2, #0
 800c386:	60a2      	str	r2, [r4, #8]
 800c388:	6962      	ldr	r2, [r4, #20]
 800c38a:	4252      	negs	r2, r2
 800c38c:	61a2      	str	r2, [r4, #24]
 800c38e:	6922      	ldr	r2, [r4, #16]
 800c390:	b942      	cbnz	r2, 800c3a4 <__swsetup_r+0xa4>
 800c392:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c396:	d1c5      	bne.n	800c324 <__swsetup_r+0x24>
 800c398:	bd38      	pop	{r3, r4, r5, pc}
 800c39a:	0799      	lsls	r1, r3, #30
 800c39c:	bf58      	it	pl
 800c39e:	6962      	ldrpl	r2, [r4, #20]
 800c3a0:	60a2      	str	r2, [r4, #8]
 800c3a2:	e7f4      	b.n	800c38e <__swsetup_r+0x8e>
 800c3a4:	2000      	movs	r0, #0
 800c3a6:	e7f7      	b.n	800c398 <__swsetup_r+0x98>
 800c3a8:	200001c8 	.word	0x200001c8

0800c3ac <_raise_r>:
 800c3ac:	291f      	cmp	r1, #31
 800c3ae:	b538      	push	{r3, r4, r5, lr}
 800c3b0:	4605      	mov	r5, r0
 800c3b2:	460c      	mov	r4, r1
 800c3b4:	d904      	bls.n	800c3c0 <_raise_r+0x14>
 800c3b6:	2316      	movs	r3, #22
 800c3b8:	6003      	str	r3, [r0, #0]
 800c3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c3be:	bd38      	pop	{r3, r4, r5, pc}
 800c3c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3c2:	b112      	cbz	r2, 800c3ca <_raise_r+0x1e>
 800c3c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3c8:	b94b      	cbnz	r3, 800c3de <_raise_r+0x32>
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	f000 f830 	bl	800c430 <_getpid_r>
 800c3d0:	4622      	mov	r2, r4
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3da:	f000 b817 	b.w	800c40c <_kill_r>
 800c3de:	2b01      	cmp	r3, #1
 800c3e0:	d00a      	beq.n	800c3f8 <_raise_r+0x4c>
 800c3e2:	1c59      	adds	r1, r3, #1
 800c3e4:	d103      	bne.n	800c3ee <_raise_r+0x42>
 800c3e6:	2316      	movs	r3, #22
 800c3e8:	6003      	str	r3, [r0, #0]
 800c3ea:	2001      	movs	r0, #1
 800c3ec:	e7e7      	b.n	800c3be <_raise_r+0x12>
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c3f6:	4798      	blx	r3
 800c3f8:	2000      	movs	r0, #0
 800c3fa:	e7e0      	b.n	800c3be <_raise_r+0x12>

0800c3fc <raise>:
 800c3fc:	4b02      	ldr	r3, [pc, #8]	@ (800c408 <raise+0xc>)
 800c3fe:	4601      	mov	r1, r0
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	f7ff bfd3 	b.w	800c3ac <_raise_r>
 800c406:	bf00      	nop
 800c408:	200001c8 	.word	0x200001c8

0800c40c <_kill_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	2300      	movs	r3, #0
 800c410:	4d06      	ldr	r5, [pc, #24]	@ (800c42c <_kill_r+0x20>)
 800c412:	4604      	mov	r4, r0
 800c414:	4608      	mov	r0, r1
 800c416:	4611      	mov	r1, r2
 800c418:	602b      	str	r3, [r5, #0]
 800c41a:	f7f8 f8c0 	bl	800459e <_kill>
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	d102      	bne.n	800c428 <_kill_r+0x1c>
 800c422:	682b      	ldr	r3, [r5, #0]
 800c424:	b103      	cbz	r3, 800c428 <_kill_r+0x1c>
 800c426:	6023      	str	r3, [r4, #0]
 800c428:	bd38      	pop	{r3, r4, r5, pc}
 800c42a:	bf00      	nop
 800c42c:	20000ab0 	.word	0x20000ab0

0800c430 <_getpid_r>:
 800c430:	f7f8 b8ae 	b.w	8004590 <_getpid>

0800c434 <memchr>:
 800c434:	4603      	mov	r3, r0
 800c436:	b510      	push	{r4, lr}
 800c438:	b2c9      	uxtb	r1, r1
 800c43a:	4402      	add	r2, r0
 800c43c:	4293      	cmp	r3, r2
 800c43e:	4618      	mov	r0, r3
 800c440:	d101      	bne.n	800c446 <memchr+0x12>
 800c442:	2000      	movs	r0, #0
 800c444:	e003      	b.n	800c44e <memchr+0x1a>
 800c446:	7804      	ldrb	r4, [r0, #0]
 800c448:	3301      	adds	r3, #1
 800c44a:	428c      	cmp	r4, r1
 800c44c:	d1f6      	bne.n	800c43c <memchr+0x8>
 800c44e:	bd10      	pop	{r4, pc}

0800c450 <__swhatbuf_r>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	460c      	mov	r4, r1
 800c454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c458:	4615      	mov	r5, r2
 800c45a:	2900      	cmp	r1, #0
 800c45c:	461e      	mov	r6, r3
 800c45e:	b096      	sub	sp, #88	@ 0x58
 800c460:	da0c      	bge.n	800c47c <__swhatbuf_r+0x2c>
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	2100      	movs	r1, #0
 800c466:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c46a:	bf14      	ite	ne
 800c46c:	2340      	movne	r3, #64	@ 0x40
 800c46e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c472:	2000      	movs	r0, #0
 800c474:	6031      	str	r1, [r6, #0]
 800c476:	602b      	str	r3, [r5, #0]
 800c478:	b016      	add	sp, #88	@ 0x58
 800c47a:	bd70      	pop	{r4, r5, r6, pc}
 800c47c:	466a      	mov	r2, sp
 800c47e:	f000 f849 	bl	800c514 <_fstat_r>
 800c482:	2800      	cmp	r0, #0
 800c484:	dbed      	blt.n	800c462 <__swhatbuf_r+0x12>
 800c486:	9901      	ldr	r1, [sp, #4]
 800c488:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c48c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c490:	4259      	negs	r1, r3
 800c492:	4159      	adcs	r1, r3
 800c494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c498:	e7eb      	b.n	800c472 <__swhatbuf_r+0x22>

0800c49a <__smakebuf_r>:
 800c49a:	898b      	ldrh	r3, [r1, #12]
 800c49c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c49e:	079d      	lsls	r5, r3, #30
 800c4a0:	4606      	mov	r6, r0
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	d507      	bpl.n	800c4b6 <__smakebuf_r+0x1c>
 800c4a6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	6123      	str	r3, [r4, #16]
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	6163      	str	r3, [r4, #20]
 800c4b2:	b003      	add	sp, #12
 800c4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b6:	466a      	mov	r2, sp
 800c4b8:	ab01      	add	r3, sp, #4
 800c4ba:	f7ff ffc9 	bl	800c450 <__swhatbuf_r>
 800c4be:	9f00      	ldr	r7, [sp, #0]
 800c4c0:	4605      	mov	r5, r0
 800c4c2:	4639      	mov	r1, r7
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	f7fe fdb7 	bl	800b038 <_malloc_r>
 800c4ca:	b948      	cbnz	r0, 800c4e0 <__smakebuf_r+0x46>
 800c4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d0:	059a      	lsls	r2, r3, #22
 800c4d2:	d4ee      	bmi.n	800c4b2 <__smakebuf_r+0x18>
 800c4d4:	f023 0303 	bic.w	r3, r3, #3
 800c4d8:	f043 0302 	orr.w	r3, r3, #2
 800c4dc:	81a3      	strh	r3, [r4, #12]
 800c4de:	e7e2      	b.n	800c4a6 <__smakebuf_r+0xc>
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ea:	81a3      	strh	r3, [r4, #12]
 800c4ec:	9b01      	ldr	r3, [sp, #4]
 800c4ee:	6020      	str	r0, [r4, #0]
 800c4f0:	b15b      	cbz	r3, 800c50a <__smakebuf_r+0x70>
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4f8:	f000 f81e 	bl	800c538 <_isatty_r>
 800c4fc:	b128      	cbz	r0, 800c50a <__smakebuf_r+0x70>
 800c4fe:	89a3      	ldrh	r3, [r4, #12]
 800c500:	f023 0303 	bic.w	r3, r3, #3
 800c504:	f043 0301 	orr.w	r3, r3, #1
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	431d      	orrs	r5, r3
 800c50e:	81a5      	strh	r5, [r4, #12]
 800c510:	e7cf      	b.n	800c4b2 <__smakebuf_r+0x18>
	...

0800c514 <_fstat_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	2300      	movs	r3, #0
 800c518:	4d06      	ldr	r5, [pc, #24]	@ (800c534 <_fstat_r+0x20>)
 800c51a:	4604      	mov	r4, r0
 800c51c:	4608      	mov	r0, r1
 800c51e:	4611      	mov	r1, r2
 800c520:	602b      	str	r3, [r5, #0]
 800c522:	f7f8 f89b 	bl	800465c <_fstat>
 800c526:	1c43      	adds	r3, r0, #1
 800c528:	d102      	bne.n	800c530 <_fstat_r+0x1c>
 800c52a:	682b      	ldr	r3, [r5, #0]
 800c52c:	b103      	cbz	r3, 800c530 <_fstat_r+0x1c>
 800c52e:	6023      	str	r3, [r4, #0]
 800c530:	bd38      	pop	{r3, r4, r5, pc}
 800c532:	bf00      	nop
 800c534:	20000ab0 	.word	0x20000ab0

0800c538 <_isatty_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	2300      	movs	r3, #0
 800c53c:	4d05      	ldr	r5, [pc, #20]	@ (800c554 <_isatty_r+0x1c>)
 800c53e:	4604      	mov	r4, r0
 800c540:	4608      	mov	r0, r1
 800c542:	602b      	str	r3, [r5, #0]
 800c544:	f7f8 f899 	bl	800467a <_isatty>
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d102      	bne.n	800c552 <_isatty_r+0x1a>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	b103      	cbz	r3, 800c552 <_isatty_r+0x1a>
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	bd38      	pop	{r3, r4, r5, pc}
 800c554:	20000ab0 	.word	0x20000ab0

0800c558 <expf>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4605      	mov	r5, r0
 800c55c:	f000 f892 	bl	800c684 <__ieee754_expf>
 800c560:	4604      	mov	r4, r0
 800c562:	4628      	mov	r0, r5
 800c564:	f000 f81e 	bl	800c5a4 <finitef>
 800c568:	b150      	cbz	r0, 800c580 <expf+0x28>
 800c56a:	4628      	mov	r0, r5
 800c56c:	490b      	ldr	r1, [pc, #44]	@ (800c59c <expf+0x44>)
 800c56e:	f7f4 fd87 	bl	8001080 <__aeabi_fcmpgt>
 800c572:	b138      	cbz	r0, 800c584 <expf+0x2c>
 800c574:	f7fe f97a 	bl	800a86c <__errno>
 800c578:	2322      	movs	r3, #34	@ 0x22
 800c57a:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 800c57e:	6003      	str	r3, [r0, #0]
 800c580:	4620      	mov	r0, r4
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	4628      	mov	r0, r5
 800c586:	4906      	ldr	r1, [pc, #24]	@ (800c5a0 <expf+0x48>)
 800c588:	f7f4 fd5c 	bl	8001044 <__aeabi_fcmplt>
 800c58c:	2800      	cmp	r0, #0
 800c58e:	d0f7      	beq.n	800c580 <expf+0x28>
 800c590:	f7fe f96c 	bl	800a86c <__errno>
 800c594:	2322      	movs	r3, #34	@ 0x22
 800c596:	2400      	movs	r4, #0
 800c598:	6003      	str	r3, [r0, #0]
 800c59a:	e7f1      	b.n	800c580 <expf+0x28>
 800c59c:	42b17217 	.word	0x42b17217
 800c5a0:	c2cff1b5 	.word	0xc2cff1b5

0800c5a4 <finitef>:
 800c5a4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c5a8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c5ac:	bfac      	ite	ge
 800c5ae:	2000      	movge	r0, #0
 800c5b0:	2001      	movlt	r0, #1
 800c5b2:	4770      	bx	lr

0800c5b4 <fmaxf>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	460d      	mov	r5, r1
 800c5ba:	f000 f825 	bl	800c608 <__fpclassifyf>
 800c5be:	b910      	cbnz	r0, 800c5c6 <fmaxf+0x12>
 800c5c0:	462c      	mov	r4, r5
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	bd38      	pop	{r3, r4, r5, pc}
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f000 f81e 	bl	800c608 <__fpclassifyf>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d0f8      	beq.n	800c5c2 <fmaxf+0xe>
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f7f4 fd54 	bl	8001080 <__aeabi_fcmpgt>
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d0f1      	beq.n	800c5c0 <fmaxf+0xc>
 800c5dc:	e7f1      	b.n	800c5c2 <fmaxf+0xe>

0800c5de <fminf>:
 800c5de:	b538      	push	{r3, r4, r5, lr}
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	460d      	mov	r5, r1
 800c5e4:	f000 f810 	bl	800c608 <__fpclassifyf>
 800c5e8:	b910      	cbnz	r0, 800c5f0 <fminf+0x12>
 800c5ea:	462c      	mov	r4, r5
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	bd38      	pop	{r3, r4, r5, pc}
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f000 f809 	bl	800c608 <__fpclassifyf>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d0f8      	beq.n	800c5ec <fminf+0xe>
 800c5fa:	4629      	mov	r1, r5
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f7f4 fd21 	bl	8001044 <__aeabi_fcmplt>
 800c602:	2800      	cmp	r0, #0
 800c604:	d0f1      	beq.n	800c5ea <fminf+0xc>
 800c606:	e7f1      	b.n	800c5ec <fminf+0xe>

0800c608 <__fpclassifyf>:
 800c608:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800c60c:	d00d      	beq.n	800c62a <__fpclassifyf+0x22>
 800c60e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c612:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c616:	d30a      	bcc.n	800c62e <__fpclassifyf+0x26>
 800c618:	4b07      	ldr	r3, [pc, #28]	@ (800c638 <__fpclassifyf+0x30>)
 800c61a:	1e42      	subs	r2, r0, #1
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d908      	bls.n	800c632 <__fpclassifyf+0x2a>
 800c620:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c624:	4258      	negs	r0, r3
 800c626:	4158      	adcs	r0, r3
 800c628:	4770      	bx	lr
 800c62a:	2002      	movs	r0, #2
 800c62c:	4770      	bx	lr
 800c62e:	2004      	movs	r0, #4
 800c630:	4770      	bx	lr
 800c632:	2003      	movs	r0, #3
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop
 800c638:	007ffffe 	.word	0x007ffffe

0800c63c <roundf>:
 800c63c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c640:	3b7f      	subs	r3, #127	@ 0x7f
 800c642:	2b16      	cmp	r3, #22
 800c644:	4601      	mov	r1, r0
 800c646:	b510      	push	{r4, lr}
 800c648:	dc14      	bgt.n	800c674 <roundf+0x38>
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	da07      	bge.n	800c65e <roundf+0x22>
 800c64e:	3301      	adds	r3, #1
 800c650:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800c654:	d101      	bne.n	800c65a <roundf+0x1e>
 800c656:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800c65a:	4608      	mov	r0, r1
 800c65c:	bd10      	pop	{r4, pc}
 800c65e:	4a08      	ldr	r2, [pc, #32]	@ (800c680 <roundf+0x44>)
 800c660:	411a      	asrs	r2, r3
 800c662:	4202      	tst	r2, r0
 800c664:	d0f9      	beq.n	800c65a <roundf+0x1e>
 800c666:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c66a:	4119      	asrs	r1, r3
 800c66c:	4401      	add	r1, r0
 800c66e:	ea21 0102 	bic.w	r1, r1, r2
 800c672:	e7f2      	b.n	800c65a <roundf+0x1e>
 800c674:	2b80      	cmp	r3, #128	@ 0x80
 800c676:	d1f0      	bne.n	800c65a <roundf+0x1e>
 800c678:	f7f4 fa3e 	bl	8000af8 <__addsf3>
 800c67c:	4601      	mov	r1, r0
 800c67e:	e7ec      	b.n	800c65a <roundf+0x1e>
 800c680:	007fffff 	.word	0x007fffff

0800c684 <__ieee754_expf>:
 800c684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c688:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c68c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c690:	4604      	mov	r4, r0
 800c692:	d904      	bls.n	800c69e <__ieee754_expf+0x1a>
 800c694:	4601      	mov	r1, r0
 800c696:	f7f4 fa2f 	bl	8000af8 <__addsf3>
 800c69a:	4604      	mov	r4, r0
 800c69c:	e005      	b.n	800c6aa <__ieee754_expf+0x26>
 800c69e:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800c6a2:	d105      	bne.n	800c6b0 <__ieee754_expf+0x2c>
 800c6a4:	2e00      	cmp	r6, #0
 800c6a6:	f040 80c3 	bne.w	800c830 <__ieee754_expf+0x1ac>
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6b0:	4960      	ldr	r1, [pc, #384]	@ (800c834 <__ieee754_expf+0x1b0>)
 800c6b2:	4288      	cmp	r0, r1
 800c6b4:	dd04      	ble.n	800c6c0 <__ieee754_expf+0x3c>
 800c6b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	f000 b8f3 	b.w	800c8a6 <__math_oflowf>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	da07      	bge.n	800c6d4 <__ieee754_expf+0x50>
 800c6c4:	4a5c      	ldr	r2, [pc, #368]	@ (800c838 <__ieee754_expf+0x1b4>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d904      	bls.n	800c6d4 <__ieee754_expf+0x50>
 800c6ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6ce:	2000      	movs	r0, #0
 800c6d0:	f000 b8e5 	b.w	800c89e <__math_uflowf>
 800c6d4:	4a59      	ldr	r2, [pc, #356]	@ (800c83c <__ieee754_expf+0x1b8>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d971      	bls.n	800c7be <__ieee754_expf+0x13a>
 800c6da:	4a59      	ldr	r2, [pc, #356]	@ (800c840 <__ieee754_expf+0x1bc>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d851      	bhi.n	800c784 <__ieee754_expf+0x100>
 800c6e0:	4b58      	ldr	r3, [pc, #352]	@ (800c844 <__ieee754_expf+0x1c0>)
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c6e8:	f7f4 fa04 	bl	8000af4 <__aeabi_fsub>
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	4b56      	ldr	r3, [pc, #344]	@ (800c848 <__ieee754_expf+0x1c4>)
 800c6f0:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800c6f4:	f086 0301 	eor.w	r3, r6, #1
 800c6f8:	eba3 0806 	sub.w	r8, r3, r6
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	4628      	mov	r0, r5
 800c700:	f7f4 f9f8 	bl	8000af4 <__aeabi_fsub>
 800c704:	4604      	mov	r4, r0
 800c706:	4621      	mov	r1, r4
 800c708:	4620      	mov	r0, r4
 800c70a:	f7f4 fafd 	bl	8000d08 <__aeabi_fmul>
 800c70e:	4606      	mov	r6, r0
 800c710:	494e      	ldr	r1, [pc, #312]	@ (800c84c <__ieee754_expf+0x1c8>)
 800c712:	f7f4 faf9 	bl	8000d08 <__aeabi_fmul>
 800c716:	494e      	ldr	r1, [pc, #312]	@ (800c850 <__ieee754_expf+0x1cc>)
 800c718:	f7f4 f9ec 	bl	8000af4 <__aeabi_fsub>
 800c71c:	4631      	mov	r1, r6
 800c71e:	f7f4 faf3 	bl	8000d08 <__aeabi_fmul>
 800c722:	494c      	ldr	r1, [pc, #304]	@ (800c854 <__ieee754_expf+0x1d0>)
 800c724:	f7f4 f9e8 	bl	8000af8 <__addsf3>
 800c728:	4631      	mov	r1, r6
 800c72a:	f7f4 faed 	bl	8000d08 <__aeabi_fmul>
 800c72e:	494a      	ldr	r1, [pc, #296]	@ (800c858 <__ieee754_expf+0x1d4>)
 800c730:	f7f4 f9e0 	bl	8000af4 <__aeabi_fsub>
 800c734:	4631      	mov	r1, r6
 800c736:	f7f4 fae7 	bl	8000d08 <__aeabi_fmul>
 800c73a:	4948      	ldr	r1, [pc, #288]	@ (800c85c <__ieee754_expf+0x1d8>)
 800c73c:	f7f4 f9dc 	bl	8000af8 <__addsf3>
 800c740:	4631      	mov	r1, r6
 800c742:	f7f4 fae1 	bl	8000d08 <__aeabi_fmul>
 800c746:	4601      	mov	r1, r0
 800c748:	4620      	mov	r0, r4
 800c74a:	f7f4 f9d3 	bl	8000af4 <__aeabi_fsub>
 800c74e:	4601      	mov	r1, r0
 800c750:	4606      	mov	r6, r0
 800c752:	4620      	mov	r0, r4
 800c754:	f7f4 fad8 	bl	8000d08 <__aeabi_fmul>
 800c758:	4681      	mov	r9, r0
 800c75a:	f1b8 0f00 	cmp.w	r8, #0
 800c75e:	d143      	bne.n	800c7e8 <__ieee754_expf+0x164>
 800c760:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c764:	4630      	mov	r0, r6
 800c766:	f7f4 f9c5 	bl	8000af4 <__aeabi_fsub>
 800c76a:	4601      	mov	r1, r0
 800c76c:	4648      	mov	r0, r9
 800c76e:	f7f4 fb7f 	bl	8000e70 <__aeabi_fdiv>
 800c772:	4621      	mov	r1, r4
 800c774:	f7f4 f9be 	bl	8000af4 <__aeabi_fsub>
 800c778:	4601      	mov	r1, r0
 800c77a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c77e:	f7f4 f9b9 	bl	8000af4 <__aeabi_fsub>
 800c782:	e78a      	b.n	800c69a <__ieee754_expf+0x16>
 800c784:	4936      	ldr	r1, [pc, #216]	@ (800c860 <__ieee754_expf+0x1dc>)
 800c786:	4620      	mov	r0, r4
 800c788:	f7f4 fabe 	bl	8000d08 <__aeabi_fmul>
 800c78c:	4b35      	ldr	r3, [pc, #212]	@ (800c864 <__ieee754_expf+0x1e0>)
 800c78e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c792:	f7f4 f9b1 	bl	8000af8 <__addsf3>
 800c796:	f7f4 fc7d 	bl	8001094 <__aeabi_f2iz>
 800c79a:	4680      	mov	r8, r0
 800c79c:	f7f4 fa60 	bl	8000c60 <__aeabi_i2f>
 800c7a0:	4931      	ldr	r1, [pc, #196]	@ (800c868 <__ieee754_expf+0x1e4>)
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	f7f4 fab0 	bl	8000d08 <__aeabi_fmul>
 800c7a8:	4601      	mov	r1, r0
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	f7f4 f9a2 	bl	8000af4 <__aeabi_fsub>
 800c7b0:	492e      	ldr	r1, [pc, #184]	@ (800c86c <__ieee754_expf+0x1e8>)
 800c7b2:	4605      	mov	r5, r0
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	f7f4 faa7 	bl	8000d08 <__aeabi_fmul>
 800c7ba:	4607      	mov	r7, r0
 800c7bc:	e79e      	b.n	800c6fc <__ieee754_expf+0x78>
 800c7be:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c7c2:	d20c      	bcs.n	800c7de <__ieee754_expf+0x15a>
 800c7c4:	492a      	ldr	r1, [pc, #168]	@ (800c870 <__ieee754_expf+0x1ec>)
 800c7c6:	4620      	mov	r0, r4
 800c7c8:	f7f4 f996 	bl	8000af8 <__addsf3>
 800c7cc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c7d0:	f7f4 fc56 	bl	8001080 <__aeabi_fcmpgt>
 800c7d4:	b130      	cbz	r0, 800c7e4 <__ieee754_expf+0x160>
 800c7d6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c7da:	4620      	mov	r0, r4
 800c7dc:	e75b      	b.n	800c696 <__ieee754_expf+0x12>
 800c7de:	f04f 0800 	mov.w	r8, #0
 800c7e2:	e790      	b.n	800c706 <__ieee754_expf+0x82>
 800c7e4:	4680      	mov	r8, r0
 800c7e6:	e78e      	b.n	800c706 <__ieee754_expf+0x82>
 800c7e8:	4631      	mov	r1, r6
 800c7ea:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800c7ee:	f7f4 f981 	bl	8000af4 <__aeabi_fsub>
 800c7f2:	4601      	mov	r1, r0
 800c7f4:	4648      	mov	r0, r9
 800c7f6:	f7f4 fb3b 	bl	8000e70 <__aeabi_fdiv>
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	4638      	mov	r0, r7
 800c7fe:	f7f4 f979 	bl	8000af4 <__aeabi_fsub>
 800c802:	4629      	mov	r1, r5
 800c804:	f7f4 f976 	bl	8000af4 <__aeabi_fsub>
 800c808:	4601      	mov	r1, r0
 800c80a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c80e:	f7f4 f971 	bl	8000af4 <__aeabi_fsub>
 800c812:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800c816:	db02      	blt.n	800c81e <__ieee754_expf+0x19a>
 800c818:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 800c81c:	e745      	b.n	800c6aa <__ieee754_expf+0x26>
 800c81e:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800c822:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800c826:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800c82a:	f7f4 fa6d 	bl	8000d08 <__aeabi_fmul>
 800c82e:	e734      	b.n	800c69a <__ieee754_expf+0x16>
 800c830:	2400      	movs	r4, #0
 800c832:	e73a      	b.n	800c6aa <__ieee754_expf+0x26>
 800c834:	42b17217 	.word	0x42b17217
 800c838:	42cff1b5 	.word	0x42cff1b5
 800c83c:	3eb17218 	.word	0x3eb17218
 800c840:	3f851591 	.word	0x3f851591
 800c844:	0800cd6c 	.word	0x0800cd6c
 800c848:	0800cd64 	.word	0x0800cd64
 800c84c:	3331bb4c 	.word	0x3331bb4c
 800c850:	35ddea0e 	.word	0x35ddea0e
 800c854:	388ab355 	.word	0x388ab355
 800c858:	3b360b61 	.word	0x3b360b61
 800c85c:	3e2aaaab 	.word	0x3e2aaaab
 800c860:	3fb8aa3b 	.word	0x3fb8aa3b
 800c864:	0800cd74 	.word	0x0800cd74
 800c868:	3f317180 	.word	0x3f317180
 800c86c:	3717f7d1 	.word	0x3717f7d1
 800c870:	7149f2ca 	.word	0x7149f2ca

0800c874 <with_errnof>:
 800c874:	b538      	push	{r3, r4, r5, lr}
 800c876:	4604      	mov	r4, r0
 800c878:	460d      	mov	r5, r1
 800c87a:	f7fd fff7 	bl	800a86c <__errno>
 800c87e:	6005      	str	r5, [r0, #0]
 800c880:	4620      	mov	r0, r4
 800c882:	bd38      	pop	{r3, r4, r5, pc}

0800c884 <xflowf>:
 800c884:	b508      	push	{r3, lr}
 800c886:	b140      	cbz	r0, 800c89a <xflowf+0x16>
 800c888:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800c88c:	f7f4 fa3c 	bl	8000d08 <__aeabi_fmul>
 800c890:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c894:	2122      	movs	r1, #34	@ 0x22
 800c896:	f7ff bfed 	b.w	800c874 <with_errnof>
 800c89a:	4608      	mov	r0, r1
 800c89c:	e7f6      	b.n	800c88c <xflowf+0x8>

0800c89e <__math_uflowf>:
 800c89e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800c8a2:	f7ff bfef 	b.w	800c884 <xflowf>

0800c8a6 <__math_oflowf>:
 800c8a6:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800c8aa:	f7ff bfeb 	b.w	800c884 <xflowf>
	...

0800c8b0 <_init>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	bf00      	nop
 800c8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b6:	bc08      	pop	{r3}
 800c8b8:	469e      	mov	lr, r3
 800c8ba:	4770      	bx	lr

0800c8bc <_fini>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	bf00      	nop
 800c8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c2:	bc08      	pop	{r3}
 800c8c4:	469e      	mov	lr, r3
 800c8c6:	4770      	bx	lr
