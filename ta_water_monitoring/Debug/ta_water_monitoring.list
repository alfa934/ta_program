
ta_water_monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c780  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  0800c890  0800c890  0000d890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd44  0800cd44  0000e218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd44  0800cd44  0000dd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd4c  0800cd4c  0000e218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd4c  0800cd4c  0000dd4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd50  0800cd50  0000dd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800cd54  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a8  20000218  0800cf6c  0000e218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac0  0800cf6c  0000eac0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143b5  00000000  00000000  0000e241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c69  00000000  00000000  000225f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  00025260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9e  00000000  00000000  000264f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5fb  00000000  00000000  0002738e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a05  00000000  00000000  00041989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094efc  00000000  00000000  0005838e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed28a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062cc  00000000  00000000  000ed2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000f359c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c878 	.word	0x0800c878

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800c878 	.word	0x0800c878

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <__aeabi_f2uiz>:
 80010e0:	0042      	lsls	r2, r0, #1
 80010e2:	d20e      	bcs.n	8001102 <__aeabi_f2uiz+0x22>
 80010e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010e8:	d30b      	bcc.n	8001102 <__aeabi_f2uiz+0x22>
 80010ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f2:	d409      	bmi.n	8001108 <__aeabi_f2uiz+0x28>
 80010f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr
 8001108:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800110c:	d101      	bne.n	8001112 <__aeabi_f2uiz+0x32>
 800110e:	0242      	lsls	r2, r0, #9
 8001110:	d102      	bne.n	8001118 <__aeabi_f2uiz+0x38>
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	4770      	bx	lr
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <__aeabi_d2lz>:
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	2200      	movs	r2, #0
 8001124:	2300      	movs	r3, #0
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	f7ff fc47 	bl	80009bc <__aeabi_dcmplt>
 800112e:	b928      	cbnz	r0, 800113c <__aeabi_d2lz+0x1c>
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001138:	f000 b80a 	b.w	8001150 <__aeabi_d2ulz>
 800113c:	4620      	mov	r0, r4
 800113e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001142:	f000 f805 	bl	8001150 <__aeabi_d2ulz>
 8001146:	4240      	negs	r0, r0
 8001148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800114c:	bd38      	pop	{r3, r4, r5, pc}
 800114e:	bf00      	nop

08001150 <__aeabi_d2ulz>:
 8001150:	b5d0      	push	{r4, r6, r7, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <__aeabi_d2ulz+0x34>)
 8001156:	4606      	mov	r6, r0
 8001158:	460f      	mov	r7, r1
 800115a:	f7ff f9bd 	bl	80004d8 <__aeabi_dmul>
 800115e:	f7ff fc55 	bl	8000a0c <__aeabi_d2uiz>
 8001162:	4604      	mov	r4, r0
 8001164:	f7ff f93e 	bl	80003e4 <__aeabi_ui2d>
 8001168:	2200      	movs	r2, #0
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <__aeabi_d2ulz+0x38>)
 800116c:	f7ff f9b4 	bl	80004d8 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4630      	mov	r0, r6
 8001176:	4639      	mov	r1, r7
 8001178:	f7fe fff6 	bl	8000168 <__aeabi_dsub>
 800117c:	f7ff fc46 	bl	8000a0c <__aeabi_d2uiz>
 8001180:	4621      	mov	r1, r4
 8001182:	bdd0      	pop	{r4, r6, r7, pc}
 8001184:	3df00000 	.word	0x3df00000
 8001188:	41f00000 	.word	0x41f00000

0800118c <MS5837_Init>:
	return;
}


void MS5837_Init( I2C_HandleTypeDef *I2Cx, MS5837_t *sensor, uint16_t delay_ms )
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4613      	mov	r3, r2
 8001198:	80fb      	strh	r3, [r7, #6]
	//--- minimum time 40 ms
	sensor -> delay_ms = delay_ms - 1; //--- Offset 1, since counter starts at 0
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	3b01      	subs	r3, #1
 800119e:	b29a      	uxth	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	825a      	strh	r2, [r3, #18]

    uint8_t cmd = MS5837_RESET_CMD;
 80011a4:	231e      	movs	r3, #30
 80011a6:	74fb      	strb	r3, [r7, #19]

    HAL_I2C_Master_Transmit(I2Cx, MS5837_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY);
 80011a8:	f107 0213 	add.w	r2, r7, #19
 80011ac:	f04f 33ff 	mov.w	r3, #4294967295
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	21ec      	movs	r1, #236	@ 0xec
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f004 fe64 	bl	8005e84 <HAL_I2C_Master_Transmit>

    HAL_Delay(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f003 fb1b 	bl	80047f8 <HAL_Delay>

    uint8_t data[2];

    for(int i = 0; i < 8; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	e02b      	b.n	8001220 <MS5837_Init+0x94>
    {
        cmd = MS5837_PROM_READ + (i * 2);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3350      	adds	r3, #80	@ 0x50
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	74fb      	strb	r3, [r7, #19]

        HAL_I2C_Master_Transmit(I2Cx, MS5837_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY);
 80011d4:	f107 0213 	add.w	r2, r7, #19
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	21ec      	movs	r1, #236	@ 0xec
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f004 fe4e 	bl	8005e84 <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Receive (I2Cx, MS5837_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 80011e8:	f107 0210 	add.w	r2, r7, #16
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2302      	movs	r3, #2
 80011f4:	21ec      	movs	r1, #236	@ 0xec
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f004 ff42 	bl	8006080 <HAL_I2C_Master_Receive>

        sensor -> prom_coefficients[i] = (data[0] << 8) | data[1];
 80011fc:	7c3b      	ldrb	r3, [r7, #16]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7c7b      	ldrb	r3, [r7, #17]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	b21b      	sxth	r3, r3
 800120c:	b299      	uxth	r1, r3
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	4413      	add	r3, r2
 8001216:	460a      	mov	r2, r1
 8001218:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < 8; i++)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	3301      	adds	r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b07      	cmp	r3, #7
 8001224:	ddd0      	ble.n	80011c8 <MS5837_Init+0x3c>
    }

    return;
 8001226:	bf00      	nop
}
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <MS5837_StartConversion>:


void MS5837_StartConversion( I2C_HandleTypeDef *I2Cx, MS5837_t *sensor, uint8_t command )
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b088      	sub	sp, #32
 8001232:	af02      	add	r7, sp, #8
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	4613      	mov	r3, r2
 800123a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status;

    sensor -> current_command = command;
 800123c:	79fa      	ldrb	r2, [r7, #7]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
    sensor -> conversion_start_time = HAL_GetTick();
 8001242:	f003 facf 	bl	80047e4 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	615a      	str	r2, [r3, #20]

    status = HAL_I2C_Master_Transmit(I2Cx, MS5837_I2C_ADDR, &command, 1, HAL_MAX_DELAY);
 800124c:	1dfa      	adds	r2, r7, #7
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	21ec      	movs	r1, #236	@ 0xec
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f004 fe13 	bl	8005e84 <HAL_I2C_Master_Transmit>
 800125e:	4603      	mov	r3, r0
 8001260:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 8001262:	7dfb      	ldrb	r3, [r7, #23]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d004      	beq.n	8001272 <MS5837_StartConversion+0x44>
    {
        sensor -> state = START_CONVERT_D1;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2200      	movs	r2, #0
 800126c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return;
 8001270:	e000      	b.n	8001274 <MS5837_StartConversion+0x46>
    }

    return;
 8001272:	bf00      	nop
}
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <MS5837_ReadADC>:


void MS5837_ReadADC( I2C_HandleTypeDef *I2Cx, MS5837_t *sensor )
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b088      	sub	sp, #32
 800127e:	af02      	add	r7, sp, #8
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	6039      	str	r1, [r7, #0]
    uint8_t cmd = MS5837_ADC_READ;
 8001284:	2300      	movs	r3, #0
 8001286:	73fb      	strb	r3, [r7, #15]
    uint8_t data[3];
    HAL_StatusTypeDef status;

    status = HAL_I2C_Master_Transmit(I2Cx, MS5837_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY);
 8001288:	f107 020f 	add.w	r2, r7, #15
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	21ec      	movs	r1, #236	@ 0xec
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f004 fdf4 	bl	8005e84 <HAL_I2C_Master_Transmit>
 800129c:	4603      	mov	r3, r0
 800129e:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80012a0:	7dfb      	ldrb	r3, [r7, #23]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d004      	beq.n	80012b0 <MS5837_ReadADC+0x36>
    {
        sensor -> state = START_CONVERT_D1;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return;
 80012ae:	e02b      	b.n	8001308 <MS5837_ReadADC+0x8e>
    }

    status = HAL_I2C_Master_Receive(I2Cx, MS5837_I2C_ADDR, data, 3, HAL_MAX_DELAY);
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2303      	movs	r3, #3
 80012bc:	21ec      	movs	r1, #236	@ 0xec
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f004 fede 	bl	8006080 <HAL_I2C_Master_Receive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK)
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d004      	beq.n	80012d8 <MS5837_ReadADC+0x5e>
    {
        sensor -> state = START_CONVERT_D1;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return;
 80012d6:	e017      	b.n	8001308 <MS5837_ReadADC+0x8e>
    }

    uint32_t adc_value = (data[0] << 16) | (data[1] << 8) | data[2];
 80012d8:	7b3b      	ldrb	r3, [r7, #12]
 80012da:	041a      	lsls	r2, r3, #16
 80012dc:	7b7b      	ldrb	r3, [r7, #13]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	4313      	orrs	r3, r2
 80012e2:	7bba      	ldrb	r2, [r7, #14]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]

    if (sensor -> current_command == MS5837_CONVERT_D1)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b4a      	cmp	r3, #74	@ 0x4a
 80012ee:	d103      	bne.n	80012f8 <MS5837_ReadADC+0x7e>
    {
    	sensor -> pressure_D1 = adc_value;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	621a      	str	r2, [r3, #32]
    else if (sensor -> current_command == MS5837_CONVERT_D2)
    {
    	sensor -> temperature_D2 = adc_value;
    }

    return;
 80012f6:	e006      	b.n	8001306 <MS5837_ReadADC+0x8c>
    else if (sensor -> current_command == MS5837_CONVERT_D2)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b5a      	cmp	r3, #90	@ 0x5a
 80012fe:	d102      	bne.n	8001306 <MS5837_ReadADC+0x8c>
    	sensor -> temperature_D2 = adc_value;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	625a      	str	r2, [r3, #36]	@ 0x24
    return;
 8001306:	bf00      	nop
}
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <MS5837_Calculation>:


void MS5837_Calculation(MS5837_t *sensor)
{
 8001310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001314:	b0d6      	sub	sp, #344	@ 0x158
 8001316:	af00      	add	r7, sp, #0
 8001318:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
	// Given C1-C6 and D1, D2, calculated TEMP and P
	// Do conversion first and then second order temp compensation
	int32_t dT 		= 0;
 800131c:	2300      	movs	r3, #0
 800131e:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
	int64_t SENS 	= 0;
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	int64_t OFF 	= 0;
 800132e:	f04f 0200 	mov.w	r2, #0
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	int32_t SENSi 	= 0;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	int32_t OFFi 	= 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
	int32_t Ti 		= 0;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
	int64_t OFF2 	= 0;
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
	int64_t SENS2 	= 0;
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	f04f 0300 	mov.w	r3, #0
 8001360:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	//--- Terms called
	dT = sensor -> temperature_D2 - (uint32_t)(sensor -> prom_coefficients[5]) * 256;
 8001364:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800136a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800136e:	899b      	ldrh	r3, [r3, #12]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

	SENS = (int64_t)(sensor -> prom_coefficients[1]) * 32768 + ((int64_t)(sensor -> prom_coefficients[3])*dT) / 256;
 8001378:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800137c:	889b      	ldrh	r3, [r3, #4]
 800137e:	b29b      	uxth	r3, r3
 8001380:	2200      	movs	r2, #0
 8001382:	4698      	mov	r8, r3
 8001384:	4691      	mov	r9, r2
 8001386:	f04f 0400 	mov.w	r4, #0
 800138a:	f04f 0500 	mov.w	r5, #0
 800138e:	ea4f 35c9 	mov.w	r5, r9, lsl #15
 8001392:	ea45 4558 	orr.w	r5, r5, r8, lsr #17
 8001396:	ea4f 34c8 	mov.w	r4, r8, lsl #15
 800139a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800139e:	891b      	ldrh	r3, [r3, #8]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2200      	movs	r2, #0
 80013a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80013a8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80013ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80013b0:	17da      	asrs	r2, r3, #31
 80013b2:	469a      	mov	sl, r3
 80013b4:	4693      	mov	fp, r2
 80013b6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80013ba:	460b      	mov	r3, r1
 80013bc:	fb0a f203 	mul.w	r2, sl, r3
 80013c0:	4603      	mov	r3, r0
 80013c2:	fb03 f30b 	mul.w	r3, r3, fp
 80013c6:	4413      	add	r3, r2
 80013c8:	4602      	mov	r2, r0
 80013ca:	fba2 210a 	umull	r2, r1, r2, sl
 80013ce:	f8c7 111c 	str.w	r1, [r7, #284]	@ 0x11c
 80013d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80013d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80013da:	4413      	add	r3, r2
 80013dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80013e0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	da07      	bge.n	80013f8 <MS5837_Calculation+0xe8>
 80013e8:	f112 01ff 	adds.w	r1, r2, #255	@ 0xff
 80013ec:	66b9      	str	r1, [r7, #104]	@ 0x68
 80013ee:	f143 0300 	adc.w	r3, r3, #0
 80013f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013f4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80013f8:	f04f 0000 	mov.w	r0, #0
 80013fc:	f04f 0100 	mov.w	r1, #0
 8001400:	0a10      	lsrs	r0, r2, #8
 8001402:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001406:	1219      	asrs	r1, r3, #8
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	18a1      	adds	r1, r4, r2
 800140e:	6639      	str	r1, [r7, #96]	@ 0x60
 8001410:	eb45 0303 	adc.w	r3, r5, r3
 8001414:	667b      	str	r3, [r7, #100]	@ 0x64
 8001416:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 800141a:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
	OFF  = (int64_t)(sensor -> prom_coefficients[2]) * 65536 + ((int64_t)(sensor -> prom_coefficients[4])*dT) / 128;
 800141e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001422:	88db      	ldrh	r3, [r3, #6]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800142c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001430:	f04f 0400 	mov.w	r4, #0
 8001434:	f04f 0500 	mov.w	r5, #0
 8001438:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800143c:	4613      	mov	r3, r2
 800143e:	041d      	lsls	r5, r3, #16
 8001440:	4613      	mov	r3, r2
 8001442:	460a      	mov	r2, r1
 8001444:	4611      	mov	r1, r2
 8001446:	ea45 4511 	orr.w	r5, r5, r1, lsr #16
 800144a:	4613      	mov	r3, r2
 800144c:	041c      	lsls	r4, r3, #16
 800144e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001452:	895b      	ldrh	r3, [r3, #10]
 8001454:	b29b      	uxth	r3, r3
 8001456:	2200      	movs	r2, #0
 8001458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800145c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001460:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001464:	17da      	asrs	r2, r3, #31
 8001466:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800146a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800146e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	@ 0xd8
 8001472:	460b      	mov	r3, r1
 8001474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001478:	4642      	mov	r2, r8
 800147a:	fb02 f203 	mul.w	r2, r2, r3
 800147e:	464b      	mov	r3, r9
 8001480:	4684      	mov	ip, r0
 8001482:	fb0c f303 	mul.w	r3, ip, r3
 8001486:	4413      	add	r3, r2
 8001488:	4602      	mov	r2, r0
 800148a:	4641      	mov	r1, r8
 800148c:	fba2 2101 	umull	r2, r1, r2, r1
 8001490:	f8c7 1114 	str.w	r1, [r7, #276]	@ 0x114
 8001494:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8001498:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800149c:	4413      	add	r3, r2
 800149e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80014a2:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da07      	bge.n	80014ba <MS5837_Calculation+0x1aa>
 80014aa:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 80014ae:	65b9      	str	r1, [r7, #88]	@ 0x58
 80014b0:	f143 0300 	adc.w	r3, r3, #0
 80014b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80014b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80014ba:	f04f 0000 	mov.w	r0, #0
 80014be:	f04f 0100 	mov.w	r1, #0
 80014c2:	09d0      	lsrs	r0, r2, #7
 80014c4:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80014c8:	11d9      	asrs	r1, r3, #7
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	18a1      	adds	r1, r4, r2
 80014d0:	6539      	str	r1, [r7, #80]	@ 0x50
 80014d2:	eb45 0303 	adc.w	r3, r5, r3
 80014d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80014d8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80014dc:	e9c7 344e 	strd	r3, r4, [r7, #312]	@ 0x138
	sensor -> pressure_raw = (sensor -> pressure_D1 * SENS / (2097152) - OFF) / (8192);
 80014e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80014ec:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80014f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80014f4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80014f8:	462a      	mov	r2, r5
 80014fa:	fb02 f203 	mul.w	r2, r2, r3
 80014fe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001502:	4621      	mov	r1, r4
 8001504:	fb01 f303 	mul.w	r3, r1, r3
 8001508:	441a      	add	r2, r3
 800150a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800150e:	4621      	mov	r1, r4
 8001510:	fba3 3101 	umull	r3, r1, r3, r1
 8001514:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8001518:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800151c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001520:	18d3      	adds	r3, r2, r3
 8001522:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8001526:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800152a:	2b00      	cmp	r3, #0
 800152c:	da07      	bge.n	800153e <MS5837_Calculation+0x22e>
 800152e:	4996      	ldr	r1, [pc, #600]	@ (8001788 <MS5837_Calculation+0x478>)
 8001530:	1851      	adds	r1, r2, r1
 8001532:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001534:	f143 0300 	adc.w	r3, r3, #0
 8001538:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800153a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800153e:	f04f 0000 	mov.w	r0, #0
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	0d50      	lsrs	r0, r2, #21
 8001548:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800154c:	1559      	asrs	r1, r3, #21
 800154e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001552:	1a84      	subs	r4, r0, r2
 8001554:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 8001558:	eb61 0303 	sbc.w	r3, r1, r3
 800155c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001560:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8001564:	2b00      	cmp	r3, #0
 8001566:	da08      	bge.n	800157a <MS5837_Calculation+0x26a>
 8001568:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 800156c:	1851      	adds	r1, r2, r1
 800156e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001570:	f143 0300 	adc.w	r3, r3, #0
 8001574:	647b      	str	r3, [r7, #68]	@ 0x44
 8001576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800157a:	f04f 0000 	mov.w	r0, #0
 800157e:	f04f 0100 	mov.w	r1, #0
 8001582:	0b50      	lsrs	r0, r2, #13
 8001584:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001588:	1359      	asrs	r1, r3, #13
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001592:	619a      	str	r2, [r3, #24]

	//--- Temp conversion
	sensor -> temperature_raw = 2000 + (int64_t)(dT) * sensor -> prom_coefficients[6] / 8388608;
 8001594:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001598:	17da      	asrs	r2, r3, #31
 800159a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800159e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80015a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015a6:	89db      	ldrh	r3, [r3, #14]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2200      	movs	r2, #0
 80015ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015b0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015b4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 80015b8:	4622      	mov	r2, r4
 80015ba:	e9d7 892c 	ldrd	r8, r9, [r7, #176]	@ 0xb0
 80015be:	4641      	mov	r1, r8
 80015c0:	fb01 f202 	mul.w	r2, r1, r2
 80015c4:	464d      	mov	r5, r9
 80015c6:	4618      	mov	r0, r3
 80015c8:	4621      	mov	r1, r4
 80015ca:	4603      	mov	r3, r0
 80015cc:	fb03 f305 	mul.w	r3, r3, r5
 80015d0:	4413      	add	r3, r2
 80015d2:	4602      	mov	r2, r0
 80015d4:	4641      	mov	r1, r8
 80015d6:	fba2 2101 	umull	r2, r1, r2, r1
 80015da:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80015de:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 80015e2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80015e6:	4413      	add	r3, r2
 80015e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015ec:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	da07      	bge.n	8001604 <MS5837_Calculation+0x2f4>
 80015f4:	4965      	ldr	r1, [pc, #404]	@ (800178c <MS5837_Calculation+0x47c>)
 80015f6:	1851      	adds	r1, r2, r1
 80015f8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80015fa:	f143 0300 	adc.w	r3, r3, #0
 80015fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001600:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001604:	f04f 0000 	mov.w	r0, #0
 8001608:	f04f 0100 	mov.w	r1, #0
 800160c:	0dd0      	lsrs	r0, r2, #23
 800160e:	ea40 2043 	orr.w	r0, r0, r3, lsl #9
 8001612:	15d9      	asrs	r1, r3, #23
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4613      	mov	r3, r2
 800161a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800161e:	461a      	mov	r2, r3
 8001620:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001624:	61da      	str	r2, [r3, #28]

	//--- Second order compensation
	if((sensor -> temperature_raw / 100) < 20) 			//--- Low temp
 8001626:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800162a:	69db      	ldr	r3, [r3, #28]
 800162c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001630:	f280 80ae 	bge.w	8001790 <MS5837_Calculation+0x480>
	{
		Ti 		= (3 * (int64_t)(dT) * (int64_t)(dT)) / (8589934592);
 8001634:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800163e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001642:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001646:	17da      	asrs	r2, r3, #31
 8001648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800164c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001650:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8001654:	4622      	mov	r2, r4
 8001656:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800165a:	4641      	mov	r1, r8
 800165c:	fb01 f202 	mul.w	r2, r1, r2
 8001660:	464d      	mov	r5, r9
 8001662:	4618      	mov	r0, r3
 8001664:	4621      	mov	r1, r4
 8001666:	4603      	mov	r3, r0
 8001668:	fb03 f305 	mul.w	r3, r3, r5
 800166c:	4413      	add	r3, r2
 800166e:	4602      	mov	r2, r0
 8001670:	4641      	mov	r1, r8
 8001672:	fba2 2101 	umull	r2, r1, r2, r1
 8001676:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 800167a:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800167e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8001682:	4413      	add	r3, r2
 8001684:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001688:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800168c:	4622      	mov	r2, r4
 800168e:	462b      	mov	r3, r5
 8001690:	1891      	adds	r1, r2, r2
 8001692:	6339      	str	r1, [r7, #48]	@ 0x30
 8001694:	415b      	adcs	r3, r3
 8001696:	637b      	str	r3, [r7, #52]	@ 0x34
 8001698:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800169c:	4621      	mov	r1, r4
 800169e:	1851      	adds	r1, r2, r1
 80016a0:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 80016a4:	4629      	mov	r1, r5
 80016a6:	eb43 0101 	adc.w	r1, r3, r1
 80016aa:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 80016ae:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	da06      	bge.n	80016c4 <MS5837_Calculation+0x3b4>
 80016b6:	1e51      	subs	r1, r2, #1
 80016b8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016ba:	f143 0301 	adc.w	r3, r3, #1
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016c4:	f04f 0000 	mov.w	r0, #0
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	1058      	asrs	r0, r3, #1
 80016ce:	17d9      	asrs	r1, r3, #31
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4613      	mov	r3, r2
 80016d6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		OFFi 	= (3 * (sensor -> temperature_raw - 2000) * (sensor -> temperature_raw - 2000)) / 2;
 80016da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80016e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016ee:	fb03 f202 	mul.w	r2, r3, r2
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	441a      	add	r2, r3
 80016f8:	0fd3      	lsrs	r3, r2, #31
 80016fa:	4413      	add	r3, r2
 80016fc:	105b      	asrs	r3, r3, #1
 80016fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
		SENSi 	= (5 * (sensor -> temperature_raw - 2000) * (sensor -> temperature_raw - 2000)) / 8;
 8001702:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 800170c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001716:	fb03 f202 	mul.w	r2, r3, r2
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	2b00      	cmp	r3, #0
 8001722:	da00      	bge.n	8001726 <MS5837_Calculation+0x416>
 8001724:	3307      	adds	r3, #7
 8001726:	10db      	asrs	r3, r3, #3
 8001728:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

		if((sensor -> temperature_raw / 100) < -15) 	//--- Very low temp
 800172c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	f513 6fc8 	cmn.w	r3, #1600	@ 0x640
 8001736:	dc66      	bgt.n	8001806 <MS5837_Calculation+0x4f6>
		{
			OFFi  = OFFi + 7 * (sensor -> temperature_raw + 1500) * (sensor -> temperature_raw + 1500);
 8001738:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 8001742:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800174c:	fb03 f202 	mul.w	r2, r3, r2
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9a      	subs	r2, r3, r2
 8001756:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800175a:	4413      	add	r3, r2
 800175c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
			SENSi = SENSi + 4 * (sensor -> temperature_raw + 1500) * (sensor -> temperature_raw + 1500);
 8001760:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f203 52dc 	addw	r2, r3, #1500	@ 0x5dc
 800176a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001774:	fb02 f303 	mul.w	r3, r2, r3
 8001778:	009a      	lsls	r2, r3, #2
 800177a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800177e:	4413      	add	r3, r2
 8001780:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001784:	e03f      	b.n	8001806 <MS5837_Calculation+0x4f6>
 8001786:	bf00      	nop
 8001788:	001fffff 	.word	0x001fffff
 800178c:	007fffff 	.word	0x007fffff
		}
	}
	else if((sensor -> temperature_raw / 100) >= 20) 	//--- High temp
 8001790:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800179a:	db34      	blt.n	8001806 <MS5837_Calculation+0x4f6>
	{
		Ti 		= 2 * (dT * dT) / (137438953472);
 800179c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80017a0:	fb03 f303 	mul.w	r3, r3, r3
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	17da      	asrs	r2, r3, #31
 80017a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80017ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80017b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	da06      	bge.n	80017c6 <MS5837_Calculation+0x4b6>
 80017b8:	1e51      	subs	r1, r2, #1
 80017ba:	6239      	str	r1, [r7, #32]
 80017bc:	f143 031f 	adc.w	r3, r3, #31
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017c6:	f04f 0000 	mov.w	r0, #0
 80017ca:	f04f 0100 	mov.w	r1, #0
 80017ce:	1158      	asrs	r0, r3, #5
 80017d0:	17d9      	asrs	r1, r3, #31
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4613      	mov	r3, r2
 80017d8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
		OFFi 	= (1 * (sensor -> temperature_raw - 2000) * (sensor -> temperature_raw - 2000)) / 16;
 80017dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 80017e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017ea:	69db      	ldr	r3, [r3, #28]
 80017ec:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	da00      	bge.n	80017fa <MS5837_Calculation+0x4ea>
 80017f8:	330f      	adds	r3, #15
 80017fa:	111b      	asrs	r3, r3, #4
 80017fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
		SENSi 	= 0;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
	}

	//--- Calculate pressure and temp second order
	OFF2  = OFF  - OFFi;
 8001806:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800180a:	17da      	asrs	r2, r3, #31
 800180c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001810:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001814:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8001818:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800181c:	4604      	mov	r4, r0
 800181e:	1b14      	subs	r4, r2, r4
 8001820:	61bc      	str	r4, [r7, #24]
 8001822:	eb63 0301 	sbc.w	r3, r3, r1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800182c:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
	SENS2 = SENS - SENSi;
 8001830:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001834:	17da      	asrs	r2, r3, #31
 8001836:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800183a:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800183e:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001842:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001846:	4604      	mov	r4, r0
 8001848:	1b14      	subs	r4, r2, r4
 800184a:	613c      	str	r4, [r7, #16]
 800184c:	eb63 0301 	sbc.w	r3, r3, r1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001856:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128

	sensor -> temperature_raw 		= (sensor -> temperature_raw - Ti);
 800185a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001864:	1ad2      	subs	r2, r2, r3
 8001866:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800186a:	61da      	str	r2, [r3, #28]
	sensor -> pressure_raw 	  		= (((sensor -> pressure_D1 * SENS2) / 2097152 - OFF2) / 8192);
 800186c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	2200      	movs	r2, #0
 8001874:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001876:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800187c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001880:	462a      	mov	r2, r5
 8001882:	fb02 f203 	mul.w	r2, r2, r3
 8001886:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800188a:	4621      	mov	r1, r4
 800188c:	fb01 f303 	mul.w	r3, r1, r3
 8001890:	4413      	add	r3, r2
 8001892:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8001896:	4621      	mov	r1, r4
 8001898:	fba2 2101 	umull	r2, r1, r2, r1
 800189c:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 80018a0:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80018a4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80018a8:	4413      	add	r3, r2
 80018aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80018ae:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da07      	bge.n	80018c6 <MS5837_Calculation+0x5b6>
 80018b6:	4930      	ldr	r1, [pc, #192]	@ (8001978 <MS5837_Calculation+0x668>)
 80018b8:	1851      	adds	r1, r2, r1
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	f143 0300 	adc.w	r3, r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c6:	f04f 0000 	mov.w	r0, #0
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	0d50      	lsrs	r0, r2, #21
 80018d0:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80018d4:	1559      	asrs	r1, r3, #21
 80018d6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80018da:	1a84      	subs	r4, r0, r2
 80018dc:	673c      	str	r4, [r7, #112]	@ 0x70
 80018de:	eb61 0303 	sbc.w	r3, r1, r3
 80018e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80018e4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da08      	bge.n	80018fe <MS5837_Calculation+0x5ee>
 80018ec:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80018f0:	1851      	adds	r1, r2, r1
 80018f2:	6039      	str	r1, [r7, #0]
 80018f4:	f143 0300 	adc.w	r3, r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	0b50      	lsrs	r0, r2, #13
 8001908:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800190c:	1359      	asrs	r1, r3, #13
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001916:	619a      	str	r2, [r3, #24]

	sensor -> temperature_celsius 	= sensor -> temperature_raw / 100.0;
 8001918:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fd70 	bl	8000404 <__aeabi_i2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b14      	ldr	r3, [pc, #80]	@ (800197c <MS5837_Calculation+0x66c>)
 800192a:	f7fe feff 	bl	800072c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f889 	bl	8000a4c <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001940:	62da      	str	r2, [r3, #44]	@ 0x2c
	sensor -> pressure_mbar   		= sensor -> pressure_raw / 10.0;
 8001942:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fd5b 	bl	8000404 <__aeabi_i2d>
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <MS5837_Calculation+0x670>)
 8001954:	f7fe feea 	bl	800072c <__aeabi_ddiv>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4610      	mov	r0, r2
 800195e:	4619      	mov	r1, r3
 8001960:	f7ff f874 	bl	8000a4c <__aeabi_d2f>
 8001964:	4602      	mov	r2, r0
 8001966:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28

	return;
 800196c:	bf00      	nop
}
 800196e:	f507 77ac 	add.w	r7, r7, #344	@ 0x158
 8001972:	46bd      	mov	sp, r7
 8001974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001978:	001fffff 	.word	0x001fffff
 800197c:	40590000 	.word	0x40590000
 8001980:	40240000 	.word	0x40240000

08001984 <MS5832_Process>:


void MS5832_Process( I2C_HandleTypeDef *I2Cx, MS5837_t *sensor)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
	uint16_t ADC_TIMEOUT = sensor -> delay_ms * 2;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	8a5b      	ldrh	r3, [r3, #18]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	81fb      	strh	r3, [r7, #14]

	switch (sensor -> state)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800199c:	2b06      	cmp	r3, #6
 800199e:	f200 809c 	bhi.w	8001ada <MS5832_Process+0x156>
 80019a2:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <MS5832_Process+0x24>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019c5 	.word	0x080019c5
 80019ac:	080019e1 	.word	0x080019e1
 80019b0:	08001a03 	.word	0x08001a03
 80019b4:	08001a41 	.word	0x08001a41
 80019b8:	08001a5d 	.word	0x08001a5d
 80019bc:	08001a7f 	.word	0x08001a7f
 80019c0:	08001abd 	.word	0x08001abd
	{
		case START_CONVERT_D1:
			MS5837_StartConversion(I2Cx, sensor, MS5837_CONVERT_D1);
 80019c4:	224a      	movs	r2, #74	@ 0x4a
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff fc30 	bl	800122e <MS5837_StartConversion>
			sensor -> state++;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019d4:	3301      	adds	r3, #1
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 80019de:	e07c      	b.n	8001ada <MS5832_Process+0x156>

		case WAIT_CONVERT_D1:
			if(HAL_GetTick() - sensor -> conversion_start_time >= 19)
 80019e0:	f002 ff00 	bl	80047e4 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d96d      	bls.n	8001acc <MS5832_Process+0x148>
			{
				sensor -> state++;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80019f6:	3301      	adds	r3, #1
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			break;
 8001a00:	e064      	b.n	8001acc <MS5832_Process+0x148>

		case READ_ADC_D1:
			MS5837_ReadADC(I2Cx, sensor);
 8001a02:	6839      	ldr	r1, [r7, #0]
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff fc38 	bl	800127a <MS5837_ReadADC>
			if(sensor -> pressure_D1 != 0)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d008      	beq.n	8001a24 <MS5832_Process+0xa0>
			{
				sensor -> state++;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			else if(HAL_GetTick() - sensor -> conversion_start_time > ADC_TIMEOUT)
			{
				sensor -> state = START_CONVERT_D1;
			}
			break;
 8001a22:	e055      	b.n	8001ad0 <MS5832_Process+0x14c>
			else if(HAL_GetTick() - sensor -> conversion_start_time > ADC_TIMEOUT)
 8001a24:	f002 fede 	bl	80047e4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	1ad2      	subs	r2, r2, r3
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d94c      	bls.n	8001ad0 <MS5832_Process+0x14c>
				sensor -> state = START_CONVERT_D1;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 8001a3e:	e047      	b.n	8001ad0 <MS5832_Process+0x14c>

		case START_CONVERT_D2:
			MS5837_StartConversion(I2Cx, sensor, MS5837_CONVERT_D2);
 8001a40:	225a      	movs	r2, #90	@ 0x5a
 8001a42:	6839      	ldr	r1, [r7, #0]
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff fbf2 	bl	800122e <MS5837_StartConversion>
			sensor -> state++;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 8001a5a:	e03e      	b.n	8001ada <MS5832_Process+0x156>

		case WAIT_CONVERT_D2:
			if(HAL_GetTick() - sensor -> conversion_start_time >= 19)
 8001a5c:	f002 fec2 	bl	80047e4 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b12      	cmp	r3, #18
 8001a6a:	d933      	bls.n	8001ad4 <MS5832_Process+0x150>
			{
				sensor -> state++;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			break;
 8001a7c:	e02a      	b.n	8001ad4 <MS5832_Process+0x150>

		case READ_ADC_D2:
			MS5837_ReadADC(I2Cx, sensor);
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fbfa 	bl	800127a <MS5837_ReadADC>
			if(sensor -> temperature_D2 != 0)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d008      	beq.n	8001aa0 <MS5832_Process+0x11c>
			{
				sensor -> state++;
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			}
			else if(HAL_GetTick() - sensor -> conversion_start_time > ADC_TIMEOUT)
			{
				sensor -> state = START_CONVERT_D1;
			}
			break;
 8001a9e:	e01b      	b.n	8001ad8 <MS5832_Process+0x154>
			else if(HAL_GetTick() - sensor -> conversion_start_time > ADC_TIMEOUT)
 8001aa0:	f002 fea0 	bl	80047e4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	1ad2      	subs	r2, r2, r3
 8001aac:	89fb      	ldrh	r3, [r7, #14]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d912      	bls.n	8001ad8 <MS5832_Process+0x154>
				sensor -> state = START_CONVERT_D1;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 8001aba:	e00d      	b.n	8001ad8 <MS5832_Process+0x154>

		case CALCULATE_D1_D2:
			MS5837_Calculation(sensor);
 8001abc:	6838      	ldr	r0, [r7, #0]
 8001abe:	f7ff fc27 	bl	8001310 <MS5837_Calculation>
			sensor -> state = START_CONVERT_D1;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			break;
 8001aca:	e006      	b.n	8001ada <MS5832_Process+0x156>
			break;
 8001acc:	bf00      	nop
 8001ace:	e004      	b.n	8001ada <MS5832_Process+0x156>
			break;
 8001ad0:	bf00      	nop
 8001ad2:	e002      	b.n	8001ada <MS5832_Process+0x156>
			break;
 8001ad4:	bf00      	nop
 8001ad6:	e000      	b.n	8001ada <MS5832_Process+0x156>
			break;
 8001ad8:	bf00      	nop
	}
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop

08001ae4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ae8:	f3bf 8f4f 	dsb	sy
}
 8001aec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <__NVIC_SystemReset+0x24>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001af6:	4904      	ldr	r1, [pc, #16]	@ (8001b08 <__NVIC_SystemReset+0x24>)
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <__NVIC_SystemReset+0x28>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001afe:	f3bf 8f4f 	dsb	sy
}
 8001b02:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <__NVIC_SystemReset+0x20>
 8001b08:	e000ed00 	.word	0xe000ed00
 8001b0c:	05fa0004 	.word	0x05fa0004

08001b10 <initSubmersible>:
/******************************************************************************
 * Function Definitions
 *****************************************************************************/

void initSubmersible()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b14:	213c      	movs	r1, #60	@ 0x3c
 8001b16:	4811      	ldr	r0, [pc, #68]	@ (8001b5c <initSubmersible+0x4c>)
 8001b18:	f006 f856 	bl	8007bc8 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4810      	ldr	r0, [pc, #64]	@ (8001b60 <initSubmersible+0x50>)
 8001b20:	f005 ff0e 	bl	8007940 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001b24:	2104      	movs	r1, #4
 8001b26:	480e      	ldr	r0, [pc, #56]	@ (8001b60 <initSubmersible+0x50>)
 8001b28:	f005 ff0a 	bl	8007940 <HAL_TIM_PWM_Start>

	PID_Init(&motor_pid, 0.6, 0, 0);
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	490b      	ldr	r1, [pc, #44]	@ (8001b64 <initSubmersible+0x54>)
 8001b36:	480c      	ldr	r0, [pc, #48]	@ (8001b68 <initSubmersible+0x58>)
 8001b38:	f000 f81e 	bl	8001b78 <PID_Init>
	PID_Init(&pressure_pid, 0, 0, 0);
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0100 	mov.w	r1, #0
 8001b48:	4808      	ldr	r0, [pc, #32]	@ (8001b6c <initSubmersible+0x5c>)
 8001b4a:	f000 f815 	bl	8001b78 <PID_Init>

	MS5837_Init(&hi2c1, &MS5837, 50);
 8001b4e:	2232      	movs	r2, #50	@ 0x32
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <initSubmersible+0x60>)
 8001b52:	4808      	ldr	r0, [pc, #32]	@ (8001b74 <initSubmersible+0x64>)
 8001b54:	f7ff fb1a 	bl	800118c <MS5837_Init>
}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200003d0 	.word	0x200003d0
 8001b60:	20000418 	.word	0x20000418
 8001b64:	3f19999a 	.word	0x3f19999a
 8001b68:	20000274 	.word	0x20000274
 8001b6c:	200002a0 	.word	0x200002a0
 8001b70:	20000234 	.word	0x20000234
 8001b74:	2000037c 	.word	0x2000037c

08001b78 <PID_Init>:

/*
 * PID Control
 */
void PID_Init(pid_t *uPID, float KP, float KI, float KD)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
 8001b84:	603b      	str	r3, [r7, #0]
	uPID->kp = KP;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	601a      	str	r2, [r3, #0]
	uPID->ki = KI;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	605a      	str	r2, [r3, #4]
	uPID->kd = KD;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	609a      	str	r2, [r3, #8]
	uPID->proportional = 0;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	60da      	str	r2, [r3, #12]
	uPID->integral = 0;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
	uPID->derivative = 0;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
	uPID->setpoint = 0;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
	uPID->feedback = 0;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	61da      	str	r2, [r3, #28]
	uPID->error = 0;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f04f 0200 	mov.w	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
	uPID->prev_error = 0;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	@ 0x24
	uPID->output = 0;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr

08001be2 <PID_Update>:

float PID_Update(pid_t *uPID, float setpoint, float feedback, float maximum_output)
{
 8001be2:	b590      	push	{r4, r7, lr}
 8001be4:	b085      	sub	sp, #20
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
	uPID->setpoint = setpoint;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	619a      	str	r2, [r3, #24]
	uPID->feedback = feedback;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	61da      	str	r2, [r3, #28]

	uPID->error = uPID->setpoint - uPID->feedback;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	699a      	ldr	r2, [r3, #24]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f7fe ff74 	bl	8000af4 <__aeabi_fsub>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	621a      	str	r2, [r3, #32]

	uPID->proportional = uPID->kp * uPID->error;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f7ff f872 	bl	8000d08 <__aeabi_fmul>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	60da      	str	r2, [r3, #12]
	uPID->integral    += uPID->ki * uPID->error;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	691c      	ldr	r4, [r3, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f7ff f864 	bl	8000d08 <__aeabi_fmul>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4619      	mov	r1, r3
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7fe ff57 	bl	8000af8 <__addsf3>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	611a      	str	r2, [r3, #16]
	uPID->derivative   = uPID->kd * (uPID->error - uPID->prev_error);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	689c      	ldr	r4, [r3, #8]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f7fe ff47 	bl	8000af4 <__aeabi_fsub>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7ff f84c 	bl	8000d08 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	615a      	str	r2, [r3, #20]
	uPID->prev_error   = uPID->error;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a1a      	ldr	r2, [r3, #32]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	625a      	str	r2, [r3, #36]	@ 0x24

	if(uPID->integral >= maximum_output) 			{ uPID->integral =   maximum_output;  }
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	4619      	mov	r1, r3
 8001c86:	6838      	ldr	r0, [r7, #0]
 8001c88:	f7ff f9e6 	bl	8001058 <__aeabi_fcmple>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <PID_Update+0xb8>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	611a      	str	r2, [r3, #16]
 8001c98:	e010      	b.n	8001cbc <PID_Update+0xda>
	else if(uPID->integral < -(maximum_output)) 	{ uPID->integral = -(maximum_output); }
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f7ff f9cc 	bl	8001044 <__aeabi_fcmplt>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d004      	beq.n	8001cbc <PID_Update+0xda>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	611a      	str	r2, [r3, #16]

	uPID->output = (uPID->proportional) + (uPID->integral) + (uPID->derivative);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f7fe ff16 	bl	8000af8 <__addsf3>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f7fe ff0e 	bl	8000af8 <__addsf3>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	629a      	str	r2, [r3, #40]	@ 0x28

	if(uPID->output >= maximum_output) 			{ uPID->output =   maximum_output;  }
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce8:	4619      	mov	r1, r3
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff f9b4 	bl	8001058 <__aeabi_fcmple>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <PID_Update+0x11c>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cfc:	e010      	b.n	8001d20 <PID_Update+0x13e>
	else if(uPID->output < -(maximum_output)) 	{ uPID->output = -(maximum_output); }
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f7ff f99a 	bl	8001044 <__aeabi_fcmplt>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <PID_Update+0x13e>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28

	return uPID->output;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}

08001d2c <Motor_Write>:
			break;
	}
}

void Motor_Write(short int motor, short int speed)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	460a      	mov	r2, r1
 8001d36:	80fb      	strh	r3, [r7, #6]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	80bb      	strh	r3, [r7, #4]
	int dir_a = (speed >= 0);
 8001d3c:	88bb      	ldrh	r3, [r7, #4]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	0bdb      	lsrs	r3, r3, #15
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	60fb      	str	r3, [r7, #12]
	int dir_b = (speed <  0);
 8001d48:	88bb      	ldrh	r3, [r7, #4]
 8001d4a:	0bdb      	lsrs	r3, r3, #15
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	60bb      	str	r3, [r7, #8]
	speed = abs(speed);
 8001d50:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bfb8      	it	lt
 8001d58:	425b      	neglt	r3, r3
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	80bb      	strh	r3, [r7, #4]

	switch(motor)
 8001d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d002      	beq.n	8001d6c <Motor_Write+0x40>
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d016      	beq.n	8001d98 <Motor_Write+0x6c>
			TIM2->CCR2 = speed;
			break;
		}
		default:
		{
			break;
 8001d6a:	e029      	b.n	8001dc0 <Motor_Write+0x94>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, dir_b);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	461a      	mov	r2, r3
 8001d72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d76:	4814      	ldr	r0, [pc, #80]	@ (8001dc8 <Motor_Write+0x9c>)
 8001d78:	f003 ff0f 	bl	8005b9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, dir_a);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d86:	4810      	ldr	r0, [pc, #64]	@ (8001dc8 <Motor_Write+0x9c>)
 8001d88:	f003 ff07 	bl	8005b9a <HAL_GPIO_WritePin>
			TIM2->CCR1 = speed;
 8001d8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d90:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001d94:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 8001d96:	e013      	b.n	8001dc0 <Motor_Write+0x94>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, dir_a);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2110      	movs	r1, #16
 8001da0:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <Motor_Write+0xa0>)
 8001da2:	f003 fefa 	bl	8005b9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, dir_b);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	2120      	movs	r1, #32
 8001dae:	4807      	ldr	r0, [pc, #28]	@ (8001dcc <Motor_Write+0xa0>)
 8001db0:	f003 fef3 	bl	8005b9a <HAL_GPIO_WritePin>
			TIM2->CCR2 = speed;
 8001db4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001db8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dbc:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 8001dbe:	bf00      	nop
		}

	}

}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40010800 	.word	0x40010800
 8001dcc:	40010c00 	.word	0x40010c00

08001dd0 <Task_Init>:

int Task_Init(system_t *task)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	if(!task -> start)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <Task_Init+0x16>
	{
		return 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e007      	b.n	8001df6 <Task_Init+0x26>
	}
	if(task -> reset)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <Task_Init+0x24>
	{
		NVIC_SystemReset();
 8001df0:	f7ff fe78 	bl	8001ae4 <__NVIC_SystemReset>
		task -> reset = 0;
		return 0;
	}

	return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <Task_Pressure>:

void Task_Pressure()
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
//		return;
//	}

	static uint32_t pres_time = 0;

	pres_time++;
 8001e04:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <Task_Pressure+0x30>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	4a09      	ldr	r2, [pc, #36]	@ (8001e30 <Task_Pressure+0x30>)
 8001e0c:	6013      	str	r3, [r2, #0]

	if(pres_time >= MS5837.delay_ms)
 8001e0e:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <Task_Pressure+0x34>)
 8001e10:	8a5b      	ldrh	r3, [r3, #18]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <Task_Pressure+0x30>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d807      	bhi.n	8001e2c <Task_Pressure+0x2c>
	{
		MS5832_Process(&hi2c1, &MS5837);
 8001e1c:	4905      	ldr	r1, [pc, #20]	@ (8001e34 <Task_Pressure+0x34>)
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <Task_Pressure+0x38>)
 8001e20:	f7ff fdb0 	bl	8001984 <MS5832_Process>
		pres_time = 0;
 8001e24:	4b02      	ldr	r3, [pc, #8]	@ (8001e30 <Task_Pressure+0x30>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
	}

	return;
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
}
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000304 	.word	0x20000304
 8001e34:	20000234 	.word	0x20000234
 8001e38:	2000037c 	.word	0x2000037c

08001e3c <Task_Control_Test_UpDown>:


void Task_Control_Test_UpDown()
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	if(!Task_Init(&test_task))
 8001e40:	484d      	ldr	r0, [pc, #308]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001e42:	f7ff ffc5 	bl	8001dd0 <Task_Init>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 808a 	beq.w	8001f62 <Task_Control_Test_UpDown+0x126>
	{
		return;
	}

	Task_Pressure();
 8001e4e:	f7ff ffd7 	bl	8001e00 <Task_Pressure>

	static uint32_t counter_ms = 0;

	lim_sw1_stat = LIMIT_SW1;
 8001e52:	2102      	movs	r1, #2
 8001e54:	4849      	ldr	r0, [pc, #292]	@ (8001f7c <Task_Control_Test_UpDown+0x140>)
 8001e56:	f003 fe89 	bl	8005b6c <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b21a      	sxth	r2, r3
 8001e5e:	4b48      	ldr	r3, [pc, #288]	@ (8001f80 <Task_Control_Test_UpDown+0x144>)
 8001e60:	801a      	strh	r2, [r3, #0]
	lim_sw2_stat = LIMIT_SW2;
 8001e62:	2120      	movs	r1, #32
 8001e64:	4845      	ldr	r0, [pc, #276]	@ (8001f7c <Task_Control_Test_UpDown+0x140>)
 8001e66:	f003 fe81 	bl	8005b6c <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b45      	ldr	r3, [pc, #276]	@ (8001f84 <Task_Control_Test_UpDown+0x148>)
 8001e70:	801a      	strh	r2, [r3, #0]

	switch(test_task.state)
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001e74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d80b      	bhi.n	8001e94 <Task_Control_Test_UpDown+0x58>
 8001e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e84 <Task_Control_Test_UpDown+0x48>)
 8001e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e82:	bf00      	nop
 8001e84:	08001e9f 	.word	0x08001e9f
 8001e88:	08001ed7 	.word	0x08001ed7
 8001e8c:	08001f07 	.word	0x08001f07
 8001e90:	08001f3f 	.word	0x08001f3f
	{
		  default:
			  Motor_Write(1, 0);
 8001e94:	2100      	movs	r1, #0
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff ff48 	bl	8001d2c <Motor_Write>
			  break;
 8001e9c:	e06a      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>

		  case 0: //-- go down
			  Motor_Write(1, -300);
 8001e9e:	493a      	ldr	r1, [pc, #232]	@ (8001f88 <Task_Control_Test_UpDown+0x14c>)
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff ff43 	bl	8001d2c <Motor_Write>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	4838      	ldr	r0, [pc, #224]	@ (8001f8c <Task_Control_Test_UpDown+0x150>)
 8001eac:	f003 fe75 	bl	8005b9a <HAL_GPIO_WritePin>

			  if(lim_sw2_stat == 0)
 8001eb0:	4b34      	ldr	r3, [pc, #208]	@ (8001f84 <Task_Control_Test_UpDown+0x148>)
 8001eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d155      	bne.n	8001f66 <Task_Control_Test_UpDown+0x12a>
			  {
				  Motor_Write(1, 0);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7ff ff35 	bl	8001d2c <Motor_Write>
				  test_task.state++;
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001ec4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	4b29      	ldr	r3, [pc, #164]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001ed2:	809a      	strh	r2, [r3, #4]
			  }
			  break;
 8001ed4:	e047      	b.n	8001f66 <Task_Control_Test_UpDown+0x12a>

		  case 1: //--- hold position;
			  counter_ms++;
 8001ed6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	4a2c      	ldr	r2, [pc, #176]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001ede:	6013      	str	r3, [r2, #0]
			  if(counter_ms >= 20000)
 8001ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d93e      	bls.n	8001f6a <Task_Control_Test_UpDown+0x12e>
			  {
				  counter_ms = 0;
 8001eec:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
				  test_task.state++;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001ef4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3301      	adds	r3, #1
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	4b1d      	ldr	r3, [pc, #116]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001f02:	809a      	strh	r2, [r3, #4]
			  }
			  break;
 8001f04:	e031      	b.n	8001f6a <Task_Control_Test_UpDown+0x12e>

		  case 2:
			  Motor_Write(1, 250); //--- go up
 8001f06:	21fa      	movs	r1, #250	@ 0xfa
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f7ff ff0f 	bl	8001d2c <Motor_Write>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2102      	movs	r1, #2
 8001f12:	481e      	ldr	r0, [pc, #120]	@ (8001f8c <Task_Control_Test_UpDown+0x150>)
 8001f14:	f003 fe41 	bl	8005b9a <HAL_GPIO_WritePin>
			  if(lim_sw1_stat == 0)
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <Task_Control_Test_UpDown+0x144>)
 8001f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d125      	bne.n	8001f6e <Task_Control_Test_UpDown+0x132>
			  {
				  Motor_Write(1, 0);
 8001f22:	2100      	movs	r1, #0
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff ff01 	bl	8001d2c <Motor_Write>
				  test_task.state++;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001f2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	b21a      	sxth	r2, r3
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001f3a:	809a      	strh	r2, [r3, #4]
			  }
			  break;
 8001f3c:	e017      	b.n	8001f6e <Task_Control_Test_UpDown+0x132>

		  case 3:
			  counter_ms++;
 8001f3e:	4b14      	ldr	r3, [pc, #80]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001f46:	6013      	str	r3, [r2, #0]
			  if(counter_ms >= 20000)
 8001f48:	4b11      	ldr	r3, [pc, #68]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d90e      	bls.n	8001f72 <Task_Control_Test_UpDown+0x136>
			  {
				  counter_ms = 0;
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <Task_Control_Test_UpDown+0x154>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
				  test_task.state = 0;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <Task_Control_Test_UpDown+0x13c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	809a      	strh	r2, [r3, #4]
			  }
			  break;
 8001f60:	e007      	b.n	8001f72 <Task_Control_Test_UpDown+0x136>
		return;
 8001f62:	bf00      	nop
 8001f64:	e006      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>
			  break;
 8001f66:	bf00      	nop
 8001f68:	e004      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>
			  break;
 8001f6a:	bf00      	nop
 8001f6c:	e002      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>
			  break;
 8001f6e:	bf00      	nop
 8001f70:	e000      	b.n	8001f74 <Task_Control_Test_UpDown+0x138>
			  break;
 8001f72:	bf00      	nop
	}
}
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200002cc 	.word	0x200002cc
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000002 	.word	0x20000002
 8001f88:	fffffed4 	.word	0xfffffed4
 8001f8c:	40010c00 	.word	0x40010c00
 8001f90:	20000308 	.word	0x20000308

08001f94 <Task_Control_PID>:

int32_t motor_set = 0;

void Task_Control_PID()
{
 8001f94:	b598      	push	{r3, r4, r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	if(!Task_Init(&pid_task))
 8001f98:	4882      	ldr	r0, [pc, #520]	@ (80021a4 <Task_Control_PID+0x210>)
 8001f9a:	f7ff ff19 	bl	8001dd0 <Task_Init>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80fc 	beq.w	800219e <Task_Control_PID+0x20a>
	{
		return;
	}

	Task_Pressure();
 8001fa6:	f7ff ff2b 	bl	8001e00 <Task_Pressure>

	lim_sw1_stat = LIMIT_SW1;
 8001faa:	2102      	movs	r1, #2
 8001fac:	487e      	ldr	r0, [pc, #504]	@ (80021a8 <Task_Control_PID+0x214>)
 8001fae:	f003 fddd 	bl	8005b6c <HAL_GPIO_ReadPin>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80021ac <Task_Control_PID+0x218>)
 8001fb8:	801a      	strh	r2, [r3, #0]
	lim_sw2_stat = LIMIT_SW2;
 8001fba:	2120      	movs	r1, #32
 8001fbc:	487a      	ldr	r0, [pc, #488]	@ (80021a8 <Task_Control_PID+0x214>)
 8001fbe:	f003 fdd5 	bl	8005b6c <HAL_GPIO_ReadPin>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80021b0 <Task_Control_PID+0x21c>)
 8001fc8:	801a      	strh	r2, [r3, #0]

	static uint32_t pid_cnt = 0;
	static uint32_t delay_10ms = 0;

	pid_cnt++;
 8001fca:	4b7a      	ldr	r3, [pc, #488]	@ (80021b4 <Task_Control_PID+0x220>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	4a78      	ldr	r2, [pc, #480]	@ (80021b4 <Task_Control_PID+0x220>)
 8001fd2:	6013      	str	r3, [r2, #0]

	if(pid_cnt >= 10)
 8001fd4:	4b77      	ldr	r3, [pc, #476]	@ (80021b4 <Task_Control_PID+0x220>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b09      	cmp	r3, #9
 8001fda:	f240 80e1 	bls.w	80021a0 <Task_Control_PID+0x20c>
	{
		switch(pid_task.state)
 8001fde:	4b71      	ldr	r3, [pc, #452]	@ (80021a4 <Task_Control_PID+0x210>)
 8001fe0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d80b      	bhi.n	8002000 <Task_Control_PID+0x6c>
 8001fe8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <Task_Control_PID+0x5c>)
 8001fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fee:	bf00      	nop
 8001ff0:	0800200b 	.word	0x0800200b
 8001ff4:	0800203d 	.word	0x0800203d
 8001ff8:	08002073 	.word	0x08002073
 8001ffc:	0800215d 	.word	0x0800215d
		{
			default:
				Motor_Write(1, 0);
 8002000:	2100      	movs	r1, #0
 8002002:	2001      	movs	r0, #1
 8002004:	f7ff fe92 	bl	8001d2c <Motor_Write>
				break;
 8002008:	e0c5      	b.n	8002196 <Task_Control_PID+0x202>

			case 0: //-- go down
				Motor_Write(1, -245);
 800200a:	f06f 01f4 	mvn.w	r1, #244	@ 0xf4
 800200e:	2001      	movs	r0, #1
 8002010:	f7ff fe8c 	bl	8001d2c <Motor_Write>

				if(lim_sw2_stat == 0)
 8002014:	4b66      	ldr	r3, [pc, #408]	@ (80021b0 <Task_Control_PID+0x21c>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 80b6 	bne.w	800218c <Task_Control_PID+0x1f8>
				{
					Motor_Write(1, 0);
 8002020:	2100      	movs	r1, #0
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fe82 	bl	8001d2c <Motor_Write>
					pid_task.state++;
 8002028:	4b5e      	ldr	r3, [pc, #376]	@ (80021a4 <Task_Control_PID+0x210>)
 800202a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800202e:	b29b      	uxth	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	b29b      	uxth	r3, r3
 8002034:	b21a      	sxth	r2, r3
 8002036:	4b5b      	ldr	r3, [pc, #364]	@ (80021a4 <Task_Control_PID+0x210>)
 8002038:	809a      	strh	r2, [r3, #4]
				}
				break;
 800203a:	e0a7      	b.n	800218c <Task_Control_PID+0x1f8>

			case 1: // wait bruh
				delay_10ms++;
 800203c:	4b5e      	ldr	r3, [pc, #376]	@ (80021b8 <Task_Control_PID+0x224>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a5d      	ldr	r2, [pc, #372]	@ (80021b8 <Task_Control_PID+0x224>)
 8002044:	6013      	str	r3, [r2, #0]
				if(delay_10ms >= 300)
 8002046:	4b5c      	ldr	r3, [pc, #368]	@ (80021b8 <Task_Control_PID+0x224>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800204e:	f0c0 809f 	bcc.w	8002190 <Task_Control_PID+0x1fc>
				{
					TIM1 -> CNT = 0;
 8002052:	4b5a      	ldr	r3, [pc, #360]	@ (80021bc <Task_Control_PID+0x228>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
					delay_10ms = 0;
 8002058:	4b57      	ldr	r3, [pc, #348]	@ (80021b8 <Task_Control_PID+0x224>)
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
					pid_task.state++;
 800205e:	4b51      	ldr	r3, [pc, #324]	@ (80021a4 <Task_Control_PID+0x210>)
 8002060:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002064:	b29b      	uxth	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	b29b      	uxth	r3, r3
 800206a:	b21a      	sxth	r2, r3
 800206c:	4b4d      	ldr	r3, [pc, #308]	@ (80021a4 <Task_Control_PID+0x210>)
 800206e:	809a      	strh	r2, [r3, #4]
				}
				break;
 8002070:	e08e      	b.n	8002190 <Task_Control_PID+0x1fc>

			case 2: //--- hold position;

				if(fabs(motor_pid.error) < 50 && motor_pid.error != 0)
 8002072:	4b53      	ldr	r3, [pc, #332]	@ (80021c0 <Task_Control_PID+0x22c>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800207a:	4952      	ldr	r1, [pc, #328]	@ (80021c4 <Task_Control_PID+0x230>)
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe ffe1 	bl	8001044 <__aeabi_fcmplt>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <Task_Control_PID+0x10e>
 8002088:	4b4d      	ldr	r3, [pc, #308]	@ (80021c0 <Task_Control_PID+0x22c>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	f04f 0100 	mov.w	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe ffcd 	bl	8001030 <__aeabi_fcmpeq>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <Task_Control_PID+0x10e>
				{
					adaptive_start = 1;
 800209c:	4b4a      	ldr	r3, [pc, #296]	@ (80021c8 <Task_Control_PID+0x234>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
				}

				delay_10ms++;
 80020a2:	4b45      	ldr	r3, [pc, #276]	@ (80021b8 <Task_Control_PID+0x224>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a43      	ldr	r2, [pc, #268]	@ (80021b8 <Task_Control_PID+0x224>)
 80020aa:	6013      	str	r3, [r2, #0]

				if(delay_10ms >= 4)
 80020ac:	4b42      	ldr	r3, [pc, #264]	@ (80021b8 <Task_Control_PID+0x224>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d90a      	bls.n	80020ca <Task_Control_PID+0x136>
//					pressure_pid.kp = 400;
//					pressure_pid.ki = 0;
//					pressure_pid.kd = 0;
//					motor_pid.setpoint = PID_Update(&pressure_pid, pressure_pid.setpoint, MS5837.pressure_mbar, FULL_LENGTH_PULSE - 100);

					motor_pid.setpoint = depth_setpoint;
 80020b4:	4b45      	ldr	r3, [pc, #276]	@ (80021cc <Task_Control_PID+0x238>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fdd1 	bl	8000c60 <__aeabi_i2f>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a3f      	ldr	r2, [pc, #252]	@ (80021c0 <Task_Control_PID+0x22c>)
 80020c2:	6193      	str	r3, [r2, #24]

					delay_10ms = 0;
 80020c4:	4b3c      	ldr	r3, [pc, #240]	@ (80021b8 <Task_Control_PID+0x224>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

				}

				enc_cnt = TIM1->CNT;
 80020ca:	4b3c      	ldr	r3, [pc, #240]	@ (80021bc <Task_Control_PID+0x228>)
 80020cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ce:	b21a      	sxth	r2, r3
 80020d0:	4b3f      	ldr	r3, [pc, #252]	@ (80021d0 <Task_Control_PID+0x23c>)
 80020d2:	801a      	strh	r2, [r3, #0]
				total_enc_cnt += (long int)enc_cnt;
 80020d4:	4b3e      	ldr	r3, [pc, #248]	@ (80021d0 <Task_Control_PID+0x23c>)
 80020d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020da:	461a      	mov	r2, r3
 80020dc:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <Task_Control_PID+0x240>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	4a3c      	ldr	r2, [pc, #240]	@ (80021d4 <Task_Control_PID+0x240>)
 80020e4:	6013      	str	r3, [r2, #0]
				TIM1->CNT = 0;
 80020e6:	4b35      	ldr	r3, [pc, #212]	@ (80021bc <Task_Control_PID+0x228>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	625a      	str	r2, [r3, #36]	@ 0x24

				pwm_output = (int16_t)(PID_Update(&motor_pid, motor_pid.setpoint, total_enc_cnt, 300));
 80020ec:	4b34      	ldr	r3, [pc, #208]	@ (80021c0 <Task_Control_PID+0x22c>)
 80020ee:	699c      	ldr	r4, [r3, #24]
 80020f0:	4b38      	ldr	r3, [pc, #224]	@ (80021d4 <Task_Control_PID+0x240>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fdb3 	bl	8000c60 <__aeabi_i2f>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <Task_Control_PID+0x244>)
 80020fe:	4621      	mov	r1, r4
 8002100:	482f      	ldr	r0, [pc, #188]	@ (80021c0 <Task_Control_PID+0x22c>)
 8002102:	f7ff fd6e 	bl	8001be2 <PID_Update>
 8002106:	4603      	mov	r3, r0
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ffc3 	bl	8001094 <__aeabi_f2iz>
 800210e:	4603      	mov	r3, r0
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b32      	ldr	r3, [pc, #200]	@ (80021dc <Task_Control_PID+0x248>)
 8002114:	801a      	strh	r2, [r3, #0]

			    if(lim_sw2_stat == 0)
 8002116:	4b26      	ldr	r3, [pc, #152]	@ (80021b0 <Task_Control_PID+0x21c>)
 8002118:	f9b3 3000 	ldrsh.w	r3, [r3]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d108      	bne.n	8002132 <Task_Control_PID+0x19e>
			    {
			        pwm_output = (pwm_output > 0) ? pwm_output : 0;
 8002120:	4b2e      	ldr	r3, [pc, #184]	@ (80021dc <Task_Control_PID+0x248>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800212a:	b21a      	sxth	r2, r3
 800212c:	4b2b      	ldr	r3, [pc, #172]	@ (80021dc <Task_Control_PID+0x248>)
 800212e:	801a      	strh	r2, [r3, #0]
 8002130:	e00c      	b.n	800214c <Task_Control_PID+0x1b8>
			    }
			    else if(lim_sw1_stat == 0)
 8002132:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <Task_Control_PID+0x218>)
 8002134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <Task_Control_PID+0x1b8>
			    {
			        pwm_output = (pwm_output < 0) ? pwm_output : 0;
 800213c:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <Task_Control_PID+0x248>)
 800213e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002142:	ea03 73e3 	and.w	r3, r3, r3, asr #31
 8002146:	b21a      	sxth	r2, r3
 8002148:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <Task_Control_PID+0x248>)
 800214a:	801a      	strh	r2, [r3, #0]
			    }


				Motor_Write(1, pwm_output);
 800214c:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <Task_Control_PID+0x248>)
 800214e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002152:	4619      	mov	r1, r3
 8002154:	2001      	movs	r0, #1
 8002156:	f7ff fde9 	bl	8001d2c <Motor_Write>

				break;
 800215a:	e01c      	b.n	8002196 <Task_Control_PID+0x202>

			case 3:
				Motor_Write(1, -245);
 800215c:	f06f 01f4 	mvn.w	r1, #244	@ 0xf4
 8002160:	2001      	movs	r0, #1
 8002162:	f7ff fde3 	bl	8001d2c <Motor_Write>

				if(lim_sw2_stat == 0)
 8002166:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <Task_Control_PID+0x21c>)
 8002168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d111      	bne.n	8002194 <Task_Control_PID+0x200>
				{
					Motor_Write(1, 0);
 8002170:	2100      	movs	r1, #0
 8002172:	2001      	movs	r0, #1
 8002174:	f7ff fdda 	bl	8001d2c <Motor_Write>
					pid_task.state++;
 8002178:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <Task_Control_PID+0x210>)
 800217a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800217e:	b29b      	uxth	r3, r3
 8002180:	3301      	adds	r3, #1
 8002182:	b29b      	uxth	r3, r3
 8002184:	b21a      	sxth	r2, r3
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <Task_Control_PID+0x210>)
 8002188:	809a      	strh	r2, [r3, #4]
				}
				break;
 800218a:	e003      	b.n	8002194 <Task_Control_PID+0x200>
				break;
 800218c:	bf00      	nop
 800218e:	e002      	b.n	8002196 <Task_Control_PID+0x202>
				break;
 8002190:	bf00      	nop
 8002192:	e000      	b.n	8002196 <Task_Control_PID+0x202>
				break;
 8002194:	bf00      	nop

		}

		pid_cnt = 0;
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <Task_Control_PID+0x220>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e000      	b.n	80021a0 <Task_Control_PID+0x20c>
		return;
 800219e:	bf00      	nop
	}
}
 80021a0:	bd98      	pop	{r3, r4, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002d4 	.word	0x200002d4
 80021a8:	40010800 	.word	0x40010800
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000002 	.word	0x20000002
 80021b4:	2000030c 	.word	0x2000030c
 80021b8:	20000310 	.word	0x20000310
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	20000274 	.word	0x20000274
 80021c4:	42480000 	.word	0x42480000
 80021c8:	200002ec 	.word	0x200002ec
 80021cc:	20000004 	.word	0x20000004
 80021d0:	2000026c 	.word	0x2000026c
 80021d4:	20000270 	.word	0x20000270
 80021d8:	43960000 	.word	0x43960000
 80021dc:	200002ea 	.word	0x200002ea

080021e0 <light_sequence>:
uint32_t light_light_cnt = 0;

void light_sequence()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0

	if(!Task_Init(&light_task))
 80021e4:	4830      	ldr	r0, [pc, #192]	@ (80022a8 <light_sequence+0xc8>)
 80021e6:	f7ff fdf3 	bl	8001dd0 <Task_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d057      	beq.n	80022a0 <light_sequence+0xc0>
	}

	static uint32_t light_cnt = 0;
	static uint32_t light_global = 0;

	switch(light_task.state)
 80021f0:	4b2d      	ldr	r3, [pc, #180]	@ (80022a8 <light_sequence+0xc8>)
 80021f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d049      	beq.n	800228e <light_sequence+0xae>
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	dc53      	bgt.n	80022a6 <light_sequence+0xc6>
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <light_sequence+0x28>
 8002202:	2b01      	cmp	r3, #1
 8002204:	d02d      	beq.n	8002262 <light_sequence+0x82>
 8002206:	e04e      	b.n	80022a6 <light_sequence+0xc6>
	{
		case 0:
			if(light_cnt >= 74)
 8002208:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <light_sequence+0xcc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b49      	cmp	r3, #73	@ 0x49
 800220e:	d90c      	bls.n	800222a <light_sequence+0x4a>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002214:	4826      	ldr	r0, [pc, #152]	@ (80022b0 <light_sequence+0xd0>)
 8002216:	f003 fcd8 	bl	8005bca <HAL_GPIO_TogglePin>
				light_global++;
 800221a:	4b26      	ldr	r3, [pc, #152]	@ (80022b4 <light_sequence+0xd4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a24      	ldr	r2, [pc, #144]	@ (80022b4 <light_sequence+0xd4>)
 8002222:	6013      	str	r3, [r2, #0]
				light_cnt = 0;
 8002224:	4b21      	ldr	r3, [pc, #132]	@ (80022ac <light_sequence+0xcc>)
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
			}
			light_cnt++;
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <light_sequence+0xcc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	4a1e      	ldr	r2, [pc, #120]	@ (80022ac <light_sequence+0xcc>)
 8002232:	6013      	str	r3, [r2, #0]

			if(light_global >= 11)
 8002234:	4b1f      	ldr	r3, [pc, #124]	@ (80022b4 <light_sequence+0xd4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b0a      	cmp	r3, #10
 800223a:	d933      	bls.n	80022a4 <light_sequence+0xc4>
			{
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002242:	481b      	ldr	r0, [pc, #108]	@ (80022b0 <light_sequence+0xd0>)
 8002244:	f003 fca9 	bl	8005b9a <HAL_GPIO_WritePin>
				light_global = 0;
 8002248:	4b1a      	ldr	r3, [pc, #104]	@ (80022b4 <light_sequence+0xd4>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
				light_task.state++;
 800224e:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <light_sequence+0xc8>)
 8002250:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002254:	b29b      	uxth	r3, r3
 8002256:	3301      	adds	r3, #1
 8002258:	b29b      	uxth	r3, r3
 800225a:	b21a      	sxth	r2, r3
 800225c:	4b12      	ldr	r3, [pc, #72]	@ (80022a8 <light_sequence+0xc8>)
 800225e:	809a      	strh	r2, [r3, #4]
			}
			break;
 8002260:	e020      	b.n	80022a4 <light_sequence+0xc4>
		case 1:
			if(light_cnt >= 99)
 8002262:	4b12      	ldr	r3, [pc, #72]	@ (80022ac <light_sequence+0xcc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b62      	cmp	r3, #98	@ 0x62
 8002268:	d90b      	bls.n	8002282 <light_sequence+0xa2>
			{
				light_task.state ++;
 800226a:	4b0f      	ldr	r3, [pc, #60]	@ (80022a8 <light_sequence+0xc8>)
 800226c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002270:	b29b      	uxth	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	b29b      	uxth	r3, r3
 8002276:	b21a      	sxth	r2, r3
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <light_sequence+0xc8>)
 800227a:	809a      	strh	r2, [r3, #4]
				light_cnt = 0;
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <light_sequence+0xcc>)
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
			}
			light_cnt++;
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <light_sequence+0xcc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	4a08      	ldr	r2, [pc, #32]	@ (80022ac <light_sequence+0xcc>)
 800228a:	6013      	str	r3, [r2, #0]
			break;
 800228c:	e00b      	b.n	80022a6 <light_sequence+0xc6>
		case 2:
			light_light_cnt++;
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <light_sequence+0xd8>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	4a08      	ldr	r2, [pc, #32]	@ (80022b8 <light_sequence+0xd8>)
 8002296:	6013      	str	r3, [r2, #0]
			light_task.state = 0;
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <light_sequence+0xc8>)
 800229a:	2200      	movs	r2, #0
 800229c:	809a      	strh	r2, [r3, #4]
			break;
 800229e:	e002      	b.n	80022a6 <light_sequence+0xc6>
		return;
 80022a0:	bf00      	nop
 80022a2:	e000      	b.n	80022a6 <light_sequence+0xc6>
			break;
 80022a4:	bf00      	nop
	}
}
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200002e4 	.word	0x200002e4
 80022ac:	20000314 	.word	0x20000314
 80022b0:	40011000 	.word	0x40011000
 80022b4:	20000318 	.word	0x20000318
 80022b8:	20000300 	.word	0x20000300

080022bc <my_my_task>:

uint32_t global_cnt = 0;

void my_my_task()
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
	if(my_task.reset)
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <my_my_task+0x18>)
 80022c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <my_my_task+0x12>
	{
		NVIC_SystemReset();
 80022ca:	f7ff fc0b 	bl	8001ae4 <__NVIC_SystemReset>
//		my_cnt = 0;
//	}
//	my_cnt++;


}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200002dc 	.word	0x200002dc

080022d8 <HAL_TIM_PeriodElapsedCallback>:
uint8_t send_cnt = 0;
uint32_t sys_tick_offset = 0;
uint8_t tick_once = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

	if(htim == &htim4) //--- general timer (every 1 ms)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a85      	ldr	r2, [pc, #532]	@ (80024f8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	f040 8102 	bne.w	80024ee <HAL_TIM_PeriodElapsedCallback+0x216>
	{
		test++;
 80022ea:	4b84      	ldr	r3, [pc, #528]	@ (80024fc <HAL_TIM_PeriodElapsedCallback+0x224>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a82      	ldr	r2, [pc, #520]	@ (80024fc <HAL_TIM_PeriodElapsedCallback+0x224>)
 80022f2:	6013      	str	r3, [r2, #0]

		if(adaptive_start)
 80022f4:	4b82      	ldr	r3, [pc, #520]	@ (8002500 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_TIM_PeriodElapsedCallback+0x2a>
		{
			globalTimerProcess(&Global_Time);
 80022fc:	4881      	ldr	r0, [pc, #516]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80022fe:	f001 fc79 	bl	8003bf4 <globalTimerProcess>
		}


#ifdef CONTROL_SYSTEM
		my_my_task();
 8002302:	f7ff ffdb 	bl	80022bc <my_my_task>

		light_sequence();
 8002306:	f7ff ff6b 	bl	80021e0 <light_sequence>

//		Task_Pressure();

		Task_Control_Test_UpDown();
 800230a:	f7ff fd97 	bl	8001e3c <Task_Control_Test_UpDown>

		if((depth_setpoint != -1) && (duration_min != 0))
 800230e:	4b7e      	ldr	r3, [pc, #504]	@ (8002508 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002316:	d006      	beq.n	8002326 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002318:	4b7c      	ldr	r3, [pc, #496]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			pid_task.start = 1;
 8002320:	4b7b      	ldr	r3, [pc, #492]	@ (8002510 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002322:	2201      	movs	r2, #1
 8002324:	801a      	strh	r2, [r3, #0]
		}

		Task_Control_PID();
 8002326:	f7ff fe35 	bl	8001f94 <Task_Control_PID>
#endif

#ifdef ADAPTIVE_SAMPLING

	if(adaptive_start)
 800232a:	4b75      	ldr	r3, [pc, #468]	@ (8002500 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 80dd 	beq.w	80024ee <HAL_TIM_PeriodElapsedCallback+0x216>
	{

		if(Global_Time.minute_t >= duration_min)
 8002334:	4b73      	ldr	r3, [pc, #460]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002336:	789b      	ldrb	r3, [r3, #2]
 8002338:	461a      	mov	r2, r3
 800233a:	4b74      	ldr	r3, [pc, #464]	@ (800250c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	db08      	blt.n	8002354 <HAL_TIM_PeriodElapsedCallback+0x7c>
		{
			adaptive_start = 0;
 8002342:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
			done_state = 1;
 8002348:	4b72      	ldr	r3, [pc, #456]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
			pid_task.state = 3;
 800234e:	4b70      	ldr	r3, [pc, #448]	@ (8002510 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002350:	2203      	movs	r2, #3
 8002352:	809a      	strh	r2, [r3, #4]
		}


		if(send_ph)
 8002354:	4b70      	ldr	r3, [pc, #448]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d015      	beq.n	8002388 <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			ph_ready = 1;
 800235c:	4b6f      	ldr	r3, [pc, #444]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
			ph_cnt++;
 8002362:	4b6f      	ldr	r3, [pc, #444]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4b6d      	ldr	r3, [pc, #436]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800236c:	701a      	strb	r2, [r3, #0]
			if(ph_cnt >= 99)
 800236e:	4b6c      	ldr	r3, [pc, #432]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b62      	cmp	r3, #98	@ 0x62
 8002374:	d908      	bls.n	8002388 <HAL_TIM_PeriodElapsedCallback+0xb0>
			{
				ph_cnt = 0;
 8002376:	4b6a      	ldr	r3, [pc, #424]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]
				ph_ready = 0;
 800237c:	4b67      	ldr	r3, [pc, #412]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
				send_ph = 0;
 8002382:	4b65      	ldr	r3, [pc, #404]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
			}
		}

		if(send_temp)
 8002388:	4b66      	ldr	r3, [pc, #408]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_TIM_PeriodElapsedCallback+0xe4>
		{
			temp_ready = 1;
 8002390:	4b65      	ldr	r3, [pc, #404]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002392:	2201      	movs	r2, #1
 8002394:	701a      	strb	r2, [r3, #0]
			temp_cnt++;
 8002396:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b63      	ldr	r3, [pc, #396]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80023a0:	701a      	strb	r2, [r3, #0]
			if(temp_cnt >= 99)
 80023a2:	4b62      	ldr	r3, [pc, #392]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b62      	cmp	r3, #98	@ 0x62
 80023a8:	d908      	bls.n	80023bc <HAL_TIM_PeriodElapsedCallback+0xe4>
			{
				temp_cnt = 0;
 80023aa:	4b60      	ldr	r3, [pc, #384]	@ (800252c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
				temp_ready = 0;
 80023b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
				send_temp = 0;
 80023b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
			}
		}

		if(send_do)
 80023bc:	4b5c      	ldr	r3, [pc, #368]	@ (8002530 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d015      	beq.n	80023f0 <HAL_TIM_PeriodElapsedCallback+0x118>
		{
			do_ready = 1;
 80023c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
			do_cnt++;
 80023ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b59      	ldr	r3, [pc, #356]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80023d4:	701a      	strb	r2, [r3, #0]
			if(do_cnt >= 99)
 80023d6:	4b58      	ldr	r3, [pc, #352]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b62      	cmp	r3, #98	@ 0x62
 80023dc:	d908      	bls.n	80023f0 <HAL_TIM_PeriodElapsedCallback+0x118>
			{
				do_cnt = 0;
 80023de:	4b56      	ldr	r3, [pc, #344]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
				do_ready = 0;
 80023e4:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
				send_do = 0;
 80023ea:	4b51      	ldr	r3, [pc, #324]	@ (8002530 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
			}
		}

		if(send_turb)
 80023f0:	4b52      	ldr	r3, [pc, #328]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x264>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d015      	beq.n	8002424 <HAL_TIM_PeriodElapsedCallback+0x14c>
		{
			turb_ready = 1;
 80023f8:	4b51      	ldr	r3, [pc, #324]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
			turb_cnt++;
 80023fe:	4b51      	ldr	r3, [pc, #324]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b4f      	ldr	r3, [pc, #316]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002408:	701a      	strb	r2, [r3, #0]
			if(turb_cnt >= 99)
 800240a:	4b4e      	ldr	r3, [pc, #312]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b62      	cmp	r3, #98	@ 0x62
 8002410:	d908      	bls.n	8002424 <HAL_TIM_PeriodElapsedCallback+0x14c>
			{
				turb_cnt = 0;
 8002412:	4b4c      	ldr	r3, [pc, #304]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
				turb_ready = 0;
 8002418:	4b49      	ldr	r3, [pc, #292]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
				send_turb = 0;
 800241e:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
			}
		}


		if(done_state)
 8002424:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00e      	beq.n	800244a <HAL_TIM_PeriodElapsedCallback+0x172>
		{
			ph_ready = temp_ready = do_ready = turb_ready = 0;
 800242c:	4b44      	ldr	r3, [pc, #272]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	4b43      	ldr	r3, [pc, #268]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002434:	781a      	ldrb	r2, [r3, #0]
 8002436:	4b3f      	ldr	r3, [pc, #252]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	4b3e      	ldr	r3, [pc, #248]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	4b39      	ldr	r3, [pc, #228]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	4b35      	ldr	r3, [pc, #212]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002448:	701a      	strb	r2, [r3, #0]
		}

		memcpy(transmit +  3, &Global_Time.hour_t, 2);
 800244a:	4a3f      	ldr	r2, [pc, #252]	@ (8002548 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800244c:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	8013      	strh	r3, [r2, #0]
		memcpy(transmit +  5, &Global_Time.minute_t, 1);
 8002452:	4b3e      	ldr	r3, [pc, #248]	@ (800254c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002454:	4a2b      	ldr	r2, [pc, #172]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002456:	7892      	ldrb	r2, [r2, #2]
 8002458:	701a      	strb	r2, [r3, #0]
		memcpy(transmit +  6, &Global_Time.second_t, 1);
 800245a:	4b3d      	ldr	r3, [pc, #244]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800245c:	4a29      	ldr	r2, [pc, #164]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800245e:	78d2      	ldrb	r2, [r2, #3]
 8002460:	701a      	strb	r2, [r3, #0]
		memcpy(transmit +  7, &Global_Time.millisecond_t, 2);
 8002462:	4a3c      	ldr	r2, [pc, #240]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002464:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002466:	889b      	ldrh	r3, [r3, #4]
 8002468:	8013      	strh	r3, [r2, #0]

		memcpy(transmit +  9, &ph_ready, 1);
 800246a:	4b3b      	ldr	r3, [pc, #236]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800246c:	4a2b      	ldr	r2, [pc, #172]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800246e:	7812      	ldrb	r2, [r2, #0]
 8002470:	701a      	strb	r2, [r3, #0]
		memcpy(transmit + 10, &ph, 4);
 8002472:	4a3a      	ldr	r2, [pc, #232]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002474:	4b3a      	ldr	r3, [pc, #232]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6013      	str	r3, [r2, #0]
		memcpy(transmit + 14, &pHSampler.currentInterval, 4);
 800247a:	4a3a      	ldr	r2, [pc, #232]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800247c:	4b3a      	ldr	r3, [pc, #232]	@ (8002568 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	6013      	str	r3, [r2, #0]

		memcpy(transmit + 18, &temp_ready, 1);
 8002482:	4b3a      	ldr	r3, [pc, #232]	@ (800256c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8002484:	4a28      	ldr	r2, [pc, #160]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002486:	7812      	ldrb	r2, [r2, #0]
 8002488:	701a      	strb	r2, [r3, #0]
		memcpy(transmit + 19, &temp_cal, 4);
 800248a:	4a39      	ldr	r2, [pc, #228]	@ (8002570 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800248c:	4b39      	ldr	r3, [pc, #228]	@ (8002574 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6013      	str	r3, [r2, #0]
		memcpy(transmit + 23, &tempSampler.currentInterval, 4);
 8002492:	4a39      	ldr	r2, [pc, #228]	@ (8002578 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8002494:	4b39      	ldr	r3, [pc, #228]	@ (800257c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	6013      	str	r3, [r2, #0]

		memcpy(transmit + 27, &do_ready, 1);
 800249a:	4b39      	ldr	r3, [pc, #228]	@ (8002580 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800249c:	4a25      	ldr	r2, [pc, #148]	@ (8002534 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800249e:	7812      	ldrb	r2, [r2, #0]
 80024a0:	701a      	strb	r2, [r3, #0]
		memcpy(transmit + 28, &do_data.value, 4);
 80024a2:	4a38      	ldr	r2, [pc, #224]	@ (8002584 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80024a4:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	6013      	str	r3, [r2, #0]
		memcpy(transmit + 32, &doSampler.currentInterval, 4);
 80024aa:	4a38      	ldr	r2, [pc, #224]	@ (800258c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80024ac:	4b38      	ldr	r3, [pc, #224]	@ (8002590 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	6013      	str	r3, [r2, #0]

		memcpy(transmit + 36, &turb_ready, 1);
 80024b2:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80024b4:	4a22      	ldr	r2, [pc, #136]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
		memcpy(transmit + 37, &turbid_data.value, 4);
 80024ba:	4a37      	ldr	r2, [pc, #220]	@ (8002598 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80024bc:	4b37      	ldr	r3, [pc, #220]	@ (800259c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	6013      	str	r3, [r2, #0]
		memcpy(transmit + 41, &turbidSampler.currentInterval, 4);
 80024c2:	4a37      	ldr	r2, [pc, #220]	@ (80025a0 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80024c4:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80024c6:	691b      	ldr	r3, [r3, #16]
 80024c8:	6013      	str	r3, [r2, #0]

		send_time++;
 80024ca:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b35      	ldr	r3, [pc, #212]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80024d4:	701a      	strb	r2, [r3, #0]
		if(send_time >= 99)
 80024d6:	4b34      	ldr	r3, [pc, #208]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	2b62      	cmp	r3, #98	@ 0x62
 80024dc:	d907      	bls.n	80024ee <HAL_TIM_PeriodElapsedCallback+0x216>
		{
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)transmit, sizeof(transmit));
 80024de:	2235      	movs	r2, #53	@ 0x35
 80024e0:	4932      	ldr	r1, [pc, #200]	@ (80025ac <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80024e2:	4833      	ldr	r0, [pc, #204]	@ (80025b0 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80024e4:	f006 fa0c 	bl	8008900 <HAL_UART_Transmit_DMA>
			send_time = 0;
 80024e8:	4b2f      	ldr	r3, [pc, #188]	@ (80025a8 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
	}

#endif
	}

}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	200004a8 	.word	0x200004a8
 80024fc:	20000764 	.word	0x20000764
 8002500:	200002ec 	.word	0x200002ec
 8002504:	20000780 	.word	0x20000780
 8002508:	20000004 	.word	0x20000004
 800250c:	200002f0 	.word	0x200002f0
 8002510:	200002d4 	.word	0x200002d4
 8002514:	20000760 	.word	0x20000760
 8002518:	20000969 	.word	0x20000969
 800251c:	2000076d 	.word	0x2000076d
 8002520:	20000771 	.word	0x20000771
 8002524:	20000968 	.word	0x20000968
 8002528:	2000076e 	.word	0x2000076e
 800252c:	20000772 	.word	0x20000772
 8002530:	2000096a 	.word	0x2000096a
 8002534:	2000076f 	.word	0x2000076f
 8002538:	20000773 	.word	0x20000773
 800253c:	2000096b 	.word	0x2000096b
 8002540:	20000770 	.word	0x20000770
 8002544:	20000774 	.word	0x20000774
 8002548:	2000000f 	.word	0x2000000f
 800254c:	20000011 	.word	0x20000011
 8002550:	20000012 	.word	0x20000012
 8002554:	20000013 	.word	0x20000013
 8002558:	20000015 	.word	0x20000015
 800255c:	20000016 	.word	0x20000016
 8002560:	20000810 	.word	0x20000810
 8002564:	2000001a 	.word	0x2000001a
 8002568:	2000093c 	.word	0x2000093c
 800256c:	2000001e 	.word	0x2000001e
 8002570:	2000001f 	.word	0x2000001f
 8002574:	20000794 	.word	0x20000794
 8002578:	20000023 	.word	0x20000023
 800257c:	20000840 	.word	0x20000840
 8002580:	20000027 	.word	0x20000027
 8002584:	20000028 	.word	0x20000028
 8002588:	20000798 	.word	0x20000798
 800258c:	2000002c 	.word	0x2000002c
 8002590:	20000894 	.word	0x20000894
 8002594:	20000030 	.word	0x20000030
 8002598:	20000031 	.word	0x20000031
 800259c:	200007b4 	.word	0x200007b4
 80025a0:	20000035 	.word	0x20000035
 80025a4:	200008e8 	.word	0x200008e8
 80025a8:	2000076c 	.word	0x2000076c
 80025ac:	2000000c 	.word	0x2000000c
 80025b0:	200004f0 	.word	0x200004f0

080025b4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a24      	ldr	r2, [pc, #144]	@ (8002650 <HAL_UART_RxCpltCallback+0x9c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10e      	bne.n	80025e2 <HAL_UART_RxCpltCallback+0x2e>
	{
		memcpy(&depth_setpoint, UART1_RX_BUFFER + 3, 4);
 80025c4:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <HAL_UART_RxCpltCallback+0xa0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <HAL_UART_RxCpltCallback+0xa4>)
 80025cc:	601a      	str	r2, [r3, #0]
		memcpy(&duration_min, UART1_RX_BUFFER + 7, 4);
 80025ce:	4b23      	ldr	r3, [pc, #140]	@ (800265c <HAL_UART_RxCpltCallback+0xa8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b22      	ldr	r3, [pc, #136]	@ (8002660 <HAL_UART_RxCpltCallback+0xac>)
 80025d6:	601a      	str	r2, [r3, #0]

		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 80025d8:	220c      	movs	r2, #12
 80025da:	4922      	ldr	r1, [pc, #136]	@ (8002664 <HAL_UART_RxCpltCallback+0xb0>)
 80025dc:	481c      	ldr	r0, [pc, #112]	@ (8002650 <HAL_UART_RxCpltCallback+0x9c>)
 80025de:	f006 f9ff 	bl	80089e0 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a20      	ldr	r2, [pc, #128]	@ (8002668 <HAL_UART_RxCpltCallback+0xb4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d12e      	bne.n	8002648 <HAL_UART_RxCpltCallback+0x94>
	{
		for (int i = 0 ; i< sizeof(rx) ; i++){
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e014      	b.n	800261a <HAL_UART_RxCpltCallback+0x66>
			if(rx[i] == '\r' || rx[i] == '\n'){
 80025f0:	4a1e      	ldr	r2, [pc, #120]	@ (800266c <HAL_UART_RxCpltCallback+0xb8>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b0d      	cmp	r3, #13
 80025fa:	d005      	beq.n	8002608 <HAL_UART_RxCpltCallback+0x54>
 80025fc:	4a1b      	ldr	r2, [pc, #108]	@ (800266c <HAL_UART_RxCpltCallback+0xb8>)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b0a      	cmp	r3, #10
 8002606:	d105      	bne.n	8002614 <HAL_UART_RxCpltCallback+0x60>
				rx[i] = '\0';
 8002608:	4a18      	ldr	r2, [pc, #96]	@ (800266c <HAL_UART_RxCpltCallback+0xb8>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
				break;
 8002612:	e005      	b.n	8002620 <HAL_UART_RxCpltCallback+0x6c>
		for (int i = 0 ; i< sizeof(rx) ; i++){
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	3301      	adds	r3, #1
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d9e7      	bls.n	80025f0 <HAL_UART_RxCpltCallback+0x3c>
				}
			}
			ph = atof(rx);
 8002620:	4812      	ldr	r0, [pc, #72]	@ (800266c <HAL_UART_RxCpltCallback+0xb8>)
 8002622:	f007 f997 	bl	8009954 <atof>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fa0d 	bl	8000a4c <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	4a0e      	ldr	r2, [pc, #56]	@ (8002670 <HAL_UART_RxCpltCallback+0xbc>)
 8002636:	6013      	str	r3, [r2, #0]
			//ph_cal = (ph - 0.085) / 0.5383;

		    response_received = 1;
 8002638:	4b0e      	ldr	r3, [pc, #56]	@ (8002674 <HAL_UART_RxCpltCallback+0xc0>)
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]

		    HAL_UART_Receive_DMA(&huart2, (uint8_t *)rx, sizeof(rx));
 800263e:	2206      	movs	r2, #6
 8002640:	490a      	ldr	r1, [pc, #40]	@ (800266c <HAL_UART_RxCpltCallback+0xb8>)
 8002642:	4809      	ldr	r0, [pc, #36]	@ (8002668 <HAL_UART_RxCpltCallback+0xb4>)
 8002644:	f006 f9cc 	bl	80089e0 <HAL_UART_Receive_DMA>
	}
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	200004f0 	.word	0x200004f0
 8002654:	200002f7 	.word	0x200002f7
 8002658:	20000004 	.word	0x20000004
 800265c:	200002fb 	.word	0x200002fb
 8002660:	200002f0 	.word	0x200002f0
 8002664:	200002f4 	.word	0x200002f4
 8002668:	20000538 	.word	0x20000538
 800266c:	20000808 	.word	0x20000808
 8002670:	20000810 	.word	0x20000810
 8002674:	20000814 	.word	0x20000814

08002678 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a0d      	ldr	r2, [pc, #52]	@ (80026b8 <HAL_UART_RxHalfCpltCallback+0x40>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d113      	bne.n	80026b0 <HAL_UART_RxHalfCpltCallback+0x38>
	{
		if(!(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C'))
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_UART_RxHalfCpltCallback+0x44>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b41      	cmp	r3, #65	@ 0x41
 800268e:	d107      	bne.n	80026a0 <HAL_UART_RxHalfCpltCallback+0x28>
 8002690:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <HAL_UART_RxHalfCpltCallback+0x44>)
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	2b42      	cmp	r3, #66	@ 0x42
 8002696:	d103      	bne.n	80026a0 <HAL_UART_RxHalfCpltCallback+0x28>
 8002698:	4b08      	ldr	r3, [pc, #32]	@ (80026bc <HAL_UART_RxHalfCpltCallback+0x44>)
 800269a:	789b      	ldrb	r3, [r3, #2]
 800269c:	2b43      	cmp	r3, #67	@ 0x43
 800269e:	d007      	beq.n	80026b0 <HAL_UART_RxHalfCpltCallback+0x38>
		{
			HAL_UART_AbortReceive(&huart1);
 80026a0:	4805      	ldr	r0, [pc, #20]	@ (80026b8 <HAL_UART_RxHalfCpltCallback+0x40>)
 80026a2:	f006 f9c2 	bl	8008a2a <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 80026a6:	220c      	movs	r2, #12
 80026a8:	4904      	ldr	r1, [pc, #16]	@ (80026bc <HAL_UART_RxHalfCpltCallback+0x44>)
 80026aa:	4803      	ldr	r0, [pc, #12]	@ (80026b8 <HAL_UART_RxHalfCpltCallback+0x40>)
 80026ac:	f006 f998 	bl	80089e0 <HAL_UART_Receive_DMA>
//		{
//			HAL_UART_AbortReceive(&huart2);
//			HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx, sizeof(rx));
//		}
	}
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	200004f0 	.word	0x200004f0
 80026bc:	200002f4 	.word	0x200002f4

080026c0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	@ (80026fc <HAL_UART_ErrorCallback+0x3c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d107      	bne.n	80026e0 <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_AbortReceive(&huart1);
 80026d0:	480a      	ldr	r0, [pc, #40]	@ (80026fc <HAL_UART_ErrorCallback+0x3c>)
 80026d2:	f006 f9aa 	bl	8008a2a <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 80026d6:	220c      	movs	r2, #12
 80026d8:	4909      	ldr	r1, [pc, #36]	@ (8002700 <HAL_UART_ErrorCallback+0x40>)
 80026da:	4808      	ldr	r0, [pc, #32]	@ (80026fc <HAL_UART_ErrorCallback+0x3c>)
 80026dc:	f006 f980 	bl	80089e0 <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a08      	ldr	r2, [pc, #32]	@ (8002704 <HAL_UART_ErrorCallback+0x44>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d104      	bne.n	80026f2 <HAL_UART_ErrorCallback+0x32>
	{
		HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx, sizeof(rx));
 80026e8:	2206      	movs	r2, #6
 80026ea:	4907      	ldr	r1, [pc, #28]	@ (8002708 <HAL_UART_ErrorCallback+0x48>)
 80026ec:	4805      	ldr	r0, [pc, #20]	@ (8002704 <HAL_UART_ErrorCallback+0x44>)
 80026ee:	f006 f977 	bl	80089e0 <HAL_UART_Receive_DMA>
	}
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200004f0 	.word	0x200004f0
 8002700:	200002f4 	.word	0x200002f4
 8002704:	20000538 	.word	0x20000538
 8002708:	20000808 	.word	0x20000808
 800270c:	00000000 	.word	0x00000000

08002710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b08a      	sub	sp, #40	@ 0x28
 8002714:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002716:	f002 f80d 	bl	8004734 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800271a:	f000 fc2d 	bl	8002f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800271e:	f000 ff4d 	bl	80035bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002722:	f000 ff05 	bl	8003530 <MX_DMA_Init>
  MX_TIM2_Init();
 8002726:	f000 fd85 	bl	8003234 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800272a:	f000 fe83 	bl	8003434 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800272e:	f000 fed5 	bl	80034dc <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8002732:	f000 fcf9 	bl	8003128 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002736:	f000 fd25 	bl	8003184 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800273a:	f000 fea5 	bl	8003488 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800273e:	f000 fe2b 	bl	8003398 <MX_TIM4_Init>
  MX_ADC1_Init();
 8002742:	f000 fc75 	bl	8003030 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002746:	f000 fdd9 	bl	80032fc <MX_TIM3_Init>
  MX_ADC2_Init();
 800274a:	f000 fcaf 	bl	80030ac <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

#ifdef CONTROL_SYSTEM
  initSubmersible();
 800274e:	f7ff f9df 	bl	8001b10 <initSubmersible>
#endif

#ifdef ADAPTIVE_SAMPLING

  initSampler(&tempSampler, tempHistory, HISTORY_SIZE, 0.025, 1000, 1000, 10000);
 8002752:	4ba1      	ldr	r3, [pc, #644]	@ (80029d8 <main+0x2c8>)
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	4ba1      	ldr	r3, [pc, #644]	@ (80029dc <main+0x2cc>)
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	4ba0      	ldr	r3, [pc, #640]	@ (80029dc <main+0x2cc>)
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	4ba0      	ldr	r3, [pc, #640]	@ (80029e0 <main+0x2d0>)
 8002760:	220a      	movs	r2, #10
 8002762:	49a0      	ldr	r1, [pc, #640]	@ (80029e4 <main+0x2d4>)
 8002764:	48a0      	ldr	r0, [pc, #640]	@ (80029e8 <main+0x2d8>)
 8002766:	f001 f92b 	bl	80039c0 <initSampler>
  initSampler(&doSampler, doHistory, HISTORY_SIZE, 0.06, 90000, 90000, 300000);
 800276a:	4ba0      	ldr	r3, [pc, #640]	@ (80029ec <main+0x2dc>)
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	4ba0      	ldr	r3, [pc, #640]	@ (80029f0 <main+0x2e0>)
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	4b9f      	ldr	r3, [pc, #636]	@ (80029f0 <main+0x2e0>)
 8002774:	9300      	str	r3, [sp, #0]
 8002776:	4b9f      	ldr	r3, [pc, #636]	@ (80029f4 <main+0x2e4>)
 8002778:	220a      	movs	r2, #10
 800277a:	499f      	ldr	r1, [pc, #636]	@ (80029f8 <main+0x2e8>)
 800277c:	489f      	ldr	r0, [pc, #636]	@ (80029fc <main+0x2ec>)
 800277e:	f001 f91f 	bl	80039c0 <initSampler>
  initSampler(&pHSampler, pHHistory, HISTORY_SIZE, 0.018, 60000, 60000, 300000);
 8002782:	4b9a      	ldr	r3, [pc, #616]	@ (80029ec <main+0x2dc>)
 8002784:	9302      	str	r3, [sp, #8]
 8002786:	4b9e      	ldr	r3, [pc, #632]	@ (8002a00 <main+0x2f0>)
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	4b9d      	ldr	r3, [pc, #628]	@ (8002a00 <main+0x2f0>)
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	4b9d      	ldr	r3, [pc, #628]	@ (8002a04 <main+0x2f4>)
 8002790:	220a      	movs	r2, #10
 8002792:	499d      	ldr	r1, [pc, #628]	@ (8002a08 <main+0x2f8>)
 8002794:	489d      	ldr	r0, [pc, #628]	@ (8002a0c <main+0x2fc>)
 8002796:	f001 f913 	bl	80039c0 <initSampler>
  initSampler(&turbidSampler, turbidHistory, HISTORY_SIZE, 0.02, 1000, 1000, 10000);
 800279a:	4b8f      	ldr	r3, [pc, #572]	@ (80029d8 <main+0x2c8>)
 800279c:	9302      	str	r3, [sp, #8]
 800279e:	4b8f      	ldr	r3, [pc, #572]	@ (80029dc <main+0x2cc>)
 80027a0:	9301      	str	r3, [sp, #4]
 80027a2:	4b8e      	ldr	r3, [pc, #568]	@ (80029dc <main+0x2cc>)
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4b9a      	ldr	r3, [pc, #616]	@ (8002a10 <main+0x300>)
 80027a8:	220a      	movs	r2, #10
 80027aa:	499a      	ldr	r1, [pc, #616]	@ (8002a14 <main+0x304>)
 80027ac:	489a      	ldr	r0, [pc, #616]	@ (8002a18 <main+0x308>)
 80027ae:	f001 f907 	bl	80039c0 <initSampler>

  temp_cal = 25;
 80027b2:	4b9a      	ldr	r3, [pc, #616]	@ (8002a1c <main+0x30c>)
 80027b4:	4a9a      	ldr	r2, [pc, #616]	@ (8002a20 <main+0x310>)
 80027b6:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx, sizeof(rx));
 80027b8:	2206      	movs	r2, #6
 80027ba:	499a      	ldr	r1, [pc, #616]	@ (8002a24 <main+0x314>)
 80027bc:	489a      	ldr	r0, [pc, #616]	@ (8002a28 <main+0x318>)
 80027be:	f006 f90f 	bl	80089e0 <HAL_UART_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 80027c2:	489a      	ldr	r0, [pc, #616]	@ (8002a2c <main+0x31c>)
 80027c4:	f005 f81a 	bl	80077fc <HAL_TIM_Base_Start_IT>
#endif

  HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 80027c8:	220c      	movs	r2, #12
 80027ca:	4999      	ldr	r1, [pc, #612]	@ (8002a30 <main+0x320>)
 80027cc:	4899      	ldr	r0, [pc, #612]	@ (8002a34 <main+0x324>)
 80027ce:	f006 f907 	bl	80089e0 <HAL_UART_Receive_DMA>

  HAL_TIM_Base_Start_IT(&htim4);
 80027d2:	4899      	ldr	r0, [pc, #612]	@ (8002a38 <main+0x328>)
 80027d4:	f005 f812 	bl	80077fc <HAL_TIM_Base_Start_IT>
  while (1)
  {

#ifdef ADAPTIVE_SAMPLING

	  if(adaptive_start)
 80027d8:	4b98      	ldr	r3, [pc, #608]	@ (8002a3c <main+0x32c>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0fb      	beq.n	80027d8 <main+0xc8>
	  {
		  if(!tick_once)
 80027e0:	4b97      	ldr	r3, [pc, #604]	@ (8002a40 <main+0x330>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <main+0xee>
		  {
			  tick_once++;
 80027e8:	4b95      	ldr	r3, [pc, #596]	@ (8002a40 <main+0x330>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b93      	ldr	r3, [pc, #588]	@ (8002a40 <main+0x330>)
 80027f2:	701a      	strb	r2, [r3, #0]
			  sys_tick_offset = HAL_GetTick();
 80027f4:	f001 fff6 	bl	80047e4 <HAL_GetTick>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a92      	ldr	r2, [pc, #584]	@ (8002a44 <main+0x334>)
 80027fc:	6013      	str	r3, [r2, #0]
		  }
	  current_sys_tick = HAL_GetTick() - sys_tick_offset;
 80027fe:	f001 fff1 	bl	80047e4 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	4b8f      	ldr	r3, [pc, #572]	@ (8002a44 <main+0x334>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	4a8f      	ldr	r2, [pc, #572]	@ (8002a48 <main+0x338>)
 800280c:	6013      	str	r3, [r2, #0]
	  switch (temp_state)
 800280e:	4b8f      	ldr	r3, [pc, #572]	@ (8002a4c <main+0x33c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	f200 80c3 	bhi.w	800299e <main+0x28e>
 8002818:	a201      	add	r2, pc, #4	@ (adr r2, 8002820 <main+0x110>)
 800281a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281e:	bf00      	nop
 8002820:	08002831 	.word	0x08002831
 8002824:	080028a1 	.word	0x080028a1
 8002828:	080028bb 	.word	0x080028bb
 800282c:	0800290b 	.word	0x0800290b
	  {
	  	  case TEMP_STATE_IDLE:
	  		  if (current_sys_tick - last_temp_tick >= tempSampler.currentInterval-750)
 8002830:	4b85      	ldr	r3, [pc, #532]	@ (8002a48 <main+0x338>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b86      	ldr	r3, [pc, #536]	@ (8002a50 <main+0x340>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fa0c 	bl	8000c58 <__aeabi_ui2f>
 8002840:	4604      	mov	r4, r0
 8002842:	4b69      	ldr	r3, [pc, #420]	@ (80029e8 <main+0x2d8>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	4983      	ldr	r1, [pc, #524]	@ (8002a54 <main+0x344>)
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe f953 	bl	8000af4 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	4619      	mov	r1, r3
 8002852:	4620      	mov	r0, r4
 8002854:	f7fe fc0a 	bl	800106c <__aeabi_fcmpge>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d100      	bne.n	8002860 <main+0x150>
	  			  {
	  				  last_temp_tick = current_sys_tick;
	  				  temp_state = TEMP_STATE_IDLE;
	  			  }
	  		  }
	  		  break;
 800285e:	e0a3      	b.n	80029a8 <main+0x298>
	  			  Presence = DS18B20_Start();
 8002860:	f000 ffa2 	bl	80037a8 <DS18B20_Start>
 8002864:	4603      	mov	r3, r0
 8002866:	461a      	mov	r2, r3
 8002868:	4b7b      	ldr	r3, [pc, #492]	@ (8002a58 <main+0x348>)
 800286a:	701a      	strb	r2, [r3, #0]
	  			  if (Presence == 1)
 800286c:	4b7a      	ldr	r3, [pc, #488]	@ (8002a58 <main+0x348>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d10d      	bne.n	8002890 <main+0x180>
	  				  DS18B20_Write(0xCC);  // skip ROM
 8002874:	20cc      	movs	r0, #204	@ 0xcc
 8002876:	f000 ffc7 	bl	8003808 <DS18B20_Write>
	  				  DS18B20_Write(0x44);  // start temperature conversion
 800287a:	2044      	movs	r0, #68	@ 0x44
 800287c:	f000 ffc4 	bl	8003808 <DS18B20_Write>
	  				  last_temp_tick = current_sys_tick;  // mulai tunggu 750ms
 8002880:	4b71      	ldr	r3, [pc, #452]	@ (8002a48 <main+0x338>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a72      	ldr	r2, [pc, #456]	@ (8002a50 <main+0x340>)
 8002886:	6013      	str	r3, [r2, #0]
	  				  temp_state = TEMP_STATE_WAIT_CONVERT;
 8002888:	4b70      	ldr	r3, [pc, #448]	@ (8002a4c <main+0x33c>)
 800288a:	2201      	movs	r2, #1
 800288c:	701a      	strb	r2, [r3, #0]
	  		  break;
 800288e:	e08b      	b.n	80029a8 <main+0x298>
	  				  last_temp_tick = current_sys_tick;
 8002890:	4b6d      	ldr	r3, [pc, #436]	@ (8002a48 <main+0x338>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a6e      	ldr	r2, [pc, #440]	@ (8002a50 <main+0x340>)
 8002896:	6013      	str	r3, [r2, #0]
	  				  temp_state = TEMP_STATE_IDLE;
 8002898:	4b6c      	ldr	r3, [pc, #432]	@ (8002a4c <main+0x33c>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
	  		  break;
 800289e:	e083      	b.n	80029a8 <main+0x298>

	  	  case TEMP_STATE_WAIT_CONVERT:
	  		  if (current_sys_tick - last_temp_tick >= 750)
 80028a0:	4b69      	ldr	r3, [pc, #420]	@ (8002a48 <main+0x338>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002a50 <main+0x340>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f240 22ed 	movw	r2, #749	@ 0x2ed
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d979      	bls.n	80029a6 <main+0x296>
	  		  {
	  			  temp_state = TEMP_STATE_READ_TEMP;
 80028b2:	4b66      	ldr	r3, [pc, #408]	@ (8002a4c <main+0x33c>)
 80028b4:	2202      	movs	r2, #2
 80028b6:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80028b8:	e075      	b.n	80029a6 <main+0x296>

	  	  case TEMP_STATE_READ_TEMP:
	  		  Presence = DS18B20_Start();
 80028ba:	f000 ff75 	bl	80037a8 <DS18B20_Start>
 80028be:	4603      	mov	r3, r0
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b65      	ldr	r3, [pc, #404]	@ (8002a58 <main+0x348>)
 80028c4:	701a      	strb	r2, [r3, #0]
	  		  if (Presence == 1)
 80028c6:	4b64      	ldr	r3, [pc, #400]	@ (8002a58 <main+0x348>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d115      	bne.n	80028fa <main+0x1ea>
	  		  {
	  			  DS18B20_Write(0xCC);  // skip ROM
 80028ce:	20cc      	movs	r0, #204	@ 0xcc
 80028d0:	f000 ff9a 	bl	8003808 <DS18B20_Write>
	  			  DS18B20_Write(0xBE);  // read scratchpad
 80028d4:	20be      	movs	r0, #190	@ 0xbe
 80028d6:	f000 ff97 	bl	8003808 <DS18B20_Write>
	  			  Temp_byte1 = DS18B20_Read(); // LSB
 80028da:	f000 ffdb 	bl	8003894 <DS18B20_Read>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b5e      	ldr	r3, [pc, #376]	@ (8002a5c <main+0x34c>)
 80028e4:	701a      	strb	r2, [r3, #0]
	  			  Temp_byte2 = DS18B20_Read(); // MSB
 80028e6:	f000 ffd5 	bl	8003894 <DS18B20_Read>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002a60 <main+0x350>)
 80028f0:	701a      	strb	r2, [r3, #0]
	  			  temp_state = TEMP_STATE_DONE;
 80028f2:	4b56      	ldr	r3, [pc, #344]	@ (8002a4c <main+0x33c>)
 80028f4:	2203      	movs	r2, #3
 80028f6:	701a      	strb	r2, [r3, #0]
	  		  else
	  		  {
	  			  last_temp_tick = current_sys_tick;
	  			  temp_state = TEMP_STATE_IDLE; // gagal deteksi sensor
	  		  }
	  		  break;
 80028f8:	e056      	b.n	80029a8 <main+0x298>
	  			  last_temp_tick = current_sys_tick;
 80028fa:	4b53      	ldr	r3, [pc, #332]	@ (8002a48 <main+0x338>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a54      	ldr	r2, [pc, #336]	@ (8002a50 <main+0x340>)
 8002900:	6013      	str	r3, [r2, #0]
	  			  temp_state = TEMP_STATE_IDLE; // gagal deteksi sensor
 8002902:	4b52      	ldr	r3, [pc, #328]	@ (8002a4c <main+0x33c>)
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002908:	e04e      	b.n	80029a8 <main+0x298>

	  	  case TEMP_STATE_DONE:
	  		  uint16_t TEMP = (Temp_byte2 << 8) | Temp_byte1;
 800290a:	4b55      	ldr	r3, [pc, #340]	@ (8002a60 <main+0x350>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b21b      	sxth	r3, r3
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	b21a      	sxth	r2, r3
 8002914:	4b51      	ldr	r3, [pc, #324]	@ (8002a5c <main+0x34c>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	b21b      	sxth	r3, r3
 800291a:	4313      	orrs	r3, r2
 800291c:	b21b      	sxth	r3, r3
 800291e:	82fb      	strh	r3, [r7, #22]
	  		  temp_raw = (float)TEMP / 16.0;
 8002920:	8afb      	ldrh	r3, [r7, #22]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f998 	bl	8000c58 <__aeabi_ui2f>
 8002928:	4603      	mov	r3, r0
 800292a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800292e:	4618      	mov	r0, r3
 8002930:	f7fe fa9e 	bl	8000e70 <__aeabi_fdiv>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	4b4a      	ldr	r3, [pc, #296]	@ (8002a64 <main+0x354>)
 800293a:	601a      	str	r2, [r3, #0]
	  		  temp_cal = 0.9722 * temp_raw + 0.6976;
 800293c:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <main+0x354>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fd71 	bl	8000428 <__aeabi_f2d>
 8002946:	a320      	add	r3, pc, #128	@ (adr r3, 80029c8 <main+0x2b8>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fdc4 	bl	80004d8 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	a31d      	add	r3, pc, #116	@ (adr r3, 80029d0 <main+0x2c0>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fc05 	bl	800016c <__adddf3>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f86f 	bl	8000a4c <__aeabi_d2f>
 800296e:	4603      	mov	r3, r0
 8002970:	4a2a      	ldr	r2, [pc, #168]	@ (8002a1c <main+0x30c>)
 8002972:	6013      	str	r3, [r2, #0]
	  		  float newIntervalTemp = updateSamplingInterval(&tempSampler, temp_cal);
 8002974:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <main+0x30c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	481b      	ldr	r0, [pc, #108]	@ (80029e8 <main+0x2d8>)
 800297c:	f001 f84a 	bl	8003a14 <updateSamplingInterval>
 8002980:	6138      	str	r0, [r7, #16]
	  		  tempSampler.currentInterval = newIntervalTemp;
 8002982:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <main+0x2d8>)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	6113      	str	r3, [r2, #16]
	  		  send_temp = 1;
 8002988:	4b37      	ldr	r3, [pc, #220]	@ (8002a68 <main+0x358>)
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
	  		  last_temp_tick = current_sys_tick;
 800298e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a48 <main+0x338>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2f      	ldr	r2, [pc, #188]	@ (8002a50 <main+0x340>)
 8002994:	6013      	str	r3, [r2, #0]
	  		  temp_state = TEMP_STATE_IDLE;
 8002996:	4b2d      	ldr	r3, [pc, #180]	@ (8002a4c <main+0x33c>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
	  		  break;
 800299c:	e004      	b.n	80029a8 <main+0x298>

	  	  default:
	  		  temp_state = TEMP_STATE_IDLE;
 800299e:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <main+0x33c>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
	  		  break;
 80029a4:	e000      	b.n	80029a8 <main+0x298>
	  		  break;
 80029a6:	bf00      	nop
	  }


	  switch(do_state)
 80029a8:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <main+0x35c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	f200 810b 	bhi.w	8002bc8 <main+0x4b8>
 80029b2:	a201      	add	r2, pc, #4	@ (adr r2, 80029b8 <main+0x2a8>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	08002a71 	.word	0x08002a71
 80029bc:	08002a9f 	.word	0x08002a9f
 80029c0:	08002ad5 	.word	0x08002ad5
 80029c4:	08002b9f 	.word	0x08002b9f
 80029c8:	2ca57a78 	.word	0x2ca57a78
 80029cc:	3fef1c43 	.word	0x3fef1c43
 80029d0:	3c361134 	.word	0x3c361134
 80029d4:	3fe652bd 	.word	0x3fe652bd
 80029d8:	461c4000 	.word	0x461c4000
 80029dc:	447a0000 	.word	0x447a0000
 80029e0:	3ccccccd 	.word	0x3ccccccd
 80029e4:	20000818 	.word	0x20000818
 80029e8:	20000840 	.word	0x20000840
 80029ec:	48927c00 	.word	0x48927c00
 80029f0:	47afc800 	.word	0x47afc800
 80029f4:	3d75c28f 	.word	0x3d75c28f
 80029f8:	2000086c 	.word	0x2000086c
 80029fc:	20000894 	.word	0x20000894
 8002a00:	476a6000 	.word	0x476a6000
 8002a04:	3c9374bc 	.word	0x3c9374bc
 8002a08:	20000914 	.word	0x20000914
 8002a0c:	2000093c 	.word	0x2000093c
 8002a10:	3ca3d70a 	.word	0x3ca3d70a
 8002a14:	200008c0 	.word	0x200008c0
 8002a18:	200008e8 	.word	0x200008e8
 8002a1c:	20000794 	.word	0x20000794
 8002a20:	41c80000 	.word	0x41c80000
 8002a24:	20000808 	.word	0x20000808
 8002a28:	20000538 	.word	0x20000538
 8002a2c:	20000460 	.word	0x20000460
 8002a30:	200002f4 	.word	0x200002f4
 8002a34:	200004f0 	.word	0x200004f0
 8002a38:	200004a8 	.word	0x200004a8
 8002a3c:	200002ec 	.word	0x200002ec
 8002a40:	2000077c 	.word	0x2000077c
 8002a44:	20000778 	.word	0x20000778
 8002a48:	20000768 	.word	0x20000768
 8002a4c:	20000789 	.word	0x20000789
 8002a50:	2000078c 	.word	0x2000078c
 8002a54:	443b8000 	.word	0x443b8000
 8002a58:	20000786 	.word	0x20000786
 8002a5c:	20000787 	.word	0x20000787
 8002a60:	20000788 	.word	0x20000788
 8002a64:	20000790 	.word	0x20000790
 8002a68:	20000968 	.word	0x20000968
 8002a6c:	200007ac 	.word	0x200007ac
	  {
	  	  case DO_STATE_IDLE:
	  		  if(current_sys_tick - last_do_tick >= doSampler.currentInterval)
 8002a70:	4b7f      	ldr	r3, [pc, #508]	@ (8002c70 <main+0x560>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b7f      	ldr	r3, [pc, #508]	@ (8002c74 <main+0x564>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f8ec 	bl	8000c58 <__aeabi_ui2f>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b7d      	ldr	r3, [pc, #500]	@ (8002c78 <main+0x568>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	4619      	mov	r1, r3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f7fe faef 	bl	800106c <__aeabi_fcmpge>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d100      	bne.n	8002a96 <main+0x386>
	  		  {
	  			  do_state = DO_STATE_READ_ADC;
	  		  }
	  		  break;
 8002a94:	e09c      	b.n	8002bd0 <main+0x4c0>
	  			  do_state = DO_STATE_READ_ADC;
 8002a96:	4b79      	ldr	r3, [pc, #484]	@ (8002c7c <main+0x56c>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002a9c:	e098      	b.n	8002bd0 <main+0x4c0>

	  	  case DO_STATE_READ_ADC:
	  		  HAL_ADC_Start(&hadc1);
 8002a9e:	4878      	ldr	r0, [pc, #480]	@ (8002c80 <main+0x570>)
 8002aa0:	f001 ffa6 	bl	80049f0 <HAL_ADC_Start>
	  		  if(HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 8002aa4:	2164      	movs	r1, #100	@ 0x64
 8002aa6:	4876      	ldr	r0, [pc, #472]	@ (8002c80 <main+0x570>)
 8002aa8:	f002 f87c 	bl	8004ba4 <HAL_ADC_PollForConversion>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d106      	bne.n	8002ac0 <main+0x3b0>
	  		  {
	  			  do_data.adc_raw = HAL_ADC_GetValue(&hadc1);
 8002ab2:	4873      	ldr	r0, [pc, #460]	@ (8002c80 <main+0x570>)
 8002ab4:	f002 f97c 	bl	8004db0 <HAL_ADC_GetValue>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a72      	ldr	r2, [pc, #456]	@ (8002c84 <main+0x574>)
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e002      	b.n	8002ac6 <main+0x3b6>
	  		  }
	  		  else
	  		  {
	  			  do_data.adc_raw = 0;
 8002ac0:	4b70      	ldr	r3, [pc, #448]	@ (8002c84 <main+0x574>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
	  		  }
	  		  HAL_ADC_Stop(&hadc1);
 8002ac6:	486e      	ldr	r0, [pc, #440]	@ (8002c80 <main+0x570>)
 8002ac8:	f002 f840 	bl	8004b4c <HAL_ADC_Stop>
	  		  do_state = DO_STATE_CALCULATE;
 8002acc:	4b6b      	ldr	r3, [pc, #428]	@ (8002c7c <main+0x56c>)
 8002ace:	2202      	movs	r2, #2
 8002ad0:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002ad2:	e07d      	b.n	8002bd0 <main+0x4c0>

	  	  case DO_STATE_CALCULATE:
	  		  do_data.adc_voltage = VREF * do_data.adc_raw/ADC_RES;
 8002ad4:	4b6b      	ldr	r3, [pc, #428]	@ (8002c84 <main+0x574>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002adc:	fb03 f202 	mul.w	r2, r3, r2
 8002ae0:	4b69      	ldr	r3, [pc, #420]	@ (8002c88 <main+0x578>)
 8002ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ae6:	1ad2      	subs	r2, r2, r3
 8002ae8:	0852      	lsrs	r2, r2, #1
 8002aea:	4413      	add	r3, r2
 8002aec:	0adb      	lsrs	r3, r3, #11
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f8b2 	bl	8000c58 <__aeabi_ui2f>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4a63      	ldr	r2, [pc, #396]	@ (8002c84 <main+0x574>)
 8002af8:	6053      	str	r3, [r2, #4]
	  		  do_data.value = calculateDO(do_data.adc_voltage, temp_cal);
 8002afa:	4b62      	ldr	r3, [pc, #392]	@ (8002c84 <main+0x574>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe faee 	bl	80010e0 <__aeabi_f2uiz>
 8002b04:	4602      	mov	r2, r0
 8002b06:	4b61      	ldr	r3, [pc, #388]	@ (8002c8c <main+0x57c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	f000 feff 	bl	8003910 <calculateDO>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4a5b      	ldr	r2, [pc, #364]	@ (8002c84 <main+0x574>)
 8002b16:	6093      	str	r3, [r2, #8]
	  		  do_data.cal_value = (0.1012*do_data.value*do_data.value)+(0.2518*do_data.value)+0.3116;
 8002b18:	4b5a      	ldr	r3, [pc, #360]	@ (8002c84 <main+0x574>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fc83 	bl	8000428 <__aeabi_f2d>
 8002b22:	a34d      	add	r3, pc, #308	@ (adr r3, 8002c58 <main+0x548>)
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f7fd fcd6 	bl	80004d8 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4614      	mov	r4, r2
 8002b32:	461d      	mov	r5, r3
 8002b34:	4b53      	ldr	r3, [pc, #332]	@ (8002c84 <main+0x574>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fc75 	bl	8000428 <__aeabi_f2d>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4620      	mov	r0, r4
 8002b44:	4629      	mov	r1, r5
 8002b46:	f7fd fcc7 	bl	80004d8 <__aeabi_dmul>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4614      	mov	r4, r2
 8002b50:	461d      	mov	r5, r3
 8002b52:	4b4c      	ldr	r3, [pc, #304]	@ (8002c84 <main+0x574>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fc66 	bl	8000428 <__aeabi_f2d>
 8002b5c:	a340      	add	r3, pc, #256	@ (adr r3, 8002c60 <main+0x550>)
 8002b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b62:	f7fd fcb9 	bl	80004d8 <__aeabi_dmul>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	f7fd fafd 	bl	800016c <__adddf3>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	a33b      	add	r3, pc, #236	@ (adr r3, 8002c68 <main+0x558>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f7fd faf4 	bl	800016c <__adddf3>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fd ff5e 	bl	8000a4c <__aeabi_d2f>
 8002b90:	4603      	mov	r3, r0
 8002b92:	4a3c      	ldr	r2, [pc, #240]	@ (8002c84 <main+0x574>)
 8002b94:	60d3      	str	r3, [r2, #12]
	  		  do_state = DO_STATE_DONE;
 8002b96:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <main+0x56c>)
 8002b98:	2203      	movs	r2, #3
 8002b9a:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002b9c:	e018      	b.n	8002bd0 <main+0x4c0>
	  	  case DO_STATE_DONE:
	  		  float newIntervalDO = updateSamplingInterval(&doSampler, do_data.value);
 8002b9e:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <main+0x574>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4834      	ldr	r0, [pc, #208]	@ (8002c78 <main+0x568>)
 8002ba6:	f000 ff35 	bl	8003a14 <updateSamplingInterval>
 8002baa:	60f8      	str	r0, [r7, #12]
	  		  doSampler.currentInterval = newIntervalDO;
 8002bac:	4a32      	ldr	r2, [pc, #200]	@ (8002c78 <main+0x568>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6113      	str	r3, [r2, #16]
	  		  last_do_tick = current_sys_tick;
 8002bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c70 <main+0x560>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8002c74 <main+0x564>)
 8002bb8:	6013      	str	r3, [r2, #0]
	  		  do_state = DO_STATE_IDLE;
 8002bba:	4b30      	ldr	r3, [pc, #192]	@ (8002c7c <main+0x56c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
	  		  send_do = 1;
 8002bc0:	4b33      	ldr	r3, [pc, #204]	@ (8002c90 <main+0x580>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002bc6:	e003      	b.n	8002bd0 <main+0x4c0>

	  	  default:
	  		  do_state = DO_STATE_IDLE;
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8002c7c <main+0x56c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002bce:	bf00      	nop
	  }


	  switch(turbid_state)
 8002bd0:	4b30      	ldr	r3, [pc, #192]	@ (8002c94 <main+0x584>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	f200 812e 	bhi.w	8002e36 <main+0x726>
 8002bda:	a201      	add	r2, pc, #4	@ (adr r2, 8002be0 <main+0x4d0>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf5 	.word	0x08002bf5
 8002be4:	08002c23 	.word	0x08002c23
 8002be8:	08002ca9 	.word	0x08002ca9
 8002bec:	08002d6d 	.word	0x08002d6d
 8002bf0:	08002e0d 	.word	0x08002e0d
	  {
	  	  case TURBID_STATE_IDLE:
	  		  if(current_sys_tick - last_turbid_tick >= turbidSampler.currentInterval)
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <main+0x560>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b27      	ldr	r3, [pc, #156]	@ (8002c98 <main+0x588>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f82a 	bl	8000c58 <__aeabi_ui2f>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b25      	ldr	r3, [pc, #148]	@ (8002c9c <main+0x58c>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	f7fe fa2d 	bl	800106c <__aeabi_fcmpge>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d100      	bne.n	8002c1a <main+0x50a>
	  		  {
	  			  turbid_state = TURBID_STATE_READ_ADC;
	  		  }
	  		  break;
 8002c18:	e111      	b.n	8002e3e <main+0x72e>
	  			  turbid_state = TURBID_STATE_READ_ADC;
 8002c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <main+0x584>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002c20:	e10d      	b.n	8002e3e <main+0x72e>

	  	  case TURBID_STATE_READ_ADC:
	  		  HAL_ADC_Start(&hadc2);
 8002c22:	481f      	ldr	r0, [pc, #124]	@ (8002ca0 <main+0x590>)
 8002c24:	f001 fee4 	bl	80049f0 <HAL_ADC_Start>
	  		  if(HAL_ADC_PollForConversion(&hadc2, 100) == HAL_OK)
 8002c28:	2164      	movs	r1, #100	@ 0x64
 8002c2a:	481d      	ldr	r0, [pc, #116]	@ (8002ca0 <main+0x590>)
 8002c2c:	f001 ffba 	bl	8004ba4 <HAL_ADC_PollForConversion>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <main+0x534>
	  		  {
	  			  turbid_data.adc_raw = HAL_ADC_GetValue(&hadc2);
 8002c36:	481a      	ldr	r0, [pc, #104]	@ (8002ca0 <main+0x590>)
 8002c38:	f002 f8ba 	bl	8004db0 <HAL_ADC_GetValue>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4a19      	ldr	r2, [pc, #100]	@ (8002ca4 <main+0x594>)
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e002      	b.n	8002c4a <main+0x53a>
	  		  }
	  		  else
	  		  {
	  			  turbid_data.adc_raw = 0;
 8002c44:	4b17      	ldr	r3, [pc, #92]	@ (8002ca4 <main+0x594>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
	  		  }
	  		  HAL_ADC_Stop(&hadc2);
 8002c4a:	4815      	ldr	r0, [pc, #84]	@ (8002ca0 <main+0x590>)
 8002c4c:	f001 ff7e 	bl	8004b4c <HAL_ADC_Stop>
	  		  turbid_state = TURBID_STATE_FILTER;
 8002c50:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <main+0x584>)
 8002c52:	2202      	movs	r2, #2
 8002c54:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002c56:	e0f2      	b.n	8002e3e <main+0x72e>
 8002c58:	425aee63 	.word	0x425aee63
 8002c5c:	3fb9e83e 	.word	0x3fb9e83e
 8002c60:	bf487fcc 	.word	0xbf487fcc
 8002c64:	3fd01d7d 	.word	0x3fd01d7d
 8002c68:	205bc01a 	.word	0x205bc01a
 8002c6c:	3fd3f141 	.word	0x3fd3f141
 8002c70:	20000768 	.word	0x20000768
 8002c74:	200007b0 	.word	0x200007b0
 8002c78:	20000894 	.word	0x20000894
 8002c7c:	200007ac 	.word	0x200007ac
 8002c80:	2000031c 	.word	0x2000031c
 8002c84:	20000798 	.word	0x20000798
 8002c88:	00100101 	.word	0x00100101
 8002c8c:	20000794 	.word	0x20000794
 8002c90:	2000096a 	.word	0x2000096a
 8002c94:	200007c8 	.word	0x200007c8
 8002c98:	200007cc 	.word	0x200007cc
 8002c9c:	200008e8 	.word	0x200008e8
 8002ca0:	2000034c 	.word	0x2000034c
 8002ca4:	200007b4 	.word	0x200007b4

	  	  case TURBID_STATE_FILTER:
	  		  // Hapus nilai lama dari jumlah total
	  		  if (turbid_buffer_count == MOV_AVER_TURB)
 8002ca8:	4b9d      	ldr	r3, [pc, #628]	@ (8002f20 <main+0x810>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b0a      	cmp	r3, #10
 8002cae:	d113      	bne.n	8002cd8 <main+0x5c8>
	  		  {
	  			  turbid_buffer_sum -= turbid_values_buffer[turbid_buffer_index];
 8002cb0:	4b9c      	ldr	r3, [pc, #624]	@ (8002f24 <main+0x814>)
 8002cb2:	681c      	ldr	r4, [r3, #0]
 8002cb4:	4b9c      	ldr	r3, [pc, #624]	@ (8002f28 <main+0x818>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b9c      	ldr	r3, [pc, #624]	@ (8002f2c <main+0x81c>)
 8002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd ffc9 	bl	8000c58 <__aeabi_ui2f>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4620      	mov	r0, r4
 8002ccc:	f7fd ff12 	bl	8000af4 <__aeabi_fsub>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	4b93      	ldr	r3, [pc, #588]	@ (8002f24 <main+0x814>)
 8002cd6:	601a      	str	r2, [r3, #0]
	  		  }

	  		  // Tambahkan nilai ADC raw baru ke buffer dan jumlah total
	  		  turbid_values_buffer[turbid_buffer_index] = turbid_data.adc_raw;
 8002cd8:	4b93      	ldr	r3, [pc, #588]	@ (8002f28 <main+0x818>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4b94      	ldr	r3, [pc, #592]	@ (8002f30 <main+0x820>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a92      	ldr	r2, [pc, #584]	@ (8002f2c <main+0x81c>)
 8002ce4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  		  turbid_buffer_sum += turbid_data.adc_raw;
 8002ce8:	4b91      	ldr	r3, [pc, #580]	@ (8002f30 <main+0x820>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd ffb3 	bl	8000c58 <__aeabi_ui2f>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	4b8b      	ldr	r3, [pc, #556]	@ (8002f24 <main+0x814>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7fd fefc 	bl	8000af8 <__addsf3>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	4b87      	ldr	r3, [pc, #540]	@ (8002f24 <main+0x814>)
 8002d06:	601a      	str	r2, [r3, #0]

	  		  // Majukan indeks buffer
	  		  turbid_buffer_index = (turbid_buffer_index + 1) % MOV_AVER_TURB;
 8002d08:	4b87      	ldr	r3, [pc, #540]	@ (8002f28 <main+0x818>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	4b89      	ldr	r3, [pc, #548]	@ (8002f34 <main+0x824>)
 8002d10:	fb83 1302 	smull	r1, r3, r3, r2
 8002d14:	1099      	asrs	r1, r3, #2
 8002d16:	17d3      	asrs	r3, r2, #31
 8002d18:	1ac9      	subs	r1, r1, r3
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	1ad1      	subs	r1, r2, r3
 8002d24:	b2ca      	uxtb	r2, r1
 8002d26:	4b80      	ldr	r3, [pc, #512]	@ (8002f28 <main+0x818>)
 8002d28:	701a      	strb	r2, [r3, #0]

	  		  // Hitung berapa banyak data yang sudah ada di buffer (maks TURBID_MOVING_AVERAGE_N)
	  		  if (turbid_buffer_count < MOV_AVER_TURB)
 8002d2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002f20 <main+0x810>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b09      	cmp	r3, #9
 8002d30:	d805      	bhi.n	8002d3e <main+0x62e>
	  		  {
	  			  turbid_buffer_count++;
 8002d32:	4b7b      	ldr	r3, [pc, #492]	@ (8002f20 <main+0x810>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	3301      	adds	r3, #1
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4b79      	ldr	r3, [pc, #484]	@ (8002f20 <main+0x810>)
 8002d3c:	701a      	strb	r2, [r3, #0]
	  		  }

	  		  // Hitung nilai rata-rata ADC mentah yang difilter
	  		  turbid_data.filtered_adc_raw = (uint32_t)(turbid_buffer_sum / turbid_buffer_count);
 8002d3e:	4b79      	ldr	r3, [pc, #484]	@ (8002f24 <main+0x814>)
 8002d40:	681c      	ldr	r4, [r3, #0]
 8002d42:	4b77      	ldr	r3, [pc, #476]	@ (8002f20 <main+0x810>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd ff8a 	bl	8000c60 <__aeabi_i2f>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4620      	mov	r0, r4
 8002d52:	f7fe f88d 	bl	8000e70 <__aeabi_fdiv>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe f9c1 	bl	80010e0 <__aeabi_f2uiz>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4a73      	ldr	r2, [pc, #460]	@ (8002f30 <main+0x820>)
 8002d62:	6113      	str	r3, [r2, #16]

	  		  turbid_state = TURBID_STATE_CALCULATE; // Lanjut ke state perhitungan
 8002d64:	4b74      	ldr	r3, [pc, #464]	@ (8002f38 <main+0x828>)
 8002d66:	2203      	movs	r2, #3
 8002d68:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002d6a:	e068      	b.n	8002e3e <main+0x72e>

	  	  case TURBID_STATE_CALCULATE:

	  		  turbid_data.adc_voltage = VREF * (((float)turbid_data.filtered_adc_raw * 2) / ADC_RES)/1000;
 8002d6c:	4b70      	ldr	r3, [pc, #448]	@ (8002f30 <main+0x820>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd ff71 	bl	8000c58 <__aeabi_ui2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd febc 	bl	8000af8 <__addsf3>
 8002d80:	4603      	mov	r3, r0
 8002d82:	496e      	ldr	r1, [pc, #440]	@ (8002f3c <main+0x82c>)
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe f873 	bl	8000e70 <__aeabi_fdiv>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	496c      	ldr	r1, [pc, #432]	@ (8002f40 <main+0x830>)
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd ffba 	bl	8000d08 <__aeabi_fmul>
 8002d94:	4603      	mov	r3, r0
 8002d96:	496b      	ldr	r1, [pc, #428]	@ (8002f44 <main+0x834>)
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe f869 	bl	8000e70 <__aeabi_fdiv>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461a      	mov	r2, r3
 8002da2:	4b63      	ldr	r3, [pc, #396]	@ (8002f30 <main+0x820>)
 8002da4:	605a      	str	r2, [r3, #4]

	  		  turbid_data.cal_value = (turbid_data.adc_voltage - 2.1733) / -0.003;
 8002da6:	4b62      	ldr	r3, [pc, #392]	@ (8002f30 <main+0x820>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fb3c 	bl	8000428 <__aeabi_f2d>
 8002db0:	a357      	add	r3, pc, #348	@ (adr r3, 8002f10 <main+0x800>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f7fd f9d7 	bl	8000168 <__aeabi_dsub>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	a355      	add	r3, pc, #340	@ (adr r3, 8002f18 <main+0x808>)
 8002dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc8:	f7fd fcb0 	bl	800072c <__aeabi_ddiv>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f7fd fe3a 	bl	8000a4c <__aeabi_d2f>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4a55      	ldr	r2, [pc, #340]	@ (8002f30 <main+0x820>)
 8002ddc:	60d3      	str	r3, [r2, #12]

	  		  if(turbid_data.cal_value < 0){
 8002dde:	4b54      	ldr	r3, [pc, #336]	@ (8002f30 <main+0x820>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f04f 0100 	mov.w	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe f92c 	bl	8001044 <__aeabi_fcmplt>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <main+0x6ec>

	  			  turbid_data.value = 0;
 8002df2:	4b4f      	ldr	r3, [pc, #316]	@ (8002f30 <main+0x820>)
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	e003      	b.n	8002e04 <main+0x6f4>

	  		  }

	  		  else turbid_data.value = turbid_data.cal_value;
 8002dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8002f30 <main+0x820>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	4a4b      	ldr	r2, [pc, #300]	@ (8002f30 <main+0x820>)
 8002e02:	6093      	str	r3, [r2, #8]

	  		  turbid_state = TURBID_STATE_DONE;
 8002e04:	4b4c      	ldr	r3, [pc, #304]	@ (8002f38 <main+0x828>)
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]

	  		  break;
 8002e0a:	e018      	b.n	8002e3e <main+0x72e>

	  	  case TURBID_STATE_DONE:
	  		  float newIntervalTurbid = updateSamplingInterval(&turbidSampler, turbid_data.value);
 8002e0c:	4b48      	ldr	r3, [pc, #288]	@ (8002f30 <main+0x820>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4619      	mov	r1, r3
 8002e12:	484d      	ldr	r0, [pc, #308]	@ (8002f48 <main+0x838>)
 8002e14:	f000 fdfe 	bl	8003a14 <updateSamplingInterval>
 8002e18:	60b8      	str	r0, [r7, #8]

	  		  turbidSampler.currentInterval = newIntervalTurbid;
 8002e1a:	4a4b      	ldr	r2, [pc, #300]	@ (8002f48 <main+0x838>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	6113      	str	r3, [r2, #16]

	  		  last_turbid_tick = current_sys_tick;
 8002e20:	4b4a      	ldr	r3, [pc, #296]	@ (8002f4c <main+0x83c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a4a      	ldr	r2, [pc, #296]	@ (8002f50 <main+0x840>)
 8002e26:	6013      	str	r3, [r2, #0]

	  		  turbid_state = TURBID_STATE_IDLE;
 8002e28:	4b43      	ldr	r3, [pc, #268]	@ (8002f38 <main+0x828>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]

	  		  send_turb = 1;
 8002e2e:	4b49      	ldr	r3, [pc, #292]	@ (8002f54 <main+0x844>)
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]

	  		  break;
 8002e34:	e003      	b.n	8002e3e <main+0x72e>

	  	  default:
	  		  turbid_state = TURBID_STATE_IDLE;
 8002e36:	4b40      	ldr	r3, [pc, #256]	@ (8002f38 <main+0x828>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002e3c:	bf00      	nop
	  }


	  switch(ph_state)
 8002e3e:	4b46      	ldr	r3, [pc, #280]	@ (8002f58 <main+0x848>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d859      	bhi.n	8002efa <main+0x7ea>
 8002e46:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <main+0x73c>)
 8002e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e8b 	.word	0x08002e8b
 8002e54:	08002ec1 	.word	0x08002ec1
 8002e58:	08002ed1 	.word	0x08002ed1
	  {
	  	  case PH_STATE_IDLE:
	  		  if(current_sys_tick - last_ph_tick >= pHSampler.currentInterval)
 8002e5c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f4c <main+0x83c>)
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b3e      	ldr	r3, [pc, #248]	@ (8002f5c <main+0x84c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fef6 	bl	8000c58 <__aeabi_ui2f>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f60 <main+0x850>)
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7fe f8f9 	bl	800106c <__aeabi_fcmpge>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d100      	bne.n	8002e82 <main+0x772>
	  		  {
	  			  ph_state = PH_STATE_REQUEST_DATA;
	  		  }
	  		  break;
 8002e80:	e042      	b.n	8002f08 <main+0x7f8>
	  			  ph_state = PH_STATE_REQUEST_DATA;
 8002e82:	4b35      	ldr	r3, [pc, #212]	@ (8002f58 <main+0x848>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002e88:	e03e      	b.n	8002f08 <main+0x7f8>

	  	  case PH_STATE_REQUEST_DATA:
	  		  if(huart2.gState == HAL_UART_STATE_READY)
 8002e8a:	4b36      	ldr	r3, [pc, #216]	@ (8002f64 <main+0x854>)
 8002e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d135      	bne.n	8002f02 <main+0x7f2>
	  		  {
	  			HAL_UART_Transmit_DMA(&huart2, get_data, strlen((char*)get_data));
 8002e96:	4834      	ldr	r0, [pc, #208]	@ (8002f68 <main+0x858>)
 8002e98:	f7fd f95a 	bl	8000150 <strlen>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4931      	ldr	r1, [pc, #196]	@ (8002f68 <main+0x858>)
 8002ea4:	482f      	ldr	r0, [pc, #188]	@ (8002f64 <main+0x854>)
 8002ea6:	f005 fd2b 	bl	8008900 <HAL_UART_Transmit_DMA>

	  			response_received = 0;
 8002eaa:	4b30      	ldr	r3, [pc, #192]	@ (8002f6c <main+0x85c>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]

	  			last_ph_tick = current_sys_tick;
 8002eb0:	4b26      	ldr	r3, [pc, #152]	@ (8002f4c <main+0x83c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a29      	ldr	r2, [pc, #164]	@ (8002f5c <main+0x84c>)
 8002eb6:	6013      	str	r3, [r2, #0]

	  			ph_state = PH_STATE_WAIT_RESPONSE;
 8002eb8:	4b27      	ldr	r3, [pc, #156]	@ (8002f58 <main+0x848>)
 8002eba:	2202      	movs	r2, #2
 8002ebc:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8002ebe:	e020      	b.n	8002f02 <main+0x7f2>

	  	  case PH_STATE_WAIT_RESPONSE:
	  		  if(response_received)
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8002f6c <main+0x85c>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01e      	beq.n	8002f06 <main+0x7f6>
	  		  {
	  			  ph_state = PH_STATE_DONE;
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <main+0x848>)
 8002eca:	2203      	movs	r2, #3
 8002ecc:	701a      	strb	r2, [r3, #0]
	  		  }
//	  		  else
//	  		  {
//	  			  HAL_UART_Receive_DMA(&huart2, (uint8_t *)rx, sizeof(rx));
//	  		  }
	  		  break;
 8002ece:	e01a      	b.n	8002f06 <main+0x7f6>

	  	  case PH_STATE_DONE:
	  		  float newIntervalPH = updateSamplingInterval(&pHSampler, ph);
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <main+0x860>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4822      	ldr	r0, [pc, #136]	@ (8002f60 <main+0x850>)
 8002ed8:	f000 fd9c 	bl	8003a14 <updateSamplingInterval>
 8002edc:	6078      	str	r0, [r7, #4]

	  		  pHSampler.currentInterval = newIntervalPH;
 8002ede:	4a20      	ldr	r2, [pc, #128]	@ (8002f60 <main+0x850>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6113      	str	r3, [r2, #16]

	  		  last_ph_tick = current_sys_tick;
 8002ee4:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <main+0x83c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f5c <main+0x84c>)
 8002eea:	6013      	str	r3, [r2, #0]

	  		  send_ph = 1;
 8002eec:	4b21      	ldr	r3, [pc, #132]	@ (8002f74 <main+0x864>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]

	  		  ph_state = PH_STATE_IDLE;
 8002ef2:	4b19      	ldr	r3, [pc, #100]	@ (8002f58 <main+0x848>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

	  		  break;
 8002ef8:	e006      	b.n	8002f08 <main+0x7f8>

	  	  default:
	  		  ph_state = PH_STATE_IDLE;
 8002efa:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <main+0x848>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002f00:	e002      	b.n	8002f08 <main+0x7f8>
	  		  break;
 8002f02:	bf00      	nop
 8002f04:	e468      	b.n	80027d8 <main+0xc8>
	  		  break;
 8002f06:	bf00      	nop
	  if(adaptive_start)
 8002f08:	e466      	b.n	80027d8 <main+0xc8>
 8002f0a:	bf00      	nop
 8002f0c:	f3af 8000 	nop.w
 8002f10:	1c432ca5 	.word	0x1c432ca5
 8002f14:	400162eb 	.word	0x400162eb
 8002f18:	bc6a7efa 	.word	0xbc6a7efa
 8002f1c:	bf689374 	.word	0xbf689374
 8002f20:	20000800 	.word	0x20000800
 8002f24:	200007fc 	.word	0x200007fc
 8002f28:	200007f8 	.word	0x200007f8
 8002f2c:	200007d0 	.word	0x200007d0
 8002f30:	200007b4 	.word	0x200007b4
 8002f34:	66666667 	.word	0x66666667
 8002f38:	200007c8 	.word	0x200007c8
 8002f3c:	457ff000 	.word	0x457ff000
 8002f40:	454e4000 	.word	0x454e4000
 8002f44:	447a0000 	.word	0x447a0000
 8002f48:	200008e8 	.word	0x200008e8
 8002f4c:	20000768 	.word	0x20000768
 8002f50:	200007cc 	.word	0x200007cc
 8002f54:	2000096b 	.word	0x2000096b
 8002f58:	20000801 	.word	0x20000801
 8002f5c:	20000804 	.word	0x20000804
 8002f60:	2000093c 	.word	0x2000093c
 8002f64:	20000538 	.word	0x20000538
 8002f68:	20000008 	.word	0x20000008
 8002f6c:	20000814 	.word	0x20000814
 8002f70:	20000810 	.word	0x20000810
 8002f74:	20000969 	.word	0x20000969

08002f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b094      	sub	sp, #80	@ 0x50
 8002f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002f82:	2228      	movs	r2, #40	@ 0x28
 8002f84:	2100      	movs	r1, #0
 8002f86:	4618      	mov	r0, r3
 8002f88:	f007 fbf3 	bl	800a772 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f9c:	1d3b      	adds	r3, r7, #4
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002fac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002fbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002fc4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f003 fe48 	bl	8006c64 <HAL_RCC_OscConfig>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002fda:	f000 fb8d 	bl	80036f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fde:	230f      	movs	r3, #15
 8002fe0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ff4:	f107 0314 	add.w	r3, r7, #20
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f004 f8b4 	bl	8007168 <HAL_RCC_ClockConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8003006:	f000 fb77 	bl	80036f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800300a:	2302      	movs	r3, #2
 800300c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800300e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003012:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003014:	1d3b      	adds	r3, r7, #4
 8003016:	4618      	mov	r0, r3
 8003018:	f004 fa34 	bl	8007484 <HAL_RCCEx_PeriphCLKConfig>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003022:	f000 fb69 	bl	80036f8 <Error_Handler>
  }
}
 8003026:	bf00      	nop
 8003028:	3750      	adds	r7, #80	@ 0x50
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003040:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <MX_ADC1_Init+0x74>)
 8003042:	4a19      	ldr	r2, [pc, #100]	@ (80030a8 <MX_ADC1_Init+0x78>)
 8003044:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003046:	4b17      	ldr	r3, [pc, #92]	@ (80030a4 <MX_ADC1_Init+0x74>)
 8003048:	2200      	movs	r2, #0
 800304a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800304c:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <MX_ADC1_Init+0x74>)
 800304e:	2200      	movs	r2, #0
 8003050:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003052:	4b14      	ldr	r3, [pc, #80]	@ (80030a4 <MX_ADC1_Init+0x74>)
 8003054:	2200      	movs	r2, #0
 8003056:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003058:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <MX_ADC1_Init+0x74>)
 800305a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800305e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003060:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <MX_ADC1_Init+0x74>)
 8003062:	2200      	movs	r2, #0
 8003064:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8003066:	4b0f      	ldr	r3, [pc, #60]	@ (80030a4 <MX_ADC1_Init+0x74>)
 8003068:	2201      	movs	r2, #1
 800306a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800306c:	480d      	ldr	r0, [pc, #52]	@ (80030a4 <MX_ADC1_Init+0x74>)
 800306e:	f001 fbe7 	bl	8004840 <HAL_ADC_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8003078:	f000 fb3e 	bl	80036f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800307c:	2307      	movs	r3, #7
 800307e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003080:	2301      	movs	r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003088:	1d3b      	adds	r3, r7, #4
 800308a:	4619      	mov	r1, r3
 800308c:	4805      	ldr	r0, [pc, #20]	@ (80030a4 <MX_ADC1_Init+0x74>)
 800308e:	f001 fe9b 	bl	8004dc8 <HAL_ADC_ConfigChannel>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8003098:	f000 fb2e 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000031c 	.word	0x2000031c
 80030a8:	40012400 	.word	0x40012400

080030ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80030bc:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <MX_ADC2_Init+0x74>)
 80030be:	4a19      	ldr	r2, [pc, #100]	@ (8003124 <MX_ADC2_Init+0x78>)
 80030c0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80030c2:	4b17      	ldr	r3, [pc, #92]	@ (8003120 <MX_ADC2_Init+0x74>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80030c8:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <MX_ADC2_Init+0x74>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80030ce:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <MX_ADC2_Init+0x74>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80030d4:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <MX_ADC2_Init+0x74>)
 80030d6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80030da:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030dc:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <MX_ADC2_Init+0x74>)
 80030de:	2200      	movs	r2, #0
 80030e0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <MX_ADC2_Init+0x74>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80030e8:	480d      	ldr	r0, [pc, #52]	@ (8003120 <MX_ADC2_Init+0x74>)
 80030ea:	f001 fba9 	bl	8004840 <HAL_ADC_Init>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80030f4:	f000 fb00 	bl	80036f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80030f8:	2308      	movs	r3, #8
 80030fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80030fc:	2301      	movs	r3, #1
 80030fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003104:	1d3b      	adds	r3, r7, #4
 8003106:	4619      	mov	r1, r3
 8003108:	4805      	ldr	r0, [pc, #20]	@ (8003120 <MX_ADC2_Init+0x74>)
 800310a:	f001 fe5d 	bl	8004dc8 <HAL_ADC_ConfigChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8003114:	f000 faf0 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	2000034c 	.word	0x2000034c
 8003124:	40012800 	.word	0x40012800

08003128 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800312c:	4b12      	ldr	r3, [pc, #72]	@ (8003178 <MX_I2C1_Init+0x50>)
 800312e:	4a13      	ldr	r2, [pc, #76]	@ (800317c <MX_I2C1_Init+0x54>)
 8003130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003132:	4b11      	ldr	r3, [pc, #68]	@ (8003178 <MX_I2C1_Init+0x50>)
 8003134:	4a12      	ldr	r2, [pc, #72]	@ (8003180 <MX_I2C1_Init+0x58>)
 8003136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003138:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <MX_I2C1_Init+0x50>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800313e:	4b0e      	ldr	r3, [pc, #56]	@ (8003178 <MX_I2C1_Init+0x50>)
 8003140:	2200      	movs	r2, #0
 8003142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003144:	4b0c      	ldr	r3, [pc, #48]	@ (8003178 <MX_I2C1_Init+0x50>)
 8003146:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800314a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800314c:	4b0a      	ldr	r3, [pc, #40]	@ (8003178 <MX_I2C1_Init+0x50>)
 800314e:	2200      	movs	r2, #0
 8003150:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003152:	4b09      	ldr	r3, [pc, #36]	@ (8003178 <MX_I2C1_Init+0x50>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003158:	4b07      	ldr	r3, [pc, #28]	@ (8003178 <MX_I2C1_Init+0x50>)
 800315a:	2200      	movs	r2, #0
 800315c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800315e:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <MX_I2C1_Init+0x50>)
 8003160:	2200      	movs	r2, #0
 8003162:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003164:	4804      	ldr	r0, [pc, #16]	@ (8003178 <MX_I2C1_Init+0x50>)
 8003166:	f002 fd49 	bl	8005bfc <HAL_I2C_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003170:	f000 fac2 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003174:	bf00      	nop
 8003176:	bd80      	pop	{r7, pc}
 8003178:	2000037c 	.word	0x2000037c
 800317c:	40005400 	.word	0x40005400
 8003180:	000186a0 	.word	0x000186a0

08003184 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b08c      	sub	sp, #48	@ 0x30
 8003188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	2224      	movs	r2, #36	@ 0x24
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f007 faed 	bl	800a772 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031a0:	4b22      	ldr	r3, [pc, #136]	@ (800322c <MX_TIM1_Init+0xa8>)
 80031a2:	4a23      	ldr	r2, [pc, #140]	@ (8003230 <MX_TIM1_Init+0xac>)
 80031a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031a6:	4b21      	ldr	r3, [pc, #132]	@ (800322c <MX_TIM1_Init+0xa8>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031ac:	4b1f      	ldr	r3, [pc, #124]	@ (800322c <MX_TIM1_Init+0xa8>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80031b2:	4b1e      	ldr	r3, [pc, #120]	@ (800322c <MX_TIM1_Init+0xa8>)
 80031b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ba:	4b1c      	ldr	r3, [pc, #112]	@ (800322c <MX_TIM1_Init+0xa8>)
 80031bc:	2200      	movs	r2, #0
 80031be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031c0:	4b1a      	ldr	r3, [pc, #104]	@ (800322c <MX_TIM1_Init+0xa8>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c6:	4b19      	ldr	r3, [pc, #100]	@ (800322c <MX_TIM1_Init+0xa8>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031cc:	2301      	movs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031d4:	2301      	movs	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031d8:	2300      	movs	r3, #0
 80031da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031e4:	2301      	movs	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	4619      	mov	r1, r3
 80031f6:	480d      	ldr	r0, [pc, #52]	@ (800322c <MX_TIM1_Init+0xa8>)
 80031f8:	f004 fc44 	bl	8007a84 <HAL_TIM_Encoder_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8003202:	f000 fa79 	bl	80036f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	4619      	mov	r1, r3
 8003212:	4806      	ldr	r0, [pc, #24]	@ (800322c <MX_TIM1_Init+0xa8>)
 8003214:	f005 fab4 	bl	8008780 <HAL_TIMEx_MasterConfigSynchronization>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800321e:	f000 fa6b 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003222:	bf00      	nop
 8003224:	3730      	adds	r7, #48	@ 0x30
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	200003d0 	.word	0x200003d0
 8003230:	40012c00 	.word	0x40012c00

08003234 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800323a:	f107 0320 	add.w	r3, r7, #32
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	611a      	str	r2, [r3, #16]
 8003252:	615a      	str	r2, [r3, #20]
 8003254:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003256:	4b28      	ldr	r3, [pc, #160]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 8003258:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800325c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800325e:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 8003260:	2247      	movs	r2, #71	@ 0x47
 8003262:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003264:	4b24      	ldr	r3, [pc, #144]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 800326c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003272:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003278:	4b1f      	ldr	r3, [pc, #124]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800327e:	481e      	ldr	r0, [pc, #120]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 8003280:	f004 fb0e 	bl	80078a0 <HAL_TIM_PWM_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800328a:	f000 fa35 	bl	80036f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003296:	f107 0320 	add.w	r3, r7, #32
 800329a:	4619      	mov	r1, r3
 800329c:	4816      	ldr	r0, [pc, #88]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 800329e:	f005 fa6f 	bl	8008780 <HAL_TIMEx_MasterConfigSynchronization>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80032a8:	f000 fa26 	bl	80036f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ac:	2360      	movs	r3, #96	@ 0x60
 80032ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032bc:	1d3b      	adds	r3, r7, #4
 80032be:	2200      	movs	r2, #0
 80032c0:	4619      	mov	r1, r3
 80032c2:	480d      	ldr	r0, [pc, #52]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 80032c4:	f004 fdfe 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80032ce:	f000 fa13 	bl	80036f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2204      	movs	r2, #4
 80032d6:	4619      	mov	r1, r3
 80032d8:	4807      	ldr	r0, [pc, #28]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 80032da:	f004 fdf3 	bl	8007ec4 <HAL_TIM_PWM_ConfigChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80032e4:	f000 fa08 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032e8:	4803      	ldr	r0, [pc, #12]	@ (80032f8 <MX_TIM2_Init+0xc4>)
 80032ea:	f000 fe4b 	bl	8003f84 <HAL_TIM_MspPostInit>

}
 80032ee:	bf00      	nop
 80032f0:	3728      	adds	r7, #40	@ 0x28
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000418 	.word	0x20000418

080032fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003302:	f107 0308 	add.w	r3, r7, #8
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003310:	463b      	mov	r3, r7
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003318:	4b1d      	ldr	r3, [pc, #116]	@ (8003390 <MX_TIM3_Init+0x94>)
 800331a:	4a1e      	ldr	r2, [pc, #120]	@ (8003394 <MX_TIM3_Init+0x98>)
 800331c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800331e:	4b1c      	ldr	r3, [pc, #112]	@ (8003390 <MX_TIM3_Init+0x94>)
 8003320:	2247      	movs	r2, #71	@ 0x47
 8003322:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003324:	4b1a      	ldr	r3, [pc, #104]	@ (8003390 <MX_TIM3_Init+0x94>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800332a:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <MX_TIM3_Init+0x94>)
 800332c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003330:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003332:	4b17      	ldr	r3, [pc, #92]	@ (8003390 <MX_TIM3_Init+0x94>)
 8003334:	2200      	movs	r2, #0
 8003336:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003338:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <MX_TIM3_Init+0x94>)
 800333a:	2200      	movs	r2, #0
 800333c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800333e:	4814      	ldr	r0, [pc, #80]	@ (8003390 <MX_TIM3_Init+0x94>)
 8003340:	f004 fa0c 	bl	800775c <HAL_TIM_Base_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800334a:	f000 f9d5 	bl	80036f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800334e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003352:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	4619      	mov	r1, r3
 800335a:	480d      	ldr	r0, [pc, #52]	@ (8003390 <MX_TIM3_Init+0x94>)
 800335c:	f004 fe74 	bl	8008048 <HAL_TIM_ConfigClockSource>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003366:	f000 f9c7 	bl	80036f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800336a:	2300      	movs	r3, #0
 800336c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003372:	463b      	mov	r3, r7
 8003374:	4619      	mov	r1, r3
 8003376:	4806      	ldr	r0, [pc, #24]	@ (8003390 <MX_TIM3_Init+0x94>)
 8003378:	f005 fa02 	bl	8008780 <HAL_TIMEx_MasterConfigSynchronization>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003382:	f000 f9b9 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003386:	bf00      	nop
 8003388:	3718      	adds	r7, #24
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000460 	.word	0x20000460
 8003394:	40000400 	.word	0x40000400

08003398 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800339e:	f107 0308 	add.w	r3, r7, #8
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ac:	463b      	mov	r3, r7
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80033b4:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <MX_TIM4_Init+0x94>)
 80033b6:	4a1e      	ldr	r2, [pc, #120]	@ (8003430 <MX_TIM4_Init+0x98>)
 80033b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80033ba:	4b1c      	ldr	r3, [pc, #112]	@ (800342c <MX_TIM4_Init+0x94>)
 80033bc:	2247      	movs	r2, #71	@ 0x47
 80033be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033c0:	4b1a      	ldr	r3, [pc, #104]	@ (800342c <MX_TIM4_Init+0x94>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80033c6:	4b19      	ldr	r3, [pc, #100]	@ (800342c <MX_TIM4_Init+0x94>)
 80033c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80033cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ce:	4b17      	ldr	r3, [pc, #92]	@ (800342c <MX_TIM4_Init+0x94>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d4:	4b15      	ldr	r3, [pc, #84]	@ (800342c <MX_TIM4_Init+0x94>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80033da:	4814      	ldr	r0, [pc, #80]	@ (800342c <MX_TIM4_Init+0x94>)
 80033dc:	f004 f9be 	bl	800775c <HAL_TIM_Base_Init>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80033e6:	f000 f987 	bl	80036f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	4619      	mov	r1, r3
 80033f6:	480d      	ldr	r0, [pc, #52]	@ (800342c <MX_TIM4_Init+0x94>)
 80033f8:	f004 fe26 	bl	8008048 <HAL_TIM_ConfigClockSource>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003402:	f000 f979 	bl	80036f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003406:	2300      	movs	r3, #0
 8003408:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800340e:	463b      	mov	r3, r7
 8003410:	4619      	mov	r1, r3
 8003412:	4806      	ldr	r0, [pc, #24]	@ (800342c <MX_TIM4_Init+0x94>)
 8003414:	f005 f9b4 	bl	8008780 <HAL_TIMEx_MasterConfigSynchronization>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800341e:	f000 f96b 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003422:	bf00      	nop
 8003424:	3718      	adds	r7, #24
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200004a8 	.word	0x200004a8
 8003430:	40000800 	.word	0x40000800

08003434 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003438:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 800343a:	4a12      	ldr	r2, [pc, #72]	@ (8003484 <MX_USART1_UART_Init+0x50>)
 800343c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800343e:	4b10      	ldr	r3, [pc, #64]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 8003440:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003444:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003446:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800344c:	4b0c      	ldr	r3, [pc, #48]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003452:	4b0b      	ldr	r3, [pc, #44]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003458:	4b09      	ldr	r3, [pc, #36]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 800345a:	220c      	movs	r2, #12
 800345c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800345e:	4b08      	ldr	r3, [pc, #32]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003464:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800346a:	4805      	ldr	r0, [pc, #20]	@ (8003480 <MX_USART1_UART_Init+0x4c>)
 800346c:	f005 f9f8 	bl	8008860 <HAL_UART_Init>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003476:	f000 f93f 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	200004f0 	.word	0x200004f0
 8003484:	40013800 	.word	0x40013800

08003488 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800348c:	4b11      	ldr	r3, [pc, #68]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 800348e:	4a12      	ldr	r2, [pc, #72]	@ (80034d8 <MX_USART2_UART_Init+0x50>)
 8003490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003492:	4b10      	ldr	r3, [pc, #64]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 8003494:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800349a:	4b0e      	ldr	r3, [pc, #56]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 800349c:	2200      	movs	r2, #0
 800349e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034a0:	4b0c      	ldr	r3, [pc, #48]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034a6:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034ac:	4b09      	ldr	r3, [pc, #36]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 80034ae:	220c      	movs	r2, #12
 80034b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b8:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034be:	4805      	ldr	r0, [pc, #20]	@ (80034d4 <MX_USART2_UART_Init+0x4c>)
 80034c0:	f005 f9ce 	bl	8008860 <HAL_UART_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034ca:	f000 f915 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034ce:	bf00      	nop
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000538 	.word	0x20000538
 80034d8:	40004400 	.word	0x40004400

080034dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034e0:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 80034e2:	4a12      	ldr	r2, [pc, #72]	@ (800352c <MX_USART3_UART_Init+0x50>)
 80034e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034e6:	4b10      	ldr	r3, [pc, #64]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 80034e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80034ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034fa:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003500:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 8003502:	220c      	movs	r2, #12
 8003504:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003506:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800350c:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003512:	4805      	ldr	r0, [pc, #20]	@ (8003528 <MX_USART3_UART_Init+0x4c>)
 8003514:	f005 f9a4 	bl	8008860 <HAL_UART_Init>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800351e:	f000 f8eb 	bl	80036f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000580 	.word	0x20000580
 800352c:	40004800 	.word	0x40004800

08003530 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003536:	4b20      	ldr	r3, [pc, #128]	@ (80035b8 <MX_DMA_Init+0x88>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4a1f      	ldr	r2, [pc, #124]	@ (80035b8 <MX_DMA_Init+0x88>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6153      	str	r3, [r2, #20]
 8003542:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <MX_DMA_Init+0x88>)
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	200c      	movs	r0, #12
 8003554:	f001 fea3 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003558:	200c      	movs	r0, #12
 800355a:	f001 febc 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	200d      	movs	r0, #13
 8003564:	f001 fe9b 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003568:	200d      	movs	r0, #13
 800356a:	f001 feb4 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800356e:	2200      	movs	r2, #0
 8003570:	2100      	movs	r1, #0
 8003572:	200e      	movs	r0, #14
 8003574:	f001 fe93 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003578:	200e      	movs	r0, #14
 800357a:	f001 feac 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2100      	movs	r1, #0
 8003582:	200f      	movs	r0, #15
 8003584:	f001 fe8b 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003588:	200f      	movs	r0, #15
 800358a:	f001 fea4 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800358e:	2200      	movs	r2, #0
 8003590:	2100      	movs	r1, #0
 8003592:	2010      	movs	r0, #16
 8003594:	f001 fe83 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003598:	2010      	movs	r0, #16
 800359a:	f001 fe9c 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800359e:	2200      	movs	r2, #0
 80035a0:	2100      	movs	r1, #0
 80035a2:	2011      	movs	r0, #17
 80035a4:	f001 fe7b 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80035a8:	2011      	movs	r0, #17
 80035aa:	f001 fe94 	bl	80052d6 <HAL_NVIC_EnableIRQ>

}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000

080035bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c2:	f107 0310 	add.w	r3, r7, #16
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	609a      	str	r2, [r3, #8]
 80035ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035d0:	4b45      	ldr	r3, [pc, #276]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4a44      	ldr	r2, [pc, #272]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 80035d6:	f043 0310 	orr.w	r3, r3, #16
 80035da:	6193      	str	r3, [r2, #24]
 80035dc:	4b42      	ldr	r3, [pc, #264]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0310 	and.w	r3, r3, #16
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035e8:	4b3f      	ldr	r3, [pc, #252]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	4a3e      	ldr	r2, [pc, #248]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 80035ee:	f043 0320 	orr.w	r3, r3, #32
 80035f2:	6193      	str	r3, [r2, #24]
 80035f4:	4b3c      	ldr	r3, [pc, #240]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003600:	4b39      	ldr	r3, [pc, #228]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	4a38      	ldr	r2, [pc, #224]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	6193      	str	r3, [r2, #24]
 800360c:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	607b      	str	r3, [r7, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003618:	4b33      	ldr	r3, [pc, #204]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	4a32      	ldr	r2, [pc, #200]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 800361e:	f043 0308 	orr.w	r3, r3, #8
 8003622:	6193      	str	r3, [r2, #24]
 8003624:	4b30      	ldr	r3, [pc, #192]	@ (80036e8 <MX_GPIO_Init+0x12c>)
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	603b      	str	r3, [r7, #0]
 800362e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003630:	2200      	movs	r2, #0
 8003632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003636:	482d      	ldr	r0, [pc, #180]	@ (80036ec <MX_GPIO_Init+0x130>)
 8003638:	f002 faaf 	bl	8005b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800363c:	2200      	movs	r2, #0
 800363e:	f641 0101 	movw	r1, #6145	@ 0x1801
 8003642:	482b      	ldr	r0, [pc, #172]	@ (80036f0 <MX_GPIO_Init+0x134>)
 8003644:	f002 faa9 	bl	8005b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003648:	2200      	movs	r2, #0
 800364a:	f244 0132 	movw	r1, #16434	@ 0x4032
 800364e:	4829      	ldr	r0, [pc, #164]	@ (80036f4 <MX_GPIO_Init+0x138>)
 8003650:	f002 faa3 	bl	8005b9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003654:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800365a:	2301      	movs	r3, #1
 800365c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003662:	2302      	movs	r3, #2
 8003664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003666:	f107 0310 	add.w	r3, r7, #16
 800366a:	4619      	mov	r1, r3
 800366c:	481f      	ldr	r0, [pc, #124]	@ (80036ec <MX_GPIO_Init+0x130>)
 800366e:	f002 f8f9 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 8003672:	f641 0301 	movw	r3, #6145	@ 0x1801
 8003676:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003678:	2301      	movs	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003680:	2302      	movs	r3, #2
 8003682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003684:	f107 0310 	add.w	r3, r7, #16
 8003688:	4619      	mov	r1, r3
 800368a:	4819      	ldr	r0, [pc, #100]	@ (80036f0 <MX_GPIO_Init+0x134>)
 800368c:	f002 f8ea 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003690:	2322      	movs	r3, #34	@ 0x22
 8003692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003698:	2301      	movs	r3, #1
 800369a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	f107 0310 	add.w	r3, r7, #16
 80036a0:	4619      	mov	r1, r3
 80036a2:	4813      	ldr	r0, [pc, #76]	@ (80036f0 <MX_GPIO_Init+0x134>)
 80036a4:	f002 f8de 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB14 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_5;
 80036a8:	f244 0332 	movw	r3, #16434	@ 0x4032
 80036ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ae:	2301      	movs	r3, #1
 80036b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b6:	2302      	movs	r3, #2
 80036b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ba:	f107 0310 	add.w	r3, r7, #16
 80036be:	4619      	mov	r1, r3
 80036c0:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <MX_GPIO_Init+0x138>)
 80036c2:	f002 f8cf 	bl	8005864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d4:	f107 0310 	add.w	r3, r7, #16
 80036d8:	4619      	mov	r1, r3
 80036da:	4806      	ldr	r0, [pc, #24]	@ (80036f4 <MX_GPIO_Init+0x138>)
 80036dc:	f002 f8c2 	bl	8005864 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80036e0:	bf00      	nop
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40011000 	.word	0x40011000
 80036f0:	40010800 	.word	0x40010800
 80036f4:	40010c00 	.word	0x40010c00

080036f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80036fc:	b672      	cpsid	i
}
 80036fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <Error_Handler+0x8>

08003704 <Set_Pin_Output>:
uint8_t send_turb					= 0;
/******************************************************************************
 * Functions
 *****************************************************************************/
void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003710:	f107 0308 	add.w	r3, r7, #8
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800371e:	887b      	ldrh	r3, [r7, #2]
 8003720:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003722:	2301      	movs	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003726:	2302      	movs	r3, #2
 8003728:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800372a:	f107 0308 	add.w	r3, r7, #8
 800372e:	4619      	mov	r1, r3
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f002 f897 	bl	8005864 <HAL_GPIO_Init>
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <Set_Pin_Input>:

void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b086      	sub	sp, #24
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	460b      	mov	r3, r1
 8003748:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800375c:	2300      	movs	r3, #0
 800375e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003760:	2301      	movs	r3, #1
 8003762:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8003764:	f107 0308 	add.w	r3, r7, #8
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f002 f87a 	bl	8005864 <HAL_GPIO_Init>
}
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <delay>:

void delay(uint32_t us)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003780:	4b08      	ldr	r3, [pc, #32]	@ (80037a4 <delay+0x2c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim3)) < us);
 8003788:	bf00      	nop
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <delay+0x2c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	d8f9      	bhi.n	800378a <delay+0x12>
}
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000460 	.word	0x20000460

080037a8 <DS18B20_Start>:

uint8_t DS18B20_Start(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN); //set pin sebagai output
 80037b2:	2101      	movs	r1, #1
 80037b4:	4813      	ldr	r0, [pc, #76]	@ (8003804 <DS18B20_Start+0x5c>)
 80037b6:	f7ff ffa5 	bl	8003704 <Set_Pin_Output>
	HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2101      	movs	r1, #1
 80037be:	4811      	ldr	r0, [pc, #68]	@ (8003804 <DS18B20_Start+0x5c>)
 80037c0:	f002 f9eb 	bl	8005b9a <HAL_GPIO_WritePin>
	delay(480); //delay berdasarkan datasheet
 80037c4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 80037c8:	f7ff ffd6 	bl	8003778 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN); //set pin sebagai input
 80037cc:	2101      	movs	r1, #1
 80037ce:	480d      	ldr	r0, [pc, #52]	@ (8003804 <DS18B20_Start+0x5c>)
 80037d0:	f7ff ffb5 	bl	800373e <Set_Pin_Input>
	delay(80);// delay berdasarkan datasheet
 80037d4:	2050      	movs	r0, #80	@ 0x50
 80037d6:	f7ff ffcf 	bl	8003778 <delay>

	if(!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;
 80037da:	2101      	movs	r1, #1
 80037dc:	4809      	ldr	r0, [pc, #36]	@ (8003804 <DS18B20_Start+0x5c>)
 80037de:	f002 f9c5 	bl	8005b6c <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <DS18B20_Start+0x46>
 80037e8:	2301      	movs	r3, #1
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	e001      	b.n	80037f2 <DS18B20_Start+0x4a>
	else Response = -1;
 80037ee:	23ff      	movs	r3, #255	@ 0xff
 80037f0:	71fb      	strb	r3, [r7, #7]
	delay(400);
 80037f2:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80037f6:	f7ff ffbf 	bl	8003778 <delay>

	return Response;
 80037fa:	79fb      	ldrb	r3, [r7, #7]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40010800 	.word	0x40010800

08003808 <DS18B20_Write>:

void DS18B20_Write(uint8_t data)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN); //set pin sebagai output
 8003812:	2101      	movs	r1, #1
 8003814:	481e      	ldr	r0, [pc, #120]	@ (8003890 <DS18B20_Write+0x88>)
 8003816:	f7ff ff75 	bl	8003704 <Set_Pin_Output>

	for(int i=0; i<8 ; i++){
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	e02e      	b.n	800387e <DS18B20_Write+0x76>
		if((data & (1<<i)) != 0){
 8003820:	79fa      	ldrb	r2, [r7, #7]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	fa42 f303 	asr.w	r3, r2, r3
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d013      	beq.n	8003858 <DS18B20_Write+0x50>
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);//set pin sebagai output
 8003830:	2101      	movs	r1, #1
 8003832:	4817      	ldr	r0, [pc, #92]	@ (8003890 <DS18B20_Write+0x88>)
 8003834:	f7ff ff66 	bl	8003704 <Set_Pin_Output>
			HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);
 8003838:	2200      	movs	r2, #0
 800383a:	2101      	movs	r1, #1
 800383c:	4814      	ldr	r0, [pc, #80]	@ (8003890 <DS18B20_Write+0x88>)
 800383e:	f002 f9ac 	bl	8005b9a <HAL_GPIO_WritePin>
			delay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f7ff ff98 	bl	8003778 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN); //set pin sebagai input
 8003848:	2101      	movs	r1, #1
 800384a:	4811      	ldr	r0, [pc, #68]	@ (8003890 <DS18B20_Write+0x88>)
 800384c:	f7ff ff77 	bl	800373e <Set_Pin_Input>
			delay(50);
 8003850:	2032      	movs	r0, #50	@ 0x32
 8003852:	f7ff ff91 	bl	8003778 <delay>
 8003856:	e00f      	b.n	8003878 <DS18B20_Write+0x70>
		}
		else {// jika bit 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8003858:	2101      	movs	r1, #1
 800385a:	480d      	ldr	r0, [pc, #52]	@ (8003890 <DS18B20_Write+0x88>)
 800385c:	f7ff ff52 	bl	8003704 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);
 8003860:	2200      	movs	r2, #0
 8003862:	2101      	movs	r1, #1
 8003864:	480a      	ldr	r0, [pc, #40]	@ (8003890 <DS18B20_Write+0x88>)
 8003866:	f002 f998 	bl	8005b9a <HAL_GPIO_WritePin>
			delay (50);
 800386a:	2032      	movs	r0, #50	@ 0x32
 800386c:	f7ff ff84 	bl	8003778 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8003870:	2101      	movs	r1, #1
 8003872:	4807      	ldr	r0, [pc, #28]	@ (8003890 <DS18B20_Write+0x88>)
 8003874:	f7ff ff63 	bl	800373e <Set_Pin_Input>
	for(int i=0; i<8 ; i++){
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3301      	adds	r3, #1
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2b07      	cmp	r3, #7
 8003882:	ddcd      	ble.n	8003820 <DS18B20_Write+0x18>
		}
	}
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40010800 	.word	0x40010800

08003894 <DS18B20_Read>:

uint8_t DS18B20_Read(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
	uint8_t value = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input (DS18B20_PORT, DS18B20_PIN);
 800389e:	2101      	movs	r1, #1
 80038a0:	481a      	ldr	r0, [pc, #104]	@ (800390c <DS18B20_Read+0x78>)
 80038a2:	f7ff ff4c 	bl	800373e <Set_Pin_Input>

	for (int i=0;i<8;i++){
 80038a6:	2300      	movs	r3, #0
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	e026      	b.n	80038fa <DS18B20_Read+0x66>
		Set_Pin_Output (DS18B20_PORT, DS18B20_PIN); // set sebagai output
 80038ac:	2101      	movs	r1, #1
 80038ae:	4817      	ldr	r0, [pc, #92]	@ (800390c <DS18B20_Read+0x78>)
 80038b0:	f7ff ff28 	bl	8003704 <Set_Pin_Output>
		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);
 80038b4:	2200      	movs	r2, #0
 80038b6:	2101      	movs	r1, #1
 80038b8:	4814      	ldr	r0, [pc, #80]	@ (800390c <DS18B20_Read+0x78>)
 80038ba:	f002 f96e 	bl	8005b9a <HAL_GPIO_WritePin>
		delay (2);
 80038be:	2002      	movs	r0, #2
 80038c0:	f7ff ff5a 	bl	8003778 <delay>
		Set_Pin_Input (DS18B20_PORT, DS18B20_PIN);
 80038c4:	2101      	movs	r1, #1
 80038c6:	4811      	ldr	r0, [pc, #68]	@ (800390c <DS18B20_Read+0x78>)
 80038c8:	f7ff ff39 	bl	800373e <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))
 80038cc:	2101      	movs	r1, #1
 80038ce:	480f      	ldr	r0, [pc, #60]	@ (800390c <DS18B20_Read+0x78>)
 80038d0:	f002 f94c 	bl	8005b6c <HAL_GPIO_ReadPin>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d009      	beq.n	80038ee <DS18B20_Read+0x5a>
		{
			value |= 1<<i;
 80038da:	2201      	movs	r2, #1
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	b25a      	sxtb	r2, r3
 80038e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	b25b      	sxtb	r3, r3
 80038ec:	71fb      	strb	r3, [r7, #7]
		}
		delay (60);
 80038ee:	203c      	movs	r0, #60	@ 0x3c
 80038f0:	f7ff ff42 	bl	8003778 <delay>
	for (int i=0;i<8;i++){
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	2b07      	cmp	r3, #7
 80038fe:	ddd5      	ble.n	80038ac <DS18B20_Read+0x18>
	}
	return value;
 8003900:	79fb      	ldrb	r3, [r7, #7]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40010800 	.word	0x40010800

08003910 <calculateDO>:

float calculateDO(uint32_t voltage_mv, float current_temp_cal)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
    uint8_t temp_index = (uint8_t)roundf(current_temp_cal);
 800391a:	6838      	ldr	r0, [r7, #0]
 800391c:	f008 fe72 	bl	800c604 <roundf>
 8003920:	4603      	mov	r3, r0
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd fbdc 	bl	80010e0 <__aeabi_f2uiz>
 8003928:	4603      	mov	r3, r0
 800392a:	75fb      	strb	r3, [r7, #23]
    if(temp_index > 40) temp_index = 40;
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b28      	cmp	r3, #40	@ 0x28
 8003930:	d901      	bls.n	8003936 <calculateDO+0x26>
 8003932:	2328      	movs	r3, #40	@ 0x28
 8003934:	75fb      	strb	r3, [r7, #23]
    if(temp_index < 0) temp_index = 0;

    // Kalibrasi satu titik dari kode Arduino Anda:
    float V_saturation = (float)CAL1_V + 35.0f * (current_temp_cal - (float)CAL1_T);
 8003936:	491c      	ldr	r1, [pc, #112]	@ (80039a8 <calculateDO+0x98>)
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f7fd f8db 	bl	8000af4 <__aeabi_fsub>
 800393e:	4603      	mov	r3, r0
 8003940:	491a      	ldr	r1, [pc, #104]	@ (80039ac <calculateDO+0x9c>)
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd f9e0 	bl	8000d08 <__aeabi_fmul>
 8003948:	4603      	mov	r3, r0
 800394a:	4919      	ldr	r1, [pc, #100]	@ (80039b0 <calculateDO+0xa0>)
 800394c:	4618      	mov	r0, r3
 800394e:	f7fd f8d3 	bl	8000af8 <__addsf3>
 8003952:	4603      	mov	r3, r0
 8003954:	613b      	str	r3, [r7, #16]

    if (fabsf(V_saturation) < 0.001f) V_saturation = 0.001f; // Hindari pembagian dengan nol
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800395c:	4915      	ldr	r1, [pc, #84]	@ (80039b4 <calculateDO+0xa4>)
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd fb70 	bl	8001044 <__aeabi_fcmplt>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <calculateDO+0x5e>
 800396a:	4b12      	ldr	r3, [pc, #72]	@ (80039b4 <calculateDO+0xa4>)
 800396c:	613b      	str	r3, [r7, #16]

    float calculated_do = ((float)voltage_mv * DO_Table[temp_index] / V_saturation) / 1000.0f;
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd f972 	bl	8000c58 <__aeabi_ui2f>
 8003974:	4602      	mov	r2, r0
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	490f      	ldr	r1, [pc, #60]	@ (80039b8 <calculateDO+0xa8>)
 800397a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800397e:	4619      	mov	r1, r3
 8003980:	4610      	mov	r0, r2
 8003982:	f7fd f9c1 	bl	8000d08 <__aeabi_fmul>
 8003986:	4603      	mov	r3, r0
 8003988:	6939      	ldr	r1, [r7, #16]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fd fa70 	bl	8000e70 <__aeabi_fdiv>
 8003990:	4603      	mov	r3, r0
 8003992:	490a      	ldr	r1, [pc, #40]	@ (80039bc <calculateDO+0xac>)
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd fa6b 	bl	8000e70 <__aeabi_fdiv>
 800399a:	4603      	mov	r3, r0
 800399c:	60fb      	str	r3, [r7, #12]

    // float do_final_cal = (0.1012f * calculated_do * calculated_do) +
    //                      (0.2518f * calculated_do) + 0.3116f;
    // return do_final_cal;
    // Jika tidak ada kalibrasi akhir, kembalikan nilai yang sudah dikompensasi suhu:
    return calculated_do;
 800399e:	68fb      	ldr	r3, [r7, #12]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	41b80000 	.word	0x41b80000
 80039ac:	420c0000 	.word	0x420c0000
 80039b0:	44480000 	.word	0x44480000
 80039b4:	3a83126f 	.word	0x3a83126f
 80039b8:	0800c890 	.word	0x0800c890
 80039bc:	447a0000 	.word	0x447a0000

080039c0 <initSampler>:

void initSampler(AdaptiveSampler* sampler, float* historyBuffer, int historySize,
                float threshold, float initInterval, float minI, float maxI)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
 80039cc:	603b      	str	r3, [r7, #0]
    sampler->history = historyBuffer;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	601a      	str	r2, [r3, #0]
    sampler->historySize = historySize;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	605a      	str	r2, [r3, #4]
    sampler->t = threshold;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	615a      	str	r2, [r3, #20]
    sampler->currentInterval = initInterval;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	611a      	str	r2, [r3, #16]
    sampler->minInterval = minI;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	619a      	str	r2, [r3, #24]
    sampler->maxInterval = maxI;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a3a      	ldr	r2, [r7, #32]
 80039f0:	61da      	str	r2, [r3, #28]
    sampler->dataIndex = 0;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
    sampler->prevValue = 0.0f;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	60da      	str	r2, [r3, #12]
    sampler->initialized = 0;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2020 	strb.w	r2, [r3, #32]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr
	...

08003a14 <updateSamplingInterval>:

float updateSamplingInterval(AdaptiveSampler* sampler, float newValue)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b089      	sub	sp, #36	@ 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
    // Fase inisialisasi: isi buffer historis
    if(!sampler->initialized) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d149      	bne.n	8003abc <updateSamplingInterval+0xa8>
        sampler->history[sampler->dataIndex] = newValue;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	601a      	str	r2, [r3, #0]
        sampler->dataIndex++;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	609a      	str	r2, [r3, #8]

        if(sampler->dataIndex == sampler->historySize) {
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d133      	bne.n	8003ab6 <updateSamplingInterval+0xa2>
        	sampler->initialized = 1; // fase inisialisasi selesai
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2020 	strb.w	r2, [r3, #32]
            // Hitung rata-rata awal
            float avg = 0.0f;
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
            for(int i=0; i<sampler->historySize; i++) {
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	61bb      	str	r3, [r7, #24]
 8003a60:	e00e      	b.n	8003a80 <updateSamplingInterval+0x6c>
            	avg += sampler->history[i];
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	69f8      	ldr	r0, [r7, #28]
 8003a72:	f7fd f841 	bl	8000af8 <__addsf3>
 8003a76:	4603      	mov	r3, r0
 8003a78:	61fb      	str	r3, [r7, #28]
            for(int i=0; i<sampler->historySize; i++) {
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	dbeb      	blt.n	8003a62 <updateSamplingInterval+0x4e>
            }
            sampler->prevValue = avg/sampler->historySize;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fd f8e6 	bl	8000c60 <__aeabi_i2f>
 8003a94:	4603      	mov	r3, r0
 8003a96:	4619      	mov	r1, r3
 8003a98:	69f8      	ldr	r0, [r7, #28]
 8003a9a:	f7fd f9e9 	bl	8000e70 <__aeabi_fdiv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60da      	str	r2, [r3, #12]

            sampler->D = 0.0f;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24
            sampler->Y = 1.0f;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003ab4:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        return sampler->currentInterval;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	e093      	b.n	8003be4 <updateSamplingInterval+0x1d0>
    }

    // Operasi normal: hitung interval adaptif
    float avg = 0.0f;
 8003abc:	f04f 0300 	mov.w	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
    for(int i=0; i<sampler->historySize; i++) {
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	e00e      	b.n	8003ae6 <updateSamplingInterval+0xd2>
    	avg += sampler->history[i];
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7fd f80e 	bl	8000af8 <__addsf3>
 8003adc:	4603      	mov	r3, r0
 8003ade:	617b      	str	r3, [r7, #20]
    for(int i=0; i<sampler->historySize; i++) {
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dbeb      	blt.n	8003ac8 <updateSamplingInterval+0xb4>
    }

    avg /= sampler->historySize;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f8b3 	bl	8000c60 <__aeabi_i2f>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4619      	mov	r1, r3
 8003afe:	6978      	ldr	r0, [r7, #20]
 8003b00:	f7fd f9b6 	bl	8000e70 <__aeabi_fdiv>
 8003b04:	4603      	mov	r3, r0
 8003b06:	617b      	str	r3, [r7, #20]

    if(fabsf(avg) < 0.001f) avg = 0.001f;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b0e:	4937      	ldr	r1, [pc, #220]	@ (8003bec <updateSamplingInterval+0x1d8>)
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd fa97 	bl	8001044 <__aeabi_fcmplt>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <updateSamplingInterval+0x10c>
 8003b1c:	4b33      	ldr	r3, [pc, #204]	@ (8003bec <updateSamplingInterval+0x1d8>)
 8003b1e:	617b      	str	r3, [r7, #20]

    sampler->D = fabsf(newValue - sampler->prevValue)/avg;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4619      	mov	r1, r3
 8003b26:	6838      	ldr	r0, [r7, #0]
 8003b28:	f7fc ffe4 	bl	8000af4 <__aeabi_fsub>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b32:	6979      	ldr	r1, [r7, #20]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fd f99b 	bl	8000e70 <__aeabi_fdiv>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	@ 0x24
    sampler->Y = 2.0f/(1 + expf(-5.0*(sampler->D - sampler->t)));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	f7fc ffd1 	bl	8000af4 <__aeabi_fsub>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4926      	ldr	r1, [pc, #152]	@ (8003bf0 <updateSamplingInterval+0x1dc>)
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd f8d6 	bl	8000d08 <__aeabi_fmul>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f008 fcde 	bl	800c520 <expf>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc ffc4 	bl	8000af8 <__addsf3>
 8003b70:	4603      	mov	r3, r0
 8003b72:	4619      	mov	r1, r3
 8003b74:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8003b78:	f7fd f97a 	bl	8000e70 <__aeabi_fdiv>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	@ 0x28

    float newInterval = sampler->currentInterval / sampler->Y;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f7fd f96e 	bl	8000e70 <__aeabi_fdiv>
 8003b94:	4603      	mov	r3, r0
 8003b96:	60fb      	str	r3, [r7, #12]
    newInterval = fmaxf(sampler->minInterval, fminf(newInterval, sampler->maxInterval));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699c      	ldr	r4, [r3, #24]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f008 fcff 	bl	800c5a6 <fminf>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4619      	mov	r1, r3
 8003bac:	4620      	mov	r0, r4
 8003bae:	f008 fce5 	bl	800c57c <fmaxf>
 8003bb2:	60f8      	str	r0, [r7, #12]

    // Update buffer sirkuler
    sampler->history[sampler->dataIndex % sampler->historySize] = newValue;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6819      	ldr	r1, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6852      	ldr	r2, [r2, #4]
 8003bc0:	fb93 f0f2 	sdiv	r0, r3, r2
 8003bc4:	fb00 f202 	mul.w	r2, r0, r2
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	601a      	str	r2, [r3, #0]
    sampler->dataIndex++;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	1c5a      	adds	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	609a      	str	r2, [r3, #8]
    sampler->prevValue = newValue;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	60da      	str	r2, [r3, #12]

    return newInterval;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3724      	adds	r7, #36	@ 0x24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd90      	pop	{r4, r7, pc}
 8003bec:	3a83126f 	.word	0x3a83126f
 8003bf0:	c0a00000 	.word	0xc0a00000

08003bf4 <globalTimerProcess>:

void globalTimerProcess(Time_t *Global_Time)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
	Global_Time->millisecond_t++;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	889b      	ldrh	r3, [r3, #4]
 8003c00:	3301      	adds	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	809a      	strh	r2, [r3, #4]

	if(Global_Time->millisecond_t > 999)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	889b      	ldrh	r3, [r3, #4]
 8003c0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c10:	d308      	bcc.n	8003c24 <globalTimerProcess+0x30>
	{
		Global_Time->second_t++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	78db      	ldrb	r3, [r3, #3]
 8003c16:	3301      	adds	r3, #1
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	70da      	strb	r2, [r3, #3]
		Global_Time->millisecond_t = 0;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	809a      	strh	r2, [r3, #4]
	}

	if(Global_Time->second_t > 59)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	78db      	ldrb	r3, [r3, #3]
 8003c28:	2b3b      	cmp	r3, #59	@ 0x3b
 8003c2a:	d908      	bls.n	8003c3e <globalTimerProcess+0x4a>
	{
		Global_Time->minute_t++;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	789b      	ldrb	r3, [r3, #2]
 8003c30:	3301      	adds	r3, #1
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	709a      	strb	r2, [r3, #2]
		Global_Time->second_t = 0;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	70da      	strb	r2, [r3, #3]
	}

	if(Global_Time->minute_t > 59)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	789b      	ldrb	r3, [r3, #2]
 8003c42:	2b3b      	cmp	r3, #59	@ 0x3b
 8003c44:	d908      	bls.n	8003c58 <globalTimerProcess+0x64>
	{
		Global_Time->hour_t++;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	801a      	strh	r2, [r3, #0]
		Global_Time->minute_t = 0;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	709a      	strb	r2, [r3, #2]
	}
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003c6a:	4b19      	ldr	r3, [pc, #100]	@ (8003cd0 <HAL_MspInit+0x6c>)
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	4a18      	ldr	r2, [pc, #96]	@ (8003cd0 <HAL_MspInit+0x6c>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6193      	str	r3, [r2, #24]
 8003c76:	4b16      	ldr	r3, [pc, #88]	@ (8003cd0 <HAL_MspInit+0x6c>)
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c82:	4b13      	ldr	r3, [pc, #76]	@ (8003cd0 <HAL_MspInit+0x6c>)
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	4a12      	ldr	r2, [pc, #72]	@ (8003cd0 <HAL_MspInit+0x6c>)
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c8c:	61d3      	str	r3, [r2, #28]
 8003c8e:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <HAL_MspInit+0x6c>)
 8003c90:	69db      	ldr	r3, [r3, #28]
 8003c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2005      	movs	r0, #5
 8003ca0:	f001 fafd 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003ca4:	2005      	movs	r0, #5
 8003ca6:	f001 fb16 	bl	80052d6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003caa:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <HAL_MspInit+0x70>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	4a04      	ldr	r2, [pc, #16]	@ (8003cd4 <HAL_MspInit+0x70>)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40010000 	.word	0x40010000

08003cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	@ 0x28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce0:	f107 0318 	add.w	r3, r7, #24
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a28      	ldr	r2, [pc, #160]	@ (8003d94 <HAL_ADC_MspInit+0xbc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d122      	bne.n	8003d3e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003cf8:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d02:	6193      	str	r3, [r2, #24]
 8003d04:	4b24      	ldr	r3, [pc, #144]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d10:	4b21      	ldr	r3, [pc, #132]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4a20      	ldr	r2, [pc, #128]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d16:	f043 0304 	orr.w	r3, r3, #4
 8003d1a:	6193      	str	r3, [r2, #24]
 8003d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d28:	2380      	movs	r3, #128	@ 0x80
 8003d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d30:	f107 0318 	add.w	r3, r7, #24
 8003d34:	4619      	mov	r1, r3
 8003d36:	4819      	ldr	r0, [pc, #100]	@ (8003d9c <HAL_ADC_MspInit+0xc4>)
 8003d38:	f001 fd94 	bl	8005864 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003d3c:	e026      	b.n	8003d8c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a17      	ldr	r2, [pc, #92]	@ (8003da0 <HAL_ADC_MspInit+0xc8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d121      	bne.n	8003d8c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d48:	4b13      	ldr	r3, [pc, #76]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a12      	ldr	r2, [pc, #72]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d52:	6193      	str	r3, [r2, #24]
 8003d54:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d60:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4a0c      	ldr	r2, [pc, #48]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d66:	f043 0308 	orr.w	r3, r3, #8
 8003d6a:	6193      	str	r3, [r2, #24]
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d98 <HAL_ADC_MspInit+0xc0>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d80:	f107 0318 	add.w	r3, r7, #24
 8003d84:	4619      	mov	r1, r3
 8003d86:	4807      	ldr	r0, [pc, #28]	@ (8003da4 <HAL_ADC_MspInit+0xcc>)
 8003d88:	f001 fd6c 	bl	8005864 <HAL_GPIO_Init>
}
 8003d8c:	bf00      	nop
 8003d8e:	3728      	adds	r7, #40	@ 0x28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40012400 	.word	0x40012400
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	40010800 	.word	0x40010800
 8003da0:	40012800 	.word	0x40012800
 8003da4:	40010c00 	.word	0x40010c00

08003da8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	@ 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e38 <HAL_I2C_MspInit+0x90>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d132      	bne.n	8003e2e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e3c <HAL_I2C_MspInit+0x94>)
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e3c <HAL_I2C_MspInit+0x94>)
 8003dce:	f043 0308 	orr.w	r3, r3, #8
 8003dd2:	6193      	str	r3, [r2, #24]
 8003dd4:	4b19      	ldr	r3, [pc, #100]	@ (8003e3c <HAL_I2C_MspInit+0x94>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003de0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003de6:	2312      	movs	r3, #18
 8003de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dea:	2303      	movs	r3, #3
 8003dec:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dee:	f107 0314 	add.w	r3, r7, #20
 8003df2:	4619      	mov	r1, r3
 8003df4:	4812      	ldr	r0, [pc, #72]	@ (8003e40 <HAL_I2C_MspInit+0x98>)
 8003df6:	f001 fd35 	bl	8005864 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003dfa:	4b12      	ldr	r3, [pc, #72]	@ (8003e44 <HAL_I2C_MspInit+0x9c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e02:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	f043 0302 	orr.w	r3, r3, #2
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e10:	4a0c      	ldr	r2, [pc, #48]	@ (8003e44 <HAL_I2C_MspInit+0x9c>)
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e16:	4b09      	ldr	r3, [pc, #36]	@ (8003e3c <HAL_I2C_MspInit+0x94>)
 8003e18:	69db      	ldr	r3, [r3, #28]
 8003e1a:	4a08      	ldr	r2, [pc, #32]	@ (8003e3c <HAL_I2C_MspInit+0x94>)
 8003e1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e20:	61d3      	str	r3, [r2, #28]
 8003e22:	4b06      	ldr	r3, [pc, #24]	@ (8003e3c <HAL_I2C_MspInit+0x94>)
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003e2e:	bf00      	nop
 8003e30:	3728      	adds	r7, #40	@ 0x28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40005400 	.word	0x40005400
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	40010c00 	.word	0x40010c00
 8003e44:	40010000 	.word	0x40010000

08003e48 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e50:	f107 0310 	add.w	r3, r7, #16
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a16      	ldr	r2, [pc, #88]	@ (8003ebc <HAL_TIM_Encoder_MspInit+0x74>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d124      	bne.n	8003eb2 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e68:	4b15      	ldr	r3, [pc, #84]	@ (8003ec0 <HAL_TIM_Encoder_MspInit+0x78>)
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	4a14      	ldr	r2, [pc, #80]	@ (8003ec0 <HAL_TIM_Encoder_MspInit+0x78>)
 8003e6e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e72:	6193      	str	r3, [r2, #24]
 8003e74:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <HAL_TIM_Encoder_MspInit+0x78>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <HAL_TIM_Encoder_MspInit+0x78>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	4a0e      	ldr	r2, [pc, #56]	@ (8003ec0 <HAL_TIM_Encoder_MspInit+0x78>)
 8003e86:	f043 0304 	orr.w	r3, r3, #4
 8003e8a:	6193      	str	r3, [r2, #24]
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <HAL_TIM_Encoder_MspInit+0x78>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea6:	f107 0310 	add.w	r3, r7, #16
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4805      	ldr	r0, [pc, #20]	@ (8003ec4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003eae:	f001 fcd9 	bl	8005864 <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003eb2:	bf00      	nop
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40012c00 	.word	0x40012c00
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40010800 	.word	0x40010800

08003ec8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003eda:	4b08      	ldr	r3, [pc, #32]	@ (8003efc <HAL_TIM_PWM_MspInit+0x34>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4a07      	ldr	r2, [pc, #28]	@ (8003efc <HAL_TIM_PWM_MspInit+0x34>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	61d3      	str	r3, [r2, #28]
 8003ee6:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <HAL_TIM_PWM_MspInit+0x34>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	60fb      	str	r3, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr
 8003efc:	40021000 	.word	0x40021000

08003f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003f78 <HAL_TIM_Base_MspInit+0x78>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d114      	bne.n	8003f3c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f12:	4b1a      	ldr	r3, [pc, #104]	@ (8003f7c <HAL_TIM_Base_MspInit+0x7c>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	4a19      	ldr	r2, [pc, #100]	@ (8003f7c <HAL_TIM_Base_MspInit+0x7c>)
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	61d3      	str	r3, [r2, #28]
 8003f1e:	4b17      	ldr	r3, [pc, #92]	@ (8003f7c <HAL_TIM_Base_MspInit+0x7c>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	201d      	movs	r0, #29
 8003f30:	f001 f9b5 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003f34:	201d      	movs	r0, #29
 8003f36:	f001 f9ce 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003f3a:	e018      	b.n	8003f6e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0f      	ldr	r2, [pc, #60]	@ (8003f80 <HAL_TIM_Base_MspInit+0x80>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d113      	bne.n	8003f6e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003f46:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <HAL_TIM_Base_MspInit+0x7c>)
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f7c <HAL_TIM_Base_MspInit+0x7c>)
 8003f4c:	f043 0304 	orr.w	r3, r3, #4
 8003f50:	61d3      	str	r3, [r2, #28]
 8003f52:	4b0a      	ldr	r3, [pc, #40]	@ (8003f7c <HAL_TIM_Base_MspInit+0x7c>)
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2100      	movs	r1, #0
 8003f62:	201e      	movs	r0, #30
 8003f64:	f001 f99b 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f68:	201e      	movs	r0, #30
 8003f6a:	f001 f9b4 	bl	80052d6 <HAL_NVIC_EnableIRQ>
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40000800 	.word	0x40000800

08003f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	@ 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa2:	d142      	bne.n	800402a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fa4:	4b23      	ldr	r3, [pc, #140]	@ (8004034 <HAL_TIM_MspPostInit+0xb0>)
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	4a22      	ldr	r2, [pc, #136]	@ (8004034 <HAL_TIM_MspPostInit+0xb0>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6193      	str	r3, [r2, #24]
 8003fb0:	4b20      	ldr	r3, [pc, #128]	@ (8004034 <HAL_TIM_MspPostInit+0xb0>)
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004034 <HAL_TIM_MspPostInit+0xb0>)
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	4a1c      	ldr	r2, [pc, #112]	@ (8004034 <HAL_TIM_MspPostInit+0xb0>)
 8003fc2:	f043 0308 	orr.w	r3, r3, #8
 8003fc6:	6193      	str	r3, [r2, #24]
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <HAL_TIM_MspPostInit+0xb0>)
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4813      	ldr	r0, [pc, #76]	@ (8004038 <HAL_TIM_MspPostInit+0xb4>)
 8003fea:	f001 fc3b 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fee:	2308      	movs	r3, #8
 8003ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ffa:	f107 0314 	add.w	r3, r7, #20
 8003ffe:	4619      	mov	r1, r3
 8004000:	480e      	ldr	r0, [pc, #56]	@ (800403c <HAL_TIM_MspPostInit+0xb8>)
 8004002:	f001 fc2f 	bl	8005864 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8004006:	4b0e      	ldr	r3, [pc, #56]	@ (8004040 <HAL_TIM_MspPostInit+0xbc>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004012:	627b      	str	r3, [r7, #36]	@ 0x24
 8004014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004016:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
 800401c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
 8004024:	4a06      	ldr	r2, [pc, #24]	@ (8004040 <HAL_TIM_MspPostInit+0xbc>)
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800402a:	bf00      	nop
 800402c:	3728      	adds	r7, #40	@ 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40021000 	.word	0x40021000
 8004038:	40010800 	.word	0x40010800
 800403c:	40010c00 	.word	0x40010c00
 8004040:	40010000 	.word	0x40010000

08004044 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08e      	sub	sp, #56	@ 0x38
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a91      	ldr	r2, [pc, #580]	@ (80042a4 <HAL_UART_MspInit+0x260>)
 8004060:	4293      	cmp	r3, r2
 8004062:	f040 8093 	bne.w	800418c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004066:	4b90      	ldr	r3, [pc, #576]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	4a8f      	ldr	r2, [pc, #572]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 800406c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004070:	6193      	str	r3, [r2, #24]
 8004072:	4b8d      	ldr	r3, [pc, #564]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407e:	4b8a      	ldr	r3, [pc, #552]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	4a89      	ldr	r2, [pc, #548]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 8004084:	f043 0308 	orr.w	r3, r3, #8
 8004088:	6193      	str	r3, [r2, #24]
 800408a:	4b87      	ldr	r3, [pc, #540]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004096:	2340      	movs	r3, #64	@ 0x40
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800409e:	2303      	movs	r3, #3
 80040a0:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a6:	4619      	mov	r1, r3
 80040a8:	4880      	ldr	r0, [pc, #512]	@ (80042ac <HAL_UART_MspInit+0x268>)
 80040aa:	f001 fbdb 	bl	8005864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040be:	4619      	mov	r1, r3
 80040c0:	487a      	ldr	r0, [pc, #488]	@ (80042ac <HAL_UART_MspInit+0x268>)
 80040c2:	f001 fbcf 	bl	8005864 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80040c6:	4b7a      	ldr	r3, [pc, #488]	@ (80042b0 <HAL_UART_MspInit+0x26c>)
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80040cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80040d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d6:	f043 0304 	orr.w	r3, r3, #4
 80040da:	637b      	str	r3, [r7, #52]	@ 0x34
 80040dc:	4a74      	ldr	r2, [pc, #464]	@ (80042b0 <HAL_UART_MspInit+0x26c>)
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80040e2:	4b74      	ldr	r3, [pc, #464]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 80040e4:	4a74      	ldr	r2, [pc, #464]	@ (80042b8 <HAL_UART_MspInit+0x274>)
 80040e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040e8:	4b72      	ldr	r3, [pc, #456]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040ee:	4b71      	ldr	r3, [pc, #452]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040f4:	4b6f      	ldr	r3, [pc, #444]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 80040f6:	2280      	movs	r2, #128	@ 0x80
 80040f8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040fa:	4b6e      	ldr	r3, [pc, #440]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004100:	4b6c      	ldr	r3, [pc, #432]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 8004102:	2200      	movs	r2, #0
 8004104:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004106:	4b6b      	ldr	r3, [pc, #428]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 8004108:	2200      	movs	r2, #0
 800410a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800410c:	4b69      	ldr	r3, [pc, #420]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 800410e:	2200      	movs	r2, #0
 8004110:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004112:	4868      	ldr	r0, [pc, #416]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 8004114:	f001 f8fa 	bl	800530c <HAL_DMA_Init>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800411e:	f7ff faeb 	bl	80036f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a63      	ldr	r2, [pc, #396]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 8004126:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004128:	4a62      	ldr	r2, [pc, #392]	@ (80042b4 <HAL_UART_MspInit+0x270>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800412e:	4b63      	ldr	r3, [pc, #396]	@ (80042bc <HAL_UART_MspInit+0x278>)
 8004130:	4a63      	ldr	r2, [pc, #396]	@ (80042c0 <HAL_UART_MspInit+0x27c>)
 8004132:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004134:	4b61      	ldr	r3, [pc, #388]	@ (80042bc <HAL_UART_MspInit+0x278>)
 8004136:	2210      	movs	r2, #16
 8004138:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800413a:	4b60      	ldr	r3, [pc, #384]	@ (80042bc <HAL_UART_MspInit+0x278>)
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004140:	4b5e      	ldr	r3, [pc, #376]	@ (80042bc <HAL_UART_MspInit+0x278>)
 8004142:	2280      	movs	r2, #128	@ 0x80
 8004144:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004146:	4b5d      	ldr	r3, [pc, #372]	@ (80042bc <HAL_UART_MspInit+0x278>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800414c:	4b5b      	ldr	r3, [pc, #364]	@ (80042bc <HAL_UART_MspInit+0x278>)
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004152:	4b5a      	ldr	r3, [pc, #360]	@ (80042bc <HAL_UART_MspInit+0x278>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004158:	4b58      	ldr	r3, [pc, #352]	@ (80042bc <HAL_UART_MspInit+0x278>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800415e:	4857      	ldr	r0, [pc, #348]	@ (80042bc <HAL_UART_MspInit+0x278>)
 8004160:	f001 f8d4 	bl	800530c <HAL_DMA_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800416a:	f7ff fac5 	bl	80036f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a52      	ldr	r2, [pc, #328]	@ (80042bc <HAL_UART_MspInit+0x278>)
 8004172:	639a      	str	r2, [r3, #56]	@ 0x38
 8004174:	4a51      	ldr	r2, [pc, #324]	@ (80042bc <HAL_UART_MspInit+0x278>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800417a:	2200      	movs	r2, #0
 800417c:	2100      	movs	r1, #0
 800417e:	2025      	movs	r0, #37	@ 0x25
 8004180:	f001 f88d 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004184:	2025      	movs	r0, #37	@ 0x25
 8004186:	f001 f8a6 	bl	80052d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800418a:	e133      	b.n	80043f4 <HAL_UART_MspInit+0x3b0>
  else if(huart->Instance==USART2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a4c      	ldr	r2, [pc, #304]	@ (80042c4 <HAL_UART_MspInit+0x280>)
 8004192:	4293      	cmp	r3, r2
 8004194:	f040 80a2 	bne.w	80042dc <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004198:	4b43      	ldr	r3, [pc, #268]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	4a42      	ldr	r2, [pc, #264]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 800419e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041a2:	61d3      	str	r3, [r2, #28]
 80041a4:	4b40      	ldr	r3, [pc, #256]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ac:	61bb      	str	r3, [r7, #24]
 80041ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041b0:	4b3d      	ldr	r3, [pc, #244]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	4a3c      	ldr	r2, [pc, #240]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	6193      	str	r3, [r2, #24]
 80041bc:	4b3a      	ldr	r3, [pc, #232]	@ (80042a8 <HAL_UART_MspInit+0x264>)
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80041c8:	2304      	movs	r3, #4
 80041ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041cc:	2302      	movs	r3, #2
 80041ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041d0:	2303      	movs	r3, #3
 80041d2:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041d8:	4619      	mov	r1, r3
 80041da:	483b      	ldr	r0, [pc, #236]	@ (80042c8 <HAL_UART_MspInit+0x284>)
 80041dc:	f001 fb42 	bl	8005864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80041e0:	2308      	movs	r3, #8
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041f0:	4619      	mov	r1, r3
 80041f2:	4835      	ldr	r0, [pc, #212]	@ (80042c8 <HAL_UART_MspInit+0x284>)
 80041f4:	f001 fb36 	bl	8005864 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80041f8:	4b34      	ldr	r3, [pc, #208]	@ (80042cc <HAL_UART_MspInit+0x288>)
 80041fa:	4a35      	ldr	r2, [pc, #212]	@ (80042d0 <HAL_UART_MspInit+0x28c>)
 80041fc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041fe:	4b33      	ldr	r3, [pc, #204]	@ (80042cc <HAL_UART_MspInit+0x288>)
 8004200:	2200      	movs	r2, #0
 8004202:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004204:	4b31      	ldr	r3, [pc, #196]	@ (80042cc <HAL_UART_MspInit+0x288>)
 8004206:	2200      	movs	r2, #0
 8004208:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800420a:	4b30      	ldr	r3, [pc, #192]	@ (80042cc <HAL_UART_MspInit+0x288>)
 800420c:	2280      	movs	r2, #128	@ 0x80
 800420e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004210:	4b2e      	ldr	r3, [pc, #184]	@ (80042cc <HAL_UART_MspInit+0x288>)
 8004212:	2200      	movs	r2, #0
 8004214:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004216:	4b2d      	ldr	r3, [pc, #180]	@ (80042cc <HAL_UART_MspInit+0x288>)
 8004218:	2200      	movs	r2, #0
 800421a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800421c:	4b2b      	ldr	r3, [pc, #172]	@ (80042cc <HAL_UART_MspInit+0x288>)
 800421e:	2200      	movs	r2, #0
 8004220:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004222:	4b2a      	ldr	r3, [pc, #168]	@ (80042cc <HAL_UART_MspInit+0x288>)
 8004224:	2200      	movs	r2, #0
 8004226:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004228:	4828      	ldr	r0, [pc, #160]	@ (80042cc <HAL_UART_MspInit+0x288>)
 800422a:	f001 f86f 	bl	800530c <HAL_DMA_Init>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8004234:	f7ff fa60 	bl	80036f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a24      	ldr	r2, [pc, #144]	@ (80042cc <HAL_UART_MspInit+0x288>)
 800423c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800423e:	4a23      	ldr	r2, [pc, #140]	@ (80042cc <HAL_UART_MspInit+0x288>)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8004244:	4b23      	ldr	r3, [pc, #140]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 8004246:	4a24      	ldr	r2, [pc, #144]	@ (80042d8 <HAL_UART_MspInit+0x294>)
 8004248:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800424a:	4b22      	ldr	r3, [pc, #136]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 800424c:	2210      	movs	r2, #16
 800424e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004250:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004256:	4b1f      	ldr	r3, [pc, #124]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 8004258:	2280      	movs	r2, #128	@ 0x80
 800425a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800425c:	4b1d      	ldr	r3, [pc, #116]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004262:	4b1c      	ldr	r3, [pc, #112]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004268:	4b1a      	ldr	r3, [pc, #104]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 800426a:	2200      	movs	r2, #0
 800426c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800426e:	4b19      	ldr	r3, [pc, #100]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 8004270:	2200      	movs	r2, #0
 8004272:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004274:	4817      	ldr	r0, [pc, #92]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 8004276:	f001 f849 	bl	800530c <HAL_DMA_Init>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8004280:	f7ff fa3a 	bl	80036f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a13      	ldr	r2, [pc, #76]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38
 800428a:	4a12      	ldr	r2, [pc, #72]	@ (80042d4 <HAL_UART_MspInit+0x290>)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	2026      	movs	r0, #38	@ 0x26
 8004296:	f001 f802 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800429a:	2026      	movs	r0, #38	@ 0x26
 800429c:	f001 f81b 	bl	80052d6 <HAL_NVIC_EnableIRQ>
}
 80042a0:	e0a8      	b.n	80043f4 <HAL_UART_MspInit+0x3b0>
 80042a2:	bf00      	nop
 80042a4:	40013800 	.word	0x40013800
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40010c00 	.word	0x40010c00
 80042b0:	40010000 	.word	0x40010000
 80042b4:	200005c8 	.word	0x200005c8
 80042b8:	40020058 	.word	0x40020058
 80042bc:	2000060c 	.word	0x2000060c
 80042c0:	40020044 	.word	0x40020044
 80042c4:	40004400 	.word	0x40004400
 80042c8:	40010800 	.word	0x40010800
 80042cc:	20000650 	.word	0x20000650
 80042d0:	4002006c 	.word	0x4002006c
 80042d4:	20000694 	.word	0x20000694
 80042d8:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a46      	ldr	r2, [pc, #280]	@ (80043fc <HAL_UART_MspInit+0x3b8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	f040 8086 	bne.w	80043f4 <HAL_UART_MspInit+0x3b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80042e8:	4b45      	ldr	r3, [pc, #276]	@ (8004400 <HAL_UART_MspInit+0x3bc>)
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	4a44      	ldr	r2, [pc, #272]	@ (8004400 <HAL_UART_MspInit+0x3bc>)
 80042ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f2:	61d3      	str	r3, [r2, #28]
 80042f4:	4b42      	ldr	r3, [pc, #264]	@ (8004400 <HAL_UART_MspInit+0x3bc>)
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004300:	4b3f      	ldr	r3, [pc, #252]	@ (8004400 <HAL_UART_MspInit+0x3bc>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	4a3e      	ldr	r2, [pc, #248]	@ (8004400 <HAL_UART_MspInit+0x3bc>)
 8004306:	f043 0308 	orr.w	r3, r3, #8
 800430a:	6193      	str	r3, [r2, #24]
 800430c:	4b3c      	ldr	r3, [pc, #240]	@ (8004400 <HAL_UART_MspInit+0x3bc>)
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	f003 0308 	and.w	r3, r3, #8
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004318:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431e:	2302      	movs	r3, #2
 8004320:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004322:	2303      	movs	r3, #3
 8004324:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800432a:	4619      	mov	r1, r3
 800432c:	4835      	ldr	r0, [pc, #212]	@ (8004404 <HAL_UART_MspInit+0x3c0>)
 800432e:	f001 fa99 	bl	8005864 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004338:	2300      	movs	r3, #0
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800433c:	2300      	movs	r3, #0
 800433e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004344:	4619      	mov	r1, r3
 8004346:	482f      	ldr	r0, [pc, #188]	@ (8004404 <HAL_UART_MspInit+0x3c0>)
 8004348:	f001 fa8c 	bl	8005864 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800434c:	4b2e      	ldr	r3, [pc, #184]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 800434e:	4a2f      	ldr	r2, [pc, #188]	@ (800440c <HAL_UART_MspInit+0x3c8>)
 8004350:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004352:	4b2d      	ldr	r3, [pc, #180]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 8004354:	2200      	movs	r2, #0
 8004356:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004358:	4b2b      	ldr	r3, [pc, #172]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 800435a:	2200      	movs	r2, #0
 800435c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800435e:	4b2a      	ldr	r3, [pc, #168]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 8004360:	2280      	movs	r2, #128	@ 0x80
 8004362:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004364:	4b28      	ldr	r3, [pc, #160]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800436a:	4b27      	ldr	r3, [pc, #156]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 800436c:	2200      	movs	r2, #0
 800436e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004370:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 8004372:	2200      	movs	r2, #0
 8004374:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004376:	4b24      	ldr	r3, [pc, #144]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 8004378:	2200      	movs	r2, #0
 800437a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800437c:	4822      	ldr	r0, [pc, #136]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 800437e:	f000 ffc5 	bl	800530c <HAL_DMA_Init>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004388:	f7ff f9b6 	bl	80036f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a1e      	ldr	r2, [pc, #120]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 8004390:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004392:	4a1d      	ldr	r2, [pc, #116]	@ (8004408 <HAL_UART_MspInit+0x3c4>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004398:	4b1d      	ldr	r3, [pc, #116]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 800439a:	4a1e      	ldr	r2, [pc, #120]	@ (8004414 <HAL_UART_MspInit+0x3d0>)
 800439c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800439e:	4b1c      	ldr	r3, [pc, #112]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043a0:	2210      	movs	r2, #16
 80043a2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043aa:	4b19      	ldr	r3, [pc, #100]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043ac:	2280      	movs	r2, #128	@ 0x80
 80043ae:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043b0:	4b17      	ldr	r3, [pc, #92]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043b6:	4b16      	ldr	r3, [pc, #88]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80043bc:	4b14      	ldr	r3, [pc, #80]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043be:	2200      	movs	r2, #0
 80043c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80043c2:	4b13      	ldr	r3, [pc, #76]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80043c8:	4811      	ldr	r0, [pc, #68]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043ca:	f000 ff9f 	bl	800530c <HAL_DMA_Init>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_UART_MspInit+0x394>
      Error_Handler();
 80043d4:	f7ff f990 	bl	80036f8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a0d      	ldr	r2, [pc, #52]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80043de:	4a0c      	ldr	r2, [pc, #48]	@ (8004410 <HAL_UART_MspInit+0x3cc>)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80043e4:	2200      	movs	r2, #0
 80043e6:	2100      	movs	r1, #0
 80043e8:	2027      	movs	r0, #39	@ 0x27
 80043ea:	f000 ff58 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80043ee:	2027      	movs	r0, #39	@ 0x27
 80043f0:	f000 ff71 	bl	80052d6 <HAL_NVIC_EnableIRQ>
}
 80043f4:	bf00      	nop
 80043f6:	3738      	adds	r7, #56	@ 0x38
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	40004800 	.word	0x40004800
 8004400:	40021000 	.word	0x40021000
 8004404:	40010c00 	.word	0x40010c00
 8004408:	200006d8 	.word	0x200006d8
 800440c:	40020030 	.word	0x40020030
 8004410:	2000071c 	.word	0x2000071c
 8004414:	4002001c 	.word	0x4002001c

08004418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <NMI_Handler+0x4>

08004420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004424:	bf00      	nop
 8004426:	e7fd      	b.n	8004424 <HardFault_Handler+0x4>

08004428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800442c:	bf00      	nop
 800442e:	e7fd      	b.n	800442c <MemManage_Handler+0x4>

08004430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <BusFault_Handler+0x4>

08004438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800443c:	bf00      	nop
 800443e:	e7fd      	b.n	800443c <UsageFault_Handler+0x4>

08004440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004444:	bf00      	nop
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr

08004458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	bc80      	pop	{r7}
 8004462:	4770      	bx	lr

08004464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004468:	f000 f9aa 	bl	80047c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800446c:	bf00      	nop
 800446e:	bd80      	pop	{r7, pc}

08004470 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004480:	4802      	ldr	r0, [pc, #8]	@ (800448c <DMA1_Channel2_IRQHandler+0x10>)
 8004482:	f001 f8b1 	bl	80055e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	2000071c 	.word	0x2000071c

08004490 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004494:	4802      	ldr	r0, [pc, #8]	@ (80044a0 <DMA1_Channel3_IRQHandler+0x10>)
 8004496:	f001 f8a7 	bl	80055e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800449a:	bf00      	nop
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	200006d8 	.word	0x200006d8

080044a4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80044a8:	4802      	ldr	r0, [pc, #8]	@ (80044b4 <DMA1_Channel4_IRQHandler+0x10>)
 80044aa:	f001 f89d 	bl	80055e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	2000060c 	.word	0x2000060c

080044b8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80044bc:	4802      	ldr	r0, [pc, #8]	@ (80044c8 <DMA1_Channel5_IRQHandler+0x10>)
 80044be:	f001 f893 	bl	80055e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	200005c8 	.word	0x200005c8

080044cc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80044d0:	4802      	ldr	r0, [pc, #8]	@ (80044dc <DMA1_Channel6_IRQHandler+0x10>)
 80044d2:	f001 f889 	bl	80055e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000650 	.word	0x20000650

080044e0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80044e4:	4802      	ldr	r0, [pc, #8]	@ (80044f0 <DMA1_Channel7_IRQHandler+0x10>)
 80044e6:	f001 f87f 	bl	80055e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80044ea:	bf00      	nop
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	20000694 	.word	0x20000694

080044f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80044f8:	4802      	ldr	r0, [pc, #8]	@ (8004504 <TIM3_IRQHandler+0x10>)
 80044fa:	f003 fbf3 	bl	8007ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80044fe:	bf00      	nop
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000460 	.word	0x20000460

08004508 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800450c:	4802      	ldr	r0, [pc, #8]	@ (8004518 <TIM4_IRQHandler+0x10>)
 800450e:	f003 fbe9 	bl	8007ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004512:	bf00      	nop
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	200004a8 	.word	0x200004a8

0800451c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004520:	4802      	ldr	r0, [pc, #8]	@ (800452c <USART1_IRQHandler+0x10>)
 8004522:	f004 fb25 	bl	8008b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	200004f0 	.word	0x200004f0

08004530 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004534:	4802      	ldr	r0, [pc, #8]	@ (8004540 <USART2_IRQHandler+0x10>)
 8004536:	f004 fb1b 	bl	8008b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20000538 	.word	0x20000538

08004544 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004548:	4802      	ldr	r0, [pc, #8]	@ (8004554 <USART3_IRQHandler+0x10>)
 800454a:	f004 fb11 	bl	8008b70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800454e:	bf00      	nop
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000580 	.word	0x20000580

08004558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0
  return 1;
 800455c:	2301      	movs	r3, #1
}
 800455e:	4618      	mov	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr

08004566 <_kill>:

int _kill(int pid, int sig)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004570:	f006 f960 	bl	800a834 <__errno>
 8004574:	4603      	mov	r3, r0
 8004576:	2216      	movs	r2, #22
 8004578:	601a      	str	r2, [r3, #0]
  return -1;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800457e:	4618      	mov	r0, r3
 8004580:	3708      	adds	r7, #8
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <_exit>:

void _exit (int status)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800458e:	f04f 31ff 	mov.w	r1, #4294967295
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ffe7 	bl	8004566 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <_exit+0x12>

0800459c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]
 80045ac:	e00a      	b.n	80045c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045ae:	f3af 8000 	nop.w
 80045b2:	4601      	mov	r1, r0
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	60ba      	str	r2, [r7, #8]
 80045ba:	b2ca      	uxtb	r2, r1
 80045bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	3301      	adds	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	dbf0      	blt.n	80045ae <_read+0x12>
  }

  return len;
 80045cc:	687b      	ldr	r3, [r7, #4]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}

080045d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045d6:	b580      	push	{r7, lr}
 80045d8:	b086      	sub	sp, #24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	e009      	b.n	80045fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	60ba      	str	r2, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	3301      	adds	r3, #1
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	dbf1      	blt.n	80045e8 <_write+0x12>
  }
  return len;
 8004604:	687b      	ldr	r3, [r7, #4]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <_close>:

int _close(int file)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004634:	605a      	str	r2, [r3, #4]
  return 0;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr

08004642 <_isatty>:

int _isatty(int file)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800464a:	2301      	movs	r3, #1
}
 800464c:	4618      	mov	r0, r3
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	bc80      	pop	{r7}
 8004654:	4770      	bx	lr

08004656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
	...

08004670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004678:	4a14      	ldr	r2, [pc, #80]	@ (80046cc <_sbrk+0x5c>)
 800467a:	4b15      	ldr	r3, [pc, #84]	@ (80046d0 <_sbrk+0x60>)
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004684:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <_sbrk+0x64>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d102      	bne.n	8004692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800468c:	4b11      	ldr	r3, [pc, #68]	@ (80046d4 <_sbrk+0x64>)
 800468e:	4a12      	ldr	r2, [pc, #72]	@ (80046d8 <_sbrk+0x68>)
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004692:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <_sbrk+0x64>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4413      	add	r3, r2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	429a      	cmp	r2, r3
 800469e:	d207      	bcs.n	80046b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046a0:	f006 f8c8 	bl	800a834 <__errno>
 80046a4:	4603      	mov	r3, r0
 80046a6:	220c      	movs	r2, #12
 80046a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295
 80046ae:	e009      	b.n	80046c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046b0:	4b08      	ldr	r3, [pc, #32]	@ (80046d4 <_sbrk+0x64>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046b6:	4b07      	ldr	r3, [pc, #28]	@ (80046d4 <_sbrk+0x64>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	4a05      	ldr	r2, [pc, #20]	@ (80046d4 <_sbrk+0x64>)
 80046c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046c2:	68fb      	ldr	r3, [r7, #12]
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20005000 	.word	0x20005000
 80046d0:	00000400 	.word	0x00000400
 80046d4:	2000096c 	.word	0x2000096c
 80046d8:	20000ac0 	.word	0x20000ac0

080046dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046e8:	f7ff fff8 	bl	80046dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046ec:	480b      	ldr	r0, [pc, #44]	@ (800471c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80046ee:	490c      	ldr	r1, [pc, #48]	@ (8004720 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80046f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004724 <LoopFillZerobss+0x16>)
  movs r3, #0
 80046f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046f4:	e002      	b.n	80046fc <LoopCopyDataInit>

080046f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046fa:	3304      	adds	r3, #4

080046fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004700:	d3f9      	bcc.n	80046f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004702:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004704:	4c09      	ldr	r4, [pc, #36]	@ (800472c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004708:	e001      	b.n	800470e <LoopFillZerobss>

0800470a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800470a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800470c:	3204      	adds	r2, #4

0800470e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800470e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004710:	d3fb      	bcc.n	800470a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004712:	f006 f895 	bl	800a840 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004716:	f7fd fffb 	bl	8002710 <main>
  bx lr
 800471a:	4770      	bx	lr
  ldr r0, =_sdata
 800471c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004720:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8004724:	0800cd54 	.word	0x0800cd54
  ldr r2, =_sbss
 8004728:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 800472c:	20000ac0 	.word	0x20000ac0

08004730 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004730:	e7fe      	b.n	8004730 <ADC1_2_IRQHandler>
	...

08004734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004738:	4b08      	ldr	r3, [pc, #32]	@ (800475c <HAL_Init+0x28>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a07      	ldr	r2, [pc, #28]	@ (800475c <HAL_Init+0x28>)
 800473e:	f043 0310 	orr.w	r3, r3, #16
 8004742:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004744:	2003      	movs	r0, #3
 8004746:	f000 fd9f 	bl	8005288 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800474a:	200f      	movs	r0, #15
 800474c:	f000 f808 	bl	8004760 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004750:	f7ff fa88 	bl	8003c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40022000 	.word	0x40022000

08004760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004768:	4b12      	ldr	r3, [pc, #72]	@ (80047b4 <HAL_InitTick+0x54>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b12      	ldr	r3, [pc, #72]	@ (80047b8 <HAL_InitTick+0x58>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	4619      	mov	r1, r3
 8004772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004776:	fbb3 f3f1 	udiv	r3, r3, r1
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fdb7 	bl	80052f2 <HAL_SYSTICK_Config>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e00e      	b.n	80047ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b0f      	cmp	r3, #15
 8004792:	d80a      	bhi.n	80047aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004794:	2200      	movs	r2, #0
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	f000 fd7f 	bl	800529e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047a0:	4a06      	ldr	r2, [pc, #24]	@ (80047bc <HAL_InitTick+0x5c>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	e000      	b.n	80047ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000044 	.word	0x20000044
 80047b8:	2000004c 	.word	0x2000004c
 80047bc:	20000048 	.word	0x20000048

080047c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <HAL_IncTick+0x1c>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <HAL_IncTick+0x20>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4413      	add	r3, r2
 80047d0:	4a03      	ldr	r2, [pc, #12]	@ (80047e0 <HAL_IncTick+0x20>)
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr
 80047dc:	2000004c 	.word	0x2000004c
 80047e0:	20000970 	.word	0x20000970

080047e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e4:	b480      	push	{r7}
 80047e6:	af00      	add	r7, sp, #0
  return uwTick;
 80047e8:	4b02      	ldr	r3, [pc, #8]	@ (80047f4 <HAL_GetTick+0x10>)
 80047ea:	681b      	ldr	r3, [r3, #0]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr
 80047f4:	20000970 	.word	0x20000970

080047f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff fff0 	bl	80047e4 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d005      	beq.n	800481e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004812:	4b0a      	ldr	r3, [pc, #40]	@ (800483c <HAL_Delay+0x44>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800481e:	bf00      	nop
 8004820:	f7ff ffe0 	bl	80047e4 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d8f7      	bhi.n	8004820 <HAL_Delay+0x28>
  {
  }
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	2000004c 	.word	0x2000004c

08004840 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e0be      	b.n	80049e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	2b00      	cmp	r3, #0
 800486e:	d109      	bne.n	8004884 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff fa2a 	bl	8003cd8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fbf1 	bl	800506c <ADC_ConversionStop_Disable>
 800488a:	4603      	mov	r3, r0
 800488c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b00      	cmp	r3, #0
 8004898:	f040 8099 	bne.w	80049ce <HAL_ADC_Init+0x18e>
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 8095 	bne.w	80049ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048ac:	f023 0302 	bic.w	r3, r3, #2
 80048b0:	f043 0202 	orr.w	r2, r3, #2
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	7b1b      	ldrb	r3, [r3, #12]
 80048c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80048c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048d8:	d003      	beq.n	80048e2 <HAL_ADC_Init+0xa2>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d102      	bne.n	80048e8 <HAL_ADC_Init+0xa8>
 80048e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048e6:	e000      	b.n	80048ea <HAL_ADC_Init+0xaa>
 80048e8:	2300      	movs	r3, #0
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	7d1b      	ldrb	r3, [r3, #20]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d119      	bne.n	800492c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7b1b      	ldrb	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	3b01      	subs	r3, #1
 8004906:	035a      	lsls	r2, r3, #13
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	e00b      	b.n	800492c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004924:	f043 0201 	orr.w	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	430a      	orrs	r2, r1
 800493e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4b28      	ldr	r3, [pc, #160]	@ (80049e8 <HAL_ADC_Init+0x1a8>)
 8004948:	4013      	ands	r3, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	68b9      	ldr	r1, [r7, #8]
 8004950:	430b      	orrs	r3, r1
 8004952:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800495c:	d003      	beq.n	8004966 <HAL_ADC_Init+0x126>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d104      	bne.n	8004970 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	3b01      	subs	r3, #1
 800496c:	051b      	lsls	r3, r3, #20
 800496e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	430a      	orrs	r2, r1
 8004982:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689a      	ldr	r2, [r3, #8]
 800498a:	4b18      	ldr	r3, [pc, #96]	@ (80049ec <HAL_ADC_Init+0x1ac>)
 800498c:	4013      	ands	r3, r2
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d10b      	bne.n	80049ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499e:	f023 0303 	bic.w	r3, r3, #3
 80049a2:	f043 0201 	orr.w	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049aa:	e018      	b.n	80049de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b0:	f023 0312 	bic.w	r3, r3, #18
 80049b4:	f043 0210 	orr.w	r2, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	f043 0201 	orr.w	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80049cc:	e007      	b.n	80049de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	f043 0210 	orr.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80049de:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	ffe1f7fd 	.word	0xffe1f7fd
 80049ec:	ff1f0efe 	.word	0xff1f0efe

080049f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_ADC_Start+0x1a>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e098      	b.n	8004b3c <HAL_ADC_Start+0x14c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fad0 	bl	8004fb8 <ADC_Enable>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 8087 	bne.w	8004b32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a2c:	f023 0301 	bic.w	r3, r3, #1
 8004a30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a41      	ldr	r2, [pc, #260]	@ (8004b44 <HAL_ADC_Start+0x154>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d105      	bne.n	8004a4e <HAL_ADC_Start+0x5e>
 8004a42:	4b41      	ldr	r3, [pc, #260]	@ (8004b48 <HAL_ADC_Start+0x158>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d115      	bne.n	8004a7a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d026      	beq.n	8004ab6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a70:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a78:	e01d      	b.n	8004ab6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004b48 <HAL_ADC_Start+0x158>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_ADC_Start+0xaa>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2b      	ldr	r2, [pc, #172]	@ (8004b44 <HAL_ADC_Start+0x154>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10d      	bne.n	8004ab6 <HAL_ADC_Start+0xc6>
 8004a9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004b48 <HAL_ADC_Start+0x158>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004aae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d006      	beq.n	8004ad0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac6:	f023 0206 	bic.w	r2, r3, #6
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ace:	e002      	b.n	8004ad6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f06f 0202 	mvn.w	r2, #2
 8004ae6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004af2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004af6:	d113      	bne.n	8004b20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004afc:	4a11      	ldr	r2, [pc, #68]	@ (8004b44 <HAL_ADC_Start+0x154>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d105      	bne.n	8004b0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004b02:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <HAL_ADC_Start+0x158>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d108      	bne.n	8004b20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	e00c      	b.n	8004b3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	e003      	b.n	8004b3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40012800 	.word	0x40012800
 8004b48:	40012400 	.word	0x40012400

08004b4c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_ADC_Stop+0x1a>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e01a      	b.n	8004b9c <HAL_ADC_Stop+0x50>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa7c 	bl	800506c <ADC_ConversionStop_Disable>
 8004b74:	4603      	mov	r3, r0
 8004b76:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	f043 0201 	orr.w	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004bba:	f7ff fe13 	bl	80047e4 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e0d3      	b.n	8004d8e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d131      	bne.n	8004c58 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d12a      	bne.n	8004c58 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c02:	e021      	b.n	8004c48 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0a:	d01d      	beq.n	8004c48 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <HAL_ADC_PollForConversion+0x7e>
 8004c12:	f7ff fde7 	bl	80047e4 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d212      	bcs.n	8004c48 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10b      	bne.n	8004c48 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c34:	f043 0204 	orr.w	r2, r3, #4
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e0a2      	b.n	8004d8e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0d6      	beq.n	8004c04 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004c56:	e070      	b.n	8004d3a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004c58:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <HAL_ADC_PollForConversion+0x1f4>)
 8004c5a:	681c      	ldr	r4, [r3, #0]
 8004c5c:	2002      	movs	r0, #2
 8004c5e:	f002 fcc7 	bl	80075f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c62:	4603      	mov	r3, r0
 8004c64:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6919      	ldr	r1, [r3, #16]
 8004c6e:	4b4b      	ldr	r3, [pc, #300]	@ (8004d9c <HAL_ADC_PollForConversion+0x1f8>)
 8004c70:	400b      	ands	r3, r1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d118      	bne.n	8004ca8 <HAL_ADC_PollForConversion+0x104>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68d9      	ldr	r1, [r3, #12]
 8004c7c:	4b48      	ldr	r3, [pc, #288]	@ (8004da0 <HAL_ADC_PollForConversion+0x1fc>)
 8004c7e:	400b      	ands	r3, r1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d111      	bne.n	8004ca8 <HAL_ADC_PollForConversion+0x104>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6919      	ldr	r1, [r3, #16]
 8004c8a:	4b46      	ldr	r3, [pc, #280]	@ (8004da4 <HAL_ADC_PollForConversion+0x200>)
 8004c8c:	400b      	ands	r3, r1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <HAL_ADC_PollForConversion+0x100>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68d9      	ldr	r1, [r3, #12]
 8004c98:	4b43      	ldr	r3, [pc, #268]	@ (8004da8 <HAL_ADC_PollForConversion+0x204>)
 8004c9a:	400b      	ands	r3, r1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_ADC_PollForConversion+0x100>
 8004ca0:	2314      	movs	r3, #20
 8004ca2:	e020      	b.n	8004ce6 <HAL_ADC_PollForConversion+0x142>
 8004ca4:	2329      	movs	r3, #41	@ 0x29
 8004ca6:	e01e      	b.n	8004ce6 <HAL_ADC_PollForConversion+0x142>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6919      	ldr	r1, [r3, #16]
 8004cae:	4b3d      	ldr	r3, [pc, #244]	@ (8004da4 <HAL_ADC_PollForConversion+0x200>)
 8004cb0:	400b      	ands	r3, r1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_ADC_PollForConversion+0x120>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68d9      	ldr	r1, [r3, #12]
 8004cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8004da8 <HAL_ADC_PollForConversion+0x204>)
 8004cbe:	400b      	ands	r3, r1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <HAL_ADC_PollForConversion+0x13c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6919      	ldr	r1, [r3, #16]
 8004cca:	4b38      	ldr	r3, [pc, #224]	@ (8004dac <HAL_ADC_PollForConversion+0x208>)
 8004ccc:	400b      	ands	r3, r1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d108      	bne.n	8004ce4 <HAL_ADC_PollForConversion+0x140>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68d9      	ldr	r1, [r3, #12]
 8004cd8:	4b34      	ldr	r3, [pc, #208]	@ (8004dac <HAL_ADC_PollForConversion+0x208>)
 8004cda:	400b      	ands	r3, r1
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_ADC_PollForConversion+0x140>
 8004ce0:	2354      	movs	r3, #84	@ 0x54
 8004ce2:	e000      	b.n	8004ce6 <HAL_ADC_PollForConversion+0x142>
 8004ce4:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004ce6:	fb02 f303 	mul.w	r3, r2, r3
 8004cea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004cec:	e021      	b.n	8004d32 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d01a      	beq.n	8004d2c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d007      	beq.n	8004d0c <HAL_ADC_PollForConversion+0x168>
 8004cfc:	f7ff fd72 	bl	80047e4 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d20f      	bcs.n	8004d2c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d90b      	bls.n	8004d2c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	f043 0204 	orr.w	r2, r3, #4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e030      	b.n	8004d8e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d8d9      	bhi.n	8004cee <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f06f 0212 	mvn.w	r2, #18
 8004d42:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004d5a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004d5e:	d115      	bne.n	8004d8c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d111      	bne.n	8004d8c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	f043 0201 	orr.w	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd90      	pop	{r4, r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000044 	.word	0x20000044
 8004d9c:	24924924 	.word	0x24924924
 8004da0:	00924924 	.word	0x00924924
 8004da4:	12492492 	.word	0x12492492
 8004da8:	00492492 	.word	0x00492492
 8004dac:	00249249 	.word	0x00249249

08004db0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bc80      	pop	{r7}
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x20>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e0dc      	b.n	8004fa2 <HAL_ADC_ConfigChannel+0x1da>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b06      	cmp	r3, #6
 8004df6:	d81c      	bhi.n	8004e32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	3b05      	subs	r3, #5
 8004e0a:	221f      	movs	r2, #31
 8004e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e10:	43db      	mvns	r3, r3
 8004e12:	4019      	ands	r1, r3
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	6818      	ldr	r0, [r3, #0]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	3b05      	subs	r3, #5
 8004e24:	fa00 f203 	lsl.w	r2, r0, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004e30:	e03c      	b.n	8004eac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b0c      	cmp	r3, #12
 8004e38:	d81c      	bhi.n	8004e74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	3b23      	subs	r3, #35	@ 0x23
 8004e4c:	221f      	movs	r2, #31
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	4019      	ands	r1, r3
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6818      	ldr	r0, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	3b23      	subs	r3, #35	@ 0x23
 8004e66:	fa00 f203 	lsl.w	r2, r0, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e72:	e01b      	b.n	8004eac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	3b41      	subs	r3, #65	@ 0x41
 8004e86:	221f      	movs	r2, #31
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	4019      	ands	r1, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	3b41      	subs	r3, #65	@ 0x41
 8004ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b09      	cmp	r3, #9
 8004eb2:	d91c      	bls.n	8004eee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68d9      	ldr	r1, [r3, #12]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	4413      	add	r3, r2
 8004ec4:	3b1e      	subs	r3, #30
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	4019      	ands	r1, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	6898      	ldr	r0, [r3, #8]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	4413      	add	r3, r2
 8004ede:	3b1e      	subs	r3, #30
 8004ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	60da      	str	r2, [r3, #12]
 8004eec:	e019      	b.n	8004f22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6919      	ldr	r1, [r3, #16]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	2207      	movs	r2, #7
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	43db      	mvns	r3, r3
 8004f06:	4019      	ands	r1, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	6898      	ldr	r0, [r3, #8]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4613      	mov	r3, r2
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	4413      	add	r3, r2
 8004f16:	fa00 f203 	lsl.w	r2, r0, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d003      	beq.n	8004f32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004f2e:	2b11      	cmp	r3, #17
 8004f30:	d132      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1d      	ldr	r2, [pc, #116]	@ (8004fac <HAL_ADC_ConfigChannel+0x1e4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d125      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d126      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004f58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b10      	cmp	r3, #16
 8004f60:	d11a      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004f62:	4b13      	ldr	r3, [pc, #76]	@ (8004fb0 <HAL_ADC_ConfigChannel+0x1e8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a13      	ldr	r2, [pc, #76]	@ (8004fb4 <HAL_ADC_ConfigChannel+0x1ec>)
 8004f68:	fba2 2303 	umull	r2, r3, r2, r3
 8004f6c:	0c9a      	lsrs	r2, r3, #18
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f78:	e002      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f9      	bne.n	8004f7a <HAL_ADC_ConfigChannel+0x1b2>
 8004f86:	e007      	b.n	8004f98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	f043 0220 	orr.w	r2, r3, #32
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bc80      	pop	{r7}
 8004faa:	4770      	bx	lr
 8004fac:	40012400 	.word	0x40012400
 8004fb0:	20000044 	.word	0x20000044
 8004fb4:	431bde83 	.word	0x431bde83

08004fb8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d040      	beq.n	8005058 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8005064 <ADC_Enable+0xac>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1f      	ldr	r2, [pc, #124]	@ (8005068 <ADC_Enable+0xb0>)
 8004fec:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff0:	0c9b      	lsrs	r3, r3, #18
 8004ff2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004ff4:	e002      	b.n	8004ffc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1f9      	bne.n	8004ff6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005002:	f7ff fbef 	bl	80047e4 <HAL_GetTick>
 8005006:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005008:	e01f      	b.n	800504a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800500a:	f7ff fbeb 	bl	80047e4 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d918      	bls.n	800504a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d011      	beq.n	800504a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502a:	f043 0210 	orr.w	r2, r3, #16
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e007      	b.n	800505a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d1d8      	bne.n	800500a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000044 	.word	0x20000044
 8005068:	431bde83 	.word	0x431bde83

0800506c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b01      	cmp	r3, #1
 8005084:	d12e      	bne.n	80050e4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0201 	bic.w	r2, r2, #1
 8005094:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005096:	f7ff fba5 	bl	80047e4 <HAL_GetTick>
 800509a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800509c:	e01b      	b.n	80050d6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800509e:	f7ff fba1 	bl	80047e4 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d914      	bls.n	80050d6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d10d      	bne.n	80050d6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	f043 0210 	orr.w	r2, r3, #16
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	f043 0201 	orr.w	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e007      	b.n	80050e6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d0dc      	beq.n	800509e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <__NVIC_SetPriorityGrouping>:
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f003 0307 	and.w	r3, r3, #7
 80050fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005100:	4b0c      	ldr	r3, [pc, #48]	@ (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800510c:	4013      	ands	r3, r2
 800510e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800511c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005122:	4a04      	ldr	r2, [pc, #16]	@ (8005134 <__NVIC_SetPriorityGrouping+0x44>)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	60d3      	str	r3, [r2, #12]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <__NVIC_GetPriorityGrouping>:
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800513c:	4b04      	ldr	r3, [pc, #16]	@ (8005150 <__NVIC_GetPriorityGrouping+0x18>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	0a1b      	lsrs	r3, r3, #8
 8005142:	f003 0307 	and.w	r3, r3, #7
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000ed00 	.word	0xe000ed00

08005154 <__NVIC_EnableIRQ>:
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005162:	2b00      	cmp	r3, #0
 8005164:	db0b      	blt.n	800517e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	f003 021f 	and.w	r2, r3, #31
 800516c:	4906      	ldr	r1, [pc, #24]	@ (8005188 <__NVIC_EnableIRQ+0x34>)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2001      	movs	r0, #1
 8005176:	fa00 f202 	lsl.w	r2, r0, r2
 800517a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	bc80      	pop	{r7}
 8005186:	4770      	bx	lr
 8005188:	e000e100 	.word	0xe000e100

0800518c <__NVIC_SetPriority>:
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	6039      	str	r1, [r7, #0]
 8005196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519c:	2b00      	cmp	r3, #0
 800519e:	db0a      	blt.n	80051b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	490c      	ldr	r1, [pc, #48]	@ (80051d8 <__NVIC_SetPriority+0x4c>)
 80051a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051aa:	0112      	lsls	r2, r2, #4
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	440b      	add	r3, r1
 80051b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80051b4:	e00a      	b.n	80051cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4908      	ldr	r1, [pc, #32]	@ (80051dc <__NVIC_SetPriority+0x50>)
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	3b04      	subs	r3, #4
 80051c4:	0112      	lsls	r2, r2, #4
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	440b      	add	r3, r1
 80051ca:	761a      	strb	r2, [r3, #24]
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bc80      	pop	{r7}
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	e000e100 	.word	0xe000e100
 80051dc:	e000ed00 	.word	0xe000ed00

080051e0 <NVIC_EncodePriority>:
{
 80051e0:	b480      	push	{r7}
 80051e2:	b089      	sub	sp, #36	@ 0x24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f1c3 0307 	rsb	r3, r3, #7
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	bf28      	it	cs
 80051fe:	2304      	movcs	r3, #4
 8005200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	3304      	adds	r3, #4
 8005206:	2b06      	cmp	r3, #6
 8005208:	d902      	bls.n	8005210 <NVIC_EncodePriority+0x30>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	3b03      	subs	r3, #3
 800520e:	e000      	b.n	8005212 <NVIC_EncodePriority+0x32>
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005214:	f04f 32ff 	mov.w	r2, #4294967295
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	fa02 f303 	lsl.w	r3, r2, r3
 800521e:	43da      	mvns	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	401a      	ands	r2, r3
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005228:	f04f 31ff 	mov.w	r1, #4294967295
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	fa01 f303 	lsl.w	r3, r1, r3
 8005232:	43d9      	mvns	r1, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005238:	4313      	orrs	r3, r2
}
 800523a:	4618      	mov	r0, r3
 800523c:	3724      	adds	r7, #36	@ 0x24
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr

08005244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005254:	d301      	bcc.n	800525a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005256:	2301      	movs	r3, #1
 8005258:	e00f      	b.n	800527a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800525a:	4a0a      	ldr	r2, [pc, #40]	@ (8005284 <SysTick_Config+0x40>)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3b01      	subs	r3, #1
 8005260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005262:	210f      	movs	r1, #15
 8005264:	f04f 30ff 	mov.w	r0, #4294967295
 8005268:	f7ff ff90 	bl	800518c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800526c:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <SysTick_Config+0x40>)
 800526e:	2200      	movs	r2, #0
 8005270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005272:	4b04      	ldr	r3, [pc, #16]	@ (8005284 <SysTick_Config+0x40>)
 8005274:	2207      	movs	r2, #7
 8005276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	e000e010 	.word	0xe000e010

08005288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff2d 	bl	80050f0 <__NVIC_SetPriorityGrouping>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800529e:	b580      	push	{r7, lr}
 80052a0:	b086      	sub	sp, #24
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	4603      	mov	r3, r0
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052b0:	f7ff ff42 	bl	8005138 <__NVIC_GetPriorityGrouping>
 80052b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	68b9      	ldr	r1, [r7, #8]
 80052ba:	6978      	ldr	r0, [r7, #20]
 80052bc:	f7ff ff90 	bl	80051e0 <NVIC_EncodePriority>
 80052c0:	4602      	mov	r2, r0
 80052c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c6:	4611      	mov	r1, r2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff ff5f 	bl	800518c <__NVIC_SetPriority>
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	4603      	mov	r3, r0
 80052de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff ff35 	bl	8005154 <__NVIC_EnableIRQ>
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}

080052f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff ffa2 	bl	8005244 <SysTick_Config>
 8005300:	4603      	mov	r3, r0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e043      	b.n	80053aa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	461a      	mov	r2, r3
 8005328:	4b22      	ldr	r3, [pc, #136]	@ (80053b4 <HAL_DMA_Init+0xa8>)
 800532a:	4413      	add	r3, r2
 800532c:	4a22      	ldr	r2, [pc, #136]	@ (80053b8 <HAL_DMA_Init+0xac>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	009a      	lsls	r2, r3, #2
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a1f      	ldr	r2, [pc, #124]	@ (80053bc <HAL_DMA_Init+0xb0>)
 800533e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005356:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800535a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800537c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr
 80053b4:	bffdfff8 	.word	0xbffdfff8
 80053b8:	cccccccd 	.word	0xcccccccd
 80053bc:	40020000 	.word	0x40020000

080053c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_DMA_Start_IT+0x20>
 80053dc:	2302      	movs	r3, #2
 80053de:	e04b      	b.n	8005478 <HAL_DMA_Start_IT+0xb8>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d13a      	bne.n	800546a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f9f6 	bl	800580a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f042 020e 	orr.w	r2, r2, #14
 8005434:	601a      	str	r2, [r3, #0]
 8005436:	e00f      	b.n	8005458 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0204 	bic.w	r2, r2, #4
 8005446:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 020a 	orr.w	r2, r2, #10
 8005456:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	e005      	b.n	8005476 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005472:	2302      	movs	r3, #2
 8005474:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d008      	beq.n	80054aa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2204      	movs	r2, #4
 800549c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e020      	b.n	80054ec <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 020e 	bic.w	r2, r2, #14
 80054b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f202 	lsl.w	r2, r1, r2
 80054d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d005      	beq.n	800551c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2204      	movs	r2, #4
 8005514:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
 800551a:	e051      	b.n	80055c0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 020e 	bic.w	r2, r2, #14
 800552a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a22      	ldr	r2, [pc, #136]	@ (80055cc <HAL_DMA_Abort_IT+0xd4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d029      	beq.n	800559a <HAL_DMA_Abort_IT+0xa2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a21      	ldr	r2, [pc, #132]	@ (80055d0 <HAL_DMA_Abort_IT+0xd8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d022      	beq.n	8005596 <HAL_DMA_Abort_IT+0x9e>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1f      	ldr	r2, [pc, #124]	@ (80055d4 <HAL_DMA_Abort_IT+0xdc>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01a      	beq.n	8005590 <HAL_DMA_Abort_IT+0x98>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1e      	ldr	r2, [pc, #120]	@ (80055d8 <HAL_DMA_Abort_IT+0xe0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d012      	beq.n	800558a <HAL_DMA_Abort_IT+0x92>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1c      	ldr	r2, [pc, #112]	@ (80055dc <HAL_DMA_Abort_IT+0xe4>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00a      	beq.n	8005584 <HAL_DMA_Abort_IT+0x8c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1b      	ldr	r2, [pc, #108]	@ (80055e0 <HAL_DMA_Abort_IT+0xe8>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d102      	bne.n	800557e <HAL_DMA_Abort_IT+0x86>
 8005578:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800557c:	e00e      	b.n	800559c <HAL_DMA_Abort_IT+0xa4>
 800557e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005582:	e00b      	b.n	800559c <HAL_DMA_Abort_IT+0xa4>
 8005584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005588:	e008      	b.n	800559c <HAL_DMA_Abort_IT+0xa4>
 800558a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800558e:	e005      	b.n	800559c <HAL_DMA_Abort_IT+0xa4>
 8005590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005594:	e002      	b.n	800559c <HAL_DMA_Abort_IT+0xa4>
 8005596:	2310      	movs	r3, #16
 8005598:	e000      	b.n	800559c <HAL_DMA_Abort_IT+0xa4>
 800559a:	2301      	movs	r3, #1
 800559c:	4a11      	ldr	r2, [pc, #68]	@ (80055e4 <HAL_DMA_Abort_IT+0xec>)
 800559e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	4798      	blx	r3
    } 
  }
  return status;
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40020008 	.word	0x40020008
 80055d0:	4002001c 	.word	0x4002001c
 80055d4:	40020030 	.word	0x40020030
 80055d8:	40020044 	.word	0x40020044
 80055dc:	40020058 	.word	0x40020058
 80055e0:	4002006c 	.word	0x4002006c
 80055e4:	40020000 	.word	0x40020000

080055e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005604:	2204      	movs	r2, #4
 8005606:	409a      	lsls	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4013      	ands	r3, r2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d04f      	beq.n	80056b0 <HAL_DMA_IRQHandler+0xc8>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d04a      	beq.n	80056b0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d107      	bne.n	8005638 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0204 	bic.w	r2, r2, #4
 8005636:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a66      	ldr	r2, [pc, #408]	@ (80057d8 <HAL_DMA_IRQHandler+0x1f0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d029      	beq.n	8005696 <HAL_DMA_IRQHandler+0xae>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a65      	ldr	r2, [pc, #404]	@ (80057dc <HAL_DMA_IRQHandler+0x1f4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d022      	beq.n	8005692 <HAL_DMA_IRQHandler+0xaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a63      	ldr	r2, [pc, #396]	@ (80057e0 <HAL_DMA_IRQHandler+0x1f8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d01a      	beq.n	800568c <HAL_DMA_IRQHandler+0xa4>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a62      	ldr	r2, [pc, #392]	@ (80057e4 <HAL_DMA_IRQHandler+0x1fc>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d012      	beq.n	8005686 <HAL_DMA_IRQHandler+0x9e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a60      	ldr	r2, [pc, #384]	@ (80057e8 <HAL_DMA_IRQHandler+0x200>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00a      	beq.n	8005680 <HAL_DMA_IRQHandler+0x98>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a5f      	ldr	r2, [pc, #380]	@ (80057ec <HAL_DMA_IRQHandler+0x204>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d102      	bne.n	800567a <HAL_DMA_IRQHandler+0x92>
 8005674:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005678:	e00e      	b.n	8005698 <HAL_DMA_IRQHandler+0xb0>
 800567a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800567e:	e00b      	b.n	8005698 <HAL_DMA_IRQHandler+0xb0>
 8005680:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005684:	e008      	b.n	8005698 <HAL_DMA_IRQHandler+0xb0>
 8005686:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800568a:	e005      	b.n	8005698 <HAL_DMA_IRQHandler+0xb0>
 800568c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005690:	e002      	b.n	8005698 <HAL_DMA_IRQHandler+0xb0>
 8005692:	2340      	movs	r3, #64	@ 0x40
 8005694:	e000      	b.n	8005698 <HAL_DMA_IRQHandler+0xb0>
 8005696:	2304      	movs	r3, #4
 8005698:	4a55      	ldr	r2, [pc, #340]	@ (80057f0 <HAL_DMA_IRQHandler+0x208>)
 800569a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8094 	beq.w	80057ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80056ae:	e08e      	b.n	80057ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b4:	2202      	movs	r2, #2
 80056b6:	409a      	lsls	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d056      	beq.n	800576e <HAL_DMA_IRQHandler+0x186>
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d051      	beq.n	800576e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d10b      	bne.n	80056f0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 020a 	bic.w	r2, r2, #10
 80056e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a38      	ldr	r2, [pc, #224]	@ (80057d8 <HAL_DMA_IRQHandler+0x1f0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d029      	beq.n	800574e <HAL_DMA_IRQHandler+0x166>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a37      	ldr	r2, [pc, #220]	@ (80057dc <HAL_DMA_IRQHandler+0x1f4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d022      	beq.n	800574a <HAL_DMA_IRQHandler+0x162>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a35      	ldr	r2, [pc, #212]	@ (80057e0 <HAL_DMA_IRQHandler+0x1f8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01a      	beq.n	8005744 <HAL_DMA_IRQHandler+0x15c>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a34      	ldr	r2, [pc, #208]	@ (80057e4 <HAL_DMA_IRQHandler+0x1fc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d012      	beq.n	800573e <HAL_DMA_IRQHandler+0x156>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a32      	ldr	r2, [pc, #200]	@ (80057e8 <HAL_DMA_IRQHandler+0x200>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00a      	beq.n	8005738 <HAL_DMA_IRQHandler+0x150>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a31      	ldr	r2, [pc, #196]	@ (80057ec <HAL_DMA_IRQHandler+0x204>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d102      	bne.n	8005732 <HAL_DMA_IRQHandler+0x14a>
 800572c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005730:	e00e      	b.n	8005750 <HAL_DMA_IRQHandler+0x168>
 8005732:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005736:	e00b      	b.n	8005750 <HAL_DMA_IRQHandler+0x168>
 8005738:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800573c:	e008      	b.n	8005750 <HAL_DMA_IRQHandler+0x168>
 800573e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005742:	e005      	b.n	8005750 <HAL_DMA_IRQHandler+0x168>
 8005744:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005748:	e002      	b.n	8005750 <HAL_DMA_IRQHandler+0x168>
 800574a:	2320      	movs	r3, #32
 800574c:	e000      	b.n	8005750 <HAL_DMA_IRQHandler+0x168>
 800574e:	2302      	movs	r3, #2
 8005750:	4a27      	ldr	r2, [pc, #156]	@ (80057f0 <HAL_DMA_IRQHandler+0x208>)
 8005752:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d034      	beq.n	80057ce <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800576c:	e02f      	b.n	80057ce <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	2208      	movs	r2, #8
 8005774:	409a      	lsls	r2, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4013      	ands	r3, r2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d028      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x1e8>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d023      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 020e 	bic.w	r2, r2, #14
 8005796:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a0:	2101      	movs	r1, #1
 80057a2:	fa01 f202 	lsl.w	r2, r1, r2
 80057a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d004      	beq.n	80057d0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	4798      	blx	r3
    }
  }
  return;
 80057ce:	bf00      	nop
 80057d0:	bf00      	nop
}
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	40020008 	.word	0x40020008
 80057dc:	4002001c 	.word	0x4002001c
 80057e0:	40020030 	.word	0x40020030
 80057e4:	40020044 	.word	0x40020044
 80057e8:	40020058 	.word	0x40020058
 80057ec:	4002006c 	.word	0x4002006c
 80057f0:	40020000 	.word	0x40020000

080057f4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
 8005816:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005820:	2101      	movs	r1, #1
 8005822:	fa01 f202 	lsl.w	r2, r1, r2
 8005826:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b10      	cmp	r3, #16
 8005836:	d108      	bne.n	800584a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005848:	e007      	b.n	800585a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	60da      	str	r2, [r3, #12]
}
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005864:	b480      	push	{r7}
 8005866:	b08b      	sub	sp, #44	@ 0x2c
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005872:	2300      	movs	r3, #0
 8005874:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005876:	e169      	b.n	8005b4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005878:	2201      	movs	r2, #1
 800587a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	4013      	ands	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	429a      	cmp	r2, r3
 8005892:	f040 8158 	bne.w	8005b46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4a9a      	ldr	r2, [pc, #616]	@ (8005b04 <HAL_GPIO_Init+0x2a0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d05e      	beq.n	800595e <HAL_GPIO_Init+0xfa>
 80058a0:	4a98      	ldr	r2, [pc, #608]	@ (8005b04 <HAL_GPIO_Init+0x2a0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d875      	bhi.n	8005992 <HAL_GPIO_Init+0x12e>
 80058a6:	4a98      	ldr	r2, [pc, #608]	@ (8005b08 <HAL_GPIO_Init+0x2a4>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d058      	beq.n	800595e <HAL_GPIO_Init+0xfa>
 80058ac:	4a96      	ldr	r2, [pc, #600]	@ (8005b08 <HAL_GPIO_Init+0x2a4>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d86f      	bhi.n	8005992 <HAL_GPIO_Init+0x12e>
 80058b2:	4a96      	ldr	r2, [pc, #600]	@ (8005b0c <HAL_GPIO_Init+0x2a8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d052      	beq.n	800595e <HAL_GPIO_Init+0xfa>
 80058b8:	4a94      	ldr	r2, [pc, #592]	@ (8005b0c <HAL_GPIO_Init+0x2a8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d869      	bhi.n	8005992 <HAL_GPIO_Init+0x12e>
 80058be:	4a94      	ldr	r2, [pc, #592]	@ (8005b10 <HAL_GPIO_Init+0x2ac>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d04c      	beq.n	800595e <HAL_GPIO_Init+0xfa>
 80058c4:	4a92      	ldr	r2, [pc, #584]	@ (8005b10 <HAL_GPIO_Init+0x2ac>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d863      	bhi.n	8005992 <HAL_GPIO_Init+0x12e>
 80058ca:	4a92      	ldr	r2, [pc, #584]	@ (8005b14 <HAL_GPIO_Init+0x2b0>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d046      	beq.n	800595e <HAL_GPIO_Init+0xfa>
 80058d0:	4a90      	ldr	r2, [pc, #576]	@ (8005b14 <HAL_GPIO_Init+0x2b0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d85d      	bhi.n	8005992 <HAL_GPIO_Init+0x12e>
 80058d6:	2b12      	cmp	r3, #18
 80058d8:	d82a      	bhi.n	8005930 <HAL_GPIO_Init+0xcc>
 80058da:	2b12      	cmp	r3, #18
 80058dc:	d859      	bhi.n	8005992 <HAL_GPIO_Init+0x12e>
 80058de:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <HAL_GPIO_Init+0x80>)
 80058e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e4:	0800595f 	.word	0x0800595f
 80058e8:	08005939 	.word	0x08005939
 80058ec:	0800594b 	.word	0x0800594b
 80058f0:	0800598d 	.word	0x0800598d
 80058f4:	08005993 	.word	0x08005993
 80058f8:	08005993 	.word	0x08005993
 80058fc:	08005993 	.word	0x08005993
 8005900:	08005993 	.word	0x08005993
 8005904:	08005993 	.word	0x08005993
 8005908:	08005993 	.word	0x08005993
 800590c:	08005993 	.word	0x08005993
 8005910:	08005993 	.word	0x08005993
 8005914:	08005993 	.word	0x08005993
 8005918:	08005993 	.word	0x08005993
 800591c:	08005993 	.word	0x08005993
 8005920:	08005993 	.word	0x08005993
 8005924:	08005993 	.word	0x08005993
 8005928:	08005941 	.word	0x08005941
 800592c:	08005955 	.word	0x08005955
 8005930:	4a79      	ldr	r2, [pc, #484]	@ (8005b18 <HAL_GPIO_Init+0x2b4>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005936:	e02c      	b.n	8005992 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	623b      	str	r3, [r7, #32]
          break;
 800593e:	e029      	b.n	8005994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	3304      	adds	r3, #4
 8005946:	623b      	str	r3, [r7, #32]
          break;
 8005948:	e024      	b.n	8005994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	3308      	adds	r3, #8
 8005950:	623b      	str	r3, [r7, #32]
          break;
 8005952:	e01f      	b.n	8005994 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	330c      	adds	r3, #12
 800595a:	623b      	str	r3, [r7, #32]
          break;
 800595c:	e01a      	b.n	8005994 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005966:	2304      	movs	r3, #4
 8005968:	623b      	str	r3, [r7, #32]
          break;
 800596a:	e013      	b.n	8005994 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005974:	2308      	movs	r3, #8
 8005976:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	611a      	str	r2, [r3, #16]
          break;
 800597e:	e009      	b.n	8005994 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005980:	2308      	movs	r3, #8
 8005982:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	615a      	str	r2, [r3, #20]
          break;
 800598a:	e003      	b.n	8005994 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800598c:	2300      	movs	r3, #0
 800598e:	623b      	str	r3, [r7, #32]
          break;
 8005990:	e000      	b.n	8005994 <HAL_GPIO_Init+0x130>
          break;
 8005992:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	2bff      	cmp	r3, #255	@ 0xff
 8005998:	d801      	bhi.n	800599e <HAL_GPIO_Init+0x13a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	e001      	b.n	80059a2 <HAL_GPIO_Init+0x13e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3304      	adds	r3, #4
 80059a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2bff      	cmp	r3, #255	@ 0xff
 80059a8:	d802      	bhi.n	80059b0 <HAL_GPIO_Init+0x14c>
 80059aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	e002      	b.n	80059b6 <HAL_GPIO_Init+0x152>
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	3b08      	subs	r3, #8
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	210f      	movs	r1, #15
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	fa01 f303 	lsl.w	r3, r1, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	401a      	ands	r2, r3
 80059c8:	6a39      	ldr	r1, [r7, #32]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	fa01 f303 	lsl.w	r3, r1, r3
 80059d0:	431a      	orrs	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 80b1 	beq.w	8005b46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80059e4:	4b4d      	ldr	r3, [pc, #308]	@ (8005b1c <HAL_GPIO_Init+0x2b8>)
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	4a4c      	ldr	r2, [pc, #304]	@ (8005b1c <HAL_GPIO_Init+0x2b8>)
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	6193      	str	r3, [r2, #24]
 80059f0:	4b4a      	ldr	r3, [pc, #296]	@ (8005b1c <HAL_GPIO_Init+0x2b8>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80059fc:	4a48      	ldr	r2, [pc, #288]	@ (8005b20 <HAL_GPIO_Init+0x2bc>)
 80059fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a00:	089b      	lsrs	r3, r3, #2
 8005a02:	3302      	adds	r3, #2
 8005a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	f003 0303 	and.w	r3, r3, #3
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	220f      	movs	r2, #15
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a40      	ldr	r2, [pc, #256]	@ (8005b24 <HAL_GPIO_Init+0x2c0>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d013      	beq.n	8005a50 <HAL_GPIO_Init+0x1ec>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b28 <HAL_GPIO_Init+0x2c4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d00d      	beq.n	8005a4c <HAL_GPIO_Init+0x1e8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a3e      	ldr	r2, [pc, #248]	@ (8005b2c <HAL_GPIO_Init+0x2c8>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d007      	beq.n	8005a48 <HAL_GPIO_Init+0x1e4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b30 <HAL_GPIO_Init+0x2cc>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d101      	bne.n	8005a44 <HAL_GPIO_Init+0x1e0>
 8005a40:	2303      	movs	r3, #3
 8005a42:	e006      	b.n	8005a52 <HAL_GPIO_Init+0x1ee>
 8005a44:	2304      	movs	r3, #4
 8005a46:	e004      	b.n	8005a52 <HAL_GPIO_Init+0x1ee>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e002      	b.n	8005a52 <HAL_GPIO_Init+0x1ee>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <HAL_GPIO_Init+0x1ee>
 8005a50:	2300      	movs	r3, #0
 8005a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a54:	f002 0203 	and.w	r2, r2, #3
 8005a58:	0092      	lsls	r2, r2, #2
 8005a5a:	4093      	lsls	r3, r2
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005a62:	492f      	ldr	r1, [pc, #188]	@ (8005b20 <HAL_GPIO_Init+0x2bc>)
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	3302      	adds	r3, #2
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005a7e:	689a      	ldr	r2, [r3, #8]
 8005a80:	492c      	ldr	r1, [pc, #176]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	608b      	str	r3, [r1, #8]
 8005a88:	e006      	b.n	8005a98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	43db      	mvns	r3, r3
 8005a92:	4928      	ldr	r1, [pc, #160]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005a94:	4013      	ands	r3, r2
 8005a96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d006      	beq.n	8005ab2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005aa4:	4b23      	ldr	r3, [pc, #140]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	4922      	ldr	r1, [pc, #136]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60cb      	str	r3, [r1, #12]
 8005ab0:	e006      	b.n	8005ac0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005ab2:	4b20      	ldr	r3, [pc, #128]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	491e      	ldr	r1, [pc, #120]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d006      	beq.n	8005ada <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005acc:	4b19      	ldr	r3, [pc, #100]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	4918      	ldr	r1, [pc, #96]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	604b      	str	r3, [r1, #4]
 8005ad8:	e006      	b.n	8005ae8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005ada:	4b16      	ldr	r3, [pc, #88]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005adc:	685a      	ldr	r2, [r3, #4]
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	4914      	ldr	r1, [pc, #80]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d021      	beq.n	8005b38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005af4:	4b0f      	ldr	r3, [pc, #60]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	490e      	ldr	r1, [pc, #56]	@ (8005b34 <HAL_GPIO_Init+0x2d0>)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	600b      	str	r3, [r1, #0]
 8005b00:	e021      	b.n	8005b46 <HAL_GPIO_Init+0x2e2>
 8005b02:	bf00      	nop
 8005b04:	10320000 	.word	0x10320000
 8005b08:	10310000 	.word	0x10310000
 8005b0c:	10220000 	.word	0x10220000
 8005b10:	10210000 	.word	0x10210000
 8005b14:	10120000 	.word	0x10120000
 8005b18:	10110000 	.word	0x10110000
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010800 	.word	0x40010800
 8005b28:	40010c00 	.word	0x40010c00
 8005b2c:	40011000 	.word	0x40011000
 8005b30:	40011400 	.word	0x40011400
 8005b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b38:	4b0b      	ldr	r3, [pc, #44]	@ (8005b68 <HAL_GPIO_Init+0x304>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	4909      	ldr	r1, [pc, #36]	@ (8005b68 <HAL_GPIO_Init+0x304>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b48:	3301      	adds	r3, #1
 8005b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	fa22 f303 	lsr.w	r3, r2, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f47f ae8e 	bne.w	8005878 <HAL_GPIO_Init+0x14>
  }
}
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
 8005b60:	372c      	adds	r7, #44	@ 0x2c
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bc80      	pop	{r7}
 8005b66:	4770      	bx	lr
 8005b68:	40010400 	.word	0x40010400

08005b6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	460b      	mov	r3, r1
 8005b76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	887b      	ldrh	r3, [r7, #2]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005b84:	2301      	movs	r3, #1
 8005b86:	73fb      	strb	r3, [r7, #15]
 8005b88:	e001      	b.n	8005b8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3714      	adds	r7, #20
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc80      	pop	{r7}
 8005b98:	4770      	bx	lr

08005b9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	807b      	strh	r3, [r7, #2]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005baa:	787b      	ldrb	r3, [r7, #1]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bb0:	887a      	ldrh	r2, [r7, #2]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005bb6:	e003      	b.n	8005bc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005bb8:	887b      	ldrh	r3, [r7, #2]
 8005bba:	041a      	lsls	r2, r3, #16
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	611a      	str	r2, [r3, #16]
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr

08005bca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b085      	sub	sp, #20
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005bdc:	887a      	ldrh	r2, [r7, #2]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4013      	ands	r3, r2
 8005be2:	041a      	lsls	r2, r3, #16
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	43d9      	mvns	r1, r3
 8005be8:	887b      	ldrh	r3, [r7, #2]
 8005bea:	400b      	ands	r3, r1
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	611a      	str	r2, [r3, #16]
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e12b      	b.n	8005e66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fe f8c0 	bl	8003da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	@ 0x24
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 0201 	bic.w	r2, r2, #1
 8005c3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c60:	f001 fbca 	bl	80073f8 <HAL_RCC_GetPCLK1Freq>
 8005c64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4a81      	ldr	r2, [pc, #516]	@ (8005e70 <HAL_I2C_Init+0x274>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d807      	bhi.n	8005c80 <HAL_I2C_Init+0x84>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4a80      	ldr	r2, [pc, #512]	@ (8005e74 <HAL_I2C_Init+0x278>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	bf94      	ite	ls
 8005c78:	2301      	movls	r3, #1
 8005c7a:	2300      	movhi	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	e006      	b.n	8005c8e <HAL_I2C_Init+0x92>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a7d      	ldr	r2, [pc, #500]	@ (8005e78 <HAL_I2C_Init+0x27c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	bf94      	ite	ls
 8005c88:	2301      	movls	r3, #1
 8005c8a:	2300      	movhi	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e0e7      	b.n	8005e66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	4a78      	ldr	r2, [pc, #480]	@ (8005e7c <HAL_I2C_Init+0x280>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	0c9b      	lsrs	r3, r3, #18
 8005ca0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e70 <HAL_I2C_Init+0x274>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d802      	bhi.n	8005cd0 <HAL_I2C_Init+0xd4>
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	e009      	b.n	8005ce4 <HAL_I2C_Init+0xe8>
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	4a69      	ldr	r2, [pc, #420]	@ (8005e80 <HAL_I2C_Init+0x284>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	099b      	lsrs	r3, r3, #6
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005cf6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	495c      	ldr	r1, [pc, #368]	@ (8005e70 <HAL_I2C_Init+0x274>)
 8005d00:	428b      	cmp	r3, r1
 8005d02:	d819      	bhi.n	8005d38 <HAL_I2C_Init+0x13c>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	1e59      	subs	r1, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d12:	1c59      	adds	r1, r3, #1
 8005d14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d18:	400b      	ands	r3, r1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00a      	beq.n	8005d34 <HAL_I2C_Init+0x138>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	1e59      	subs	r1, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d32:	e051      	b.n	8005dd8 <HAL_I2C_Init+0x1dc>
 8005d34:	2304      	movs	r3, #4
 8005d36:	e04f      	b.n	8005dd8 <HAL_I2C_Init+0x1dc>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d111      	bne.n	8005d64 <HAL_I2C_Init+0x168>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	1e58      	subs	r0, r3, #1
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6859      	ldr	r1, [r3, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	440b      	add	r3, r1
 8005d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d52:	3301      	adds	r3, #1
 8005d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	bf0c      	ite	eq
 8005d5c:	2301      	moveq	r3, #1
 8005d5e:	2300      	movne	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e012      	b.n	8005d8a <HAL_I2C_Init+0x18e>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	1e58      	subs	r0, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6859      	ldr	r1, [r3, #4]
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	440b      	add	r3, r1
 8005d72:	0099      	lsls	r1, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	bf0c      	ite	eq
 8005d84:	2301      	moveq	r3, #1
 8005d86:	2300      	movne	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_I2C_Init+0x196>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e022      	b.n	8005dd8 <HAL_I2C_Init+0x1dc>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10e      	bne.n	8005db8 <HAL_I2C_Init+0x1bc>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1e58      	subs	r0, r3, #1
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	460b      	mov	r3, r1
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	440b      	add	r3, r1
 8005da8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dac:	3301      	adds	r3, #1
 8005dae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db6:	e00f      	b.n	8005dd8 <HAL_I2C_Init+0x1dc>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1e58      	subs	r0, r3, #1
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6859      	ldr	r1, [r3, #4]
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	0099      	lsls	r1, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dd8:	6879      	ldr	r1, [r7, #4]
 8005dda:	6809      	ldr	r1, [r1, #0]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	69da      	ldr	r2, [r3, #28]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005e06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6911      	ldr	r1, [r2, #16]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68d2      	ldr	r2, [r2, #12]
 8005e12:	4311      	orrs	r1, r2
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	695a      	ldr	r2, [r3, #20]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	000186a0 	.word	0x000186a0
 8005e74:	001e847f 	.word	0x001e847f
 8005e78:	003d08ff 	.word	0x003d08ff
 8005e7c:	431bde83 	.word	0x431bde83
 8005e80:	10624dd3 	.word	0x10624dd3

08005e84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b088      	sub	sp, #32
 8005e88:	af02      	add	r7, sp, #8
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	460b      	mov	r3, r1
 8005e92:	817b      	strh	r3, [r7, #10]
 8005e94:	4613      	mov	r3, r2
 8005e96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e98:	f7fe fca4 	bl	80047e4 <HAL_GetTick>
 8005e9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	f040 80e0 	bne.w	800606c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	9300      	str	r3, [sp, #0]
 8005eb0:	2319      	movs	r3, #25
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	4970      	ldr	r1, [pc, #448]	@ (8006078 <HAL_I2C_Master_Transmit+0x1f4>)
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fc9e 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e0d3      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_I2C_Master_Transmit+0x50>
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	e0cc      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d007      	beq.n	8005efa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f042 0201 	orr.w	r2, r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2221      	movs	r2, #33	@ 0x21
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2210      	movs	r2, #16
 8005f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	893a      	ldrh	r2, [r7, #8]
 8005f2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4a50      	ldr	r2, [pc, #320]	@ (800607c <HAL_I2C_Master_Transmit+0x1f8>)
 8005f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005f3c:	8979      	ldrh	r1, [r7, #10]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	6a3a      	ldr	r2, [r7, #32]
 8005f42:	68f8      	ldr	r0, [r7, #12]
 8005f44:	f000 fb08 	bl	8006558 <I2C_MasterRequestWrite>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d001      	beq.n	8005f52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e08d      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f52:	2300      	movs	r3, #0
 8005f54:	613b      	str	r3, [r7, #16]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	613b      	str	r3, [r7, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	613b      	str	r3, [r7, #16]
 8005f66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f68:	e066      	b.n	8006038 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	6a39      	ldr	r1, [r7, #32]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fd5c 	bl	8006a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00d      	beq.n	8005f96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d107      	bne.n	8005f92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e06b      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	781a      	ldrb	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d11b      	bne.n	800600c <HAL_I2C_Master_Transmit+0x188>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d017      	beq.n	800600c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	781a      	ldrb	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fec:	1c5a      	adds	r2, r3, #1
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	6a39      	ldr	r1, [r7, #32]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fd53 	bl	8006abc <I2C_WaitOnBTFFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00d      	beq.n	8006038 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	2b04      	cmp	r3, #4
 8006022:	d107      	bne.n	8006034 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006032:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e01a      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603c:	2b00      	cmp	r3, #0
 800603e:	d194      	bne.n	8005f6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800604e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	e000      	b.n	800606e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800606c:	2302      	movs	r3, #2
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	00100002 	.word	0x00100002
 800607c:	ffff0000 	.word	0xffff0000

08006080 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08c      	sub	sp, #48	@ 0x30
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	461a      	mov	r2, r3
 800608c:	460b      	mov	r3, r1
 800608e:	817b      	strh	r3, [r7, #10]
 8006090:	4613      	mov	r3, r2
 8006092:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006098:	f7fe fba4 	bl	80047e4 <HAL_GetTick>
 800609c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	f040 824b 	bne.w	8006542 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2319      	movs	r3, #25
 80060b2:	2201      	movs	r2, #1
 80060b4:	497f      	ldr	r1, [pc, #508]	@ (80062b4 <HAL_I2C_Master_Receive+0x234>)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f000 fb9e 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
 80060c4:	e23e      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_I2C_Master_Receive+0x54>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e237      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d007      	beq.n	80060fa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2222      	movs	r2, #34	@ 0x22
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2210      	movs	r2, #16
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	893a      	ldrh	r2, [r7, #8]
 800612a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a5f      	ldr	r2, [pc, #380]	@ (80062b8 <HAL_I2C_Master_Receive+0x238>)
 800613a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800613c:	8979      	ldrh	r1, [r7, #10]
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fa8a 	bl	800665c <I2C_MasterRequestRead>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e1f8      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006156:	2b00      	cmp	r3, #0
 8006158:	d113      	bne.n	8006182 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	61fb      	str	r3, [r7, #28]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800617e:	601a      	str	r2, [r3, #0]
 8006180:	e1cc      	b.n	800651c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006186:	2b01      	cmp	r3, #1
 8006188:	d11e      	bne.n	80061c8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006198:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800619a:	b672      	cpsid	i
}
 800619c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800619e:	2300      	movs	r3, #0
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80061c4:	b662      	cpsie	i
}
 80061c6:	e035      	b.n	8006234 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d11e      	bne.n	800620e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80061e0:	b672      	cpsid	i
}
 80061e2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061e4:	2300      	movs	r3, #0
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006208:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800620a:	b662      	cpsie	i
}
 800620c:	e012      	b.n	8006234 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800621c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800621e:	2300      	movs	r3, #0
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	613b      	str	r3, [r7, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006234:	e172      	b.n	800651c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800623a:	2b03      	cmp	r3, #3
 800623c:	f200 811f 	bhi.w	800647e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006244:	2b01      	cmp	r3, #1
 8006246:	d123      	bne.n	8006290 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800624a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fc7d 	bl	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e173      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691a      	ldr	r2, [r3, #16]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	1c5a      	adds	r2, r3, #1
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	3b01      	subs	r3, #1
 8006288:	b29a      	uxth	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800628e:	e145      	b.n	800651c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006294:	2b02      	cmp	r3, #2
 8006296:	d152      	bne.n	800633e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	2200      	movs	r2, #0
 80062a0:	4906      	ldr	r1, [pc, #24]	@ (80062bc <HAL_I2C_Master_Receive+0x23c>)
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 faa8 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e148      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
 80062b2:	bf00      	nop
 80062b4:	00100002 	.word	0x00100002
 80062b8:	ffff0000 	.word	0xffff0000
 80062bc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80062c0:	b672      	cpsid	i
}
 80062c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	1c5a      	adds	r2, r3, #1
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062f0:	3b01      	subs	r3, #1
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006306:	b662      	cpsie	i
}
 8006308:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006326:	3b01      	subs	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006332:	b29b      	uxth	r3, r3
 8006334:	3b01      	subs	r3, #1
 8006336:	b29a      	uxth	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800633c:	e0ee      	b.n	800651c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006344:	2200      	movs	r2, #0
 8006346:	4981      	ldr	r1, [pc, #516]	@ (800654c <HAL_I2C_Master_Receive+0x4cc>)
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 fa55 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0f5      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006366:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006368:	b672      	cpsid	i
}
 800636a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691a      	ldr	r2, [r3, #16]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800639e:	4b6c      	ldr	r3, [pc, #432]	@ (8006550 <HAL_I2C_Master_Receive+0x4d0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	08db      	lsrs	r3, r3, #3
 80063a4:	4a6b      	ldr	r2, [pc, #428]	@ (8006554 <HAL_I2C_Master_Receive+0x4d4>)
 80063a6:	fba2 2303 	umull	r2, r3, r2, r3
 80063aa:	0a1a      	lsrs	r2, r3, #8
 80063ac:	4613      	mov	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4413      	add	r3, r2
 80063b2:	00da      	lsls	r2, r3, #3
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d118      	bne.n	80063f6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063de:	f043 0220 	orr.w	r2, r3, #32
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80063e6:	b662      	cpsie	i
}
 80063e8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e0a6      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b04      	cmp	r3, #4
 8006402:	d1d9      	bne.n	80063b8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641e:	b2d2      	uxtb	r2, r2
 8006420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006446:	b662      	cpsie	i
}
 8006448:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691a      	ldr	r2, [r3, #16]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b29a      	uxth	r2, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800647c:	e04e      	b.n	800651c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800647e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006480:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 fb62 	bl	8006b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e058      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649c:	b2d2      	uxtb	r2, r2
 800649e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d124      	bne.n	800651c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d107      	bne.n	80064ea <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064e8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fc:	1c5a      	adds	r2, r3, #1
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006506:	3b01      	subs	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006512:	b29b      	uxth	r3, r3
 8006514:	3b01      	subs	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006520:	2b00      	cmp	r3, #0
 8006522:	f47f ae88 	bne.w	8006236 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	e000      	b.n	8006544 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8006542:	2302      	movs	r3, #2
  }
}
 8006544:	4618      	mov	r0, r3
 8006546:	3728      	adds	r7, #40	@ 0x28
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	00010004 	.word	0x00010004
 8006550:	20000044 	.word	0x20000044
 8006554:	14f8b589 	.word	0x14f8b589

08006558 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	607a      	str	r2, [r7, #4]
 8006562:	603b      	str	r3, [r7, #0]
 8006564:	460b      	mov	r3, r1
 8006566:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800656c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d006      	beq.n	8006582 <I2C_MasterRequestWrite+0x2a>
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d003      	beq.n	8006582 <I2C_MasterRequestWrite+0x2a>
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006580:	d108      	bne.n	8006594 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006590:	601a      	str	r2, [r3, #0]
 8006592:	e00b      	b.n	80065ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006598:	2b12      	cmp	r3, #18
 800659a:	d107      	bne.n	80065ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 f91d 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00d      	beq.n	80065e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065d2:	d103      	bne.n	80065dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e035      	b.n	800664c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065e8:	d108      	bne.n	80065fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065ea:	897b      	ldrh	r3, [r7, #10]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065f8:	611a      	str	r2, [r3, #16]
 80065fa:	e01b      	b.n	8006634 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065fc:	897b      	ldrh	r3, [r7, #10]
 80065fe:	11db      	asrs	r3, r3, #7
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 0306 	and.w	r3, r3, #6
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f063 030f 	orn	r3, r3, #15
 800660c:	b2da      	uxtb	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	490e      	ldr	r1, [pc, #56]	@ (8006654 <I2C_MasterRequestWrite+0xfc>)
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f966 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e010      	b.n	800664c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800662a:	897b      	ldrh	r3, [r7, #10]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	4907      	ldr	r1, [pc, #28]	@ (8006658 <I2C_MasterRequestWrite+0x100>)
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f956 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	00010008 	.word	0x00010008
 8006658:	00010002 	.word	0x00010002

0800665c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af02      	add	r7, sp, #8
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	607a      	str	r2, [r7, #4]
 8006666:	603b      	str	r3, [r7, #0]
 8006668:	460b      	mov	r3, r1
 800666a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006670:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006680:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b08      	cmp	r3, #8
 8006686:	d006      	beq.n	8006696 <I2C_MasterRequestRead+0x3a>
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d003      	beq.n	8006696 <I2C_MasterRequestRead+0x3a>
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006694:	d108      	bne.n	80066a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066a4:	601a      	str	r2, [r3, #0]
 80066a6:	e00b      	b.n	80066c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	2b11      	cmp	r3, #17
 80066ae:	d107      	bne.n	80066c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f893 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00d      	beq.n	80066f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e6:	d103      	bne.n	80066f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e079      	b.n	80067e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066fc:	d108      	bne.n	8006710 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066fe:	897b      	ldrh	r3, [r7, #10]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	f043 0301 	orr.w	r3, r3, #1
 8006706:	b2da      	uxtb	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	611a      	str	r2, [r3, #16]
 800670e:	e05f      	b.n	80067d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006710:	897b      	ldrh	r3, [r7, #10]
 8006712:	11db      	asrs	r3, r3, #7
 8006714:	b2db      	uxtb	r3, r3
 8006716:	f003 0306 	and.w	r3, r3, #6
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f063 030f 	orn	r3, r3, #15
 8006720:	b2da      	uxtb	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4930      	ldr	r1, [pc, #192]	@ (80067f0 <I2C_MasterRequestRead+0x194>)
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f8dc 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e054      	b.n	80067e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800673e:	897b      	ldrh	r3, [r7, #10]
 8006740:	b2da      	uxtb	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4929      	ldr	r1, [pc, #164]	@ (80067f4 <I2C_MasterRequestRead+0x198>)
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f8cc 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e044      	b.n	80067e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	613b      	str	r3, [r7, #16]
 8006772:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006782:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f831 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00d      	beq.n	80067b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067aa:	d103      	bne.n	80067b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067b2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e017      	b.n	80067e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80067b8:	897b      	ldrh	r3, [r7, #10]
 80067ba:	11db      	asrs	r3, r3, #7
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	f003 0306 	and.w	r3, r3, #6
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f063 030e 	orn	r3, r3, #14
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	4907      	ldr	r1, [pc, #28]	@ (80067f4 <I2C_MasterRequestRead+0x198>)
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 f888 	bl	80068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3718      	adds	r7, #24
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	00010008 	.word	0x00010008
 80067f4:	00010002 	.word	0x00010002

080067f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006808:	e048      	b.n	800689c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d044      	beq.n	800689c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006812:	f7fd ffe7 	bl	80047e4 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d302      	bcc.n	8006828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d139      	bne.n	800689c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	0c1b      	lsrs	r3, r3, #16
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b01      	cmp	r3, #1
 8006830:	d10d      	bne.n	800684e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	43da      	mvns	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	4013      	ands	r3, r2
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	bf0c      	ite	eq
 8006844:	2301      	moveq	r3, #1
 8006846:	2300      	movne	r3, #0
 8006848:	b2db      	uxtb	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	e00c      	b.n	8006868 <I2C_WaitOnFlagUntilTimeout+0x70>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	43da      	mvns	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4013      	ands	r3, r2
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	429a      	cmp	r2, r3
 800686c:	d116      	bne.n	800689c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006888:	f043 0220 	orr.w	r2, r3, #32
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e023      	b.n	80068e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d10d      	bne.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	43da      	mvns	r2, r3
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4013      	ands	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	bf0c      	ite	eq
 80068b8:	2301      	moveq	r3, #1
 80068ba:	2300      	movne	r3, #0
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	461a      	mov	r2, r3
 80068c0:	e00c      	b.n	80068dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	43da      	mvns	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	4013      	ands	r3, r2
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	bf0c      	ite	eq
 80068d4:	2301      	moveq	r3, #1
 80068d6:	2300      	movne	r3, #0
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d093      	beq.n	800680a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068fa:	e071      	b.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006906:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800690a:	d123      	bne.n	8006954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800691a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006940:	f043 0204 	orr.w	r2, r3, #4
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e067      	b.n	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d041      	beq.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695c:	f7fd ff42 	bl	80047e4 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	429a      	cmp	r2, r3
 800696a:	d302      	bcc.n	8006972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d136      	bne.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	0c1b      	lsrs	r3, r3, #16
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b01      	cmp	r3, #1
 800697a:	d10c      	bne.n	8006996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	43da      	mvns	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	b29b      	uxth	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	bf14      	ite	ne
 800698e:	2301      	movne	r3, #1
 8006990:	2300      	moveq	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	e00b      	b.n	80069ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	43da      	mvns	r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	4013      	ands	r3, r2
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d016      	beq.n	80069e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069cc:	f043 0220 	orr.w	r2, r3, #32
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e021      	b.n	8006a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d10c      	bne.n	8006a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	43da      	mvns	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	bf14      	ite	ne
 80069fc:	2301      	movne	r3, #1
 80069fe:	2300      	moveq	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	e00b      	b.n	8006a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	43da      	mvns	r2, r3
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4013      	ands	r3, r2
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	bf14      	ite	ne
 8006a16:	2301      	movne	r3, #1
 8006a18:	2300      	moveq	r3, #0
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f47f af6d 	bne.w	80068fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a38:	e034      	b.n	8006aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f8e3 	bl	8006c06 <I2C_IsAcknowledgeFailed>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e034      	b.n	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d028      	beq.n	8006aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a52:	f7fd fec7 	bl	80047e4 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d302      	bcc.n	8006a68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d11d      	bne.n	8006aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a72:	2b80      	cmp	r3, #128	@ 0x80
 8006a74:	d016      	beq.n	8006aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e007      	b.n	8006ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aae:	2b80      	cmp	r3, #128	@ 0x80
 8006ab0:	d1c3      	bne.n	8006a3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ac8:	e034      	b.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 f89b 	bl	8006c06 <I2C_IsAcknowledgeFailed>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e034      	b.n	8006b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d028      	beq.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae2:	f7fd fe7f 	bl	80047e4 <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d302      	bcc.n	8006af8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11d      	bne.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d016      	beq.n	8006b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b20:	f043 0220 	orr.w	r2, r3, #32
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e007      	b.n	8006b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f003 0304 	and.w	r3, r3, #4
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d1c3      	bne.n	8006aca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b58:	e049      	b.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d119      	bne.n	8006b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0210 	mvn.w	r2, #16
 8006b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e030      	b.n	8006bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b9c:	f7fd fe22 	bl	80047e4 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d302      	bcc.n	8006bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d11d      	bne.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbc:	2b40      	cmp	r3, #64	@ 0x40
 8006bbe:	d016      	beq.n	8006bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	f043 0220 	orr.w	r2, r3, #32
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e007      	b.n	8006bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf8:	2b40      	cmp	r3, #64	@ 0x40
 8006bfa:	d1ae      	bne.n	8006b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1c:	d11b      	bne.n	8006c56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c42:	f043 0204 	orr.w	r2, r3, #4
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
	...

08006c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e272      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 8087 	beq.w	8006d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c84:	4b92      	ldr	r3, [pc, #584]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f003 030c 	and.w	r3, r3, #12
 8006c8c:	2b04      	cmp	r3, #4
 8006c8e:	d00c      	beq.n	8006caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006c90:	4b8f      	ldr	r3, [pc, #572]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f003 030c 	and.w	r3, r3, #12
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d112      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x5e>
 8006c9c:	4b8c      	ldr	r3, [pc, #560]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca8:	d10b      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006caa:	4b89      	ldr	r3, [pc, #548]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d06c      	beq.n	8006d90 <HAL_RCC_OscConfig+0x12c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d168      	bne.n	8006d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e24c      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cca:	d106      	bne.n	8006cda <HAL_RCC_OscConfig+0x76>
 8006ccc:	4b80      	ldr	r3, [pc, #512]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a7f      	ldr	r2, [pc, #508]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e02e      	b.n	8006d38 <HAL_RCC_OscConfig+0xd4>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10c      	bne.n	8006cfc <HAL_RCC_OscConfig+0x98>
 8006ce2:	4b7b      	ldr	r3, [pc, #492]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a7a      	ldr	r2, [pc, #488]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006ce8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	4b78      	ldr	r3, [pc, #480]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a77      	ldr	r2, [pc, #476]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006cf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e01d      	b.n	8006d38 <HAL_RCC_OscConfig+0xd4>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d04:	d10c      	bne.n	8006d20 <HAL_RCC_OscConfig+0xbc>
 8006d06:	4b72      	ldr	r3, [pc, #456]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a71      	ldr	r2, [pc, #452]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	4b6f      	ldr	r3, [pc, #444]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a6e      	ldr	r2, [pc, #440]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	e00b      	b.n	8006d38 <HAL_RCC_OscConfig+0xd4>
 8006d20:	4b6b      	ldr	r3, [pc, #428]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a6a      	ldr	r2, [pc, #424]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	4b68      	ldr	r3, [pc, #416]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a67      	ldr	r2, [pc, #412]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d013      	beq.n	8006d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d40:	f7fd fd50 	bl	80047e4 <HAL_GetTick>
 8006d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d46:	e008      	b.n	8006d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d48:	f7fd fd4c 	bl	80047e4 <HAL_GetTick>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	1ad3      	subs	r3, r2, r3
 8006d52:	2b64      	cmp	r3, #100	@ 0x64
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e200      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0f0      	beq.n	8006d48 <HAL_RCC_OscConfig+0xe4>
 8006d66:	e014      	b.n	8006d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d68:	f7fd fd3c 	bl	80047e4 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d70:	f7fd fd38 	bl	80047e4 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b64      	cmp	r3, #100	@ 0x64
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e1ec      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d82:	4b53      	ldr	r3, [pc, #332]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d1f0      	bne.n	8006d70 <HAL_RCC_OscConfig+0x10c>
 8006d8e:	e000      	b.n	8006d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d063      	beq.n	8006e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f003 030c 	and.w	r3, r3, #12
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006daa:	4b49      	ldr	r3, [pc, #292]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f003 030c 	and.w	r3, r3, #12
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d11c      	bne.n	8006df0 <HAL_RCC_OscConfig+0x18c>
 8006db6:	4b46      	ldr	r3, [pc, #280]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d116      	bne.n	8006df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dc2:	4b43      	ldr	r3, [pc, #268]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d005      	beq.n	8006dda <HAL_RCC_OscConfig+0x176>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d001      	beq.n	8006dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e1c0      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dda:	4b3d      	ldr	r3, [pc, #244]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	4939      	ldr	r1, [pc, #228]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dee:	e03a      	b.n	8006e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d020      	beq.n	8006e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006df8:	4b36      	ldr	r3, [pc, #216]	@ (8006ed4 <HAL_RCC_OscConfig+0x270>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dfe:	f7fd fcf1 	bl	80047e4 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e04:	e008      	b.n	8006e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e06:	f7fd fced 	bl	80047e4 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d901      	bls.n	8006e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006e14:	2303      	movs	r3, #3
 8006e16:	e1a1      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e18:	4b2d      	ldr	r3, [pc, #180]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f0      	beq.n	8006e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e24:	4b2a      	ldr	r3, [pc, #168]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	4927      	ldr	r1, [pc, #156]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	600b      	str	r3, [r1, #0]
 8006e38:	e015      	b.n	8006e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ed4 <HAL_RCC_OscConfig+0x270>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e40:	f7fd fcd0 	bl	80047e4 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e46:	e008      	b.n	8006e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e48:	f7fd fccc 	bl	80047e4 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d901      	bls.n	8006e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	e180      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1f0      	bne.n	8006e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d03a      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d019      	beq.n	8006eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e7a:	4b17      	ldr	r3, [pc, #92]	@ (8006ed8 <HAL_RCC_OscConfig+0x274>)
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e80:	f7fd fcb0 	bl	80047e4 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e88:	f7fd fcac 	bl	80047e4 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e160      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <HAL_RCC_OscConfig+0x26c>)
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0f0      	beq.n	8006e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ea6:	2001      	movs	r0, #1
 8006ea8:	f000 face 	bl	8007448 <RCC_Delay>
 8006eac:	e01c      	b.n	8006ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006eae:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed8 <HAL_RCC_OscConfig+0x274>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006eb4:	f7fd fc96 	bl	80047e4 <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006eba:	e00f      	b.n	8006edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ebc:	f7fd fc92 	bl	80047e4 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d908      	bls.n	8006edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e146      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
 8006ece:	bf00      	nop
 8006ed0:	40021000 	.word	0x40021000
 8006ed4:	42420000 	.word	0x42420000
 8006ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006edc:	4b92      	ldr	r3, [pc, #584]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e9      	bne.n	8006ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0304 	and.w	r3, r3, #4
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80a6 	beq.w	8007042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006efa:	4b8b      	ldr	r3, [pc, #556]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006efc:	69db      	ldr	r3, [r3, #28]
 8006efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10d      	bne.n	8006f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f06:	4b88      	ldr	r3, [pc, #544]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	4a87      	ldr	r2, [pc, #540]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f10:	61d3      	str	r3, [r2, #28]
 8006f12:	4b85      	ldr	r3, [pc, #532]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f1a:	60bb      	str	r3, [r7, #8]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f22:	4b82      	ldr	r3, [pc, #520]	@ (800712c <HAL_RCC_OscConfig+0x4c8>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d118      	bne.n	8006f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f2e:	4b7f      	ldr	r3, [pc, #508]	@ (800712c <HAL_RCC_OscConfig+0x4c8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a7e      	ldr	r2, [pc, #504]	@ (800712c <HAL_RCC_OscConfig+0x4c8>)
 8006f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f3a:	f7fd fc53 	bl	80047e4 <HAL_GetTick>
 8006f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f40:	e008      	b.n	8006f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f42:	f7fd fc4f 	bl	80047e4 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1ad3      	subs	r3, r2, r3
 8006f4c:	2b64      	cmp	r3, #100	@ 0x64
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e103      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f54:	4b75      	ldr	r3, [pc, #468]	@ (800712c <HAL_RCC_OscConfig+0x4c8>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0f0      	beq.n	8006f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d106      	bne.n	8006f76 <HAL_RCC_OscConfig+0x312>
 8006f68:	4b6f      	ldr	r3, [pc, #444]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	6213      	str	r3, [r2, #32]
 8006f74:	e02d      	b.n	8006fd2 <HAL_RCC_OscConfig+0x36e>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10c      	bne.n	8006f98 <HAL_RCC_OscConfig+0x334>
 8006f7e:	4b6a      	ldr	r3, [pc, #424]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	4a69      	ldr	r2, [pc, #420]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f84:	f023 0301 	bic.w	r3, r3, #1
 8006f88:	6213      	str	r3, [r2, #32]
 8006f8a:	4b67      	ldr	r3, [pc, #412]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	4a66      	ldr	r2, [pc, #408]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006f90:	f023 0304 	bic.w	r3, r3, #4
 8006f94:	6213      	str	r3, [r2, #32]
 8006f96:	e01c      	b.n	8006fd2 <HAL_RCC_OscConfig+0x36e>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	2b05      	cmp	r3, #5
 8006f9e:	d10c      	bne.n	8006fba <HAL_RCC_OscConfig+0x356>
 8006fa0:	4b61      	ldr	r3, [pc, #388]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006fa2:	6a1b      	ldr	r3, [r3, #32]
 8006fa4:	4a60      	ldr	r2, [pc, #384]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006fa6:	f043 0304 	orr.w	r3, r3, #4
 8006faa:	6213      	str	r3, [r2, #32]
 8006fac:	4b5e      	ldr	r3, [pc, #376]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	4a5d      	ldr	r2, [pc, #372]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006fb2:	f043 0301 	orr.w	r3, r3, #1
 8006fb6:	6213      	str	r3, [r2, #32]
 8006fb8:	e00b      	b.n	8006fd2 <HAL_RCC_OscConfig+0x36e>
 8006fba:	4b5b      	ldr	r3, [pc, #364]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
 8006fbe:	4a5a      	ldr	r2, [pc, #360]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	6213      	str	r3, [r2, #32]
 8006fc6:	4b58      	ldr	r3, [pc, #352]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	4a57      	ldr	r2, [pc, #348]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006fcc:	f023 0304 	bic.w	r3, r3, #4
 8006fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d015      	beq.n	8007006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fda:	f7fd fc03 	bl	80047e4 <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe0:	e00a      	b.n	8006ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fe2:	f7fd fbff 	bl	80047e4 <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e0b1      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8006ffa:	6a1b      	ldr	r3, [r3, #32]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0ee      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x37e>
 8007004:	e014      	b.n	8007030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007006:	f7fd fbed 	bl	80047e4 <HAL_GetTick>
 800700a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800700c:	e00a      	b.n	8007024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800700e:	f7fd fbe9 	bl	80047e4 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800701c:	4293      	cmp	r3, r2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e09b      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007024:	4b40      	ldr	r3, [pc, #256]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8007026:	6a1b      	ldr	r3, [r3, #32]
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ee      	bne.n	800700e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d105      	bne.n	8007042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007036:	4b3c      	ldr	r3, [pc, #240]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	4a3b      	ldr	r2, [pc, #236]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 800703c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 8087 	beq.w	800715a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800704c:	4b36      	ldr	r3, [pc, #216]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f003 030c 	and.w	r3, r3, #12
 8007054:	2b08      	cmp	r3, #8
 8007056:	d061      	beq.n	800711c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	2b02      	cmp	r3, #2
 800705e:	d146      	bne.n	80070ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007060:	4b33      	ldr	r3, [pc, #204]	@ (8007130 <HAL_RCC_OscConfig+0x4cc>)
 8007062:	2200      	movs	r2, #0
 8007064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007066:	f7fd fbbd 	bl	80047e4 <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800706c:	e008      	b.n	8007080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800706e:	f7fd fbb9 	bl	80047e4 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e06d      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007080:	4b29      	ldr	r3, [pc, #164]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f0      	bne.n	800706e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a1b      	ldr	r3, [r3, #32]
 8007090:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007094:	d108      	bne.n	80070a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007096:	4b24      	ldr	r3, [pc, #144]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	4921      	ldr	r1, [pc, #132]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a19      	ldr	r1, [r3, #32]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	430b      	orrs	r3, r1
 80070ba:	491b      	ldr	r1, [pc, #108]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007130 <HAL_RCC_OscConfig+0x4cc>)
 80070c2:	2201      	movs	r2, #1
 80070c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c6:	f7fd fb8d 	bl	80047e4 <HAL_GetTick>
 80070ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070cc:	e008      	b.n	80070e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ce:	f7fd fb89 	bl	80047e4 <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e03d      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070e0:	4b11      	ldr	r3, [pc, #68]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f0      	beq.n	80070ce <HAL_RCC_OscConfig+0x46a>
 80070ec:	e035      	b.n	800715a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070ee:	4b10      	ldr	r3, [pc, #64]	@ (8007130 <HAL_RCC_OscConfig+0x4cc>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070f4:	f7fd fb76 	bl	80047e4 <HAL_GetTick>
 80070f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070fc:	f7fd fb72 	bl	80047e4 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e026      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800710e:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <HAL_RCC_OscConfig+0x4c4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f0      	bne.n	80070fc <HAL_RCC_OscConfig+0x498>
 800711a:	e01e      	b.n	800715a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d107      	bne.n	8007134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e019      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
 8007128:	40021000 	.word	0x40021000
 800712c:	40007000 	.word	0x40007000
 8007130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007134:	4b0b      	ldr	r3, [pc, #44]	@ (8007164 <HAL_RCC_OscConfig+0x500>)
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	429a      	cmp	r2, r3
 8007146:	d106      	bne.n	8007156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007152:	429a      	cmp	r2, r3
 8007154:	d001      	beq.n	800715a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	40021000 	.word	0x40021000

08007168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e0d0      	b.n	800731e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800717c:	4b6a      	ldr	r3, [pc, #424]	@ (8007328 <HAL_RCC_ClockConfig+0x1c0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	429a      	cmp	r2, r3
 8007188:	d910      	bls.n	80071ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800718a:	4b67      	ldr	r3, [pc, #412]	@ (8007328 <HAL_RCC_ClockConfig+0x1c0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f023 0207 	bic.w	r2, r3, #7
 8007192:	4965      	ldr	r1, [pc, #404]	@ (8007328 <HAL_RCC_ClockConfig+0x1c0>)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	4313      	orrs	r3, r2
 8007198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800719a:	4b63      	ldr	r3, [pc, #396]	@ (8007328 <HAL_RCC_ClockConfig+0x1c0>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d001      	beq.n	80071ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e0b8      	b.n	800731e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d020      	beq.n	80071fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0304 	and.w	r3, r3, #4
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071c4:	4b59      	ldr	r3, [pc, #356]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	4a58      	ldr	r2, [pc, #352]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80071ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80071ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80071dc:	4b53      	ldr	r3, [pc, #332]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	4a52      	ldr	r2, [pc, #328]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80071e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80071e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071e8:	4b50      	ldr	r3, [pc, #320]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	494d      	ldr	r1, [pc, #308]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d040      	beq.n	8007288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d107      	bne.n	800721e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800720e:	4b47      	ldr	r3, [pc, #284]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007216:	2b00      	cmp	r3, #0
 8007218:	d115      	bne.n	8007246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e07f      	b.n	800731e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2b02      	cmp	r3, #2
 8007224:	d107      	bne.n	8007236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007226:	4b41      	ldr	r3, [pc, #260]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e073      	b.n	800731e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007236:	4b3d      	ldr	r3, [pc, #244]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e06b      	b.n	800731e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007246:	4b39      	ldr	r3, [pc, #228]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f023 0203 	bic.w	r2, r3, #3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	4936      	ldr	r1, [pc, #216]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 8007254:	4313      	orrs	r3, r2
 8007256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007258:	f7fd fac4 	bl	80047e4 <HAL_GetTick>
 800725c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800725e:	e00a      	b.n	8007276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007260:	f7fd fac0 	bl	80047e4 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726e:	4293      	cmp	r3, r2
 8007270:	d901      	bls.n	8007276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007272:	2303      	movs	r3, #3
 8007274:	e053      	b.n	800731e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007276:	4b2d      	ldr	r3, [pc, #180]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f003 020c 	and.w	r2, r3, #12
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	429a      	cmp	r2, r3
 8007286:	d1eb      	bne.n	8007260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007288:	4b27      	ldr	r3, [pc, #156]	@ (8007328 <HAL_RCC_ClockConfig+0x1c0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0307 	and.w	r3, r3, #7
 8007290:	683a      	ldr	r2, [r7, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d210      	bcs.n	80072b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007296:	4b24      	ldr	r3, [pc, #144]	@ (8007328 <HAL_RCC_ClockConfig+0x1c0>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f023 0207 	bic.w	r2, r3, #7
 800729e:	4922      	ldr	r1, [pc, #136]	@ (8007328 <HAL_RCC_ClockConfig+0x1c0>)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072a6:	4b20      	ldr	r3, [pc, #128]	@ (8007328 <HAL_RCC_ClockConfig+0x1c0>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d001      	beq.n	80072b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e032      	b.n	800731e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d008      	beq.n	80072d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072c4:	4b19      	ldr	r3, [pc, #100]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	4916      	ldr	r1, [pc, #88]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80072d2:	4313      	orrs	r3, r2
 80072d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0308 	and.w	r3, r3, #8
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d009      	beq.n	80072f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072e2:	4b12      	ldr	r3, [pc, #72]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	00db      	lsls	r3, r3, #3
 80072f0:	490e      	ldr	r1, [pc, #56]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072f6:	f000 f821 	bl	800733c <HAL_RCC_GetSysClockFreq>
 80072fa:	4602      	mov	r2, r0
 80072fc:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <HAL_RCC_ClockConfig+0x1c4>)
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	091b      	lsrs	r3, r3, #4
 8007302:	f003 030f 	and.w	r3, r3, #15
 8007306:	490a      	ldr	r1, [pc, #40]	@ (8007330 <HAL_RCC_ClockConfig+0x1c8>)
 8007308:	5ccb      	ldrb	r3, [r1, r3]
 800730a:	fa22 f303 	lsr.w	r3, r2, r3
 800730e:	4a09      	ldr	r2, [pc, #36]	@ (8007334 <HAL_RCC_ClockConfig+0x1cc>)
 8007310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007312:	4b09      	ldr	r3, [pc, #36]	@ (8007338 <HAL_RCC_ClockConfig+0x1d0>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4618      	mov	r0, r3
 8007318:	f7fd fa22 	bl	8004760 <HAL_InitTick>

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40022000 	.word	0x40022000
 800732c:	40021000 	.word	0x40021000
 8007330:	0800c934 	.word	0x0800c934
 8007334:	20000044 	.word	0x20000044
 8007338:	20000048 	.word	0x20000048

0800733c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	2300      	movs	r3, #0
 8007350:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007356:	4b1e      	ldr	r3, [pc, #120]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f003 030c 	and.w	r3, r3, #12
 8007362:	2b04      	cmp	r3, #4
 8007364:	d002      	beq.n	800736c <HAL_RCC_GetSysClockFreq+0x30>
 8007366:	2b08      	cmp	r3, #8
 8007368:	d003      	beq.n	8007372 <HAL_RCC_GetSysClockFreq+0x36>
 800736a:	e027      	b.n	80073bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800736c:	4b19      	ldr	r3, [pc, #100]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800736e:	613b      	str	r3, [r7, #16]
      break;
 8007370:	e027      	b.n	80073c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	0c9b      	lsrs	r3, r3, #18
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	4a17      	ldr	r2, [pc, #92]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800737c:	5cd3      	ldrb	r3, [r2, r3]
 800737e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d010      	beq.n	80073ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800738a:	4b11      	ldr	r3, [pc, #68]	@ (80073d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	0c5b      	lsrs	r3, r3, #17
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	4a11      	ldr	r2, [pc, #68]	@ (80073dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8007396:	5cd3      	ldrb	r3, [r2, r3]
 8007398:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a0d      	ldr	r2, [pc, #52]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800739e:	fb03 f202 	mul.w	r2, r3, r2
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	e004      	b.n	80073b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a0c      	ldr	r2, [pc, #48]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80073b0:	fb02 f303 	mul.w	r3, r2, r3
 80073b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	613b      	str	r3, [r7, #16]
      break;
 80073ba:	e002      	b.n	80073c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80073bc:	4b05      	ldr	r3, [pc, #20]	@ (80073d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80073be:	613b      	str	r3, [r7, #16]
      break;
 80073c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073c2:	693b      	ldr	r3, [r7, #16]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bc80      	pop	{r7}
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	40021000 	.word	0x40021000
 80073d4:	007a1200 	.word	0x007a1200
 80073d8:	0800c94c 	.word	0x0800c94c
 80073dc:	0800c95c 	.word	0x0800c95c
 80073e0:	003d0900 	.word	0x003d0900

080073e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073e8:	4b02      	ldr	r3, [pc, #8]	@ (80073f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80073ea:	681b      	ldr	r3, [r3, #0]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bc80      	pop	{r7}
 80073f2:	4770      	bx	lr
 80073f4:	20000044 	.word	0x20000044

080073f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073fc:	f7ff fff2 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 8007400:	4602      	mov	r2, r0
 8007402:	4b05      	ldr	r3, [pc, #20]	@ (8007418 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	4903      	ldr	r1, [pc, #12]	@ (800741c <HAL_RCC_GetPCLK1Freq+0x24>)
 800740e:	5ccb      	ldrb	r3, [r1, r3]
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40021000 	.word	0x40021000
 800741c:	0800c944 	.word	0x0800c944

08007420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007424:	f7ff ffde 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 8007428:	4602      	mov	r2, r0
 800742a:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	0adb      	lsrs	r3, r3, #11
 8007430:	f003 0307 	and.w	r3, r3, #7
 8007434:	4903      	ldr	r1, [pc, #12]	@ (8007444 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007436:	5ccb      	ldrb	r3, [r1, r3]
 8007438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800743c:	4618      	mov	r0, r3
 800743e:	bd80      	pop	{r7, pc}
 8007440:	40021000 	.word	0x40021000
 8007444:	0800c944 	.word	0x0800c944

08007448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007450:	4b0a      	ldr	r3, [pc, #40]	@ (800747c <RCC_Delay+0x34>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a0a      	ldr	r2, [pc, #40]	@ (8007480 <RCC_Delay+0x38>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	0a5b      	lsrs	r3, r3, #9
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007464:	bf00      	nop
  }
  while (Delay --);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	1e5a      	subs	r2, r3, #1
 800746a:	60fa      	str	r2, [r7, #12]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f9      	bne.n	8007464 <RCC_Delay+0x1c>
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr
 800747c:	20000044 	.word	0x20000044
 8007480:	10624dd3 	.word	0x10624dd3

08007484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	613b      	str	r3, [r7, #16]
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	2b00      	cmp	r3, #0
 800749e:	d07d      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074a4:	4b4f      	ldr	r3, [pc, #316]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074a6:	69db      	ldr	r3, [r3, #28]
 80074a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10d      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074b0:	4b4c      	ldr	r3, [pc, #304]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	4a4b      	ldr	r2, [pc, #300]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ba:	61d3      	str	r3, [r2, #28]
 80074bc:	4b49      	ldr	r3, [pc, #292]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074c4:	60bb      	str	r3, [r7, #8]
 80074c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074c8:	2301      	movs	r3, #1
 80074ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074cc:	4b46      	ldr	r3, [pc, #280]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d118      	bne.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074d8:	4b43      	ldr	r3, [pc, #268]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a42      	ldr	r2, [pc, #264]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80074de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074e4:	f7fd f97e 	bl	80047e4 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074ea:	e008      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074ec:	f7fd f97a 	bl	80047e4 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b64      	cmp	r3, #100	@ 0x64
 80074f8:	d901      	bls.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e06d      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074fe:	4b3a      	ldr	r3, [pc, #232]	@ (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0f0      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800750a:	4b36      	ldr	r3, [pc, #216]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d02e      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	429a      	cmp	r2, r3
 8007526:	d027      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007528:	4b2e      	ldr	r3, [pc, #184]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800752a:	6a1b      	ldr	r3, [r3, #32]
 800752c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007530:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007532:	4b2e      	ldr	r3, [pc, #184]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007534:	2201      	movs	r2, #1
 8007536:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007538:	4b2c      	ldr	r3, [pc, #176]	@ (80075ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800753e:	4a29      	ldr	r2, [pc, #164]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d014      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800754e:	f7fd f949 	bl	80047e4 <HAL_GetTick>
 8007552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007554:	e00a      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007556:	f7fd f945 	bl	80047e4 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007564:	4293      	cmp	r3, r2
 8007566:	d901      	bls.n	800756c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e036      	b.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800756c:	4b1d      	ldr	r3, [pc, #116]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0ee      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007578:	4b1a      	ldr	r3, [pc, #104]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	4917      	ldr	r1, [pc, #92]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007586:	4313      	orrs	r3, r2
 8007588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d105      	bne.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007590:	4b14      	ldr	r3, [pc, #80]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007592:	69db      	ldr	r3, [r3, #28]
 8007594:	4a13      	ldr	r2, [pc, #76]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800759a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d008      	beq.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075a8:	4b0e      	ldr	r3, [pc, #56]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	490b      	ldr	r1, [pc, #44]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d008      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075c6:	4b07      	ldr	r3, [pc, #28]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	4904      	ldr	r1, [pc, #16]	@ (80075e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	40021000 	.word	0x40021000
 80075e8:	40007000 	.word	0x40007000
 80075ec:	42420440 	.word	0x42420440

080075f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b088      	sub	sp, #32
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	2300      	movs	r3, #0
 8007602:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	2300      	movs	r3, #0
 800760a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b10      	cmp	r3, #16
 8007610:	d00a      	beq.n	8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b10      	cmp	r3, #16
 8007616:	f200 808a 	bhi.w	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d045      	beq.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b02      	cmp	r3, #2
 8007624:	d075      	beq.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8007626:	e082      	b.n	800772e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8007628:	4b46      	ldr	r3, [pc, #280]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800762e:	4b45      	ldr	r3, [pc, #276]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d07b      	beq.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	0c9b      	lsrs	r3, r3, #18
 800763e:	f003 030f 	and.w	r3, r3, #15
 8007642:	4a41      	ldr	r2, [pc, #260]	@ (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8007644:	5cd3      	ldrb	r3, [r2, r3]
 8007646:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d015      	beq.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007652:	4b3c      	ldr	r3, [pc, #240]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	0c5b      	lsrs	r3, r3, #17
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	4a3b      	ldr	r2, [pc, #236]	@ (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800765e:	5cd3      	ldrb	r3, [r2, r3]
 8007660:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00d      	beq.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800766c:	4a38      	ldr	r2, [pc, #224]	@ (8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	fbb2 f2f3 	udiv	r2, r2, r3
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	fb02 f303 	mul.w	r3, r2, r3
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	e004      	b.n	8007688 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4a34      	ldr	r2, [pc, #208]	@ (8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8007682:	fb02 f303 	mul.w	r3, r2, r3
 8007686:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007688:	4b2e      	ldr	r3, [pc, #184]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007694:	d102      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	61bb      	str	r3, [r7, #24]
      break;
 800769a:	e04a      	b.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007758 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80076a2:	fba2 2303 	umull	r2, r3, r2, r3
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	61bb      	str	r3, [r7, #24]
      break;
 80076aa:	e042      	b.n	8007732 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80076ac:	4b25      	ldr	r3, [pc, #148]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076bc:	d108      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d003      	beq.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80076c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	e01f      	b.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80076da:	d109      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80076dc:	4b19      	ldr	r3, [pc, #100]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80076de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d003      	beq.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80076e8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	e00f      	b.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076fa:	d11c      	bne.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80076fc:	4b11      	ldr	r3, [pc, #68]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d016      	beq.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8007708:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800770c:	61bb      	str	r3, [r7, #24]
      break;
 800770e:	e012      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007710:	e011      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007712:	f7ff fe85 	bl	8007420 <HAL_RCC_GetPCLK2Freq>
 8007716:	4602      	mov	r2, r0
 8007718:	4b0a      	ldr	r3, [pc, #40]	@ (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	0b9b      	lsrs	r3, r3, #14
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	3301      	adds	r3, #1
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	fbb2 f3f3 	udiv	r3, r2, r3
 800772a:	61bb      	str	r3, [r7, #24]
      break;
 800772c:	e004      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800772e:	bf00      	nop
 8007730:	e002      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007732:	bf00      	nop
 8007734:	e000      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8007736:	bf00      	nop
    }
  }
  return (frequency);
 8007738:	69bb      	ldr	r3, [r7, #24]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3720      	adds	r7, #32
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	40021000 	.word	0x40021000
 8007748:	0800c960 	.word	0x0800c960
 800774c:	0800c970 	.word	0x0800c970
 8007750:	007a1200 	.word	0x007a1200
 8007754:	003d0900 	.word	0x003d0900
 8007758:	aaaaaaab 	.word	0xaaaaaaab

0800775c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e041      	b.n	80077f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fc fbbc 	bl	8003f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f000 fd40 	bl	8008220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b01      	cmp	r3, #1
 800780e:	d001      	beq.n	8007814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e03a      	b.n	800788a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0201 	orr.w	r2, r2, #1
 800782a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a18      	ldr	r2, [pc, #96]	@ (8007894 <HAL_TIM_Base_Start_IT+0x98>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d00e      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x58>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800783e:	d009      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x58>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a14      	ldr	r2, [pc, #80]	@ (8007898 <HAL_TIM_Base_Start_IT+0x9c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_TIM_Base_Start_IT+0x58>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a13      	ldr	r2, [pc, #76]	@ (800789c <HAL_TIM_Base_Start_IT+0xa0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d111      	bne.n	8007878 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2b06      	cmp	r3, #6
 8007864:	d010      	beq.n	8007888 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0201 	orr.w	r2, r2, #1
 8007874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007876:	e007      	b.n	8007888 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f042 0201 	orr.w	r2, r2, #1
 8007886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr
 8007894:	40012c00 	.word	0x40012c00
 8007898:	40000400 	.word	0x40000400
 800789c:	40000800 	.word	0x40000800

080078a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b082      	sub	sp, #8
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e041      	b.n	8007936 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d106      	bne.n	80078cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fc fafe 	bl	8003ec8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f000 fc9e 	bl	8008220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
	...

08007940 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d109      	bne.n	8007964 <HAL_TIM_PWM_Start+0x24>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b01      	cmp	r3, #1
 800795a:	bf14      	ite	ne
 800795c:	2301      	movne	r3, #1
 800795e:	2300      	moveq	r3, #0
 8007960:	b2db      	uxtb	r3, r3
 8007962:	e022      	b.n	80079aa <HAL_TIM_PWM_Start+0x6a>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	2b04      	cmp	r3, #4
 8007968:	d109      	bne.n	800797e <HAL_TIM_PWM_Start+0x3e>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b01      	cmp	r3, #1
 8007974:	bf14      	ite	ne
 8007976:	2301      	movne	r3, #1
 8007978:	2300      	moveq	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	e015      	b.n	80079aa <HAL_TIM_PWM_Start+0x6a>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	2b08      	cmp	r3, #8
 8007982:	d109      	bne.n	8007998 <HAL_TIM_PWM_Start+0x58>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	bf14      	ite	ne
 8007990:	2301      	movne	r3, #1
 8007992:	2300      	moveq	r3, #0
 8007994:	b2db      	uxtb	r3, r3
 8007996:	e008      	b.n	80079aa <HAL_TIM_PWM_Start+0x6a>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	bf14      	ite	ne
 80079a4:	2301      	movne	r3, #1
 80079a6:	2300      	moveq	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d001      	beq.n	80079b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e05e      	b.n	8007a70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <HAL_TIM_PWM_Start+0x82>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2202      	movs	r2, #2
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079c0:	e013      	b.n	80079ea <HAL_TIM_PWM_Start+0xaa>
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	2b04      	cmp	r3, #4
 80079c6:	d104      	bne.n	80079d2 <HAL_TIM_PWM_Start+0x92>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079d0:	e00b      	b.n	80079ea <HAL_TIM_PWM_Start+0xaa>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d104      	bne.n	80079e2 <HAL_TIM_PWM_Start+0xa2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079e0:	e003      	b.n	80079ea <HAL_TIM_PWM_Start+0xaa>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2202      	movs	r2, #2
 80079e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2201      	movs	r2, #1
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f000 fea0 	bl	8008738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007a78 <HAL_TIM_PWM_Start+0x138>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d107      	bne.n	8007a12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a18      	ldr	r2, [pc, #96]	@ (8007a78 <HAL_TIM_PWM_Start+0x138>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d00e      	beq.n	8007a3a <HAL_TIM_PWM_Start+0xfa>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a24:	d009      	beq.n	8007a3a <HAL_TIM_PWM_Start+0xfa>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a14      	ldr	r2, [pc, #80]	@ (8007a7c <HAL_TIM_PWM_Start+0x13c>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d004      	beq.n	8007a3a <HAL_TIM_PWM_Start+0xfa>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a12      	ldr	r2, [pc, #72]	@ (8007a80 <HAL_TIM_PWM_Start+0x140>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d111      	bne.n	8007a5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b06      	cmp	r3, #6
 8007a4a:	d010      	beq.n	8007a6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0201 	orr.w	r2, r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a5c:	e007      	b.n	8007a6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0201 	orr.w	r2, r2, #1
 8007a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40012c00 	.word	0x40012c00
 8007a7c:	40000400 	.word	0x40000400
 8007a80:	40000800 	.word	0x40000800

08007a84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e093      	b.n	8007bc0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7fc f9cb 	bl	8003e48 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2202      	movs	r2, #2
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	6812      	ldr	r2, [r2, #0]
 8007ac4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ac8:	f023 0307 	bic.w	r3, r3, #7
 8007acc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4610      	mov	r0, r2
 8007ada:	f000 fba1 	bl	8008220 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	699b      	ldr	r3, [r3, #24]
 8007aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b06:	f023 0303 	bic.w	r3, r3, #3
 8007b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689a      	ldr	r2, [r3, #8]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	021b      	lsls	r3, r3, #8
 8007b16:	4313      	orrs	r3, r2
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007b24:	f023 030c 	bic.w	r3, r3, #12
 8007b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	021b      	lsls	r3, r3, #8
 8007b40:	4313      	orrs	r3, r2
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	011a      	lsls	r2, r3, #4
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	031b      	lsls	r3, r3, #12
 8007b54:	4313      	orrs	r3, r2
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007b62:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	695b      	ldr	r3, [r3, #20]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	68fa      	ldr	r2, [r7, #12]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3718      	adds	r7, #24
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bd8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007be0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007be8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bf0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d110      	bne.n	8007c1a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d102      	bne.n	8007c04 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bfe:	7b7b      	ldrb	r3, [r7, #13]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d001      	beq.n	8007c08 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e069      	b.n	8007cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2202      	movs	r2, #2
 8007c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c18:	e031      	b.n	8007c7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d110      	bne.n	8007c42 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d102      	bne.n	8007c2c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c26:	7b3b      	ldrb	r3, [r7, #12]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d001      	beq.n	8007c30 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e055      	b.n	8007cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c40:	e01d      	b.n	8007c7e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d108      	bne.n	8007c5a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d105      	bne.n	8007c5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007c4e:	7b7b      	ldrb	r3, [r7, #13]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d102      	bne.n	8007c5a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007c54:	7b3b      	ldrb	r3, [r7, #12]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d001      	beq.n	8007c5e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e03e      	b.n	8007cdc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2202      	movs	r2, #2
 8007c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2202      	movs	r2, #2
 8007c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <HAL_TIM_Encoder_Start+0xc4>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b04      	cmp	r3, #4
 8007c88:	d008      	beq.n	8007c9c <HAL_TIM_Encoder_Start+0xd4>
 8007c8a:	e00f      	b.n	8007cac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	2201      	movs	r2, #1
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 fd4f 	bl	8008738 <TIM_CCxChannelCmd>
      break;
 8007c9a:	e016      	b.n	8007cca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	2104      	movs	r1, #4
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fd47 	bl	8008738 <TIM_CCxChannelCmd>
      break;
 8007caa:	e00e      	b.n	8007cca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fd3f 	bl	8008738 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	2104      	movs	r1, #4
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fd38 	bl	8008738 <TIM_CCxChannelCmd>
      break;
 8007cc8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0201 	orr.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	f003 0302 	and.w	r3, r3, #2
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d020      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d01b      	beq.n	8007d48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0202 	mvn.w	r2, #2
 8007d18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	699b      	ldr	r3, [r3, #24]
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa5a 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007d34:	e005      	b.n	8007d42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fa4d 	bl	80081d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fa5c 	bl	80081fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d020      	beq.n	8007d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01b      	beq.n	8007d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0204 	mvn.w	r2, #4
 8007d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699b      	ldr	r3, [r3, #24]
 8007d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa34 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007d80:	e005      	b.n	8007d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa27 	bl	80081d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fa36 	bl	80081fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d020      	beq.n	8007de0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01b      	beq.n	8007de0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0208 	mvn.w	r2, #8
 8007db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2204      	movs	r2, #4
 8007db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa0e 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007dcc:	e005      	b.n	8007dda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa01 	bl	80081d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fa10 	bl	80081fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f003 0310 	and.w	r3, r3, #16
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d020      	beq.n	8007e2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f003 0310 	and.w	r3, r3, #16
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01b      	beq.n	8007e2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f06f 0210 	mvn.w	r2, #16
 8007dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2208      	movs	r2, #8
 8007e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d003      	beq.n	8007e1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f9e8 	bl	80081e8 <HAL_TIM_IC_CaptureCallback>
 8007e18:	e005      	b.n	8007e26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f9db 	bl	80081d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f9ea 	bl	80081fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0301 	and.w	r3, r3, #1
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00c      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d007      	beq.n	8007e50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f06f 0201 	mvn.w	r2, #1
 8007e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fa fa44 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00c      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d007      	beq.n	8007e74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fced 	bl	800884e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00c      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f9ba 	bl	800820c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00c      	beq.n	8007ebc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d007      	beq.n	8007ebc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f06f 0220 	mvn.w	r2, #32
 8007eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 fcc0 	bl	800883c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d101      	bne.n	8007ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ede:	2302      	movs	r3, #2
 8007ee0:	e0ae      	b.n	8008040 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b0c      	cmp	r3, #12
 8007eee:	f200 809f 	bhi.w	8008030 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f2d 	.word	0x08007f2d
 8007efc:	08008031 	.word	0x08008031
 8007f00:	08008031 	.word	0x08008031
 8007f04:	08008031 	.word	0x08008031
 8007f08:	08007f6d 	.word	0x08007f6d
 8007f0c:	08008031 	.word	0x08008031
 8007f10:	08008031 	.word	0x08008031
 8007f14:	08008031 	.word	0x08008031
 8007f18:	08007faf 	.word	0x08007faf
 8007f1c:	08008031 	.word	0x08008031
 8007f20:	08008031 	.word	0x08008031
 8007f24:	08008031 	.word	0x08008031
 8007f28:	08007fef 	.word	0x08007fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68b9      	ldr	r1, [r7, #8]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f9e2 	bl	80082fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	699a      	ldr	r2, [r3, #24]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0208 	orr.w	r2, r2, #8
 8007f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699a      	ldr	r2, [r3, #24]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0204 	bic.w	r2, r2, #4
 8007f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6999      	ldr	r1, [r3, #24]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	619a      	str	r2, [r3, #24]
      break;
 8007f6a:	e064      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fa28 	bl	80083c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	699a      	ldr	r2, [r3, #24]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6999      	ldr	r1, [r3, #24]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	021a      	lsls	r2, r3, #8
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	619a      	str	r2, [r3, #24]
      break;
 8007fac:	e043      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68b9      	ldr	r1, [r7, #8]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 fa71 	bl	800849c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0208 	orr.w	r2, r2, #8
 8007fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69da      	ldr	r2, [r3, #28]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0204 	bic.w	r2, r2, #4
 8007fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69d9      	ldr	r1, [r3, #28]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	691a      	ldr	r2, [r3, #16]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	61da      	str	r2, [r3, #28]
      break;
 8007fec:	e023      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68b9      	ldr	r1, [r7, #8]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 fabb 	bl	8008570 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	69da      	ldr	r2, [r3, #28]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69da      	ldr	r2, [r3, #28]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	69d9      	ldr	r1, [r3, #28]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	021a      	lsls	r2, r3, #8
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	430a      	orrs	r2, r1
 800802c:	61da      	str	r2, [r3, #28]
      break;
 800802e:	e002      	b.n	8008036 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
      break;
 8008034:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_TIM_ConfigClockSource+0x1c>
 8008060:	2302      	movs	r3, #2
 8008062:	e0b4      	b.n	80081ce <HAL_TIM_ConfigClockSource+0x186>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800808a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800809c:	d03e      	beq.n	800811c <HAL_TIM_ConfigClockSource+0xd4>
 800809e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80080a2:	f200 8087 	bhi.w	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080aa:	f000 8086 	beq.w	80081ba <HAL_TIM_ConfigClockSource+0x172>
 80080ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80080b2:	d87f      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080b4:	2b70      	cmp	r3, #112	@ 0x70
 80080b6:	d01a      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0xa6>
 80080b8:	2b70      	cmp	r3, #112	@ 0x70
 80080ba:	d87b      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080bc:	2b60      	cmp	r3, #96	@ 0x60
 80080be:	d050      	beq.n	8008162 <HAL_TIM_ConfigClockSource+0x11a>
 80080c0:	2b60      	cmp	r3, #96	@ 0x60
 80080c2:	d877      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080c4:	2b50      	cmp	r3, #80	@ 0x50
 80080c6:	d03c      	beq.n	8008142 <HAL_TIM_ConfigClockSource+0xfa>
 80080c8:	2b50      	cmp	r3, #80	@ 0x50
 80080ca:	d873      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080cc:	2b40      	cmp	r3, #64	@ 0x40
 80080ce:	d058      	beq.n	8008182 <HAL_TIM_ConfigClockSource+0x13a>
 80080d0:	2b40      	cmp	r3, #64	@ 0x40
 80080d2:	d86f      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080d4:	2b30      	cmp	r3, #48	@ 0x30
 80080d6:	d064      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15a>
 80080d8:	2b30      	cmp	r3, #48	@ 0x30
 80080da:	d86b      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080dc:	2b20      	cmp	r3, #32
 80080de:	d060      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15a>
 80080e0:	2b20      	cmp	r3, #32
 80080e2:	d867      	bhi.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d05c      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15a>
 80080e8:	2b10      	cmp	r3, #16
 80080ea:	d05a      	beq.n	80081a2 <HAL_TIM_ConfigClockSource+0x15a>
 80080ec:	e062      	b.n	80081b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080fe:	f000 fafc 	bl	80086fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68ba      	ldr	r2, [r7, #8]
 8008118:	609a      	str	r2, [r3, #8]
      break;
 800811a:	e04f      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800812c:	f000 fae5 	bl	80086fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689a      	ldr	r2, [r3, #8]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800813e:	609a      	str	r2, [r3, #8]
      break;
 8008140:	e03c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800814e:	461a      	mov	r2, r3
 8008150:	f000 fa5c 	bl	800860c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2150      	movs	r1, #80	@ 0x50
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fab3 	bl	80086c6 <TIM_ITRx_SetConfig>
      break;
 8008160:	e02c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800816e:	461a      	mov	r2, r3
 8008170:	f000 fa7a 	bl	8008668 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2160      	movs	r1, #96	@ 0x60
 800817a:	4618      	mov	r0, r3
 800817c:	f000 faa3 	bl	80086c6 <TIM_ITRx_SetConfig>
      break;
 8008180:	e01c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800818e:	461a      	mov	r2, r3
 8008190:	f000 fa3c 	bl	800860c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2140      	movs	r1, #64	@ 0x40
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fa93 	bl	80086c6 <TIM_ITRx_SetConfig>
      break;
 80081a0:	e00c      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f000 fa8a 	bl	80086c6 <TIM_ITRx_SetConfig>
      break;
 80081b2:	e003      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
      break;
 80081b8:	e000      	b.n	80081bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3710      	adds	r7, #16
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr

080081fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	bc80      	pop	{r7}
 800820a:	4770      	bx	lr

0800820c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	bc80      	pop	{r7}
 800821c:	4770      	bx	lr
	...

08008220 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008220:	b480      	push	{r7}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a2f      	ldr	r2, [pc, #188]	@ (80082f0 <TIM_Base_SetConfig+0xd0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00b      	beq.n	8008250 <TIM_Base_SetConfig+0x30>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800823e:	d007      	beq.n	8008250 <TIM_Base_SetConfig+0x30>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a2c      	ldr	r2, [pc, #176]	@ (80082f4 <TIM_Base_SetConfig+0xd4>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d003      	beq.n	8008250 <TIM_Base_SetConfig+0x30>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a2b      	ldr	r2, [pc, #172]	@ (80082f8 <TIM_Base_SetConfig+0xd8>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d108      	bne.n	8008262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a22      	ldr	r2, [pc, #136]	@ (80082f0 <TIM_Base_SetConfig+0xd0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_Base_SetConfig+0x62>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008270:	d007      	beq.n	8008282 <TIM_Base_SetConfig+0x62>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1f      	ldr	r2, [pc, #124]	@ (80082f4 <TIM_Base_SetConfig+0xd4>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_Base_SetConfig+0x62>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1e      	ldr	r2, [pc, #120]	@ (80082f8 <TIM_Base_SetConfig+0xd8>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a0d      	ldr	r2, [pc, #52]	@ (80082f0 <TIM_Base_SetConfig+0xd0>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d103      	bne.n	80082c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	f003 0301 	and.w	r3, r3, #1
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	f023 0201 	bic.w	r2, r3, #1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	611a      	str	r2, [r3, #16]
  }
}
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bc80      	pop	{r7}
 80082ee:	4770      	bx	lr
 80082f0:	40012c00 	.word	0x40012c00
 80082f4:	40000400 	.word	0x40000400
 80082f8:	40000800 	.word	0x40000800

080082fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	f023 0201 	bic.w	r2, r3, #1
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f023 0302 	bic.w	r3, r3, #2
 8008344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	4313      	orrs	r3, r2
 800834e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a1c      	ldr	r2, [pc, #112]	@ (80083c4 <TIM_OC1_SetConfig+0xc8>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d10c      	bne.n	8008372 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f023 0308 	bic.w	r3, r3, #8
 800835e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	68db      	ldr	r3, [r3, #12]
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	4313      	orrs	r3, r2
 8008368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f023 0304 	bic.w	r3, r3, #4
 8008370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a13      	ldr	r2, [pc, #76]	@ (80083c4 <TIM_OC1_SetConfig+0xc8>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d111      	bne.n	800839e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	4313      	orrs	r3, r2
 8008392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	4313      	orrs	r3, r2
 800839c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	621a      	str	r2, [r3, #32]
}
 80083b8:	bf00      	nop
 80083ba:	371c      	adds	r7, #28
 80083bc:	46bd      	mov	sp, r7
 80083be:	bc80      	pop	{r7}
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	40012c00 	.word	0x40012c00

080083c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	f023 0210 	bic.w	r2, r3, #16
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	f023 0320 	bic.w	r3, r3, #32
 8008412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	011b      	lsls	r3, r3, #4
 800841a:	697a      	ldr	r2, [r7, #20]
 800841c:	4313      	orrs	r3, r2
 800841e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a1d      	ldr	r2, [pc, #116]	@ (8008498 <TIM_OC2_SetConfig+0xd0>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d10d      	bne.n	8008444 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800842e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	4313      	orrs	r3, r2
 800843a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a14      	ldr	r2, [pc, #80]	@ (8008498 <TIM_OC2_SetConfig+0xd0>)
 8008448:	4293      	cmp	r3, r2
 800844a:	d113      	bne.n	8008474 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800845a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	693a      	ldr	r2, [r7, #16]
 8008464:	4313      	orrs	r3, r2
 8008466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	4313      	orrs	r3, r2
 8008472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	693a      	ldr	r2, [r7, #16]
 8008478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	697a      	ldr	r2, [r7, #20]
 800848c:	621a      	str	r2, [r3, #32]
}
 800848e:	bf00      	nop
 8008490:	371c      	adds	r7, #28
 8008492:	46bd      	mov	sp, r7
 8008494:	bc80      	pop	{r7}
 8008496:	4770      	bx	lr
 8008498:	40012c00 	.word	0x40012c00

0800849c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a1b      	ldr	r3, [r3, #32]
 80084b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 0303 	bic.w	r3, r3, #3
 80084d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <TIM_OC3_SetConfig+0xd0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d10d      	bne.n	8008516 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a14      	ldr	r2, [pc, #80]	@ (800856c <TIM_OC3_SetConfig+0xd0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d113      	bne.n	8008546 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800852c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	4313      	orrs	r3, r2
 8008544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	621a      	str	r2, [r3, #32]
}
 8008560:	bf00      	nop
 8008562:	371c      	adds	r7, #28
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	40012c00 	.word	0x40012c00

08008570 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800859e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80085ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	031b      	lsls	r3, r3, #12
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008608 <TIM_OC4_SetConfig+0x98>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d109      	bne.n	80085e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	019b      	lsls	r3, r3, #6
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	621a      	str	r2, [r3, #32]
}
 80085fe:	bf00      	nop
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr
 8008608:	40012c00 	.word	0x40012c00

0800860c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f023 0201 	bic.w	r2, r3, #1
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f023 030a 	bic.w	r3, r3, #10
 8008648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	bc80      	pop	{r7}
 8008666:	4770      	bx	lr

08008668 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	f023 0210 	bic.w	r2, r3, #16
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	031b      	lsls	r3, r3, #12
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	4313      	orrs	r3, r2
 800869c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	621a      	str	r2, [r3, #32]
}
 80086bc:	bf00      	nop
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr

080086c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	f043 0307 	orr.w	r3, r3, #7
 80086e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	609a      	str	r2, [r3, #8]
}
 80086f0:	bf00      	nop
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b087      	sub	sp, #28
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	607a      	str	r2, [r7, #4]
 8008706:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008714:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	021a      	lsls	r2, r3, #8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	431a      	orrs	r2, r3
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	4313      	orrs	r3, r2
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	4313      	orrs	r3, r2
 8008726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	609a      	str	r2, [r3, #8]
}
 800872e:	bf00      	nop
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f003 031f 	and.w	r3, r3, #31
 800874a:	2201      	movs	r2, #1
 800874c:	fa02 f303 	lsl.w	r3, r2, r3
 8008750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6a1a      	ldr	r2, [r3, #32]
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	43db      	mvns	r3, r3
 800875a:	401a      	ands	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6a1a      	ldr	r2, [r3, #32]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f003 031f 	and.w	r3, r3, #31
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	fa01 f303 	lsl.w	r3, r1, r3
 8008770:	431a      	orrs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	621a      	str	r2, [r3, #32]
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	bc80      	pop	{r7}
 800877e:	4770      	bx	lr

08008780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008790:	2b01      	cmp	r3, #1
 8008792:	d101      	bne.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008794:	2302      	movs	r3, #2
 8008796:	e046      	b.n	8008826 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a16      	ldr	r2, [pc, #88]	@ (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00e      	beq.n	80087fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e4:	d009      	beq.n	80087fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a12      	ldr	r2, [pc, #72]	@ (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d004      	beq.n	80087fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a10      	ldr	r2, [pc, #64]	@ (8008838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d10c      	bne.n	8008814 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008800:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	4313      	orrs	r3, r2
 800880a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr
 8008830:	40012c00 	.word	0x40012c00
 8008834:	40000400 	.word	0x40000400
 8008838:	40000800 	.word	0x40000800

0800883c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	bc80      	pop	{r7}
 800884c:	4770      	bx	lr

0800884e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008856:	bf00      	nop
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	bc80      	pop	{r7}
 800885e:	4770      	bx	lr

08008860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d101      	bne.n	8008872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e042      	b.n	80088f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d106      	bne.n	800888c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7fb fbdc 	bl	8004044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2224      	movs	r2, #36	@ 0x24
 8008890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68da      	ldr	r2, [r3, #12]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80088a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 ffc7 	bl	8009838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	691a      	ldr	r2, [r3, #16]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	695a      	ldr	r2, [r3, #20]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	68da      	ldr	r2, [r3, #12]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80088d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2220      	movs	r2, #32
 80088e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2220      	movs	r2, #32
 80088ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08c      	sub	sp, #48	@ 0x30
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	4613      	mov	r3, r2
 800890c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b20      	cmp	r3, #32
 8008918:	d156      	bne.n	80089c8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <HAL_UART_Transmit_DMA+0x26>
 8008920:	88fb      	ldrh	r3, [r7, #6]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e04f      	b.n	80089ca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	88fa      	ldrh	r2, [r7, #6]
 8008934:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	88fa      	ldrh	r2, [r7, #6]
 800893a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2221      	movs	r2, #33	@ 0x21
 8008946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800894e:	4a21      	ldr	r2, [pc, #132]	@ (80089d4 <HAL_UART_Transmit_DMA+0xd4>)
 8008950:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008956:	4a20      	ldr	r2, [pc, #128]	@ (80089d8 <HAL_UART_Transmit_DMA+0xd8>)
 8008958:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800895e:	4a1f      	ldr	r2, [pc, #124]	@ (80089dc <HAL_UART_Transmit_DMA+0xdc>)
 8008960:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008966:	2200      	movs	r2, #0
 8008968:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800896a:	f107 0308 	add.w	r3, r7, #8
 800896e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008976:	6819      	ldr	r1, [r3, #0]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3304      	adds	r3, #4
 800897e:	461a      	mov	r2, r3
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	f7fc fd1d 	bl	80053c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800898e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3314      	adds	r3, #20
 8008996:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	617b      	str	r3, [r7, #20]
   return(result);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3314      	adds	r3, #20
 80089ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80089b2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b4:	6a39      	ldr	r1, [r7, #32]
 80089b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089b8:	e841 2300 	strex	r3, r2, [r1]
 80089bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d1e5      	bne.n	8008990 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e000      	b.n	80089ca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80089c8:	2302      	movs	r3, #2
  }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3730      	adds	r7, #48	@ 0x30
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	080090cf 	.word	0x080090cf
 80089d8:	08009169 	.word	0x08009169
 80089dc:	080092ed 	.word	0x080092ed

080089e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	d112      	bne.n	8008a20 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d002      	beq.n	8008a06 <HAL_UART_Receive_DMA+0x26>
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e00b      	b.n	8008a22 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008a10:	88fb      	ldrh	r3, [r7, #6]
 8008a12:	461a      	mov	r2, r3
 8008a14:	68b9      	ldr	r1, [r7, #8]
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f000 fcb2 	bl	8009380 <UART_Start_Receive_DMA>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	e000      	b.n	8008a22 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8008a20:	2302      	movs	r3, #2
  }
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3710      	adds	r7, #16
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b09a      	sub	sp, #104	@ 0x68
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	330c      	adds	r3, #12
 8008a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	330c      	adds	r3, #12
 8008a50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a52:	657a      	str	r2, [r7, #84]	@ 0x54
 8008a54:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e5      	bne.n	8008a32 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3314      	adds	r3, #20
 8008a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	f023 0301 	bic.w	r3, r3, #1
 8008a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3314      	adds	r3, #20
 8008a84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008a86:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e5      	bne.n	8008a66 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d119      	bne.n	8008ad6 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	330c      	adds	r3, #12
 8008aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f023 0310 	bic.w	r3, r3, #16
 8008ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	330c      	adds	r3, #12
 8008ac0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e5      	bne.n	8008aa2 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d036      	beq.n	8008b52 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3314      	adds	r3, #20
 8008aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008afa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3314      	adds	r3, #20
 8008b02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b04:	61ba      	str	r2, [r7, #24]
 8008b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b08:	6979      	ldr	r1, [r7, #20]
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	e841 2300 	strex	r3, r2, [r1]
 8008b10:	613b      	str	r3, [r7, #16]
   return(result);
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1e5      	bne.n	8008ae4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d018      	beq.n	8008b52 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b24:	2200      	movs	r2, #0
 8008b26:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fc fca7 	bl	8005480 <HAL_DMA_Abort>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00c      	beq.n	8008b52 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fc fe59 	bl	80057f4 <HAL_DMA_GetError>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d104      	bne.n	8008b52 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2210      	movs	r2, #16
 8008b4c:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e00a      	b.n	8008b68 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3768      	adds	r7, #104	@ 0x68
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b0ba      	sub	sp, #232	@ 0xe8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba6:	f003 030f 	and.w	r3, r3, #15
 8008baa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10f      	bne.n	8008bd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d009      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x66>
 8008bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fd74 	bl	80096bc <UART_Receive_IT>
      return;
 8008bd4:	e25b      	b.n	800908e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f000 80de 	beq.w	8008d9c <HAL_UART_IRQHandler+0x22c>
 8008be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d106      	bne.n	8008bfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bf0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 80d1 	beq.w	8008d9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bfe:	f003 0301 	and.w	r3, r3, #1
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00b      	beq.n	8008c1e <HAL_UART_IRQHandler+0xae>
 8008c06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d005      	beq.n	8008c1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c16:	f043 0201 	orr.w	r2, r3, #1
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <HAL_UART_IRQHandler+0xd2>
 8008c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d005      	beq.n	8008c42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3a:	f043 0202 	orr.w	r2, r3, #2
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c46:	f003 0302 	and.w	r3, r3, #2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00b      	beq.n	8008c66 <HAL_UART_IRQHandler+0xf6>
 8008c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d005      	beq.n	8008c66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c5e:	f043 0204 	orr.w	r2, r3, #4
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c6a:	f003 0308 	and.w	r3, r3, #8
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d011      	beq.n	8008c96 <HAL_UART_IRQHandler+0x126>
 8008c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d005      	beq.n	8008c96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c8e:	f043 0208 	orr.w	r2, r3, #8
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 81f2 	beq.w	8009084 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d008      	beq.n	8008cbe <HAL_UART_IRQHandler+0x14e>
 8008cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fcff 	bl	80096bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	bf14      	ite	ne
 8008ccc:	2301      	movne	r3, #1
 8008cce:	2300      	moveq	r3, #0
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cda:	f003 0308 	and.w	r3, r3, #8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d103      	bne.n	8008cea <HAL_UART_IRQHandler+0x17a>
 8008ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d04f      	beq.n	8008d8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fc09 	bl	8009502 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d041      	beq.n	8008d82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3314      	adds	r3, #20
 8008d04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d0c:	e853 3f00 	ldrex	r3, [r3]
 8008d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3314      	adds	r3, #20
 8008d26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008d2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d3a:	e841 2300 	strex	r3, r2, [r1]
 8008d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1d9      	bne.n	8008cfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d013      	beq.n	8008d7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d56:	4a7e      	ldr	r2, [pc, #504]	@ (8008f50 <HAL_UART_IRQHandler+0x3e0>)
 8008d58:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fc fbca 	bl	80054f8 <HAL_DMA_Abort_IT>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d016      	beq.n	8008d98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d78:	e00e      	b.n	8008d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7f9 fca0 	bl	80026c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d80:	e00a      	b.n	8008d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7f9 fc9c 	bl	80026c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d88:	e006      	b.n	8008d98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7f9 fc98 	bl	80026c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008d96:	e175      	b.n	8009084 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d98:	bf00      	nop
    return;
 8008d9a:	e173      	b.n	8009084 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	f040 814f 	bne.w	8009044 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008daa:	f003 0310 	and.w	r3, r3, #16
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 8148 	beq.w	8009044 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008db8:	f003 0310 	and.w	r3, r3, #16
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	f000 8141 	beq.w	8009044 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60bb      	str	r3, [r7, #8]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60bb      	str	r3, [r7, #8]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	60bb      	str	r3, [r7, #8]
 8008dd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 80b6 	beq.w	8008f54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008df4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 8145 	beq.w	8009088 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e06:	429a      	cmp	r2, r3
 8008e08:	f080 813e 	bcs.w	8009088 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008e12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	2b20      	cmp	r3, #32
 8008e1c:	f000 8088 	beq.w	8008f30 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	330c      	adds	r3, #12
 8008e26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e3e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	330c      	adds	r3, #12
 8008e48:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008e4c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e54:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e58:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e5c:	e841 2300 	strex	r3, r2, [r1]
 8008e60:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1d9      	bne.n	8008e20 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3314      	adds	r3, #20
 8008e72:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e76:	e853 3f00 	ldrex	r3, [r3]
 8008e7a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e7e:	f023 0301 	bic.w	r3, r3, #1
 8008e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	3314      	adds	r3, #20
 8008e8c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e1      	bne.n	8008e6c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3314      	adds	r3, #20
 8008eae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3314      	adds	r3, #20
 8008ec8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ecc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ece:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ed2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ed4:	e841 2300 	strex	r3, r2, [r1]
 8008ed8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008eda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1e3      	bne.n	8008ea8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	330c      	adds	r3, #12
 8008ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f00:	f023 0310 	bic.w	r3, r3, #16
 8008f04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	330c      	adds	r3, #12
 8008f0e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008f12:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008f14:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f1a:	e841 2300 	strex	r3, r2, [r1]
 8008f1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008f20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1e3      	bne.n	8008eee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7fc faa8 	bl	8005480 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2202      	movs	r2, #2
 8008f34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 f8b6 	bl	80090b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f4c:	e09c      	b.n	8009088 <HAL_UART_IRQHandler+0x518>
 8008f4e:	bf00      	nop
 8008f50:	080095c7 	.word	0x080095c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f000 808e 	beq.w	800908c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008f70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 8089 	beq.w	800908c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	330c      	adds	r3, #12
 8008f80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	330c      	adds	r3, #12
 8008f9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fa0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fa4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fa6:	e841 2300 	strex	r3, r2, [r1]
 8008faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1e3      	bne.n	8008f7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3314      	adds	r3, #20
 8008fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	623b      	str	r3, [r7, #32]
   return(result);
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	f023 0301 	bic.w	r3, r3, #1
 8008fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	3314      	adds	r3, #20
 8008fd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e3      	bne.n	8008fb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2220      	movs	r2, #32
 8008fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	330c      	adds	r3, #12
 8008ffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	60fb      	str	r3, [r7, #12]
   return(result);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f023 0310 	bic.w	r3, r3, #16
 800900e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	330c      	adds	r3, #12
 8009018:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800901c:	61fa      	str	r2, [r7, #28]
 800901e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	69b9      	ldr	r1, [r7, #24]
 8009022:	69fa      	ldr	r2, [r7, #28]
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	617b      	str	r3, [r7, #20]
   return(result);
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e3      	bne.n	8008ff8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2202      	movs	r2, #2
 8009034:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009036:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f83b 	bl	80090b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009042:	e023      	b.n	800908c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800904c:	2b00      	cmp	r3, #0
 800904e:	d009      	beq.n	8009064 <HAL_UART_IRQHandler+0x4f4>
 8009050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009058:	2b00      	cmp	r3, #0
 800905a:	d003      	beq.n	8009064 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fac6 	bl	80095ee <UART_Transmit_IT>
    return;
 8009062:	e014      	b.n	800908e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00e      	beq.n	800908e <HAL_UART_IRQHandler+0x51e>
 8009070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009078:	2b00      	cmp	r3, #0
 800907a:	d008      	beq.n	800908e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fb05 	bl	800968c <UART_EndTransmit_IT>
    return;
 8009082:	e004      	b.n	800908e <HAL_UART_IRQHandler+0x51e>
    return;
 8009084:	bf00      	nop
 8009086:	e002      	b.n	800908e <HAL_UART_IRQHandler+0x51e>
      return;
 8009088:	bf00      	nop
 800908a:	e000      	b.n	800908e <HAL_UART_IRQHandler+0x51e>
      return;
 800908c:	bf00      	nop
  }
}
 800908e:	37e8      	adds	r7, #232	@ 0xe8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr

080090a6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr

080090b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bc80      	pop	{r7}
 80090cc:	4770      	bx	lr

080090ce <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b090      	sub	sp, #64	@ 0x40
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d137      	bne.n	800915a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80090ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ec:	2200      	movs	r2, #0
 80090ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3314      	adds	r3, #20
 80090f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fa:	e853 3f00 	ldrex	r3, [r3]
 80090fe:	623b      	str	r3, [r7, #32]
   return(result);
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	3314      	adds	r3, #20
 800910e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009110:	633a      	str	r2, [r7, #48]	@ 0x30
 8009112:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009116:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009118:	e841 2300 	strex	r3, r2, [r1]
 800911c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800911e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e5      	bne.n	80090f0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	330c      	adds	r3, #12
 800912a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	e853 3f00 	ldrex	r3, [r3]
 8009132:	60fb      	str	r3, [r7, #12]
   return(result);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
 800913c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	330c      	adds	r3, #12
 8009142:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009144:	61fa      	str	r2, [r7, #28]
 8009146:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	69b9      	ldr	r1, [r7, #24]
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	e841 2300 	strex	r3, r2, [r1]
 8009150:	617b      	str	r3, [r7, #20]
   return(result);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e5      	bne.n	8009124 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009158:	e002      	b.n	8009160 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800915a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800915c:	f7ff ff9a 	bl	8009094 <HAL_UART_TxCpltCallback>
}
 8009160:	bf00      	nop
 8009162:	3740      	adds	r7, #64	@ 0x40
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009174:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009176:	68f8      	ldr	r0, [r7, #12]
 8009178:	f7ff ff95 	bl	80090a6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800917c:	bf00      	nop
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b09c      	sub	sp, #112	@ 0x70
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0320 	and.w	r3, r3, #32
 800919c:	2b00      	cmp	r3, #0
 800919e:	d172      	bne.n	8009286 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80091a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091a2:	2200      	movs	r2, #0
 80091a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	330c      	adds	r3, #12
 80091ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	330c      	adds	r3, #12
 80091c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80091c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80091c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e5      	bne.n	80091a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3314      	adds	r3, #20
 80091e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e4:	e853 3f00 	ldrex	r3, [r3]
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091ec:	f023 0301 	bic.w	r3, r3, #1
 80091f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80091f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	3314      	adds	r3, #20
 80091f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80091fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009200:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009202:	e841 2300 	strex	r3, r2, [r1]
 8009206:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1e5      	bne.n	80091da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800920e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3314      	adds	r3, #20
 8009214:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	623b      	str	r3, [r7, #32]
   return(result);
 800921e:	6a3b      	ldr	r3, [r7, #32]
 8009220:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009224:	663b      	str	r3, [r7, #96]	@ 0x60
 8009226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3314      	adds	r3, #20
 800922c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800922e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e5      	bne.n	800920e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009244:	2220      	movs	r2, #32
 8009246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800924a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800924c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800924e:	2b01      	cmp	r3, #1
 8009250:	d119      	bne.n	8009286 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	330c      	adds	r3, #12
 8009258:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	60fb      	str	r3, [r7, #12]
   return(result);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f023 0310 	bic.w	r3, r3, #16
 8009268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800926a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009272:	61fa      	str	r2, [r7, #28]
 8009274:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	69b9      	ldr	r1, [r7, #24]
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	617b      	str	r3, [r7, #20]
   return(result);
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e5      	bne.n	8009252 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009288:	2200      	movs	r2, #0
 800928a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800928c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800928e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009290:	2b01      	cmp	r3, #1
 8009292:	d106      	bne.n	80092a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009296:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009298:	4619      	mov	r1, r3
 800929a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800929c:	f7ff ff0c 	bl	80090b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092a0:	e002      	b.n	80092a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80092a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80092a4:	f7f9 f986 	bl	80025b4 <HAL_UART_RxCpltCallback>
}
 80092a8:	bf00      	nop
 80092aa:	3770      	adds	r7, #112	@ 0x70
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d108      	bne.n	80092de <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80092d0:	085b      	lsrs	r3, r3, #1
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4619      	mov	r1, r3
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f7ff feee 	bl	80090b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092dc:	e002      	b.n	80092e4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7f9 f9ca 	bl	8002678 <HAL_UART_RxHalfCpltCallback>
}
 80092e4:	bf00      	nop
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80092f4:	2300      	movs	r3, #0
 80092f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009308:	2b00      	cmp	r3, #0
 800930a:	bf14      	ite	ne
 800930c:	2301      	movne	r3, #1
 800930e:	2300      	moveq	r3, #0
 8009310:	b2db      	uxtb	r3, r3
 8009312:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b21      	cmp	r3, #33	@ 0x21
 800931e:	d108      	bne.n	8009332 <UART_DMAError+0x46>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d005      	beq.n	8009332 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	2200      	movs	r2, #0
 800932a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800932c:	68b8      	ldr	r0, [r7, #8]
 800932e:	f000 f8c1 	bl	80094b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800933c:	2b00      	cmp	r3, #0
 800933e:	bf14      	ite	ne
 8009340:	2301      	movne	r3, #1
 8009342:	2300      	moveq	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b22      	cmp	r3, #34	@ 0x22
 8009352:	d108      	bne.n	8009366 <UART_DMAError+0x7a>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d005      	beq.n	8009366 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	2200      	movs	r2, #0
 800935e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009360:	68b8      	ldr	r0, [r7, #8]
 8009362:	f000 f8ce 	bl	8009502 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800936a:	f043 0210 	orr.w	r2, r3, #16
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009372:	68b8      	ldr	r0, [r7, #8]
 8009374:	f7f9 f9a4 	bl	80026c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009378:	bf00      	nop
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b098      	sub	sp, #96	@ 0x60
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2222      	movs	r2, #34	@ 0x22
 80093a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ac:	4a3e      	ldr	r2, [pc, #248]	@ (80094a8 <UART_Start_Receive_DMA+0x128>)
 80093ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b4:	4a3d      	ldr	r2, [pc, #244]	@ (80094ac <UART_Start_Receive_DMA+0x12c>)
 80093b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093bc:	4a3c      	ldr	r2, [pc, #240]	@ (80094b0 <UART_Start_Receive_DMA+0x130>)
 80093be:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c4:	2200      	movs	r2, #0
 80093c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80093c8:	f107 0308 	add.w	r3, r7, #8
 80093cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3304      	adds	r3, #4
 80093d8:	4619      	mov	r1, r3
 80093da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	f7fb ffee 	bl	80053c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80093e4:	2300      	movs	r3, #0
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	613b      	str	r3, [r7, #16]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	613b      	str	r3, [r7, #16]
 80093f8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d019      	beq.n	8009436 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	330c      	adds	r3, #12
 8009408:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800940c:	e853 3f00 	ldrex	r3, [r3]
 8009410:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	330c      	adds	r3, #12
 8009420:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009422:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009424:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009426:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009428:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e5      	bne.n	8009402 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3314      	adds	r3, #20
 800943c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009448:	f043 0301 	orr.w	r3, r3, #1
 800944c:	657b      	str	r3, [r7, #84]	@ 0x54
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3314      	adds	r3, #20
 8009454:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009456:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800945c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800945e:	e841 2300 	strex	r3, r2, [r1]
 8009462:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1e5      	bne.n	8009436 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3314      	adds	r3, #20
 8009470:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	e853 3f00 	ldrex	r3, [r3]
 8009478:	617b      	str	r3, [r7, #20]
   return(result);
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009480:	653b      	str	r3, [r7, #80]	@ 0x50
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3314      	adds	r3, #20
 8009488:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800948a:	627a      	str	r2, [r7, #36]	@ 0x24
 800948c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948e:	6a39      	ldr	r1, [r7, #32]
 8009490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009492:	e841 2300 	strex	r3, r2, [r1]
 8009496:	61fb      	str	r3, [r7, #28]
   return(result);
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1e5      	bne.n	800946a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800949e:	2300      	movs	r3, #0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3760      	adds	r7, #96	@ 0x60
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	08009185 	.word	0x08009185
 80094ac:	080092b1 	.word	0x080092b1
 80094b0:	080092ed 	.word	0x080092ed

080094b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b089      	sub	sp, #36	@ 0x24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	330c      	adds	r3, #12
 80094c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	e853 3f00 	ldrex	r3, [r3]
 80094ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094d2:	61fb      	str	r3, [r7, #28]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	69fa      	ldr	r2, [r7, #28]
 80094dc:	61ba      	str	r2, [r7, #24]
 80094de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6979      	ldr	r1, [r7, #20]
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	613b      	str	r3, [r7, #16]
   return(result);
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e5      	bne.n	80094bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2220      	movs	r2, #32
 80094f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80094f8:	bf00      	nop
 80094fa:	3724      	adds	r7, #36	@ 0x24
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr

08009502 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009502:	b480      	push	{r7}
 8009504:	b095      	sub	sp, #84	@ 0x54
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	330c      	adds	r3, #12
 8009510:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800951a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009520:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	330c      	adds	r3, #12
 8009528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800952a:	643a      	str	r2, [r7, #64]	@ 0x40
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e5      	bne.n	800950a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	3314      	adds	r3, #20
 8009544:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	e853 3f00 	ldrex	r3, [r3]
 800954c:	61fb      	str	r3, [r7, #28]
   return(result);
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	f023 0301 	bic.w	r3, r3, #1
 8009554:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	3314      	adds	r3, #20
 800955c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800955e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009560:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009562:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009564:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009566:	e841 2300 	strex	r3, r2, [r1]
 800956a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800956c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1e5      	bne.n	800953e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009576:	2b01      	cmp	r3, #1
 8009578:	d119      	bne.n	80095ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	330c      	adds	r3, #12
 8009580:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	60bb      	str	r3, [r7, #8]
   return(result);
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	f023 0310 	bic.w	r3, r3, #16
 8009590:	647b      	str	r3, [r7, #68]	@ 0x44
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	330c      	adds	r3, #12
 8009598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800959a:	61ba      	str	r2, [r7, #24]
 800959c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959e:	6979      	ldr	r1, [r7, #20]
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	613b      	str	r3, [r7, #16]
   return(result);
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e5      	bne.n	800957a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2220      	movs	r2, #32
 80095b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80095bc:	bf00      	nop
 80095be:	3754      	adds	r7, #84	@ 0x54
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bc80      	pop	{r7}
 80095c4:	4770      	bx	lr

080095c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2200      	movs	r2, #0
 80095d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7f9 f86d 	bl	80026c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	2b21      	cmp	r3, #33	@ 0x21
 8009600:	d13e      	bne.n	8009680 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800960a:	d114      	bne.n	8009636 <UART_Transmit_IT+0x48>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	691b      	ldr	r3, [r3, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d110      	bne.n	8009636 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	881b      	ldrh	r3, [r3, #0]
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009628:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	1c9a      	adds	r2, r3, #2
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	621a      	str	r2, [r3, #32]
 8009634:	e008      	b.n	8009648 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	1c59      	adds	r1, r3, #1
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	6211      	str	r1, [r2, #32]
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800964c:	b29b      	uxth	r3, r3
 800964e:	3b01      	subs	r3, #1
 8009650:	b29b      	uxth	r3, r3
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	4619      	mov	r1, r3
 8009656:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10f      	bne.n	800967c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800966a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68da      	ldr	r2, [r3, #12]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800967a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800967c:	2300      	movs	r3, #0
 800967e:	e000      	b.n	8009682 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009680:	2302      	movs	r3, #2
  }
}
 8009682:	4618      	mov	r0, r3
 8009684:	3714      	adds	r7, #20
 8009686:	46bd      	mov	sp, r7
 8009688:	bc80      	pop	{r7}
 800968a:	4770      	bx	lr

0800968c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2220      	movs	r2, #32
 80096a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff fcf1 	bl	8009094 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08c      	sub	sp, #48	@ 0x30
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b22      	cmp	r3, #34	@ 0x22
 80096ce:	f040 80ae 	bne.w	800982e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096da:	d117      	bne.n	800970c <UART_Receive_IT+0x50>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d113      	bne.n	800970c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009704:	1c9a      	adds	r2, r3, #2
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	629a      	str	r2, [r3, #40]	@ 0x28
 800970a:	e026      	b.n	800975a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009710:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009712:	2300      	movs	r3, #0
 8009714:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800971e:	d007      	beq.n	8009730 <UART_Receive_IT+0x74>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d10a      	bne.n	800973e <UART_Receive_IT+0x82>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	b2da      	uxtb	r2, r3
 8009738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800973a:	701a      	strb	r2, [r3, #0]
 800973c:	e008      	b.n	8009750 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	b2db      	uxtb	r3, r3
 8009746:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800974a:	b2da      	uxtb	r2, r3
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009754:	1c5a      	adds	r2, r3, #1
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800975e:	b29b      	uxth	r3, r3
 8009760:	3b01      	subs	r3, #1
 8009762:	b29b      	uxth	r3, r3
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	4619      	mov	r1, r3
 8009768:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800976a:	2b00      	cmp	r3, #0
 800976c:	d15d      	bne.n	800982a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	68da      	ldr	r2, [r3, #12]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f022 0220 	bic.w	r2, r2, #32
 800977c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68da      	ldr	r2, [r3, #12]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800978c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	695a      	ldr	r2, [r3, #20]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0201 	bic.w	r2, r2, #1
 800979c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2220      	movs	r2, #32
 80097a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	d135      	bne.n	8009820 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	330c      	adds	r3, #12
 80097c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	613b      	str	r3, [r7, #16]
   return(result);
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f023 0310 	bic.w	r3, r3, #16
 80097d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	330c      	adds	r3, #12
 80097d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097da:	623a      	str	r2, [r7, #32]
 80097dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	69f9      	ldr	r1, [r7, #28]
 80097e0:	6a3a      	ldr	r2, [r7, #32]
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e5      	bne.n	80097ba <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0310 	and.w	r3, r3, #16
 80097f8:	2b10      	cmp	r3, #16
 80097fa:	d10a      	bne.n	8009812 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097fc:	2300      	movs	r3, #0
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	60fb      	str	r3, [r7, #12]
 8009810:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff fc4d 	bl	80090b8 <HAL_UARTEx_RxEventCallback>
 800981e:	e002      	b.n	8009826 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7f8 fec7 	bl	80025b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	e002      	b.n	8009830 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	e000      	b.n	8009830 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800982e:	2302      	movs	r3, #2
  }
}
 8009830:	4618      	mov	r0, r3
 8009832:	3730      	adds	r7, #48	@ 0x30
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	430a      	orrs	r2, r1
 8009854:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	689a      	ldr	r2, [r3, #8]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	4313      	orrs	r3, r2
 8009866:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009872:	f023 030c 	bic.w	r3, r3, #12
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	68b9      	ldr	r1, [r7, #8]
 800987c:	430b      	orrs	r3, r1
 800987e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	430a      	orrs	r2, r1
 8009894:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a2c      	ldr	r2, [pc, #176]	@ (800994c <UART_SetConfig+0x114>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d103      	bne.n	80098a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80098a0:	f7fd fdbe 	bl	8007420 <HAL_RCC_GetPCLK2Freq>
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	e002      	b.n	80098ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80098a8:	f7fd fda6 	bl	80073f8 <HAL_RCC_GetPCLK1Freq>
 80098ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	4613      	mov	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	4413      	add	r3, r2
 80098b6:	009a      	lsls	r2, r3, #2
 80098b8:	441a      	add	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c4:	4a22      	ldr	r2, [pc, #136]	@ (8009950 <UART_SetConfig+0x118>)
 80098c6:	fba2 2303 	umull	r2, r3, r2, r3
 80098ca:	095b      	lsrs	r3, r3, #5
 80098cc:	0119      	lsls	r1, r3, #4
 80098ce:	68fa      	ldr	r2, [r7, #12]
 80098d0:	4613      	mov	r3, r2
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	009a      	lsls	r2, r3, #2
 80098d8:	441a      	add	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80098e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009950 <UART_SetConfig+0x118>)
 80098e6:	fba3 0302 	umull	r0, r3, r3, r2
 80098ea:	095b      	lsrs	r3, r3, #5
 80098ec:	2064      	movs	r0, #100	@ 0x64
 80098ee:	fb00 f303 	mul.w	r3, r0, r3
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	011b      	lsls	r3, r3, #4
 80098f6:	3332      	adds	r3, #50	@ 0x32
 80098f8:	4a15      	ldr	r2, [pc, #84]	@ (8009950 <UART_SetConfig+0x118>)
 80098fa:	fba2 2303 	umull	r2, r3, r2, r3
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009904:	4419      	add	r1, r3
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	4613      	mov	r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	4413      	add	r3, r2
 800990e:	009a      	lsls	r2, r3, #2
 8009910:	441a      	add	r2, r3
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	009b      	lsls	r3, r3, #2
 8009918:	fbb2 f2f3 	udiv	r2, r2, r3
 800991c:	4b0c      	ldr	r3, [pc, #48]	@ (8009950 <UART_SetConfig+0x118>)
 800991e:	fba3 0302 	umull	r0, r3, r3, r2
 8009922:	095b      	lsrs	r3, r3, #5
 8009924:	2064      	movs	r0, #100	@ 0x64
 8009926:	fb00 f303 	mul.w	r3, r0, r3
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	3332      	adds	r3, #50	@ 0x32
 8009930:	4a07      	ldr	r2, [pc, #28]	@ (8009950 <UART_SetConfig+0x118>)
 8009932:	fba2 2303 	umull	r2, r3, r2, r3
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f003 020f 	and.w	r2, r3, #15
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	440a      	add	r2, r1
 8009942:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009944:	bf00      	nop
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	40013800 	.word	0x40013800
 8009950:	51eb851f 	.word	0x51eb851f

08009954 <atof>:
 8009954:	2100      	movs	r1, #0
 8009956:	f000 bdfb 	b.w	800a550 <strtod>

0800995a <sulp>:
 800995a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995e:	460f      	mov	r7, r1
 8009960:	4690      	mov	r8, r2
 8009962:	f001 ff57 	bl	800b814 <__ulp>
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	f1b8 0f00 	cmp.w	r8, #0
 800996e:	d011      	beq.n	8009994 <sulp+0x3a>
 8009970:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009974:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009978:	2b00      	cmp	r3, #0
 800997a:	dd0b      	ble.n	8009994 <sulp+0x3a>
 800997c:	2400      	movs	r4, #0
 800997e:	051b      	lsls	r3, r3, #20
 8009980:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009984:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009988:	4622      	mov	r2, r4
 800998a:	462b      	mov	r3, r5
 800998c:	f7f6 fda4 	bl	80004d8 <__aeabi_dmul>
 8009990:	4604      	mov	r4, r0
 8009992:	460d      	mov	r5, r1
 8009994:	4620      	mov	r0, r4
 8009996:	4629      	mov	r1, r5
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	0000      	movs	r0, r0
	...

080099a0 <_strtod_l>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	b09f      	sub	sp, #124	@ 0x7c
 80099a6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80099a8:	2200      	movs	r2, #0
 80099aa:	460c      	mov	r4, r1
 80099ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80099ae:	f04f 0a00 	mov.w	sl, #0
 80099b2:	f04f 0b00 	mov.w	fp, #0
 80099b6:	460a      	mov	r2, r1
 80099b8:	9005      	str	r0, [sp, #20]
 80099ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80099bc:	7811      	ldrb	r1, [r2, #0]
 80099be:	292b      	cmp	r1, #43	@ 0x2b
 80099c0:	d048      	beq.n	8009a54 <_strtod_l+0xb4>
 80099c2:	d836      	bhi.n	8009a32 <_strtod_l+0x92>
 80099c4:	290d      	cmp	r1, #13
 80099c6:	d830      	bhi.n	8009a2a <_strtod_l+0x8a>
 80099c8:	2908      	cmp	r1, #8
 80099ca:	d830      	bhi.n	8009a2e <_strtod_l+0x8e>
 80099cc:	2900      	cmp	r1, #0
 80099ce:	d039      	beq.n	8009a44 <_strtod_l+0xa4>
 80099d0:	2200      	movs	r2, #0
 80099d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80099d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80099d6:	782a      	ldrb	r2, [r5, #0]
 80099d8:	2a30      	cmp	r2, #48	@ 0x30
 80099da:	f040 80b0 	bne.w	8009b3e <_strtod_l+0x19e>
 80099de:	786a      	ldrb	r2, [r5, #1]
 80099e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80099e4:	2a58      	cmp	r2, #88	@ 0x58
 80099e6:	d16c      	bne.n	8009ac2 <_strtod_l+0x122>
 80099e8:	9302      	str	r3, [sp, #8]
 80099ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099ec:	4a8f      	ldr	r2, [pc, #572]	@ (8009c2c <_strtod_l+0x28c>)
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	ab1a      	add	r3, sp, #104	@ 0x68
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	9805      	ldr	r0, [sp, #20]
 80099f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80099f8:	a919      	add	r1, sp, #100	@ 0x64
 80099fa:	f001 f80d 	bl	800aa18 <__gethex>
 80099fe:	f010 060f 	ands.w	r6, r0, #15
 8009a02:	4604      	mov	r4, r0
 8009a04:	d005      	beq.n	8009a12 <_strtod_l+0x72>
 8009a06:	2e06      	cmp	r6, #6
 8009a08:	d126      	bne.n	8009a58 <_strtod_l+0xb8>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	3501      	adds	r5, #1
 8009a0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a10:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	f040 8582 	bne.w	800a51e <_strtod_l+0xb7e>
 8009a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a1c:	b1bb      	cbz	r3, 8009a4e <_strtod_l+0xae>
 8009a1e:	4650      	mov	r0, sl
 8009a20:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009a24:	b01f      	add	sp, #124	@ 0x7c
 8009a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a2a:	2920      	cmp	r1, #32
 8009a2c:	d1d0      	bne.n	80099d0 <_strtod_l+0x30>
 8009a2e:	3201      	adds	r2, #1
 8009a30:	e7c3      	b.n	80099ba <_strtod_l+0x1a>
 8009a32:	292d      	cmp	r1, #45	@ 0x2d
 8009a34:	d1cc      	bne.n	80099d0 <_strtod_l+0x30>
 8009a36:	2101      	movs	r1, #1
 8009a38:	910e      	str	r1, [sp, #56]	@ 0x38
 8009a3a:	1c51      	adds	r1, r2, #1
 8009a3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a3e:	7852      	ldrb	r2, [r2, #1]
 8009a40:	2a00      	cmp	r2, #0
 8009a42:	d1c7      	bne.n	80099d4 <_strtod_l+0x34>
 8009a44:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a46:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f040 8566 	bne.w	800a51a <_strtod_l+0xb7a>
 8009a4e:	4650      	mov	r0, sl
 8009a50:	4659      	mov	r1, fp
 8009a52:	e7e7      	b.n	8009a24 <_strtod_l+0x84>
 8009a54:	2100      	movs	r1, #0
 8009a56:	e7ef      	b.n	8009a38 <_strtod_l+0x98>
 8009a58:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a5a:	b13a      	cbz	r2, 8009a6c <_strtod_l+0xcc>
 8009a5c:	2135      	movs	r1, #53	@ 0x35
 8009a5e:	a81c      	add	r0, sp, #112	@ 0x70
 8009a60:	f001 ffc8 	bl	800b9f4 <__copybits>
 8009a64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	f001 fba8 	bl	800b1bc <_Bfree>
 8009a6c:	3e01      	subs	r6, #1
 8009a6e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009a70:	2e04      	cmp	r6, #4
 8009a72:	d806      	bhi.n	8009a82 <_strtod_l+0xe2>
 8009a74:	e8df f006 	tbb	[pc, r6]
 8009a78:	201d0314 	.word	0x201d0314
 8009a7c:	14          	.byte	0x14
 8009a7d:	00          	.byte	0x00
 8009a7e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009a82:	05e1      	lsls	r1, r4, #23
 8009a84:	bf48      	it	mi
 8009a86:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009a8a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a8e:	0d1b      	lsrs	r3, r3, #20
 8009a90:	051b      	lsls	r3, r3, #20
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1bd      	bne.n	8009a12 <_strtod_l+0x72>
 8009a96:	f000 fecd 	bl	800a834 <__errno>
 8009a9a:	2322      	movs	r3, #34	@ 0x22
 8009a9c:	6003      	str	r3, [r0, #0]
 8009a9e:	e7b8      	b.n	8009a12 <_strtod_l+0x72>
 8009aa0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009aa4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009aa8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009aac:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ab0:	e7e7      	b.n	8009a82 <_strtod_l+0xe2>
 8009ab2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009c30 <_strtod_l+0x290>
 8009ab6:	e7e4      	b.n	8009a82 <_strtod_l+0xe2>
 8009ab8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009abc:	f04f 3aff 	mov.w	sl, #4294967295
 8009ac0:	e7df      	b.n	8009a82 <_strtod_l+0xe2>
 8009ac2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ac4:	1c5a      	adds	r2, r3, #1
 8009ac6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009ac8:	785b      	ldrb	r3, [r3, #1]
 8009aca:	2b30      	cmp	r3, #48	@ 0x30
 8009acc:	d0f9      	beq.n	8009ac2 <_strtod_l+0x122>
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d09f      	beq.n	8009a12 <_strtod_l+0x72>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	2700      	movs	r7, #0
 8009ad6:	220a      	movs	r2, #10
 8009ad8:	46b9      	mov	r9, r7
 8009ada:	9308      	str	r3, [sp, #32]
 8009adc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ade:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009ae0:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ae2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009ae4:	7805      	ldrb	r5, [r0, #0]
 8009ae6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009aea:	b2d9      	uxtb	r1, r3
 8009aec:	2909      	cmp	r1, #9
 8009aee:	d928      	bls.n	8009b42 <_strtod_l+0x1a2>
 8009af0:	2201      	movs	r2, #1
 8009af2:	4950      	ldr	r1, [pc, #320]	@ (8009c34 <_strtod_l+0x294>)
 8009af4:	f000 fe45 	bl	800a782 <strncmp>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	d032      	beq.n	8009b62 <_strtod_l+0x1c2>
 8009afc:	2000      	movs	r0, #0
 8009afe:	462a      	mov	r2, r5
 8009b00:	4603      	mov	r3, r0
 8009b02:	464d      	mov	r5, r9
 8009b04:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b06:	2a65      	cmp	r2, #101	@ 0x65
 8009b08:	d001      	beq.n	8009b0e <_strtod_l+0x16e>
 8009b0a:	2a45      	cmp	r2, #69	@ 0x45
 8009b0c:	d114      	bne.n	8009b38 <_strtod_l+0x198>
 8009b0e:	b91d      	cbnz	r5, 8009b18 <_strtod_l+0x178>
 8009b10:	9a08      	ldr	r2, [sp, #32]
 8009b12:	4302      	orrs	r2, r0
 8009b14:	d096      	beq.n	8009a44 <_strtod_l+0xa4>
 8009b16:	2500      	movs	r5, #0
 8009b18:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009b1a:	1c62      	adds	r2, r4, #1
 8009b1c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b1e:	7862      	ldrb	r2, [r4, #1]
 8009b20:	2a2b      	cmp	r2, #43	@ 0x2b
 8009b22:	d07a      	beq.n	8009c1a <_strtod_l+0x27a>
 8009b24:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b26:	d07e      	beq.n	8009c26 <_strtod_l+0x286>
 8009b28:	f04f 0c00 	mov.w	ip, #0
 8009b2c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b30:	2909      	cmp	r1, #9
 8009b32:	f240 8085 	bls.w	8009c40 <_strtod_l+0x2a0>
 8009b36:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b38:	f04f 0800 	mov.w	r8, #0
 8009b3c:	e0a5      	b.n	8009c8a <_strtod_l+0x2ea>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	e7c8      	b.n	8009ad4 <_strtod_l+0x134>
 8009b42:	f1b9 0f08 	cmp.w	r9, #8
 8009b46:	bfd8      	it	le
 8009b48:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009b4a:	f100 0001 	add.w	r0, r0, #1
 8009b4e:	bfd6      	itet	le
 8009b50:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b54:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009b58:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009b5a:	f109 0901 	add.w	r9, r9, #1
 8009b5e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009b60:	e7bf      	b.n	8009ae2 <_strtod_l+0x142>
 8009b62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b68:	785a      	ldrb	r2, [r3, #1]
 8009b6a:	f1b9 0f00 	cmp.w	r9, #0
 8009b6e:	d03b      	beq.n	8009be8 <_strtod_l+0x248>
 8009b70:	464d      	mov	r5, r9
 8009b72:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b74:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009b78:	2b09      	cmp	r3, #9
 8009b7a:	d912      	bls.n	8009ba2 <_strtod_l+0x202>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e7c2      	b.n	8009b06 <_strtod_l+0x166>
 8009b80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b82:	3001      	adds	r0, #1
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b88:	785a      	ldrb	r2, [r3, #1]
 8009b8a:	2a30      	cmp	r2, #48	@ 0x30
 8009b8c:	d0f8      	beq.n	8009b80 <_strtod_l+0x1e0>
 8009b8e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	f200 84c8 	bhi.w	800a528 <_strtod_l+0xb88>
 8009b98:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ba0:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ba2:	3a30      	subs	r2, #48	@ 0x30
 8009ba4:	f100 0301 	add.w	r3, r0, #1
 8009ba8:	d018      	beq.n	8009bdc <_strtod_l+0x23c>
 8009baa:	462e      	mov	r6, r5
 8009bac:	f04f 0e0a 	mov.w	lr, #10
 8009bb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bb2:	4419      	add	r1, r3
 8009bb4:	910a      	str	r1, [sp, #40]	@ 0x28
 8009bb6:	1c71      	adds	r1, r6, #1
 8009bb8:	eba1 0c05 	sub.w	ip, r1, r5
 8009bbc:	4563      	cmp	r3, ip
 8009bbe:	dc15      	bgt.n	8009bec <_strtod_l+0x24c>
 8009bc0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009bc4:	182b      	adds	r3, r5, r0
 8009bc6:	2b08      	cmp	r3, #8
 8009bc8:	f105 0501 	add.w	r5, r5, #1
 8009bcc:	4405      	add	r5, r0
 8009bce:	dc1a      	bgt.n	8009c06 <_strtod_l+0x266>
 8009bd0:	230a      	movs	r3, #10
 8009bd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009bd4:	fb03 2301 	mla	r3, r3, r1, r2
 8009bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bda:	2300      	movs	r3, #0
 8009bdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009bde:	4618      	mov	r0, r3
 8009be0:	1c51      	adds	r1, r2, #1
 8009be2:	9119      	str	r1, [sp, #100]	@ 0x64
 8009be4:	7852      	ldrb	r2, [r2, #1]
 8009be6:	e7c5      	b.n	8009b74 <_strtod_l+0x1d4>
 8009be8:	4648      	mov	r0, r9
 8009bea:	e7ce      	b.n	8009b8a <_strtod_l+0x1ea>
 8009bec:	2e08      	cmp	r6, #8
 8009bee:	dc05      	bgt.n	8009bfc <_strtod_l+0x25c>
 8009bf0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009bf2:	fb0e f606 	mul.w	r6, lr, r6
 8009bf6:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009bf8:	460e      	mov	r6, r1
 8009bfa:	e7dc      	b.n	8009bb6 <_strtod_l+0x216>
 8009bfc:	2910      	cmp	r1, #16
 8009bfe:	bfd8      	it	le
 8009c00:	fb0e f707 	mulle.w	r7, lr, r7
 8009c04:	e7f8      	b.n	8009bf8 <_strtod_l+0x258>
 8009c06:	2b0f      	cmp	r3, #15
 8009c08:	bfdc      	itt	le
 8009c0a:	230a      	movle	r3, #10
 8009c0c:	fb03 2707 	mlale	r7, r3, r7, r2
 8009c10:	e7e3      	b.n	8009bda <_strtod_l+0x23a>
 8009c12:	2300      	movs	r3, #0
 8009c14:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c16:	2301      	movs	r3, #1
 8009c18:	e77a      	b.n	8009b10 <_strtod_l+0x170>
 8009c1a:	f04f 0c00 	mov.w	ip, #0
 8009c1e:	1ca2      	adds	r2, r4, #2
 8009c20:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c22:	78a2      	ldrb	r2, [r4, #2]
 8009c24:	e782      	b.n	8009b2c <_strtod_l+0x18c>
 8009c26:	f04f 0c01 	mov.w	ip, #1
 8009c2a:	e7f8      	b.n	8009c1e <_strtod_l+0x27e>
 8009c2c:	0800caec 	.word	0x0800caec
 8009c30:	7ff00000 	.word	0x7ff00000
 8009c34:	0800c972 	.word	0x0800c972
 8009c38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c3a:	1c51      	adds	r1, r2, #1
 8009c3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c3e:	7852      	ldrb	r2, [r2, #1]
 8009c40:	2a30      	cmp	r2, #48	@ 0x30
 8009c42:	d0f9      	beq.n	8009c38 <_strtod_l+0x298>
 8009c44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009c48:	2908      	cmp	r1, #8
 8009c4a:	f63f af75 	bhi.w	8009b38 <_strtod_l+0x198>
 8009c4e:	f04f 080a 	mov.w	r8, #10
 8009c52:	3a30      	subs	r2, #48	@ 0x30
 8009c54:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c56:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c58:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009c5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c5c:	1c56      	adds	r6, r2, #1
 8009c5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009c60:	7852      	ldrb	r2, [r2, #1]
 8009c62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009c66:	f1be 0f09 	cmp.w	lr, #9
 8009c6a:	d939      	bls.n	8009ce0 <_strtod_l+0x340>
 8009c6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009c6e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009c72:	1a76      	subs	r6, r6, r1
 8009c74:	2e08      	cmp	r6, #8
 8009c76:	dc03      	bgt.n	8009c80 <_strtod_l+0x2e0>
 8009c78:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009c7a:	4588      	cmp	r8, r1
 8009c7c:	bfa8      	it	ge
 8009c7e:	4688      	movge	r8, r1
 8009c80:	f1bc 0f00 	cmp.w	ip, #0
 8009c84:	d001      	beq.n	8009c8a <_strtod_l+0x2ea>
 8009c86:	f1c8 0800 	rsb	r8, r8, #0
 8009c8a:	2d00      	cmp	r5, #0
 8009c8c:	d14e      	bne.n	8009d2c <_strtod_l+0x38c>
 8009c8e:	9908      	ldr	r1, [sp, #32]
 8009c90:	4308      	orrs	r0, r1
 8009c92:	f47f aebe 	bne.w	8009a12 <_strtod_l+0x72>
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f47f aed4 	bne.w	8009a44 <_strtod_l+0xa4>
 8009c9c:	2a69      	cmp	r2, #105	@ 0x69
 8009c9e:	d028      	beq.n	8009cf2 <_strtod_l+0x352>
 8009ca0:	dc25      	bgt.n	8009cee <_strtod_l+0x34e>
 8009ca2:	2a49      	cmp	r2, #73	@ 0x49
 8009ca4:	d025      	beq.n	8009cf2 <_strtod_l+0x352>
 8009ca6:	2a4e      	cmp	r2, #78	@ 0x4e
 8009ca8:	f47f aecc 	bne.w	8009a44 <_strtod_l+0xa4>
 8009cac:	4999      	ldr	r1, [pc, #612]	@ (8009f14 <_strtod_l+0x574>)
 8009cae:	a819      	add	r0, sp, #100	@ 0x64
 8009cb0:	f001 f8d4 	bl	800ae5c <__match>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	f43f aec5 	beq.w	8009a44 <_strtod_l+0xa4>
 8009cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b28      	cmp	r3, #40	@ 0x28
 8009cc0:	d12e      	bne.n	8009d20 <_strtod_l+0x380>
 8009cc2:	4995      	ldr	r1, [pc, #596]	@ (8009f18 <_strtod_l+0x578>)
 8009cc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8009cc6:	a819      	add	r0, sp, #100	@ 0x64
 8009cc8:	f001 f8dc 	bl	800ae84 <__hexnan>
 8009ccc:	2805      	cmp	r0, #5
 8009cce:	d127      	bne.n	8009d20 <_strtod_l+0x380>
 8009cd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009cd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009cd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009cda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009cde:	e698      	b.n	8009a12 <_strtod_l+0x72>
 8009ce0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ce2:	fb08 2101 	mla	r1, r8, r1, r2
 8009ce6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009cea:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cec:	e7b5      	b.n	8009c5a <_strtod_l+0x2ba>
 8009cee:	2a6e      	cmp	r2, #110	@ 0x6e
 8009cf0:	e7da      	b.n	8009ca8 <_strtod_l+0x308>
 8009cf2:	498a      	ldr	r1, [pc, #552]	@ (8009f1c <_strtod_l+0x57c>)
 8009cf4:	a819      	add	r0, sp, #100	@ 0x64
 8009cf6:	f001 f8b1 	bl	800ae5c <__match>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	f43f aea2 	beq.w	8009a44 <_strtod_l+0xa4>
 8009d00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d02:	4987      	ldr	r1, [pc, #540]	@ (8009f20 <_strtod_l+0x580>)
 8009d04:	3b01      	subs	r3, #1
 8009d06:	a819      	add	r0, sp, #100	@ 0x64
 8009d08:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d0a:	f001 f8a7 	bl	800ae5c <__match>
 8009d0e:	b910      	cbnz	r0, 8009d16 <_strtod_l+0x376>
 8009d10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d12:	3301      	adds	r3, #1
 8009d14:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d16:	f04f 0a00 	mov.w	sl, #0
 8009d1a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8009f24 <_strtod_l+0x584>
 8009d1e:	e678      	b.n	8009a12 <_strtod_l+0x72>
 8009d20:	4881      	ldr	r0, [pc, #516]	@ (8009f28 <_strtod_l+0x588>)
 8009d22:	f000 fdc3 	bl	800a8ac <nan>
 8009d26:	4682      	mov	sl, r0
 8009d28:	468b      	mov	fp, r1
 8009d2a:	e672      	b.n	8009a12 <_strtod_l+0x72>
 8009d2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d2e:	f1b9 0f00 	cmp.w	r9, #0
 8009d32:	bf08      	it	eq
 8009d34:	46a9      	moveq	r9, r5
 8009d36:	eba8 0303 	sub.w	r3, r8, r3
 8009d3a:	2d10      	cmp	r5, #16
 8009d3c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009d3e:	462c      	mov	r4, r5
 8009d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d42:	bfa8      	it	ge
 8009d44:	2410      	movge	r4, #16
 8009d46:	f7f6 fb4d 	bl	80003e4 <__aeabi_ui2d>
 8009d4a:	2d09      	cmp	r5, #9
 8009d4c:	4682      	mov	sl, r0
 8009d4e:	468b      	mov	fp, r1
 8009d50:	dc11      	bgt.n	8009d76 <_strtod_l+0x3d6>
 8009d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f43f ae5c 	beq.w	8009a12 <_strtod_l+0x72>
 8009d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d5c:	dd76      	ble.n	8009e4c <_strtod_l+0x4ac>
 8009d5e:	2b16      	cmp	r3, #22
 8009d60:	dc5d      	bgt.n	8009e1e <_strtod_l+0x47e>
 8009d62:	4972      	ldr	r1, [pc, #456]	@ (8009f2c <_strtod_l+0x58c>)
 8009d64:	4652      	mov	r2, sl
 8009d66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d6a:	465b      	mov	r3, fp
 8009d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d70:	f7f6 fbb2 	bl	80004d8 <__aeabi_dmul>
 8009d74:	e7d7      	b.n	8009d26 <_strtod_l+0x386>
 8009d76:	4b6d      	ldr	r3, [pc, #436]	@ (8009f2c <_strtod_l+0x58c>)
 8009d78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009d80:	f7f6 fbaa 	bl	80004d8 <__aeabi_dmul>
 8009d84:	4682      	mov	sl, r0
 8009d86:	4638      	mov	r0, r7
 8009d88:	468b      	mov	fp, r1
 8009d8a:	f7f6 fb2b 	bl	80003e4 <__aeabi_ui2d>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	4650      	mov	r0, sl
 8009d94:	4659      	mov	r1, fp
 8009d96:	f7f6 f9e9 	bl	800016c <__adddf3>
 8009d9a:	2d0f      	cmp	r5, #15
 8009d9c:	4682      	mov	sl, r0
 8009d9e:	468b      	mov	fp, r1
 8009da0:	ddd7      	ble.n	8009d52 <_strtod_l+0x3b2>
 8009da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da4:	1b2c      	subs	r4, r5, r4
 8009da6:	441c      	add	r4, r3
 8009da8:	2c00      	cmp	r4, #0
 8009daa:	f340 8093 	ble.w	8009ed4 <_strtod_l+0x534>
 8009dae:	f014 030f 	ands.w	r3, r4, #15
 8009db2:	d00a      	beq.n	8009dca <_strtod_l+0x42a>
 8009db4:	495d      	ldr	r1, [pc, #372]	@ (8009f2c <_strtod_l+0x58c>)
 8009db6:	4652      	mov	r2, sl
 8009db8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc0:	465b      	mov	r3, fp
 8009dc2:	f7f6 fb89 	bl	80004d8 <__aeabi_dmul>
 8009dc6:	4682      	mov	sl, r0
 8009dc8:	468b      	mov	fp, r1
 8009dca:	f034 040f 	bics.w	r4, r4, #15
 8009dce:	d073      	beq.n	8009eb8 <_strtod_l+0x518>
 8009dd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009dd4:	dd49      	ble.n	8009e6a <_strtod_l+0x4ca>
 8009dd6:	2400      	movs	r4, #0
 8009dd8:	46a0      	mov	r8, r4
 8009dda:	46a1      	mov	r9, r4
 8009ddc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009dde:	2322      	movs	r3, #34	@ 0x22
 8009de0:	f04f 0a00 	mov.w	sl, #0
 8009de4:	9a05      	ldr	r2, [sp, #20]
 8009de6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8009f24 <_strtod_l+0x584>
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f43f ae0f 	beq.w	8009a12 <_strtod_l+0x72>
 8009df4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009df6:	9805      	ldr	r0, [sp, #20]
 8009df8:	f001 f9e0 	bl	800b1bc <_Bfree>
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	9805      	ldr	r0, [sp, #20]
 8009e00:	f001 f9dc 	bl	800b1bc <_Bfree>
 8009e04:	4641      	mov	r1, r8
 8009e06:	9805      	ldr	r0, [sp, #20]
 8009e08:	f001 f9d8 	bl	800b1bc <_Bfree>
 8009e0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e0e:	9805      	ldr	r0, [sp, #20]
 8009e10:	f001 f9d4 	bl	800b1bc <_Bfree>
 8009e14:	4621      	mov	r1, r4
 8009e16:	9805      	ldr	r0, [sp, #20]
 8009e18:	f001 f9d0 	bl	800b1bc <_Bfree>
 8009e1c:	e5f9      	b.n	8009a12 <_strtod_l+0x72>
 8009e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009e24:	4293      	cmp	r3, r2
 8009e26:	dbbc      	blt.n	8009da2 <_strtod_l+0x402>
 8009e28:	4c40      	ldr	r4, [pc, #256]	@ (8009f2c <_strtod_l+0x58c>)
 8009e2a:	f1c5 050f 	rsb	r5, r5, #15
 8009e2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e32:	4652      	mov	r2, sl
 8009e34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e38:	465b      	mov	r3, fp
 8009e3a:	f7f6 fb4d 	bl	80004d8 <__aeabi_dmul>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e40:	1b5d      	subs	r5, r3, r5
 8009e42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e4a:	e791      	b.n	8009d70 <_strtod_l+0x3d0>
 8009e4c:	3316      	adds	r3, #22
 8009e4e:	dba8      	blt.n	8009da2 <_strtod_l+0x402>
 8009e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e52:	4650      	mov	r0, sl
 8009e54:	eba3 0808 	sub.w	r8, r3, r8
 8009e58:	4b34      	ldr	r3, [pc, #208]	@ (8009f2c <_strtod_l+0x58c>)
 8009e5a:	4659      	mov	r1, fp
 8009e5c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009e60:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009e64:	f7f6 fc62 	bl	800072c <__aeabi_ddiv>
 8009e68:	e75d      	b.n	8009d26 <_strtod_l+0x386>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4650      	mov	r0, sl
 8009e6e:	4659      	mov	r1, fp
 8009e70:	461e      	mov	r6, r3
 8009e72:	4f2f      	ldr	r7, [pc, #188]	@ (8009f30 <_strtod_l+0x590>)
 8009e74:	1124      	asrs	r4, r4, #4
 8009e76:	2c01      	cmp	r4, #1
 8009e78:	dc21      	bgt.n	8009ebe <_strtod_l+0x51e>
 8009e7a:	b10b      	cbz	r3, 8009e80 <_strtod_l+0x4e0>
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	468b      	mov	fp, r1
 8009e80:	492b      	ldr	r1, [pc, #172]	@ (8009f30 <_strtod_l+0x590>)
 8009e82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009e86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009e8a:	4652      	mov	r2, sl
 8009e8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e90:	465b      	mov	r3, fp
 8009e92:	f7f6 fb21 	bl	80004d8 <__aeabi_dmul>
 8009e96:	4b23      	ldr	r3, [pc, #140]	@ (8009f24 <_strtod_l+0x584>)
 8009e98:	460a      	mov	r2, r1
 8009e9a:	400b      	ands	r3, r1
 8009e9c:	4925      	ldr	r1, [pc, #148]	@ (8009f34 <_strtod_l+0x594>)
 8009e9e:	4682      	mov	sl, r0
 8009ea0:	428b      	cmp	r3, r1
 8009ea2:	d898      	bhi.n	8009dd6 <_strtod_l+0x436>
 8009ea4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf86      	itte	hi
 8009eac:	f04f 3aff 	movhi.w	sl, #4294967295
 8009eb0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009f38 <_strtod_l+0x598>
 8009eb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009eb8:	2300      	movs	r3, #0
 8009eba:	9308      	str	r3, [sp, #32]
 8009ebc:	e076      	b.n	8009fac <_strtod_l+0x60c>
 8009ebe:	07e2      	lsls	r2, r4, #31
 8009ec0:	d504      	bpl.n	8009ecc <_strtod_l+0x52c>
 8009ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec6:	f7f6 fb07 	bl	80004d8 <__aeabi_dmul>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	3601      	adds	r6, #1
 8009ece:	1064      	asrs	r4, r4, #1
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	e7d0      	b.n	8009e76 <_strtod_l+0x4d6>
 8009ed4:	d0f0      	beq.n	8009eb8 <_strtod_l+0x518>
 8009ed6:	4264      	negs	r4, r4
 8009ed8:	f014 020f 	ands.w	r2, r4, #15
 8009edc:	d00a      	beq.n	8009ef4 <_strtod_l+0x554>
 8009ede:	4b13      	ldr	r3, [pc, #76]	@ (8009f2c <_strtod_l+0x58c>)
 8009ee0:	4650      	mov	r0, sl
 8009ee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ee6:	4659      	mov	r1, fp
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	f7f6 fc1e 	bl	800072c <__aeabi_ddiv>
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	468b      	mov	fp, r1
 8009ef4:	1124      	asrs	r4, r4, #4
 8009ef6:	d0df      	beq.n	8009eb8 <_strtod_l+0x518>
 8009ef8:	2c1f      	cmp	r4, #31
 8009efa:	dd1f      	ble.n	8009f3c <_strtod_l+0x59c>
 8009efc:	2400      	movs	r4, #0
 8009efe:	46a0      	mov	r8, r4
 8009f00:	46a1      	mov	r9, r4
 8009f02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f04:	2322      	movs	r3, #34	@ 0x22
 8009f06:	9a05      	ldr	r2, [sp, #20]
 8009f08:	f04f 0a00 	mov.w	sl, #0
 8009f0c:	f04f 0b00 	mov.w	fp, #0
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	e76b      	b.n	8009dec <_strtod_l+0x44c>
 8009f14:	0800c97d 	.word	0x0800c97d
 8009f18:	0800cad8 	.word	0x0800cad8
 8009f1c:	0800c974 	.word	0x0800c974
 8009f20:	0800c977 	.word	0x0800c977
 8009f24:	7ff00000 	.word	0x7ff00000
 8009f28:	0800caa4 	.word	0x0800caa4
 8009f2c:	0800cb60 	.word	0x0800cb60
 8009f30:	0800cb38 	.word	0x0800cb38
 8009f34:	7ca00000 	.word	0x7ca00000
 8009f38:	7fefffff 	.word	0x7fefffff
 8009f3c:	f014 0310 	ands.w	r3, r4, #16
 8009f40:	bf18      	it	ne
 8009f42:	236a      	movne	r3, #106	@ 0x6a
 8009f44:	4650      	mov	r0, sl
 8009f46:	9308      	str	r3, [sp, #32]
 8009f48:	4659      	mov	r1, fp
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	4e77      	ldr	r6, [pc, #476]	@ (800a12c <_strtod_l+0x78c>)
 8009f4e:	07e7      	lsls	r7, r4, #31
 8009f50:	d504      	bpl.n	8009f5c <_strtod_l+0x5bc>
 8009f52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f56:	f7f6 fabf 	bl	80004d8 <__aeabi_dmul>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	1064      	asrs	r4, r4, #1
 8009f5e:	f106 0608 	add.w	r6, r6, #8
 8009f62:	d1f4      	bne.n	8009f4e <_strtod_l+0x5ae>
 8009f64:	b10b      	cbz	r3, 8009f6a <_strtod_l+0x5ca>
 8009f66:	4682      	mov	sl, r0
 8009f68:	468b      	mov	fp, r1
 8009f6a:	9b08      	ldr	r3, [sp, #32]
 8009f6c:	b1b3      	cbz	r3, 8009f9c <_strtod_l+0x5fc>
 8009f6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009f72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	4659      	mov	r1, fp
 8009f7a:	dd0f      	ble.n	8009f9c <_strtod_l+0x5fc>
 8009f7c:	2b1f      	cmp	r3, #31
 8009f7e:	dd58      	ble.n	800a032 <_strtod_l+0x692>
 8009f80:	2b34      	cmp	r3, #52	@ 0x34
 8009f82:	bfd8      	it	le
 8009f84:	f04f 33ff 	movle.w	r3, #4294967295
 8009f88:	f04f 0a00 	mov.w	sl, #0
 8009f8c:	bfcf      	iteee	gt
 8009f8e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009f92:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009f96:	4093      	lslle	r3, r2
 8009f98:	ea03 0b01 	andle.w	fp, r3, r1
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	4650      	mov	r0, sl
 8009fa2:	4659      	mov	r1, fp
 8009fa4:	f7f6 fd00 	bl	80009a8 <__aeabi_dcmpeq>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d1a7      	bne.n	8009efc <_strtod_l+0x55c>
 8009fac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fae:	464a      	mov	r2, r9
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	9805      	ldr	r0, [sp, #20]
 8009fb8:	f001 f968 	bl	800b28c <__s2b>
 8009fbc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	f43f af09 	beq.w	8009dd6 <_strtod_l+0x436>
 8009fc4:	2400      	movs	r4, #0
 8009fc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fca:	2a00      	cmp	r2, #0
 8009fcc:	eba3 0308 	sub.w	r3, r3, r8
 8009fd0:	bfa8      	it	ge
 8009fd2:	2300      	movge	r3, #0
 8009fd4:	46a0      	mov	r8, r4
 8009fd6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009fd8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009fdc:	9316      	str	r3, [sp, #88]	@ 0x58
 8009fde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fe0:	9805      	ldr	r0, [sp, #20]
 8009fe2:	6859      	ldr	r1, [r3, #4]
 8009fe4:	f001 f8aa 	bl	800b13c <_Balloc>
 8009fe8:	4681      	mov	r9, r0
 8009fea:	2800      	cmp	r0, #0
 8009fec:	f43f aef7 	beq.w	8009dde <_strtod_l+0x43e>
 8009ff0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ff2:	300c      	adds	r0, #12
 8009ff4:	691a      	ldr	r2, [r3, #16]
 8009ff6:	f103 010c 	add.w	r1, r3, #12
 8009ffa:	3202      	adds	r2, #2
 8009ffc:	0092      	lsls	r2, r2, #2
 8009ffe:	f000 fc46 	bl	800a88e <memcpy>
 800a002:	ab1c      	add	r3, sp, #112	@ 0x70
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a008:	9300      	str	r3, [sp, #0]
 800a00a:	4652      	mov	r2, sl
 800a00c:	465b      	mov	r3, fp
 800a00e:	9805      	ldr	r0, [sp, #20]
 800a010:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a014:	f001 fc66 	bl	800b8e4 <__d2b>
 800a018:	901a      	str	r0, [sp, #104]	@ 0x68
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f43f aedf 	beq.w	8009dde <_strtod_l+0x43e>
 800a020:	2101      	movs	r1, #1
 800a022:	9805      	ldr	r0, [sp, #20]
 800a024:	f001 f9c8 	bl	800b3b8 <__i2b>
 800a028:	4680      	mov	r8, r0
 800a02a:	b948      	cbnz	r0, 800a040 <_strtod_l+0x6a0>
 800a02c:	f04f 0800 	mov.w	r8, #0
 800a030:	e6d5      	b.n	8009dde <_strtod_l+0x43e>
 800a032:	f04f 32ff 	mov.w	r2, #4294967295
 800a036:	fa02 f303 	lsl.w	r3, r2, r3
 800a03a:	ea03 0a0a 	and.w	sl, r3, sl
 800a03e:	e7ad      	b.n	8009f9c <_strtod_l+0x5fc>
 800a040:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a042:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a044:	2d00      	cmp	r5, #0
 800a046:	bfab      	itete	ge
 800a048:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a04a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a04c:	18ef      	addge	r7, r5, r3
 800a04e:	1b5e      	sublt	r6, r3, r5
 800a050:	9b08      	ldr	r3, [sp, #32]
 800a052:	bfa8      	it	ge
 800a054:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a056:	eba5 0503 	sub.w	r5, r5, r3
 800a05a:	4415      	add	r5, r2
 800a05c:	4b34      	ldr	r3, [pc, #208]	@ (800a130 <_strtod_l+0x790>)
 800a05e:	f105 35ff 	add.w	r5, r5, #4294967295
 800a062:	bfb8      	it	lt
 800a064:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a066:	429d      	cmp	r5, r3
 800a068:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a06c:	da50      	bge.n	800a110 <_strtod_l+0x770>
 800a06e:	1b5b      	subs	r3, r3, r5
 800a070:	2b1f      	cmp	r3, #31
 800a072:	f04f 0101 	mov.w	r1, #1
 800a076:	eba2 0203 	sub.w	r2, r2, r3
 800a07a:	dc3d      	bgt.n	800a0f8 <_strtod_l+0x758>
 800a07c:	fa01 f303 	lsl.w	r3, r1, r3
 800a080:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a082:	2300      	movs	r3, #0
 800a084:	9310      	str	r3, [sp, #64]	@ 0x40
 800a086:	18bd      	adds	r5, r7, r2
 800a088:	9b08      	ldr	r3, [sp, #32]
 800a08a:	42af      	cmp	r7, r5
 800a08c:	4416      	add	r6, r2
 800a08e:	441e      	add	r6, r3
 800a090:	463b      	mov	r3, r7
 800a092:	bfa8      	it	ge
 800a094:	462b      	movge	r3, r5
 800a096:	42b3      	cmp	r3, r6
 800a098:	bfa8      	it	ge
 800a09a:	4633      	movge	r3, r6
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	bfc2      	ittt	gt
 800a0a0:	1aed      	subgt	r5, r5, r3
 800a0a2:	1af6      	subgt	r6, r6, r3
 800a0a4:	1aff      	subgt	r7, r7, r3
 800a0a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dd16      	ble.n	800a0da <_strtod_l+0x73a>
 800a0ac:	4641      	mov	r1, r8
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	9805      	ldr	r0, [sp, #20]
 800a0b2:	f001 fa39 	bl	800b528 <__pow5mult>
 800a0b6:	4680      	mov	r8, r0
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d0b7      	beq.n	800a02c <_strtod_l+0x68c>
 800a0bc:	4601      	mov	r1, r0
 800a0be:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a0c0:	9805      	ldr	r0, [sp, #20]
 800a0c2:	f001 f98f 	bl	800b3e4 <__multiply>
 800a0c6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f43f ae88 	beq.w	8009dde <_strtod_l+0x43e>
 800a0ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a0d0:	9805      	ldr	r0, [sp, #20]
 800a0d2:	f001 f873 	bl	800b1bc <_Bfree>
 800a0d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0d8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0da:	2d00      	cmp	r5, #0
 800a0dc:	dc1d      	bgt.n	800a11a <_strtod_l+0x77a>
 800a0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	dd27      	ble.n	800a134 <_strtod_l+0x794>
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a0e8:	9805      	ldr	r0, [sp, #20]
 800a0ea:	f001 fa1d 	bl	800b528 <__pow5mult>
 800a0ee:	4681      	mov	r9, r0
 800a0f0:	bb00      	cbnz	r0, 800a134 <_strtod_l+0x794>
 800a0f2:	f04f 0900 	mov.w	r9, #0
 800a0f6:	e672      	b.n	8009dde <_strtod_l+0x43e>
 800a0f8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a0fc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a100:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a104:	35e2      	adds	r5, #226	@ 0xe2
 800a106:	fa01 f305 	lsl.w	r3, r1, r5
 800a10a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a10c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a10e:	e7ba      	b.n	800a086 <_strtod_l+0x6e6>
 800a110:	2300      	movs	r3, #0
 800a112:	9310      	str	r3, [sp, #64]	@ 0x40
 800a114:	2301      	movs	r3, #1
 800a116:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a118:	e7b5      	b.n	800a086 <_strtod_l+0x6e6>
 800a11a:	462a      	mov	r2, r5
 800a11c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a11e:	9805      	ldr	r0, [sp, #20]
 800a120:	f001 fa5c 	bl	800b5dc <__lshift>
 800a124:	901a      	str	r0, [sp, #104]	@ 0x68
 800a126:	2800      	cmp	r0, #0
 800a128:	d1d9      	bne.n	800a0de <_strtod_l+0x73e>
 800a12a:	e658      	b.n	8009dde <_strtod_l+0x43e>
 800a12c:	0800cb00 	.word	0x0800cb00
 800a130:	fffffc02 	.word	0xfffffc02
 800a134:	2e00      	cmp	r6, #0
 800a136:	dd07      	ble.n	800a148 <_strtod_l+0x7a8>
 800a138:	4649      	mov	r1, r9
 800a13a:	4632      	mov	r2, r6
 800a13c:	9805      	ldr	r0, [sp, #20]
 800a13e:	f001 fa4d 	bl	800b5dc <__lshift>
 800a142:	4681      	mov	r9, r0
 800a144:	2800      	cmp	r0, #0
 800a146:	d0d4      	beq.n	800a0f2 <_strtod_l+0x752>
 800a148:	2f00      	cmp	r7, #0
 800a14a:	dd08      	ble.n	800a15e <_strtod_l+0x7be>
 800a14c:	4641      	mov	r1, r8
 800a14e:	463a      	mov	r2, r7
 800a150:	9805      	ldr	r0, [sp, #20]
 800a152:	f001 fa43 	bl	800b5dc <__lshift>
 800a156:	4680      	mov	r8, r0
 800a158:	2800      	cmp	r0, #0
 800a15a:	f43f ae40 	beq.w	8009dde <_strtod_l+0x43e>
 800a15e:	464a      	mov	r2, r9
 800a160:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a162:	9805      	ldr	r0, [sp, #20]
 800a164:	f001 fac2 	bl	800b6ec <__mdiff>
 800a168:	4604      	mov	r4, r0
 800a16a:	2800      	cmp	r0, #0
 800a16c:	f43f ae37 	beq.w	8009dde <_strtod_l+0x43e>
 800a170:	68c3      	ldr	r3, [r0, #12]
 800a172:	4641      	mov	r1, r8
 800a174:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a176:	2300      	movs	r3, #0
 800a178:	60c3      	str	r3, [r0, #12]
 800a17a:	f001 fa9b 	bl	800b6b4 <__mcmp>
 800a17e:	2800      	cmp	r0, #0
 800a180:	da3d      	bge.n	800a1fe <_strtod_l+0x85e>
 800a182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a184:	ea53 030a 	orrs.w	r3, r3, sl
 800a188:	d163      	bne.n	800a252 <_strtod_l+0x8b2>
 800a18a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d15f      	bne.n	800a252 <_strtod_l+0x8b2>
 800a192:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a196:	0d1b      	lsrs	r3, r3, #20
 800a198:	051b      	lsls	r3, r3, #20
 800a19a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a19e:	d958      	bls.n	800a252 <_strtod_l+0x8b2>
 800a1a0:	6963      	ldr	r3, [r4, #20]
 800a1a2:	b913      	cbnz	r3, 800a1aa <_strtod_l+0x80a>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	dd53      	ble.n	800a252 <_strtod_l+0x8b2>
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	9805      	ldr	r0, [sp, #20]
 800a1b0:	f001 fa14 	bl	800b5dc <__lshift>
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	f001 fa7c 	bl	800b6b4 <__mcmp>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	dd48      	ble.n	800a252 <_strtod_l+0x8b2>
 800a1c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1c4:	9a08      	ldr	r2, [sp, #32]
 800a1c6:	0d1b      	lsrs	r3, r3, #20
 800a1c8:	051b      	lsls	r3, r3, #20
 800a1ca:	2a00      	cmp	r2, #0
 800a1cc:	d062      	beq.n	800a294 <_strtod_l+0x8f4>
 800a1ce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a1d2:	d85f      	bhi.n	800a294 <_strtod_l+0x8f4>
 800a1d4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a1d8:	f67f ae94 	bls.w	8009f04 <_strtod_l+0x564>
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	4ba3      	ldr	r3, [pc, #652]	@ (800a470 <_strtod_l+0xad0>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f7f6 f978 	bl	80004d8 <__aeabi_dmul>
 800a1e8:	4ba2      	ldr	r3, [pc, #648]	@ (800a474 <_strtod_l+0xad4>)
 800a1ea:	4682      	mov	sl, r0
 800a1ec:	400b      	ands	r3, r1
 800a1ee:	468b      	mov	fp, r1
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f47f adff 	bne.w	8009df4 <_strtod_l+0x454>
 800a1f6:	2322      	movs	r3, #34	@ 0x22
 800a1f8:	9a05      	ldr	r2, [sp, #20]
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	e5fa      	b.n	8009df4 <_strtod_l+0x454>
 800a1fe:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a202:	d165      	bne.n	800a2d0 <_strtod_l+0x930>
 800a204:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a206:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a20a:	b35a      	cbz	r2, 800a264 <_strtod_l+0x8c4>
 800a20c:	4a9a      	ldr	r2, [pc, #616]	@ (800a478 <_strtod_l+0xad8>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d12b      	bne.n	800a26a <_strtod_l+0x8ca>
 800a212:	9b08      	ldr	r3, [sp, #32]
 800a214:	4651      	mov	r1, sl
 800a216:	b303      	cbz	r3, 800a25a <_strtod_l+0x8ba>
 800a218:	465a      	mov	r2, fp
 800a21a:	4b96      	ldr	r3, [pc, #600]	@ (800a474 <_strtod_l+0xad4>)
 800a21c:	4013      	ands	r3, r2
 800a21e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a222:	f04f 32ff 	mov.w	r2, #4294967295
 800a226:	d81b      	bhi.n	800a260 <_strtod_l+0x8c0>
 800a228:	0d1b      	lsrs	r3, r3, #20
 800a22a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	4299      	cmp	r1, r3
 800a234:	d119      	bne.n	800a26a <_strtod_l+0x8ca>
 800a236:	4b91      	ldr	r3, [pc, #580]	@ (800a47c <_strtod_l+0xadc>)
 800a238:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d102      	bne.n	800a244 <_strtod_l+0x8a4>
 800a23e:	3101      	adds	r1, #1
 800a240:	f43f adcd 	beq.w	8009dde <_strtod_l+0x43e>
 800a244:	f04f 0a00 	mov.w	sl, #0
 800a248:	4b8a      	ldr	r3, [pc, #552]	@ (800a474 <_strtod_l+0xad4>)
 800a24a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a24c:	401a      	ands	r2, r3
 800a24e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a252:	9b08      	ldr	r3, [sp, #32]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1c1      	bne.n	800a1dc <_strtod_l+0x83c>
 800a258:	e5cc      	b.n	8009df4 <_strtod_l+0x454>
 800a25a:	f04f 33ff 	mov.w	r3, #4294967295
 800a25e:	e7e8      	b.n	800a232 <_strtod_l+0x892>
 800a260:	4613      	mov	r3, r2
 800a262:	e7e6      	b.n	800a232 <_strtod_l+0x892>
 800a264:	ea53 030a 	orrs.w	r3, r3, sl
 800a268:	d0aa      	beq.n	800a1c0 <_strtod_l+0x820>
 800a26a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a26c:	b1db      	cbz	r3, 800a2a6 <_strtod_l+0x906>
 800a26e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a270:	4213      	tst	r3, r2
 800a272:	d0ee      	beq.n	800a252 <_strtod_l+0x8b2>
 800a274:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a276:	4650      	mov	r0, sl
 800a278:	4659      	mov	r1, fp
 800a27a:	9a08      	ldr	r2, [sp, #32]
 800a27c:	b1bb      	cbz	r3, 800a2ae <_strtod_l+0x90e>
 800a27e:	f7ff fb6c 	bl	800995a <sulp>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a28a:	f7f5 ff6f 	bl	800016c <__adddf3>
 800a28e:	4682      	mov	sl, r0
 800a290:	468b      	mov	fp, r1
 800a292:	e7de      	b.n	800a252 <_strtod_l+0x8b2>
 800a294:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a298:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a29c:	f04f 3aff 	mov.w	sl, #4294967295
 800a2a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2a4:	e7d5      	b.n	800a252 <_strtod_l+0x8b2>
 800a2a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2a8:	ea13 0f0a 	tst.w	r3, sl
 800a2ac:	e7e1      	b.n	800a272 <_strtod_l+0x8d2>
 800a2ae:	f7ff fb54 	bl	800995a <sulp>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2ba:	f7f5 ff55 	bl	8000168 <__aeabi_dsub>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	4682      	mov	sl, r0
 800a2c4:	468b      	mov	fp, r1
 800a2c6:	f7f6 fb6f 	bl	80009a8 <__aeabi_dcmpeq>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d0c1      	beq.n	800a252 <_strtod_l+0x8b2>
 800a2ce:	e619      	b.n	8009f04 <_strtod_l+0x564>
 800a2d0:	4641      	mov	r1, r8
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f001 fb5e 	bl	800b994 <__ratio>
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a2de:	4606      	mov	r6, r0
 800a2e0:	460f      	mov	r7, r1
 800a2e2:	f7f6 fb75 	bl	80009d0 <__aeabi_dcmple>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d06d      	beq.n	800a3c6 <_strtod_l+0xa26>
 800a2ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d178      	bne.n	800a3e2 <_strtod_l+0xa42>
 800a2f0:	f1ba 0f00 	cmp.w	sl, #0
 800a2f4:	d156      	bne.n	800a3a4 <_strtod_l+0xa04>
 800a2f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d158      	bne.n	800a3b2 <_strtod_l+0xa12>
 800a300:	2200      	movs	r2, #0
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	4b5e      	ldr	r3, [pc, #376]	@ (800a480 <_strtod_l+0xae0>)
 800a308:	f7f6 fb58 	bl	80009bc <__aeabi_dcmplt>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d157      	bne.n	800a3c0 <_strtod_l+0xa20>
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	2200      	movs	r2, #0
 800a316:	4b5b      	ldr	r3, [pc, #364]	@ (800a484 <_strtod_l+0xae4>)
 800a318:	f7f6 f8de 	bl	80004d8 <__aeabi_dmul>
 800a31c:	4606      	mov	r6, r0
 800a31e:	460f      	mov	r7, r1
 800a320:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a324:	9606      	str	r6, [sp, #24]
 800a326:	9307      	str	r3, [sp, #28]
 800a328:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a32c:	4d51      	ldr	r5, [pc, #324]	@ (800a474 <_strtod_l+0xad4>)
 800a32e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a332:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a334:	401d      	ands	r5, r3
 800a336:	4b54      	ldr	r3, [pc, #336]	@ (800a488 <_strtod_l+0xae8>)
 800a338:	429d      	cmp	r5, r3
 800a33a:	f040 80ab 	bne.w	800a494 <_strtod_l+0xaf4>
 800a33e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a340:	4650      	mov	r0, sl
 800a342:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a346:	4659      	mov	r1, fp
 800a348:	f001 fa64 	bl	800b814 <__ulp>
 800a34c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a350:	f7f6 f8c2 	bl	80004d8 <__aeabi_dmul>
 800a354:	4652      	mov	r2, sl
 800a356:	465b      	mov	r3, fp
 800a358:	f7f5 ff08 	bl	800016c <__adddf3>
 800a35c:	460b      	mov	r3, r1
 800a35e:	4945      	ldr	r1, [pc, #276]	@ (800a474 <_strtod_l+0xad4>)
 800a360:	4a4a      	ldr	r2, [pc, #296]	@ (800a48c <_strtod_l+0xaec>)
 800a362:	4019      	ands	r1, r3
 800a364:	4291      	cmp	r1, r2
 800a366:	4682      	mov	sl, r0
 800a368:	d942      	bls.n	800a3f0 <_strtod_l+0xa50>
 800a36a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a36c:	4b43      	ldr	r3, [pc, #268]	@ (800a47c <_strtod_l+0xadc>)
 800a36e:	429a      	cmp	r2, r3
 800a370:	d103      	bne.n	800a37a <_strtod_l+0x9da>
 800a372:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a374:	3301      	adds	r3, #1
 800a376:	f43f ad32 	beq.w	8009dde <_strtod_l+0x43e>
 800a37a:	f04f 3aff 	mov.w	sl, #4294967295
 800a37e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800a47c <_strtod_l+0xadc>
 800a382:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a384:	9805      	ldr	r0, [sp, #20]
 800a386:	f000 ff19 	bl	800b1bc <_Bfree>
 800a38a:	4649      	mov	r1, r9
 800a38c:	9805      	ldr	r0, [sp, #20]
 800a38e:	f000 ff15 	bl	800b1bc <_Bfree>
 800a392:	4641      	mov	r1, r8
 800a394:	9805      	ldr	r0, [sp, #20]
 800a396:	f000 ff11 	bl	800b1bc <_Bfree>
 800a39a:	4621      	mov	r1, r4
 800a39c:	9805      	ldr	r0, [sp, #20]
 800a39e:	f000 ff0d 	bl	800b1bc <_Bfree>
 800a3a2:	e61c      	b.n	8009fde <_strtod_l+0x63e>
 800a3a4:	f1ba 0f01 	cmp.w	sl, #1
 800a3a8:	d103      	bne.n	800a3b2 <_strtod_l+0xa12>
 800a3aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f43f ada9 	beq.w	8009f04 <_strtod_l+0x564>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4b36      	ldr	r3, [pc, #216]	@ (800a490 <_strtod_l+0xaf0>)
 800a3b6:	2600      	movs	r6, #0
 800a3b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3bc:	4f30      	ldr	r7, [pc, #192]	@ (800a480 <_strtod_l+0xae0>)
 800a3be:	e7b3      	b.n	800a328 <_strtod_l+0x988>
 800a3c0:	2600      	movs	r6, #0
 800a3c2:	4f30      	ldr	r7, [pc, #192]	@ (800a484 <_strtod_l+0xae4>)
 800a3c4:	e7ac      	b.n	800a320 <_strtod_l+0x980>
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	4b2e      	ldr	r3, [pc, #184]	@ (800a484 <_strtod_l+0xae4>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f7f6 f883 	bl	80004d8 <__aeabi_dmul>
 800a3d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d0a1      	beq.n	800a320 <_strtod_l+0x980>
 800a3dc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a3e0:	e7a2      	b.n	800a328 <_strtod_l+0x988>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	4b26      	ldr	r3, [pc, #152]	@ (800a480 <_strtod_l+0xae0>)
 800a3e6:	4616      	mov	r6, r2
 800a3e8:	461f      	mov	r7, r3
 800a3ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a3ee:	e79b      	b.n	800a328 <_strtod_l+0x988>
 800a3f0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a3f4:	9b08      	ldr	r3, [sp, #32]
 800a3f6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d1c1      	bne.n	800a382 <_strtod_l+0x9e2>
 800a3fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a402:	0d1b      	lsrs	r3, r3, #20
 800a404:	051b      	lsls	r3, r3, #20
 800a406:	429d      	cmp	r5, r3
 800a408:	d1bb      	bne.n	800a382 <_strtod_l+0x9e2>
 800a40a:	4630      	mov	r0, r6
 800a40c:	4639      	mov	r1, r7
 800a40e:	f7f6 fe87 	bl	8001120 <__aeabi_d2lz>
 800a412:	f7f6 f833 	bl	800047c <__aeabi_l2d>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4630      	mov	r0, r6
 800a41c:	4639      	mov	r1, r7
 800a41e:	f7f5 fea3 	bl	8000168 <__aeabi_dsub>
 800a422:	460b      	mov	r3, r1
 800a424:	4602      	mov	r2, r0
 800a426:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a42a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a42e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a430:	ea46 060a 	orr.w	r6, r6, sl
 800a434:	431e      	orrs	r6, r3
 800a436:	d06a      	beq.n	800a50e <_strtod_l+0xb6e>
 800a438:	a309      	add	r3, pc, #36	@ (adr r3, 800a460 <_strtod_l+0xac0>)
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	f7f6 fabd 	bl	80009bc <__aeabi_dcmplt>
 800a442:	2800      	cmp	r0, #0
 800a444:	f47f acd6 	bne.w	8009df4 <_strtod_l+0x454>
 800a448:	a307      	add	r3, pc, #28	@ (adr r3, 800a468 <_strtod_l+0xac8>)
 800a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a452:	f7f6 fad1 	bl	80009f8 <__aeabi_dcmpgt>
 800a456:	2800      	cmp	r0, #0
 800a458:	d093      	beq.n	800a382 <_strtod_l+0x9e2>
 800a45a:	e4cb      	b.n	8009df4 <_strtod_l+0x454>
 800a45c:	f3af 8000 	nop.w
 800a460:	94a03595 	.word	0x94a03595
 800a464:	3fdfffff 	.word	0x3fdfffff
 800a468:	35afe535 	.word	0x35afe535
 800a46c:	3fe00000 	.word	0x3fe00000
 800a470:	39500000 	.word	0x39500000
 800a474:	7ff00000 	.word	0x7ff00000
 800a478:	000fffff 	.word	0x000fffff
 800a47c:	7fefffff 	.word	0x7fefffff
 800a480:	3ff00000 	.word	0x3ff00000
 800a484:	3fe00000 	.word	0x3fe00000
 800a488:	7fe00000 	.word	0x7fe00000
 800a48c:	7c9fffff 	.word	0x7c9fffff
 800a490:	bff00000 	.word	0xbff00000
 800a494:	9b08      	ldr	r3, [sp, #32]
 800a496:	b323      	cbz	r3, 800a4e2 <_strtod_l+0xb42>
 800a498:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a49c:	d821      	bhi.n	800a4e2 <_strtod_l+0xb42>
 800a49e:	a328      	add	r3, pc, #160	@ (adr r3, 800a540 <_strtod_l+0xba0>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	f7f6 fa92 	bl	80009d0 <__aeabi_dcmple>
 800a4ac:	b1a0      	cbz	r0, 800a4d8 <_strtod_l+0xb38>
 800a4ae:	4639      	mov	r1, r7
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	f7f6 faab 	bl	8000a0c <__aeabi_d2uiz>
 800a4b6:	2801      	cmp	r0, #1
 800a4b8:	bf38      	it	cc
 800a4ba:	2001      	movcc	r0, #1
 800a4bc:	f7f5 ff92 	bl	80003e4 <__aeabi_ui2d>
 800a4c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	b9fb      	cbnz	r3, 800a508 <_strtod_l+0xb68>
 800a4c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a4cc:	9014      	str	r0, [sp, #80]	@ 0x50
 800a4ce:	9315      	str	r3, [sp, #84]	@ 0x54
 800a4d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a4d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a4d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a4de:	1b5b      	subs	r3, r3, r5
 800a4e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a4ea:	f001 f993 	bl	800b814 <__ulp>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	4659      	mov	r1, fp
 800a4f6:	f7f5 ffef 	bl	80004d8 <__aeabi_dmul>
 800a4fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a4fe:	f7f5 fe35 	bl	800016c <__adddf3>
 800a502:	4682      	mov	sl, r0
 800a504:	468b      	mov	fp, r1
 800a506:	e775      	b.n	800a3f4 <_strtod_l+0xa54>
 800a508:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a50c:	e7e0      	b.n	800a4d0 <_strtod_l+0xb30>
 800a50e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a548 <_strtod_l+0xba8>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f6 fa52 	bl	80009bc <__aeabi_dcmplt>
 800a518:	e79d      	b.n	800a456 <_strtod_l+0xab6>
 800a51a:	2300      	movs	r3, #0
 800a51c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a51e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a520:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a522:	6013      	str	r3, [r2, #0]
 800a524:	f7ff ba79 	b.w	8009a1a <_strtod_l+0x7a>
 800a528:	2a65      	cmp	r2, #101	@ 0x65
 800a52a:	f43f ab72 	beq.w	8009c12 <_strtod_l+0x272>
 800a52e:	2a45      	cmp	r2, #69	@ 0x45
 800a530:	f43f ab6f 	beq.w	8009c12 <_strtod_l+0x272>
 800a534:	2301      	movs	r3, #1
 800a536:	f7ff bbaa 	b.w	8009c8e <_strtod_l+0x2ee>
 800a53a:	bf00      	nop
 800a53c:	f3af 8000 	nop.w
 800a540:	ffc00000 	.word	0xffc00000
 800a544:	41dfffff 	.word	0x41dfffff
 800a548:	94a03595 	.word	0x94a03595
 800a54c:	3fcfffff 	.word	0x3fcfffff

0800a550 <strtod>:
 800a550:	460a      	mov	r2, r1
 800a552:	4601      	mov	r1, r0
 800a554:	4802      	ldr	r0, [pc, #8]	@ (800a560 <strtod+0x10>)
 800a556:	4b03      	ldr	r3, [pc, #12]	@ (800a564 <strtod+0x14>)
 800a558:	6800      	ldr	r0, [r0, #0]
 800a55a:	f7ff ba21 	b.w	80099a0 <_strtod_l>
 800a55e:	bf00      	nop
 800a560:	200001c8 	.word	0x200001c8
 800a564:	2000005c 	.word	0x2000005c

0800a568 <std>:
 800a568:	2300      	movs	r3, #0
 800a56a:	b510      	push	{r4, lr}
 800a56c:	4604      	mov	r4, r0
 800a56e:	e9c0 3300 	strd	r3, r3, [r0]
 800a572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a576:	6083      	str	r3, [r0, #8]
 800a578:	8181      	strh	r1, [r0, #12]
 800a57a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a57c:	81c2      	strh	r2, [r0, #14]
 800a57e:	6183      	str	r3, [r0, #24]
 800a580:	4619      	mov	r1, r3
 800a582:	2208      	movs	r2, #8
 800a584:	305c      	adds	r0, #92	@ 0x5c
 800a586:	f000 f8f4 	bl	800a772 <memset>
 800a58a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5c0 <std+0x58>)
 800a58c:	6224      	str	r4, [r4, #32]
 800a58e:	6263      	str	r3, [r4, #36]	@ 0x24
 800a590:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c4 <std+0x5c>)
 800a592:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a594:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c8 <std+0x60>)
 800a596:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a598:	4b0c      	ldr	r3, [pc, #48]	@ (800a5cc <std+0x64>)
 800a59a:	6323      	str	r3, [r4, #48]	@ 0x30
 800a59c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5d0 <std+0x68>)
 800a59e:	429c      	cmp	r4, r3
 800a5a0:	d006      	beq.n	800a5b0 <std+0x48>
 800a5a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a5a6:	4294      	cmp	r4, r2
 800a5a8:	d002      	beq.n	800a5b0 <std+0x48>
 800a5aa:	33d0      	adds	r3, #208	@ 0xd0
 800a5ac:	429c      	cmp	r4, r3
 800a5ae:	d105      	bne.n	800a5bc <std+0x54>
 800a5b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b8:	f000 b966 	b.w	800a888 <__retarget_lock_init_recursive>
 800a5bc:	bd10      	pop	{r4, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800a6ed 	.word	0x0800a6ed
 800a5c4:	0800a70f 	.word	0x0800a70f
 800a5c8:	0800a747 	.word	0x0800a747
 800a5cc:	0800a76b 	.word	0x0800a76b
 800a5d0:	20000974 	.word	0x20000974

0800a5d4 <stdio_exit_handler>:
 800a5d4:	4a02      	ldr	r2, [pc, #8]	@ (800a5e0 <stdio_exit_handler+0xc>)
 800a5d6:	4903      	ldr	r1, [pc, #12]	@ (800a5e4 <stdio_exit_handler+0x10>)
 800a5d8:	4803      	ldr	r0, [pc, #12]	@ (800a5e8 <stdio_exit_handler+0x14>)
 800a5da:	f000 b869 	b.w	800a6b0 <_fwalk_sglue>
 800a5de:	bf00      	nop
 800a5e0:	20000050 	.word	0x20000050
 800a5e4:	0800bb99 	.word	0x0800bb99
 800a5e8:	200001cc 	.word	0x200001cc

0800a5ec <cleanup_stdio>:
 800a5ec:	6841      	ldr	r1, [r0, #4]
 800a5ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a620 <cleanup_stdio+0x34>)
 800a5f0:	b510      	push	{r4, lr}
 800a5f2:	4299      	cmp	r1, r3
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	d001      	beq.n	800a5fc <cleanup_stdio+0x10>
 800a5f8:	f001 face 	bl	800bb98 <_fflush_r>
 800a5fc:	68a1      	ldr	r1, [r4, #8]
 800a5fe:	4b09      	ldr	r3, [pc, #36]	@ (800a624 <cleanup_stdio+0x38>)
 800a600:	4299      	cmp	r1, r3
 800a602:	d002      	beq.n	800a60a <cleanup_stdio+0x1e>
 800a604:	4620      	mov	r0, r4
 800a606:	f001 fac7 	bl	800bb98 <_fflush_r>
 800a60a:	68e1      	ldr	r1, [r4, #12]
 800a60c:	4b06      	ldr	r3, [pc, #24]	@ (800a628 <cleanup_stdio+0x3c>)
 800a60e:	4299      	cmp	r1, r3
 800a610:	d004      	beq.n	800a61c <cleanup_stdio+0x30>
 800a612:	4620      	mov	r0, r4
 800a614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a618:	f001 babe 	b.w	800bb98 <_fflush_r>
 800a61c:	bd10      	pop	{r4, pc}
 800a61e:	bf00      	nop
 800a620:	20000974 	.word	0x20000974
 800a624:	200009dc 	.word	0x200009dc
 800a628:	20000a44 	.word	0x20000a44

0800a62c <global_stdio_init.part.0>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	4b0b      	ldr	r3, [pc, #44]	@ (800a65c <global_stdio_init.part.0+0x30>)
 800a630:	4c0b      	ldr	r4, [pc, #44]	@ (800a660 <global_stdio_init.part.0+0x34>)
 800a632:	4a0c      	ldr	r2, [pc, #48]	@ (800a664 <global_stdio_init.part.0+0x38>)
 800a634:	4620      	mov	r0, r4
 800a636:	601a      	str	r2, [r3, #0]
 800a638:	2104      	movs	r1, #4
 800a63a:	2200      	movs	r2, #0
 800a63c:	f7ff ff94 	bl	800a568 <std>
 800a640:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a644:	2201      	movs	r2, #1
 800a646:	2109      	movs	r1, #9
 800a648:	f7ff ff8e 	bl	800a568 <std>
 800a64c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a650:	2202      	movs	r2, #2
 800a652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a656:	2112      	movs	r1, #18
 800a658:	f7ff bf86 	b.w	800a568 <std>
 800a65c:	20000aac 	.word	0x20000aac
 800a660:	20000974 	.word	0x20000974
 800a664:	0800a5d5 	.word	0x0800a5d5

0800a668 <__sfp_lock_acquire>:
 800a668:	4801      	ldr	r0, [pc, #4]	@ (800a670 <__sfp_lock_acquire+0x8>)
 800a66a:	f000 b90e 	b.w	800a88a <__retarget_lock_acquire_recursive>
 800a66e:	bf00      	nop
 800a670:	20000ab5 	.word	0x20000ab5

0800a674 <__sfp_lock_release>:
 800a674:	4801      	ldr	r0, [pc, #4]	@ (800a67c <__sfp_lock_release+0x8>)
 800a676:	f000 b909 	b.w	800a88c <__retarget_lock_release_recursive>
 800a67a:	bf00      	nop
 800a67c:	20000ab5 	.word	0x20000ab5

0800a680 <__sinit>:
 800a680:	b510      	push	{r4, lr}
 800a682:	4604      	mov	r4, r0
 800a684:	f7ff fff0 	bl	800a668 <__sfp_lock_acquire>
 800a688:	6a23      	ldr	r3, [r4, #32]
 800a68a:	b11b      	cbz	r3, 800a694 <__sinit+0x14>
 800a68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a690:	f7ff bff0 	b.w	800a674 <__sfp_lock_release>
 800a694:	4b04      	ldr	r3, [pc, #16]	@ (800a6a8 <__sinit+0x28>)
 800a696:	6223      	str	r3, [r4, #32]
 800a698:	4b04      	ldr	r3, [pc, #16]	@ (800a6ac <__sinit+0x2c>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f5      	bne.n	800a68c <__sinit+0xc>
 800a6a0:	f7ff ffc4 	bl	800a62c <global_stdio_init.part.0>
 800a6a4:	e7f2      	b.n	800a68c <__sinit+0xc>
 800a6a6:	bf00      	nop
 800a6a8:	0800a5ed 	.word	0x0800a5ed
 800a6ac:	20000aac 	.word	0x20000aac

0800a6b0 <_fwalk_sglue>:
 800a6b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b4:	4607      	mov	r7, r0
 800a6b6:	4688      	mov	r8, r1
 800a6b8:	4614      	mov	r4, r2
 800a6ba:	2600      	movs	r6, #0
 800a6bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6c0:	f1b9 0901 	subs.w	r9, r9, #1
 800a6c4:	d505      	bpl.n	800a6d2 <_fwalk_sglue+0x22>
 800a6c6:	6824      	ldr	r4, [r4, #0]
 800a6c8:	2c00      	cmp	r4, #0
 800a6ca:	d1f7      	bne.n	800a6bc <_fwalk_sglue+0xc>
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d2:	89ab      	ldrh	r3, [r5, #12]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d907      	bls.n	800a6e8 <_fwalk_sglue+0x38>
 800a6d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6dc:	3301      	adds	r3, #1
 800a6de:	d003      	beq.n	800a6e8 <_fwalk_sglue+0x38>
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4638      	mov	r0, r7
 800a6e4:	47c0      	blx	r8
 800a6e6:	4306      	orrs	r6, r0
 800a6e8:	3568      	adds	r5, #104	@ 0x68
 800a6ea:	e7e9      	b.n	800a6c0 <_fwalk_sglue+0x10>

0800a6ec <__sread>:
 800a6ec:	b510      	push	{r4, lr}
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f4:	f000 f87a 	bl	800a7ec <_read_r>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	bfab      	itete	ge
 800a6fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a6fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a700:	181b      	addge	r3, r3, r0
 800a702:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a706:	bfac      	ite	ge
 800a708:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a70a:	81a3      	strhlt	r3, [r4, #12]
 800a70c:	bd10      	pop	{r4, pc}

0800a70e <__swrite>:
 800a70e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a712:	461f      	mov	r7, r3
 800a714:	898b      	ldrh	r3, [r1, #12]
 800a716:	4605      	mov	r5, r0
 800a718:	05db      	lsls	r3, r3, #23
 800a71a:	460c      	mov	r4, r1
 800a71c:	4616      	mov	r6, r2
 800a71e:	d505      	bpl.n	800a72c <__swrite+0x1e>
 800a720:	2302      	movs	r3, #2
 800a722:	2200      	movs	r2, #0
 800a724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a728:	f000 f84e 	bl	800a7c8 <_lseek_r>
 800a72c:	89a3      	ldrh	r3, [r4, #12]
 800a72e:	4632      	mov	r2, r6
 800a730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a734:	81a3      	strh	r3, [r4, #12]
 800a736:	4628      	mov	r0, r5
 800a738:	463b      	mov	r3, r7
 800a73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a742:	f000 b865 	b.w	800a810 <_write_r>

0800a746 <__sseek>:
 800a746:	b510      	push	{r4, lr}
 800a748:	460c      	mov	r4, r1
 800a74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a74e:	f000 f83b 	bl	800a7c8 <_lseek_r>
 800a752:	1c43      	adds	r3, r0, #1
 800a754:	89a3      	ldrh	r3, [r4, #12]
 800a756:	bf15      	itete	ne
 800a758:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a75a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a75e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a762:	81a3      	strheq	r3, [r4, #12]
 800a764:	bf18      	it	ne
 800a766:	81a3      	strhne	r3, [r4, #12]
 800a768:	bd10      	pop	{r4, pc}

0800a76a <__sclose>:
 800a76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a76e:	f000 b81b 	b.w	800a7a8 <_close_r>

0800a772 <memset>:
 800a772:	4603      	mov	r3, r0
 800a774:	4402      	add	r2, r0
 800a776:	4293      	cmp	r3, r2
 800a778:	d100      	bne.n	800a77c <memset+0xa>
 800a77a:	4770      	bx	lr
 800a77c:	f803 1b01 	strb.w	r1, [r3], #1
 800a780:	e7f9      	b.n	800a776 <memset+0x4>

0800a782 <strncmp>:
 800a782:	b510      	push	{r4, lr}
 800a784:	b16a      	cbz	r2, 800a7a2 <strncmp+0x20>
 800a786:	3901      	subs	r1, #1
 800a788:	1884      	adds	r4, r0, r2
 800a78a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a78e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a792:	429a      	cmp	r2, r3
 800a794:	d103      	bne.n	800a79e <strncmp+0x1c>
 800a796:	42a0      	cmp	r0, r4
 800a798:	d001      	beq.n	800a79e <strncmp+0x1c>
 800a79a:	2a00      	cmp	r2, #0
 800a79c:	d1f5      	bne.n	800a78a <strncmp+0x8>
 800a79e:	1ad0      	subs	r0, r2, r3
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	e7fc      	b.n	800a7a0 <strncmp+0x1e>
	...

0800a7a8 <_close_r>:
 800a7a8:	b538      	push	{r3, r4, r5, lr}
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4d05      	ldr	r5, [pc, #20]	@ (800a7c4 <_close_r+0x1c>)
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	4608      	mov	r0, r1
 800a7b2:	602b      	str	r3, [r5, #0]
 800a7b4:	f7f9 ff2b 	bl	800460e <_close>
 800a7b8:	1c43      	adds	r3, r0, #1
 800a7ba:	d102      	bne.n	800a7c2 <_close_r+0x1a>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	b103      	cbz	r3, 800a7c2 <_close_r+0x1a>
 800a7c0:	6023      	str	r3, [r4, #0]
 800a7c2:	bd38      	pop	{r3, r4, r5, pc}
 800a7c4:	20000ab0 	.word	0x20000ab0

0800a7c8 <_lseek_r>:
 800a7c8:	b538      	push	{r3, r4, r5, lr}
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4d05      	ldr	r5, [pc, #20]	@ (800a7e8 <_lseek_r+0x20>)
 800a7d4:	602a      	str	r2, [r5, #0]
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f7f9 ff3d 	bl	8004656 <_lseek>
 800a7dc:	1c43      	adds	r3, r0, #1
 800a7de:	d102      	bne.n	800a7e6 <_lseek_r+0x1e>
 800a7e0:	682b      	ldr	r3, [r5, #0]
 800a7e2:	b103      	cbz	r3, 800a7e6 <_lseek_r+0x1e>
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	bd38      	pop	{r3, r4, r5, pc}
 800a7e8:	20000ab0 	.word	0x20000ab0

0800a7ec <_read_r>:
 800a7ec:	b538      	push	{r3, r4, r5, lr}
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	4d05      	ldr	r5, [pc, #20]	@ (800a80c <_read_r+0x20>)
 800a7f8:	602a      	str	r2, [r5, #0]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	f7f9 fece 	bl	800459c <_read>
 800a800:	1c43      	adds	r3, r0, #1
 800a802:	d102      	bne.n	800a80a <_read_r+0x1e>
 800a804:	682b      	ldr	r3, [r5, #0]
 800a806:	b103      	cbz	r3, 800a80a <_read_r+0x1e>
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	bd38      	pop	{r3, r4, r5, pc}
 800a80c:	20000ab0 	.word	0x20000ab0

0800a810 <_write_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	4604      	mov	r4, r0
 800a814:	4608      	mov	r0, r1
 800a816:	4611      	mov	r1, r2
 800a818:	2200      	movs	r2, #0
 800a81a:	4d05      	ldr	r5, [pc, #20]	@ (800a830 <_write_r+0x20>)
 800a81c:	602a      	str	r2, [r5, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	f7f9 fed9 	bl	80045d6 <_write>
 800a824:	1c43      	adds	r3, r0, #1
 800a826:	d102      	bne.n	800a82e <_write_r+0x1e>
 800a828:	682b      	ldr	r3, [r5, #0]
 800a82a:	b103      	cbz	r3, 800a82e <_write_r+0x1e>
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	bd38      	pop	{r3, r4, r5, pc}
 800a830:	20000ab0 	.word	0x20000ab0

0800a834 <__errno>:
 800a834:	4b01      	ldr	r3, [pc, #4]	@ (800a83c <__errno+0x8>)
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	200001c8 	.word	0x200001c8

0800a840 <__libc_init_array>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	2600      	movs	r6, #0
 800a844:	4d0c      	ldr	r5, [pc, #48]	@ (800a878 <__libc_init_array+0x38>)
 800a846:	4c0d      	ldr	r4, [pc, #52]	@ (800a87c <__libc_init_array+0x3c>)
 800a848:	1b64      	subs	r4, r4, r5
 800a84a:	10a4      	asrs	r4, r4, #2
 800a84c:	42a6      	cmp	r6, r4
 800a84e:	d109      	bne.n	800a864 <__libc_init_array+0x24>
 800a850:	f002 f812 	bl	800c878 <_init>
 800a854:	2600      	movs	r6, #0
 800a856:	4d0a      	ldr	r5, [pc, #40]	@ (800a880 <__libc_init_array+0x40>)
 800a858:	4c0a      	ldr	r4, [pc, #40]	@ (800a884 <__libc_init_array+0x44>)
 800a85a:	1b64      	subs	r4, r4, r5
 800a85c:	10a4      	asrs	r4, r4, #2
 800a85e:	42a6      	cmp	r6, r4
 800a860:	d105      	bne.n	800a86e <__libc_init_array+0x2e>
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	f855 3b04 	ldr.w	r3, [r5], #4
 800a868:	4798      	blx	r3
 800a86a:	3601      	adds	r6, #1
 800a86c:	e7ee      	b.n	800a84c <__libc_init_array+0xc>
 800a86e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a872:	4798      	blx	r3
 800a874:	3601      	adds	r6, #1
 800a876:	e7f2      	b.n	800a85e <__libc_init_array+0x1e>
 800a878:	0800cd4c 	.word	0x0800cd4c
 800a87c:	0800cd4c 	.word	0x0800cd4c
 800a880:	0800cd4c 	.word	0x0800cd4c
 800a884:	0800cd50 	.word	0x0800cd50

0800a888 <__retarget_lock_init_recursive>:
 800a888:	4770      	bx	lr

0800a88a <__retarget_lock_acquire_recursive>:
 800a88a:	4770      	bx	lr

0800a88c <__retarget_lock_release_recursive>:
 800a88c:	4770      	bx	lr

0800a88e <memcpy>:
 800a88e:	440a      	add	r2, r1
 800a890:	4291      	cmp	r1, r2
 800a892:	f100 33ff 	add.w	r3, r0, #4294967295
 800a896:	d100      	bne.n	800a89a <memcpy+0xc>
 800a898:	4770      	bx	lr
 800a89a:	b510      	push	{r4, lr}
 800a89c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8a0:	4291      	cmp	r1, r2
 800a8a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8a6:	d1f9      	bne.n	800a89c <memcpy+0xe>
 800a8a8:	bd10      	pop	{r4, pc}
	...

0800a8ac <nan>:
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	4901      	ldr	r1, [pc, #4]	@ (800a8b4 <nan+0x8>)
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	7ff80000 	.word	0x7ff80000

0800a8b8 <_free_r>:
 800a8b8:	b538      	push	{r3, r4, r5, lr}
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	2900      	cmp	r1, #0
 800a8be:	d040      	beq.n	800a942 <_free_r+0x8a>
 800a8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c4:	1f0c      	subs	r4, r1, #4
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	bfb8      	it	lt
 800a8ca:	18e4      	addlt	r4, r4, r3
 800a8cc:	f000 fc2a 	bl	800b124 <__malloc_lock>
 800a8d0:	4a1c      	ldr	r2, [pc, #112]	@ (800a944 <_free_r+0x8c>)
 800a8d2:	6813      	ldr	r3, [r2, #0]
 800a8d4:	b933      	cbnz	r3, 800a8e4 <_free_r+0x2c>
 800a8d6:	6063      	str	r3, [r4, #4]
 800a8d8:	6014      	str	r4, [r2, #0]
 800a8da:	4628      	mov	r0, r5
 800a8dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8e0:	f000 bc26 	b.w	800b130 <__malloc_unlock>
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	d908      	bls.n	800a8fa <_free_r+0x42>
 800a8e8:	6820      	ldr	r0, [r4, #0]
 800a8ea:	1821      	adds	r1, r4, r0
 800a8ec:	428b      	cmp	r3, r1
 800a8ee:	bf01      	itttt	eq
 800a8f0:	6819      	ldreq	r1, [r3, #0]
 800a8f2:	685b      	ldreq	r3, [r3, #4]
 800a8f4:	1809      	addeq	r1, r1, r0
 800a8f6:	6021      	streq	r1, [r4, #0]
 800a8f8:	e7ed      	b.n	800a8d6 <_free_r+0x1e>
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	b10b      	cbz	r3, 800a904 <_free_r+0x4c>
 800a900:	42a3      	cmp	r3, r4
 800a902:	d9fa      	bls.n	800a8fa <_free_r+0x42>
 800a904:	6811      	ldr	r1, [r2, #0]
 800a906:	1850      	adds	r0, r2, r1
 800a908:	42a0      	cmp	r0, r4
 800a90a:	d10b      	bne.n	800a924 <_free_r+0x6c>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	4401      	add	r1, r0
 800a910:	1850      	adds	r0, r2, r1
 800a912:	4283      	cmp	r3, r0
 800a914:	6011      	str	r1, [r2, #0]
 800a916:	d1e0      	bne.n	800a8da <_free_r+0x22>
 800a918:	6818      	ldr	r0, [r3, #0]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	4408      	add	r0, r1
 800a91e:	6010      	str	r0, [r2, #0]
 800a920:	6053      	str	r3, [r2, #4]
 800a922:	e7da      	b.n	800a8da <_free_r+0x22>
 800a924:	d902      	bls.n	800a92c <_free_r+0x74>
 800a926:	230c      	movs	r3, #12
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	e7d6      	b.n	800a8da <_free_r+0x22>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	1821      	adds	r1, r4, r0
 800a930:	428b      	cmp	r3, r1
 800a932:	bf01      	itttt	eq
 800a934:	6819      	ldreq	r1, [r3, #0]
 800a936:	685b      	ldreq	r3, [r3, #4]
 800a938:	1809      	addeq	r1, r1, r0
 800a93a:	6021      	streq	r1, [r4, #0]
 800a93c:	6063      	str	r3, [r4, #4]
 800a93e:	6054      	str	r4, [r2, #4]
 800a940:	e7cb      	b.n	800a8da <_free_r+0x22>
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	20000abc 	.word	0x20000abc

0800a948 <rshift>:
 800a948:	6903      	ldr	r3, [r0, #16]
 800a94a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a94e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a952:	f100 0414 	add.w	r4, r0, #20
 800a956:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a95a:	dd46      	ble.n	800a9ea <rshift+0xa2>
 800a95c:	f011 011f 	ands.w	r1, r1, #31
 800a960:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a964:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a968:	d10c      	bne.n	800a984 <rshift+0x3c>
 800a96a:	4629      	mov	r1, r5
 800a96c:	f100 0710 	add.w	r7, r0, #16
 800a970:	42b1      	cmp	r1, r6
 800a972:	d335      	bcc.n	800a9e0 <rshift+0x98>
 800a974:	1a9b      	subs	r3, r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	1eea      	subs	r2, r5, #3
 800a97a:	4296      	cmp	r6, r2
 800a97c:	bf38      	it	cc
 800a97e:	2300      	movcc	r3, #0
 800a980:	4423      	add	r3, r4
 800a982:	e015      	b.n	800a9b0 <rshift+0x68>
 800a984:	46a1      	mov	r9, r4
 800a986:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a98a:	f1c1 0820 	rsb	r8, r1, #32
 800a98e:	40cf      	lsrs	r7, r1
 800a990:	f105 0e04 	add.w	lr, r5, #4
 800a994:	4576      	cmp	r6, lr
 800a996:	46f4      	mov	ip, lr
 800a998:	d816      	bhi.n	800a9c8 <rshift+0x80>
 800a99a:	1a9a      	subs	r2, r3, r2
 800a99c:	0092      	lsls	r2, r2, #2
 800a99e:	3a04      	subs	r2, #4
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	42ae      	cmp	r6, r5
 800a9a4:	bf38      	it	cc
 800a9a6:	2200      	movcc	r2, #0
 800a9a8:	18a3      	adds	r3, r4, r2
 800a9aa:	50a7      	str	r7, [r4, r2]
 800a9ac:	b107      	cbz	r7, 800a9b0 <rshift+0x68>
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	eba3 0204 	sub.w	r2, r3, r4
 800a9b6:	bf08      	it	eq
 800a9b8:	2300      	moveq	r3, #0
 800a9ba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a9be:	6102      	str	r2, [r0, #16]
 800a9c0:	bf08      	it	eq
 800a9c2:	6143      	streq	r3, [r0, #20]
 800a9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9c8:	f8dc c000 	ldr.w	ip, [ip]
 800a9cc:	fa0c fc08 	lsl.w	ip, ip, r8
 800a9d0:	ea4c 0707 	orr.w	r7, ip, r7
 800a9d4:	f849 7b04 	str.w	r7, [r9], #4
 800a9d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a9dc:	40cf      	lsrs	r7, r1
 800a9de:	e7d9      	b.n	800a994 <rshift+0x4c>
 800a9e0:	f851 cb04 	ldr.w	ip, [r1], #4
 800a9e4:	f847 cf04 	str.w	ip, [r7, #4]!
 800a9e8:	e7c2      	b.n	800a970 <rshift+0x28>
 800a9ea:	4623      	mov	r3, r4
 800a9ec:	e7e0      	b.n	800a9b0 <rshift+0x68>

0800a9ee <__hexdig_fun>:
 800a9ee:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a9f2:	2b09      	cmp	r3, #9
 800a9f4:	d802      	bhi.n	800a9fc <__hexdig_fun+0xe>
 800a9f6:	3820      	subs	r0, #32
 800a9f8:	b2c0      	uxtb	r0, r0
 800a9fa:	4770      	bx	lr
 800a9fc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aa00:	2b05      	cmp	r3, #5
 800aa02:	d801      	bhi.n	800aa08 <__hexdig_fun+0x1a>
 800aa04:	3847      	subs	r0, #71	@ 0x47
 800aa06:	e7f7      	b.n	800a9f8 <__hexdig_fun+0xa>
 800aa08:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aa0c:	2b05      	cmp	r3, #5
 800aa0e:	d801      	bhi.n	800aa14 <__hexdig_fun+0x26>
 800aa10:	3827      	subs	r0, #39	@ 0x27
 800aa12:	e7f1      	b.n	800a9f8 <__hexdig_fun+0xa>
 800aa14:	2000      	movs	r0, #0
 800aa16:	4770      	bx	lr

0800aa18 <__gethex>:
 800aa18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1c:	468a      	mov	sl, r1
 800aa1e:	4690      	mov	r8, r2
 800aa20:	b085      	sub	sp, #20
 800aa22:	9302      	str	r3, [sp, #8]
 800aa24:	680b      	ldr	r3, [r1, #0]
 800aa26:	9001      	str	r0, [sp, #4]
 800aa28:	1c9c      	adds	r4, r3, #2
 800aa2a:	46a1      	mov	r9, r4
 800aa2c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aa30:	2830      	cmp	r0, #48	@ 0x30
 800aa32:	d0fa      	beq.n	800aa2a <__gethex+0x12>
 800aa34:	eba9 0303 	sub.w	r3, r9, r3
 800aa38:	f1a3 0b02 	sub.w	fp, r3, #2
 800aa3c:	f7ff ffd7 	bl	800a9ee <__hexdig_fun>
 800aa40:	4605      	mov	r5, r0
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d168      	bne.n	800ab18 <__gethex+0x100>
 800aa46:	2201      	movs	r2, #1
 800aa48:	4648      	mov	r0, r9
 800aa4a:	499f      	ldr	r1, [pc, #636]	@ (800acc8 <__gethex+0x2b0>)
 800aa4c:	f7ff fe99 	bl	800a782 <strncmp>
 800aa50:	4607      	mov	r7, r0
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d167      	bne.n	800ab26 <__gethex+0x10e>
 800aa56:	f899 0001 	ldrb.w	r0, [r9, #1]
 800aa5a:	4626      	mov	r6, r4
 800aa5c:	f7ff ffc7 	bl	800a9ee <__hexdig_fun>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d062      	beq.n	800ab2a <__gethex+0x112>
 800aa64:	4623      	mov	r3, r4
 800aa66:	7818      	ldrb	r0, [r3, #0]
 800aa68:	4699      	mov	r9, r3
 800aa6a:	2830      	cmp	r0, #48	@ 0x30
 800aa6c:	f103 0301 	add.w	r3, r3, #1
 800aa70:	d0f9      	beq.n	800aa66 <__gethex+0x4e>
 800aa72:	f7ff ffbc 	bl	800a9ee <__hexdig_fun>
 800aa76:	fab0 f580 	clz	r5, r0
 800aa7a:	f04f 0b01 	mov.w	fp, #1
 800aa7e:	096d      	lsrs	r5, r5, #5
 800aa80:	464a      	mov	r2, r9
 800aa82:	4616      	mov	r6, r2
 800aa84:	7830      	ldrb	r0, [r6, #0]
 800aa86:	3201      	adds	r2, #1
 800aa88:	f7ff ffb1 	bl	800a9ee <__hexdig_fun>
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	d1f8      	bne.n	800aa82 <__gethex+0x6a>
 800aa90:	2201      	movs	r2, #1
 800aa92:	4630      	mov	r0, r6
 800aa94:	498c      	ldr	r1, [pc, #560]	@ (800acc8 <__gethex+0x2b0>)
 800aa96:	f7ff fe74 	bl	800a782 <strncmp>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	d13f      	bne.n	800ab1e <__gethex+0x106>
 800aa9e:	b944      	cbnz	r4, 800aab2 <__gethex+0x9a>
 800aaa0:	1c74      	adds	r4, r6, #1
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	4616      	mov	r6, r2
 800aaa6:	7830      	ldrb	r0, [r6, #0]
 800aaa8:	3201      	adds	r2, #1
 800aaaa:	f7ff ffa0 	bl	800a9ee <__hexdig_fun>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d1f8      	bne.n	800aaa4 <__gethex+0x8c>
 800aab2:	1ba4      	subs	r4, r4, r6
 800aab4:	00a7      	lsls	r7, r4, #2
 800aab6:	7833      	ldrb	r3, [r6, #0]
 800aab8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aabc:	2b50      	cmp	r3, #80	@ 0x50
 800aabe:	d13e      	bne.n	800ab3e <__gethex+0x126>
 800aac0:	7873      	ldrb	r3, [r6, #1]
 800aac2:	2b2b      	cmp	r3, #43	@ 0x2b
 800aac4:	d033      	beq.n	800ab2e <__gethex+0x116>
 800aac6:	2b2d      	cmp	r3, #45	@ 0x2d
 800aac8:	d034      	beq.n	800ab34 <__gethex+0x11c>
 800aaca:	2400      	movs	r4, #0
 800aacc:	1c71      	adds	r1, r6, #1
 800aace:	7808      	ldrb	r0, [r1, #0]
 800aad0:	f7ff ff8d 	bl	800a9ee <__hexdig_fun>
 800aad4:	1e43      	subs	r3, r0, #1
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b18      	cmp	r3, #24
 800aada:	d830      	bhi.n	800ab3e <__gethex+0x126>
 800aadc:	f1a0 0210 	sub.w	r2, r0, #16
 800aae0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aae4:	f7ff ff83 	bl	800a9ee <__hexdig_fun>
 800aae8:	f100 3cff 	add.w	ip, r0, #4294967295
 800aaec:	fa5f fc8c 	uxtb.w	ip, ip
 800aaf0:	f1bc 0f18 	cmp.w	ip, #24
 800aaf4:	f04f 030a 	mov.w	r3, #10
 800aaf8:	d91e      	bls.n	800ab38 <__gethex+0x120>
 800aafa:	b104      	cbz	r4, 800aafe <__gethex+0xe6>
 800aafc:	4252      	negs	r2, r2
 800aafe:	4417      	add	r7, r2
 800ab00:	f8ca 1000 	str.w	r1, [sl]
 800ab04:	b1ed      	cbz	r5, 800ab42 <__gethex+0x12a>
 800ab06:	f1bb 0f00 	cmp.w	fp, #0
 800ab0a:	bf0c      	ite	eq
 800ab0c:	2506      	moveq	r5, #6
 800ab0e:	2500      	movne	r5, #0
 800ab10:	4628      	mov	r0, r5
 800ab12:	b005      	add	sp, #20
 800ab14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab18:	2500      	movs	r5, #0
 800ab1a:	462c      	mov	r4, r5
 800ab1c:	e7b0      	b.n	800aa80 <__gethex+0x68>
 800ab1e:	2c00      	cmp	r4, #0
 800ab20:	d1c7      	bne.n	800aab2 <__gethex+0x9a>
 800ab22:	4627      	mov	r7, r4
 800ab24:	e7c7      	b.n	800aab6 <__gethex+0x9e>
 800ab26:	464e      	mov	r6, r9
 800ab28:	462f      	mov	r7, r5
 800ab2a:	2501      	movs	r5, #1
 800ab2c:	e7c3      	b.n	800aab6 <__gethex+0x9e>
 800ab2e:	2400      	movs	r4, #0
 800ab30:	1cb1      	adds	r1, r6, #2
 800ab32:	e7cc      	b.n	800aace <__gethex+0xb6>
 800ab34:	2401      	movs	r4, #1
 800ab36:	e7fb      	b.n	800ab30 <__gethex+0x118>
 800ab38:	fb03 0002 	mla	r0, r3, r2, r0
 800ab3c:	e7ce      	b.n	800aadc <__gethex+0xc4>
 800ab3e:	4631      	mov	r1, r6
 800ab40:	e7de      	b.n	800ab00 <__gethex+0xe8>
 800ab42:	4629      	mov	r1, r5
 800ab44:	eba6 0309 	sub.w	r3, r6, r9
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	2b07      	cmp	r3, #7
 800ab4c:	dc0a      	bgt.n	800ab64 <__gethex+0x14c>
 800ab4e:	9801      	ldr	r0, [sp, #4]
 800ab50:	f000 faf4 	bl	800b13c <_Balloc>
 800ab54:	4604      	mov	r4, r0
 800ab56:	b940      	cbnz	r0, 800ab6a <__gethex+0x152>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	21e4      	movs	r1, #228	@ 0xe4
 800ab5c:	4b5b      	ldr	r3, [pc, #364]	@ (800accc <__gethex+0x2b4>)
 800ab5e:	485c      	ldr	r0, [pc, #368]	@ (800acd0 <__gethex+0x2b8>)
 800ab60:	f001 f852 	bl	800bc08 <__assert_func>
 800ab64:	3101      	adds	r1, #1
 800ab66:	105b      	asrs	r3, r3, #1
 800ab68:	e7ef      	b.n	800ab4a <__gethex+0x132>
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f100 0a14 	add.w	sl, r0, #20
 800ab70:	4655      	mov	r5, sl
 800ab72:	469b      	mov	fp, r3
 800ab74:	45b1      	cmp	r9, r6
 800ab76:	d337      	bcc.n	800abe8 <__gethex+0x1d0>
 800ab78:	f845 bb04 	str.w	fp, [r5], #4
 800ab7c:	eba5 050a 	sub.w	r5, r5, sl
 800ab80:	10ad      	asrs	r5, r5, #2
 800ab82:	6125      	str	r5, [r4, #16]
 800ab84:	4658      	mov	r0, fp
 800ab86:	f000 fbcb 	bl	800b320 <__hi0bits>
 800ab8a:	016d      	lsls	r5, r5, #5
 800ab8c:	f8d8 6000 	ldr.w	r6, [r8]
 800ab90:	1a2d      	subs	r5, r5, r0
 800ab92:	42b5      	cmp	r5, r6
 800ab94:	dd54      	ble.n	800ac40 <__gethex+0x228>
 800ab96:	1bad      	subs	r5, r5, r6
 800ab98:	4629      	mov	r1, r5
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	f000 ff4d 	bl	800ba3a <__any_on>
 800aba0:	4681      	mov	r9, r0
 800aba2:	b178      	cbz	r0, 800abc4 <__gethex+0x1ac>
 800aba4:	f04f 0901 	mov.w	r9, #1
 800aba8:	1e6b      	subs	r3, r5, #1
 800abaa:	1159      	asrs	r1, r3, #5
 800abac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800abb0:	f003 021f 	and.w	r2, r3, #31
 800abb4:	fa09 f202 	lsl.w	r2, r9, r2
 800abb8:	420a      	tst	r2, r1
 800abba:	d003      	beq.n	800abc4 <__gethex+0x1ac>
 800abbc:	454b      	cmp	r3, r9
 800abbe:	dc36      	bgt.n	800ac2e <__gethex+0x216>
 800abc0:	f04f 0902 	mov.w	r9, #2
 800abc4:	4629      	mov	r1, r5
 800abc6:	4620      	mov	r0, r4
 800abc8:	f7ff febe 	bl	800a948 <rshift>
 800abcc:	442f      	add	r7, r5
 800abce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abd2:	42bb      	cmp	r3, r7
 800abd4:	da42      	bge.n	800ac5c <__gethex+0x244>
 800abd6:	4621      	mov	r1, r4
 800abd8:	9801      	ldr	r0, [sp, #4]
 800abda:	f000 faef 	bl	800b1bc <_Bfree>
 800abde:	2300      	movs	r3, #0
 800abe0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abe2:	25a3      	movs	r5, #163	@ 0xa3
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	e793      	b.n	800ab10 <__gethex+0xf8>
 800abe8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800abec:	2a2e      	cmp	r2, #46	@ 0x2e
 800abee:	d012      	beq.n	800ac16 <__gethex+0x1fe>
 800abf0:	2b20      	cmp	r3, #32
 800abf2:	d104      	bne.n	800abfe <__gethex+0x1e6>
 800abf4:	f845 bb04 	str.w	fp, [r5], #4
 800abf8:	f04f 0b00 	mov.w	fp, #0
 800abfc:	465b      	mov	r3, fp
 800abfe:	7830      	ldrb	r0, [r6, #0]
 800ac00:	9303      	str	r3, [sp, #12]
 800ac02:	f7ff fef4 	bl	800a9ee <__hexdig_fun>
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	f000 000f 	and.w	r0, r0, #15
 800ac0c:	4098      	lsls	r0, r3
 800ac0e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ac12:	3304      	adds	r3, #4
 800ac14:	e7ae      	b.n	800ab74 <__gethex+0x15c>
 800ac16:	45b1      	cmp	r9, r6
 800ac18:	d8ea      	bhi.n	800abf0 <__gethex+0x1d8>
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	492a      	ldr	r1, [pc, #168]	@ (800acc8 <__gethex+0x2b0>)
 800ac20:	9303      	str	r3, [sp, #12]
 800ac22:	f7ff fdae 	bl	800a782 <strncmp>
 800ac26:	9b03      	ldr	r3, [sp, #12]
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d1e1      	bne.n	800abf0 <__gethex+0x1d8>
 800ac2c:	e7a2      	b.n	800ab74 <__gethex+0x15c>
 800ac2e:	4620      	mov	r0, r4
 800ac30:	1ea9      	subs	r1, r5, #2
 800ac32:	f000 ff02 	bl	800ba3a <__any_on>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d0c2      	beq.n	800abc0 <__gethex+0x1a8>
 800ac3a:	f04f 0903 	mov.w	r9, #3
 800ac3e:	e7c1      	b.n	800abc4 <__gethex+0x1ac>
 800ac40:	da09      	bge.n	800ac56 <__gethex+0x23e>
 800ac42:	1b75      	subs	r5, r6, r5
 800ac44:	4621      	mov	r1, r4
 800ac46:	462a      	mov	r2, r5
 800ac48:	9801      	ldr	r0, [sp, #4]
 800ac4a:	f000 fcc7 	bl	800b5dc <__lshift>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	1b7f      	subs	r7, r7, r5
 800ac52:	f100 0a14 	add.w	sl, r0, #20
 800ac56:	f04f 0900 	mov.w	r9, #0
 800ac5a:	e7b8      	b.n	800abce <__gethex+0x1b6>
 800ac5c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac60:	42bd      	cmp	r5, r7
 800ac62:	dd6f      	ble.n	800ad44 <__gethex+0x32c>
 800ac64:	1bed      	subs	r5, r5, r7
 800ac66:	42ae      	cmp	r6, r5
 800ac68:	dc34      	bgt.n	800acd4 <__gethex+0x2bc>
 800ac6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d022      	beq.n	800acb8 <__gethex+0x2a0>
 800ac72:	2b03      	cmp	r3, #3
 800ac74:	d024      	beq.n	800acc0 <__gethex+0x2a8>
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d115      	bne.n	800aca6 <__gethex+0x28e>
 800ac7a:	42ae      	cmp	r6, r5
 800ac7c:	d113      	bne.n	800aca6 <__gethex+0x28e>
 800ac7e:	2e01      	cmp	r6, #1
 800ac80:	d10b      	bne.n	800ac9a <__gethex+0x282>
 800ac82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac86:	9a02      	ldr	r2, [sp, #8]
 800ac88:	2562      	movs	r5, #98	@ 0x62
 800ac8a:	6013      	str	r3, [r2, #0]
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	6123      	str	r3, [r4, #16]
 800ac90:	f8ca 3000 	str.w	r3, [sl]
 800ac94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac96:	601c      	str	r4, [r3, #0]
 800ac98:	e73a      	b.n	800ab10 <__gethex+0xf8>
 800ac9a:	4620      	mov	r0, r4
 800ac9c:	1e71      	subs	r1, r6, #1
 800ac9e:	f000 fecc 	bl	800ba3a <__any_on>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d1ed      	bne.n	800ac82 <__gethex+0x26a>
 800aca6:	4621      	mov	r1, r4
 800aca8:	9801      	ldr	r0, [sp, #4]
 800acaa:	f000 fa87 	bl	800b1bc <_Bfree>
 800acae:	2300      	movs	r3, #0
 800acb0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acb2:	2550      	movs	r5, #80	@ 0x50
 800acb4:	6013      	str	r3, [r2, #0]
 800acb6:	e72b      	b.n	800ab10 <__gethex+0xf8>
 800acb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d1f3      	bne.n	800aca6 <__gethex+0x28e>
 800acbe:	e7e0      	b.n	800ac82 <__gethex+0x26a>
 800acc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1dd      	bne.n	800ac82 <__gethex+0x26a>
 800acc6:	e7ee      	b.n	800aca6 <__gethex+0x28e>
 800acc8:	0800c972 	.word	0x0800c972
 800accc:	0800c988 	.word	0x0800c988
 800acd0:	0800c999 	.word	0x0800c999
 800acd4:	1e6f      	subs	r7, r5, #1
 800acd6:	f1b9 0f00 	cmp.w	r9, #0
 800acda:	d130      	bne.n	800ad3e <__gethex+0x326>
 800acdc:	b127      	cbz	r7, 800ace8 <__gethex+0x2d0>
 800acde:	4639      	mov	r1, r7
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 feaa 	bl	800ba3a <__any_on>
 800ace6:	4681      	mov	r9, r0
 800ace8:	2301      	movs	r3, #1
 800acea:	4629      	mov	r1, r5
 800acec:	1b76      	subs	r6, r6, r5
 800acee:	2502      	movs	r5, #2
 800acf0:	117a      	asrs	r2, r7, #5
 800acf2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800acf6:	f007 071f 	and.w	r7, r7, #31
 800acfa:	40bb      	lsls	r3, r7
 800acfc:	4213      	tst	r3, r2
 800acfe:	4620      	mov	r0, r4
 800ad00:	bf18      	it	ne
 800ad02:	f049 0902 	orrne.w	r9, r9, #2
 800ad06:	f7ff fe1f 	bl	800a948 <rshift>
 800ad0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ad0e:	f1b9 0f00 	cmp.w	r9, #0
 800ad12:	d047      	beq.n	800ada4 <__gethex+0x38c>
 800ad14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ad18:	2b02      	cmp	r3, #2
 800ad1a:	d015      	beq.n	800ad48 <__gethex+0x330>
 800ad1c:	2b03      	cmp	r3, #3
 800ad1e:	d017      	beq.n	800ad50 <__gethex+0x338>
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d109      	bne.n	800ad38 <__gethex+0x320>
 800ad24:	f019 0f02 	tst.w	r9, #2
 800ad28:	d006      	beq.n	800ad38 <__gethex+0x320>
 800ad2a:	f8da 3000 	ldr.w	r3, [sl]
 800ad2e:	ea49 0903 	orr.w	r9, r9, r3
 800ad32:	f019 0f01 	tst.w	r9, #1
 800ad36:	d10e      	bne.n	800ad56 <__gethex+0x33e>
 800ad38:	f045 0510 	orr.w	r5, r5, #16
 800ad3c:	e032      	b.n	800ada4 <__gethex+0x38c>
 800ad3e:	f04f 0901 	mov.w	r9, #1
 800ad42:	e7d1      	b.n	800ace8 <__gethex+0x2d0>
 800ad44:	2501      	movs	r5, #1
 800ad46:	e7e2      	b.n	800ad0e <__gethex+0x2f6>
 800ad48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad4a:	f1c3 0301 	rsb	r3, r3, #1
 800ad4e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d0f0      	beq.n	800ad38 <__gethex+0x320>
 800ad56:	f04f 0c00 	mov.w	ip, #0
 800ad5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ad5e:	f104 0314 	add.w	r3, r4, #20
 800ad62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ad66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad70:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad74:	d01b      	beq.n	800adae <__gethex+0x396>
 800ad76:	3201      	adds	r2, #1
 800ad78:	6002      	str	r2, [r0, #0]
 800ad7a:	2d02      	cmp	r5, #2
 800ad7c:	f104 0314 	add.w	r3, r4, #20
 800ad80:	d13c      	bne.n	800adfc <__gethex+0x3e4>
 800ad82:	f8d8 2000 	ldr.w	r2, [r8]
 800ad86:	3a01      	subs	r2, #1
 800ad88:	42b2      	cmp	r2, r6
 800ad8a:	d109      	bne.n	800ada0 <__gethex+0x388>
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	1171      	asrs	r1, r6, #5
 800ad90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad94:	f006 061f 	and.w	r6, r6, #31
 800ad98:	fa02 f606 	lsl.w	r6, r2, r6
 800ad9c:	421e      	tst	r6, r3
 800ad9e:	d13a      	bne.n	800ae16 <__gethex+0x3fe>
 800ada0:	f045 0520 	orr.w	r5, r5, #32
 800ada4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ada6:	601c      	str	r4, [r3, #0]
 800ada8:	9b02      	ldr	r3, [sp, #8]
 800adaa:	601f      	str	r7, [r3, #0]
 800adac:	e6b0      	b.n	800ab10 <__gethex+0xf8>
 800adae:	4299      	cmp	r1, r3
 800adb0:	f843 cc04 	str.w	ip, [r3, #-4]
 800adb4:	d8d9      	bhi.n	800ad6a <__gethex+0x352>
 800adb6:	68a3      	ldr	r3, [r4, #8]
 800adb8:	459b      	cmp	fp, r3
 800adba:	db17      	blt.n	800adec <__gethex+0x3d4>
 800adbc:	6861      	ldr	r1, [r4, #4]
 800adbe:	9801      	ldr	r0, [sp, #4]
 800adc0:	3101      	adds	r1, #1
 800adc2:	f000 f9bb 	bl	800b13c <_Balloc>
 800adc6:	4681      	mov	r9, r0
 800adc8:	b918      	cbnz	r0, 800add2 <__gethex+0x3ba>
 800adca:	4602      	mov	r2, r0
 800adcc:	2184      	movs	r1, #132	@ 0x84
 800adce:	4b19      	ldr	r3, [pc, #100]	@ (800ae34 <__gethex+0x41c>)
 800add0:	e6c5      	b.n	800ab5e <__gethex+0x146>
 800add2:	6922      	ldr	r2, [r4, #16]
 800add4:	f104 010c 	add.w	r1, r4, #12
 800add8:	3202      	adds	r2, #2
 800adda:	0092      	lsls	r2, r2, #2
 800addc:	300c      	adds	r0, #12
 800adde:	f7ff fd56 	bl	800a88e <memcpy>
 800ade2:	4621      	mov	r1, r4
 800ade4:	9801      	ldr	r0, [sp, #4]
 800ade6:	f000 f9e9 	bl	800b1bc <_Bfree>
 800adea:	464c      	mov	r4, r9
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	6122      	str	r2, [r4, #16]
 800adf2:	2201      	movs	r2, #1
 800adf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adf8:	615a      	str	r2, [r3, #20]
 800adfa:	e7be      	b.n	800ad7a <__gethex+0x362>
 800adfc:	6922      	ldr	r2, [r4, #16]
 800adfe:	455a      	cmp	r2, fp
 800ae00:	dd0b      	ble.n	800ae1a <__gethex+0x402>
 800ae02:	2101      	movs	r1, #1
 800ae04:	4620      	mov	r0, r4
 800ae06:	f7ff fd9f 	bl	800a948 <rshift>
 800ae0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae0e:	3701      	adds	r7, #1
 800ae10:	42bb      	cmp	r3, r7
 800ae12:	f6ff aee0 	blt.w	800abd6 <__gethex+0x1be>
 800ae16:	2501      	movs	r5, #1
 800ae18:	e7c2      	b.n	800ada0 <__gethex+0x388>
 800ae1a:	f016 061f 	ands.w	r6, r6, #31
 800ae1e:	d0fa      	beq.n	800ae16 <__gethex+0x3fe>
 800ae20:	4453      	add	r3, sl
 800ae22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ae26:	f000 fa7b 	bl	800b320 <__hi0bits>
 800ae2a:	f1c6 0620 	rsb	r6, r6, #32
 800ae2e:	42b0      	cmp	r0, r6
 800ae30:	dbe7      	blt.n	800ae02 <__gethex+0x3ea>
 800ae32:	e7f0      	b.n	800ae16 <__gethex+0x3fe>
 800ae34:	0800c988 	.word	0x0800c988

0800ae38 <L_shift>:
 800ae38:	f1c2 0208 	rsb	r2, r2, #8
 800ae3c:	0092      	lsls	r2, r2, #2
 800ae3e:	b570      	push	{r4, r5, r6, lr}
 800ae40:	f1c2 0620 	rsb	r6, r2, #32
 800ae44:	6843      	ldr	r3, [r0, #4]
 800ae46:	6804      	ldr	r4, [r0, #0]
 800ae48:	fa03 f506 	lsl.w	r5, r3, r6
 800ae4c:	432c      	orrs	r4, r5
 800ae4e:	40d3      	lsrs	r3, r2
 800ae50:	6004      	str	r4, [r0, #0]
 800ae52:	f840 3f04 	str.w	r3, [r0, #4]!
 800ae56:	4288      	cmp	r0, r1
 800ae58:	d3f4      	bcc.n	800ae44 <L_shift+0xc>
 800ae5a:	bd70      	pop	{r4, r5, r6, pc}

0800ae5c <__match>:
 800ae5c:	b530      	push	{r4, r5, lr}
 800ae5e:	6803      	ldr	r3, [r0, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae66:	b914      	cbnz	r4, 800ae6e <__match+0x12>
 800ae68:	6003      	str	r3, [r0, #0]
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	bd30      	pop	{r4, r5, pc}
 800ae6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae72:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae76:	2d19      	cmp	r5, #25
 800ae78:	bf98      	it	ls
 800ae7a:	3220      	addls	r2, #32
 800ae7c:	42a2      	cmp	r2, r4
 800ae7e:	d0f0      	beq.n	800ae62 <__match+0x6>
 800ae80:	2000      	movs	r0, #0
 800ae82:	e7f3      	b.n	800ae6c <__match+0x10>

0800ae84 <__hexnan>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	2500      	movs	r5, #0
 800ae8a:	680b      	ldr	r3, [r1, #0]
 800ae8c:	4682      	mov	sl, r0
 800ae8e:	115e      	asrs	r6, r3, #5
 800ae90:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae94:	f013 031f 	ands.w	r3, r3, #31
 800ae98:	bf18      	it	ne
 800ae9a:	3604      	addne	r6, #4
 800ae9c:	1f37      	subs	r7, r6, #4
 800ae9e:	4690      	mov	r8, r2
 800aea0:	46b9      	mov	r9, r7
 800aea2:	463c      	mov	r4, r7
 800aea4:	46ab      	mov	fp, r5
 800aea6:	b087      	sub	sp, #28
 800aea8:	6801      	ldr	r1, [r0, #0]
 800aeaa:	9301      	str	r3, [sp, #4]
 800aeac:	f846 5c04 	str.w	r5, [r6, #-4]
 800aeb0:	9502      	str	r5, [sp, #8]
 800aeb2:	784a      	ldrb	r2, [r1, #1]
 800aeb4:	1c4b      	adds	r3, r1, #1
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	b342      	cbz	r2, 800af0c <__hexnan+0x88>
 800aeba:	4610      	mov	r0, r2
 800aebc:	9105      	str	r1, [sp, #20]
 800aebe:	9204      	str	r2, [sp, #16]
 800aec0:	f7ff fd95 	bl	800a9ee <__hexdig_fun>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d151      	bne.n	800af6c <__hexnan+0xe8>
 800aec8:	9a04      	ldr	r2, [sp, #16]
 800aeca:	9905      	ldr	r1, [sp, #20]
 800aecc:	2a20      	cmp	r2, #32
 800aece:	d818      	bhi.n	800af02 <__hexnan+0x7e>
 800aed0:	9b02      	ldr	r3, [sp, #8]
 800aed2:	459b      	cmp	fp, r3
 800aed4:	dd13      	ble.n	800aefe <__hexnan+0x7a>
 800aed6:	454c      	cmp	r4, r9
 800aed8:	d206      	bcs.n	800aee8 <__hexnan+0x64>
 800aeda:	2d07      	cmp	r5, #7
 800aedc:	dc04      	bgt.n	800aee8 <__hexnan+0x64>
 800aede:	462a      	mov	r2, r5
 800aee0:	4649      	mov	r1, r9
 800aee2:	4620      	mov	r0, r4
 800aee4:	f7ff ffa8 	bl	800ae38 <L_shift>
 800aee8:	4544      	cmp	r4, r8
 800aeea:	d952      	bls.n	800af92 <__hexnan+0x10e>
 800aeec:	2300      	movs	r3, #0
 800aeee:	f1a4 0904 	sub.w	r9, r4, #4
 800aef2:	f844 3c04 	str.w	r3, [r4, #-4]
 800aef6:	461d      	mov	r5, r3
 800aef8:	464c      	mov	r4, r9
 800aefa:	f8cd b008 	str.w	fp, [sp, #8]
 800aefe:	9903      	ldr	r1, [sp, #12]
 800af00:	e7d7      	b.n	800aeb2 <__hexnan+0x2e>
 800af02:	2a29      	cmp	r2, #41	@ 0x29
 800af04:	d157      	bne.n	800afb6 <__hexnan+0x132>
 800af06:	3102      	adds	r1, #2
 800af08:	f8ca 1000 	str.w	r1, [sl]
 800af0c:	f1bb 0f00 	cmp.w	fp, #0
 800af10:	d051      	beq.n	800afb6 <__hexnan+0x132>
 800af12:	454c      	cmp	r4, r9
 800af14:	d206      	bcs.n	800af24 <__hexnan+0xa0>
 800af16:	2d07      	cmp	r5, #7
 800af18:	dc04      	bgt.n	800af24 <__hexnan+0xa0>
 800af1a:	462a      	mov	r2, r5
 800af1c:	4649      	mov	r1, r9
 800af1e:	4620      	mov	r0, r4
 800af20:	f7ff ff8a 	bl	800ae38 <L_shift>
 800af24:	4544      	cmp	r4, r8
 800af26:	d936      	bls.n	800af96 <__hexnan+0x112>
 800af28:	4623      	mov	r3, r4
 800af2a:	f1a8 0204 	sub.w	r2, r8, #4
 800af2e:	f853 1b04 	ldr.w	r1, [r3], #4
 800af32:	429f      	cmp	r7, r3
 800af34:	f842 1f04 	str.w	r1, [r2, #4]!
 800af38:	d2f9      	bcs.n	800af2e <__hexnan+0xaa>
 800af3a:	1b3b      	subs	r3, r7, r4
 800af3c:	f023 0303 	bic.w	r3, r3, #3
 800af40:	3304      	adds	r3, #4
 800af42:	3401      	adds	r4, #1
 800af44:	3e03      	subs	r6, #3
 800af46:	42b4      	cmp	r4, r6
 800af48:	bf88      	it	hi
 800af4a:	2304      	movhi	r3, #4
 800af4c:	2200      	movs	r2, #0
 800af4e:	4443      	add	r3, r8
 800af50:	f843 2b04 	str.w	r2, [r3], #4
 800af54:	429f      	cmp	r7, r3
 800af56:	d2fb      	bcs.n	800af50 <__hexnan+0xcc>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	b91b      	cbnz	r3, 800af64 <__hexnan+0xe0>
 800af5c:	4547      	cmp	r7, r8
 800af5e:	d128      	bne.n	800afb2 <__hexnan+0x12e>
 800af60:	2301      	movs	r3, #1
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	2005      	movs	r0, #5
 800af66:	b007      	add	sp, #28
 800af68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6c:	3501      	adds	r5, #1
 800af6e:	2d08      	cmp	r5, #8
 800af70:	f10b 0b01 	add.w	fp, fp, #1
 800af74:	dd06      	ble.n	800af84 <__hexnan+0x100>
 800af76:	4544      	cmp	r4, r8
 800af78:	d9c1      	bls.n	800aefe <__hexnan+0x7a>
 800af7a:	2300      	movs	r3, #0
 800af7c:	2501      	movs	r5, #1
 800af7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800af82:	3c04      	subs	r4, #4
 800af84:	6822      	ldr	r2, [r4, #0]
 800af86:	f000 000f 	and.w	r0, r0, #15
 800af8a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af8e:	6020      	str	r0, [r4, #0]
 800af90:	e7b5      	b.n	800aefe <__hexnan+0x7a>
 800af92:	2508      	movs	r5, #8
 800af94:	e7b3      	b.n	800aefe <__hexnan+0x7a>
 800af96:	9b01      	ldr	r3, [sp, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0dd      	beq.n	800af58 <__hexnan+0xd4>
 800af9c:	f04f 32ff 	mov.w	r2, #4294967295
 800afa0:	f1c3 0320 	rsb	r3, r3, #32
 800afa4:	40da      	lsrs	r2, r3
 800afa6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800afaa:	4013      	ands	r3, r2
 800afac:	f846 3c04 	str.w	r3, [r6, #-4]
 800afb0:	e7d2      	b.n	800af58 <__hexnan+0xd4>
 800afb2:	3f04      	subs	r7, #4
 800afb4:	e7d0      	b.n	800af58 <__hexnan+0xd4>
 800afb6:	2004      	movs	r0, #4
 800afb8:	e7d5      	b.n	800af66 <__hexnan+0xe2>
	...

0800afbc <sbrk_aligned>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	4e0f      	ldr	r6, [pc, #60]	@ (800affc <sbrk_aligned+0x40>)
 800afc0:	460c      	mov	r4, r1
 800afc2:	6831      	ldr	r1, [r6, #0]
 800afc4:	4605      	mov	r5, r0
 800afc6:	b911      	cbnz	r1, 800afce <sbrk_aligned+0x12>
 800afc8:	f000 fe0e 	bl	800bbe8 <_sbrk_r>
 800afcc:	6030      	str	r0, [r6, #0]
 800afce:	4621      	mov	r1, r4
 800afd0:	4628      	mov	r0, r5
 800afd2:	f000 fe09 	bl	800bbe8 <_sbrk_r>
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	d103      	bne.n	800afe2 <sbrk_aligned+0x26>
 800afda:	f04f 34ff 	mov.w	r4, #4294967295
 800afde:	4620      	mov	r0, r4
 800afe0:	bd70      	pop	{r4, r5, r6, pc}
 800afe2:	1cc4      	adds	r4, r0, #3
 800afe4:	f024 0403 	bic.w	r4, r4, #3
 800afe8:	42a0      	cmp	r0, r4
 800afea:	d0f8      	beq.n	800afde <sbrk_aligned+0x22>
 800afec:	1a21      	subs	r1, r4, r0
 800afee:	4628      	mov	r0, r5
 800aff0:	f000 fdfa 	bl	800bbe8 <_sbrk_r>
 800aff4:	3001      	adds	r0, #1
 800aff6:	d1f2      	bne.n	800afde <sbrk_aligned+0x22>
 800aff8:	e7ef      	b.n	800afda <sbrk_aligned+0x1e>
 800affa:	bf00      	nop
 800affc:	20000ab8 	.word	0x20000ab8

0800b000 <_malloc_r>:
 800b000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b004:	1ccd      	adds	r5, r1, #3
 800b006:	f025 0503 	bic.w	r5, r5, #3
 800b00a:	3508      	adds	r5, #8
 800b00c:	2d0c      	cmp	r5, #12
 800b00e:	bf38      	it	cc
 800b010:	250c      	movcc	r5, #12
 800b012:	2d00      	cmp	r5, #0
 800b014:	4606      	mov	r6, r0
 800b016:	db01      	blt.n	800b01c <_malloc_r+0x1c>
 800b018:	42a9      	cmp	r1, r5
 800b01a:	d904      	bls.n	800b026 <_malloc_r+0x26>
 800b01c:	230c      	movs	r3, #12
 800b01e:	6033      	str	r3, [r6, #0]
 800b020:	2000      	movs	r0, #0
 800b022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b026:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0fc <_malloc_r+0xfc>
 800b02a:	f000 f87b 	bl	800b124 <__malloc_lock>
 800b02e:	f8d8 3000 	ldr.w	r3, [r8]
 800b032:	461c      	mov	r4, r3
 800b034:	bb44      	cbnz	r4, 800b088 <_malloc_r+0x88>
 800b036:	4629      	mov	r1, r5
 800b038:	4630      	mov	r0, r6
 800b03a:	f7ff ffbf 	bl	800afbc <sbrk_aligned>
 800b03e:	1c43      	adds	r3, r0, #1
 800b040:	4604      	mov	r4, r0
 800b042:	d158      	bne.n	800b0f6 <_malloc_r+0xf6>
 800b044:	f8d8 4000 	ldr.w	r4, [r8]
 800b048:	4627      	mov	r7, r4
 800b04a:	2f00      	cmp	r7, #0
 800b04c:	d143      	bne.n	800b0d6 <_malloc_r+0xd6>
 800b04e:	2c00      	cmp	r4, #0
 800b050:	d04b      	beq.n	800b0ea <_malloc_r+0xea>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	4639      	mov	r1, r7
 800b056:	4630      	mov	r0, r6
 800b058:	eb04 0903 	add.w	r9, r4, r3
 800b05c:	f000 fdc4 	bl	800bbe8 <_sbrk_r>
 800b060:	4581      	cmp	r9, r0
 800b062:	d142      	bne.n	800b0ea <_malloc_r+0xea>
 800b064:	6821      	ldr	r1, [r4, #0]
 800b066:	4630      	mov	r0, r6
 800b068:	1a6d      	subs	r5, r5, r1
 800b06a:	4629      	mov	r1, r5
 800b06c:	f7ff ffa6 	bl	800afbc <sbrk_aligned>
 800b070:	3001      	adds	r0, #1
 800b072:	d03a      	beq.n	800b0ea <_malloc_r+0xea>
 800b074:	6823      	ldr	r3, [r4, #0]
 800b076:	442b      	add	r3, r5
 800b078:	6023      	str	r3, [r4, #0]
 800b07a:	f8d8 3000 	ldr.w	r3, [r8]
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	bb62      	cbnz	r2, 800b0dc <_malloc_r+0xdc>
 800b082:	f8c8 7000 	str.w	r7, [r8]
 800b086:	e00f      	b.n	800b0a8 <_malloc_r+0xa8>
 800b088:	6822      	ldr	r2, [r4, #0]
 800b08a:	1b52      	subs	r2, r2, r5
 800b08c:	d420      	bmi.n	800b0d0 <_malloc_r+0xd0>
 800b08e:	2a0b      	cmp	r2, #11
 800b090:	d917      	bls.n	800b0c2 <_malloc_r+0xc2>
 800b092:	1961      	adds	r1, r4, r5
 800b094:	42a3      	cmp	r3, r4
 800b096:	6025      	str	r5, [r4, #0]
 800b098:	bf18      	it	ne
 800b09a:	6059      	strne	r1, [r3, #4]
 800b09c:	6863      	ldr	r3, [r4, #4]
 800b09e:	bf08      	it	eq
 800b0a0:	f8c8 1000 	streq.w	r1, [r8]
 800b0a4:	5162      	str	r2, [r4, r5]
 800b0a6:	604b      	str	r3, [r1, #4]
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f000 f841 	bl	800b130 <__malloc_unlock>
 800b0ae:	f104 000b 	add.w	r0, r4, #11
 800b0b2:	1d23      	adds	r3, r4, #4
 800b0b4:	f020 0007 	bic.w	r0, r0, #7
 800b0b8:	1ac2      	subs	r2, r0, r3
 800b0ba:	bf1c      	itt	ne
 800b0bc:	1a1b      	subne	r3, r3, r0
 800b0be:	50a3      	strne	r3, [r4, r2]
 800b0c0:	e7af      	b.n	800b022 <_malloc_r+0x22>
 800b0c2:	6862      	ldr	r2, [r4, #4]
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	bf0c      	ite	eq
 800b0c8:	f8c8 2000 	streq.w	r2, [r8]
 800b0cc:	605a      	strne	r2, [r3, #4]
 800b0ce:	e7eb      	b.n	800b0a8 <_malloc_r+0xa8>
 800b0d0:	4623      	mov	r3, r4
 800b0d2:	6864      	ldr	r4, [r4, #4]
 800b0d4:	e7ae      	b.n	800b034 <_malloc_r+0x34>
 800b0d6:	463c      	mov	r4, r7
 800b0d8:	687f      	ldr	r7, [r7, #4]
 800b0da:	e7b6      	b.n	800b04a <_malloc_r+0x4a>
 800b0dc:	461a      	mov	r2, r3
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	d1fb      	bne.n	800b0dc <_malloc_r+0xdc>
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	6053      	str	r3, [r2, #4]
 800b0e8:	e7de      	b.n	800b0a8 <_malloc_r+0xa8>
 800b0ea:	230c      	movs	r3, #12
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	6033      	str	r3, [r6, #0]
 800b0f0:	f000 f81e 	bl	800b130 <__malloc_unlock>
 800b0f4:	e794      	b.n	800b020 <_malloc_r+0x20>
 800b0f6:	6005      	str	r5, [r0, #0]
 800b0f8:	e7d6      	b.n	800b0a8 <_malloc_r+0xa8>
 800b0fa:	bf00      	nop
 800b0fc:	20000abc 	.word	0x20000abc

0800b100 <__ascii_mbtowc>:
 800b100:	b082      	sub	sp, #8
 800b102:	b901      	cbnz	r1, 800b106 <__ascii_mbtowc+0x6>
 800b104:	a901      	add	r1, sp, #4
 800b106:	b142      	cbz	r2, 800b11a <__ascii_mbtowc+0x1a>
 800b108:	b14b      	cbz	r3, 800b11e <__ascii_mbtowc+0x1e>
 800b10a:	7813      	ldrb	r3, [r2, #0]
 800b10c:	600b      	str	r3, [r1, #0]
 800b10e:	7812      	ldrb	r2, [r2, #0]
 800b110:	1e10      	subs	r0, r2, #0
 800b112:	bf18      	it	ne
 800b114:	2001      	movne	r0, #1
 800b116:	b002      	add	sp, #8
 800b118:	4770      	bx	lr
 800b11a:	4610      	mov	r0, r2
 800b11c:	e7fb      	b.n	800b116 <__ascii_mbtowc+0x16>
 800b11e:	f06f 0001 	mvn.w	r0, #1
 800b122:	e7f8      	b.n	800b116 <__ascii_mbtowc+0x16>

0800b124 <__malloc_lock>:
 800b124:	4801      	ldr	r0, [pc, #4]	@ (800b12c <__malloc_lock+0x8>)
 800b126:	f7ff bbb0 	b.w	800a88a <__retarget_lock_acquire_recursive>
 800b12a:	bf00      	nop
 800b12c:	20000ab4 	.word	0x20000ab4

0800b130 <__malloc_unlock>:
 800b130:	4801      	ldr	r0, [pc, #4]	@ (800b138 <__malloc_unlock+0x8>)
 800b132:	f7ff bbab 	b.w	800a88c <__retarget_lock_release_recursive>
 800b136:	bf00      	nop
 800b138:	20000ab4 	.word	0x20000ab4

0800b13c <_Balloc>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	69c6      	ldr	r6, [r0, #28]
 800b140:	4604      	mov	r4, r0
 800b142:	460d      	mov	r5, r1
 800b144:	b976      	cbnz	r6, 800b164 <_Balloc+0x28>
 800b146:	2010      	movs	r0, #16
 800b148:	f000 fd90 	bl	800bc6c <malloc>
 800b14c:	4602      	mov	r2, r0
 800b14e:	61e0      	str	r0, [r4, #28]
 800b150:	b920      	cbnz	r0, 800b15c <_Balloc+0x20>
 800b152:	216b      	movs	r1, #107	@ 0x6b
 800b154:	4b17      	ldr	r3, [pc, #92]	@ (800b1b4 <_Balloc+0x78>)
 800b156:	4818      	ldr	r0, [pc, #96]	@ (800b1b8 <_Balloc+0x7c>)
 800b158:	f000 fd56 	bl	800bc08 <__assert_func>
 800b15c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b160:	6006      	str	r6, [r0, #0]
 800b162:	60c6      	str	r6, [r0, #12]
 800b164:	69e6      	ldr	r6, [r4, #28]
 800b166:	68f3      	ldr	r3, [r6, #12]
 800b168:	b183      	cbz	r3, 800b18c <_Balloc+0x50>
 800b16a:	69e3      	ldr	r3, [r4, #28]
 800b16c:	68db      	ldr	r3, [r3, #12]
 800b16e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b172:	b9b8      	cbnz	r0, 800b1a4 <_Balloc+0x68>
 800b174:	2101      	movs	r1, #1
 800b176:	fa01 f605 	lsl.w	r6, r1, r5
 800b17a:	1d72      	adds	r2, r6, #5
 800b17c:	4620      	mov	r0, r4
 800b17e:	0092      	lsls	r2, r2, #2
 800b180:	f000 fd60 	bl	800bc44 <_calloc_r>
 800b184:	b160      	cbz	r0, 800b1a0 <_Balloc+0x64>
 800b186:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b18a:	e00e      	b.n	800b1aa <_Balloc+0x6e>
 800b18c:	2221      	movs	r2, #33	@ 0x21
 800b18e:	2104      	movs	r1, #4
 800b190:	4620      	mov	r0, r4
 800b192:	f000 fd57 	bl	800bc44 <_calloc_r>
 800b196:	69e3      	ldr	r3, [r4, #28]
 800b198:	60f0      	str	r0, [r6, #12]
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e4      	bne.n	800b16a <_Balloc+0x2e>
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	6802      	ldr	r2, [r0, #0]
 800b1a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1b0:	e7f7      	b.n	800b1a2 <_Balloc+0x66>
 800b1b2:	bf00      	nop
 800b1b4:	0800c9f9 	.word	0x0800c9f9
 800b1b8:	0800ca10 	.word	0x0800ca10

0800b1bc <_Bfree>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	69c6      	ldr	r6, [r0, #28]
 800b1c0:	4605      	mov	r5, r0
 800b1c2:	460c      	mov	r4, r1
 800b1c4:	b976      	cbnz	r6, 800b1e4 <_Bfree+0x28>
 800b1c6:	2010      	movs	r0, #16
 800b1c8:	f000 fd50 	bl	800bc6c <malloc>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	61e8      	str	r0, [r5, #28]
 800b1d0:	b920      	cbnz	r0, 800b1dc <_Bfree+0x20>
 800b1d2:	218f      	movs	r1, #143	@ 0x8f
 800b1d4:	4b08      	ldr	r3, [pc, #32]	@ (800b1f8 <_Bfree+0x3c>)
 800b1d6:	4809      	ldr	r0, [pc, #36]	@ (800b1fc <_Bfree+0x40>)
 800b1d8:	f000 fd16 	bl	800bc08 <__assert_func>
 800b1dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1e0:	6006      	str	r6, [r0, #0]
 800b1e2:	60c6      	str	r6, [r0, #12]
 800b1e4:	b13c      	cbz	r4, 800b1f6 <_Bfree+0x3a>
 800b1e6:	69eb      	ldr	r3, [r5, #28]
 800b1e8:	6862      	ldr	r2, [r4, #4]
 800b1ea:	68db      	ldr	r3, [r3, #12]
 800b1ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1f0:	6021      	str	r1, [r4, #0]
 800b1f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	0800c9f9 	.word	0x0800c9f9
 800b1fc:	0800ca10 	.word	0x0800ca10

0800b200 <__multadd>:
 800b200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b204:	4607      	mov	r7, r0
 800b206:	460c      	mov	r4, r1
 800b208:	461e      	mov	r6, r3
 800b20a:	2000      	movs	r0, #0
 800b20c:	690d      	ldr	r5, [r1, #16]
 800b20e:	f101 0c14 	add.w	ip, r1, #20
 800b212:	f8dc 3000 	ldr.w	r3, [ip]
 800b216:	3001      	adds	r0, #1
 800b218:	b299      	uxth	r1, r3
 800b21a:	fb02 6101 	mla	r1, r2, r1, r6
 800b21e:	0c1e      	lsrs	r6, r3, #16
 800b220:	0c0b      	lsrs	r3, r1, #16
 800b222:	fb02 3306 	mla	r3, r2, r6, r3
 800b226:	b289      	uxth	r1, r1
 800b228:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b22c:	4285      	cmp	r5, r0
 800b22e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b232:	f84c 1b04 	str.w	r1, [ip], #4
 800b236:	dcec      	bgt.n	800b212 <__multadd+0x12>
 800b238:	b30e      	cbz	r6, 800b27e <__multadd+0x7e>
 800b23a:	68a3      	ldr	r3, [r4, #8]
 800b23c:	42ab      	cmp	r3, r5
 800b23e:	dc19      	bgt.n	800b274 <__multadd+0x74>
 800b240:	6861      	ldr	r1, [r4, #4]
 800b242:	4638      	mov	r0, r7
 800b244:	3101      	adds	r1, #1
 800b246:	f7ff ff79 	bl	800b13c <_Balloc>
 800b24a:	4680      	mov	r8, r0
 800b24c:	b928      	cbnz	r0, 800b25a <__multadd+0x5a>
 800b24e:	4602      	mov	r2, r0
 800b250:	21ba      	movs	r1, #186	@ 0xba
 800b252:	4b0c      	ldr	r3, [pc, #48]	@ (800b284 <__multadd+0x84>)
 800b254:	480c      	ldr	r0, [pc, #48]	@ (800b288 <__multadd+0x88>)
 800b256:	f000 fcd7 	bl	800bc08 <__assert_func>
 800b25a:	6922      	ldr	r2, [r4, #16]
 800b25c:	f104 010c 	add.w	r1, r4, #12
 800b260:	3202      	adds	r2, #2
 800b262:	0092      	lsls	r2, r2, #2
 800b264:	300c      	adds	r0, #12
 800b266:	f7ff fb12 	bl	800a88e <memcpy>
 800b26a:	4621      	mov	r1, r4
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff ffa5 	bl	800b1bc <_Bfree>
 800b272:	4644      	mov	r4, r8
 800b274:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b278:	3501      	adds	r5, #1
 800b27a:	615e      	str	r6, [r3, #20]
 800b27c:	6125      	str	r5, [r4, #16]
 800b27e:	4620      	mov	r0, r4
 800b280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b284:	0800c988 	.word	0x0800c988
 800b288:	0800ca10 	.word	0x0800ca10

0800b28c <__s2b>:
 800b28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b290:	4615      	mov	r5, r2
 800b292:	2209      	movs	r2, #9
 800b294:	461f      	mov	r7, r3
 800b296:	3308      	adds	r3, #8
 800b298:	460c      	mov	r4, r1
 800b29a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b29e:	4606      	mov	r6, r0
 800b2a0:	2201      	movs	r2, #1
 800b2a2:	2100      	movs	r1, #0
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	db09      	blt.n	800b2bc <__s2b+0x30>
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f7ff ff47 	bl	800b13c <_Balloc>
 800b2ae:	b940      	cbnz	r0, 800b2c2 <__s2b+0x36>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	21d3      	movs	r1, #211	@ 0xd3
 800b2b4:	4b18      	ldr	r3, [pc, #96]	@ (800b318 <__s2b+0x8c>)
 800b2b6:	4819      	ldr	r0, [pc, #100]	@ (800b31c <__s2b+0x90>)
 800b2b8:	f000 fca6 	bl	800bc08 <__assert_func>
 800b2bc:	0052      	lsls	r2, r2, #1
 800b2be:	3101      	adds	r1, #1
 800b2c0:	e7f0      	b.n	800b2a4 <__s2b+0x18>
 800b2c2:	9b08      	ldr	r3, [sp, #32]
 800b2c4:	2d09      	cmp	r5, #9
 800b2c6:	6143      	str	r3, [r0, #20]
 800b2c8:	f04f 0301 	mov.w	r3, #1
 800b2cc:	6103      	str	r3, [r0, #16]
 800b2ce:	dd16      	ble.n	800b2fe <__s2b+0x72>
 800b2d0:	f104 0909 	add.w	r9, r4, #9
 800b2d4:	46c8      	mov	r8, r9
 800b2d6:	442c      	add	r4, r5
 800b2d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b2dc:	4601      	mov	r1, r0
 800b2de:	220a      	movs	r2, #10
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	3b30      	subs	r3, #48	@ 0x30
 800b2e4:	f7ff ff8c 	bl	800b200 <__multadd>
 800b2e8:	45a0      	cmp	r8, r4
 800b2ea:	d1f5      	bne.n	800b2d8 <__s2b+0x4c>
 800b2ec:	f1a5 0408 	sub.w	r4, r5, #8
 800b2f0:	444c      	add	r4, r9
 800b2f2:	1b2d      	subs	r5, r5, r4
 800b2f4:	1963      	adds	r3, r4, r5
 800b2f6:	42bb      	cmp	r3, r7
 800b2f8:	db04      	blt.n	800b304 <__s2b+0x78>
 800b2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fe:	2509      	movs	r5, #9
 800b300:	340a      	adds	r4, #10
 800b302:	e7f6      	b.n	800b2f2 <__s2b+0x66>
 800b304:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b308:	4601      	mov	r1, r0
 800b30a:	220a      	movs	r2, #10
 800b30c:	4630      	mov	r0, r6
 800b30e:	3b30      	subs	r3, #48	@ 0x30
 800b310:	f7ff ff76 	bl	800b200 <__multadd>
 800b314:	e7ee      	b.n	800b2f4 <__s2b+0x68>
 800b316:	bf00      	nop
 800b318:	0800c988 	.word	0x0800c988
 800b31c:	0800ca10 	.word	0x0800ca10

0800b320 <__hi0bits>:
 800b320:	4603      	mov	r3, r0
 800b322:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b326:	bf3a      	itte	cc
 800b328:	0403      	lslcc	r3, r0, #16
 800b32a:	2010      	movcc	r0, #16
 800b32c:	2000      	movcs	r0, #0
 800b32e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b332:	bf3c      	itt	cc
 800b334:	021b      	lslcc	r3, r3, #8
 800b336:	3008      	addcc	r0, #8
 800b338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b33c:	bf3c      	itt	cc
 800b33e:	011b      	lslcc	r3, r3, #4
 800b340:	3004      	addcc	r0, #4
 800b342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b346:	bf3c      	itt	cc
 800b348:	009b      	lslcc	r3, r3, #2
 800b34a:	3002      	addcc	r0, #2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	db05      	blt.n	800b35c <__hi0bits+0x3c>
 800b350:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b354:	f100 0001 	add.w	r0, r0, #1
 800b358:	bf08      	it	eq
 800b35a:	2020      	moveq	r0, #32
 800b35c:	4770      	bx	lr

0800b35e <__lo0bits>:
 800b35e:	6803      	ldr	r3, [r0, #0]
 800b360:	4602      	mov	r2, r0
 800b362:	f013 0007 	ands.w	r0, r3, #7
 800b366:	d00b      	beq.n	800b380 <__lo0bits+0x22>
 800b368:	07d9      	lsls	r1, r3, #31
 800b36a:	d421      	bmi.n	800b3b0 <__lo0bits+0x52>
 800b36c:	0798      	lsls	r0, r3, #30
 800b36e:	bf49      	itett	mi
 800b370:	085b      	lsrmi	r3, r3, #1
 800b372:	089b      	lsrpl	r3, r3, #2
 800b374:	2001      	movmi	r0, #1
 800b376:	6013      	strmi	r3, [r2, #0]
 800b378:	bf5c      	itt	pl
 800b37a:	2002      	movpl	r0, #2
 800b37c:	6013      	strpl	r3, [r2, #0]
 800b37e:	4770      	bx	lr
 800b380:	b299      	uxth	r1, r3
 800b382:	b909      	cbnz	r1, 800b388 <__lo0bits+0x2a>
 800b384:	2010      	movs	r0, #16
 800b386:	0c1b      	lsrs	r3, r3, #16
 800b388:	b2d9      	uxtb	r1, r3
 800b38a:	b909      	cbnz	r1, 800b390 <__lo0bits+0x32>
 800b38c:	3008      	adds	r0, #8
 800b38e:	0a1b      	lsrs	r3, r3, #8
 800b390:	0719      	lsls	r1, r3, #28
 800b392:	bf04      	itt	eq
 800b394:	091b      	lsreq	r3, r3, #4
 800b396:	3004      	addeq	r0, #4
 800b398:	0799      	lsls	r1, r3, #30
 800b39a:	bf04      	itt	eq
 800b39c:	089b      	lsreq	r3, r3, #2
 800b39e:	3002      	addeq	r0, #2
 800b3a0:	07d9      	lsls	r1, r3, #31
 800b3a2:	d403      	bmi.n	800b3ac <__lo0bits+0x4e>
 800b3a4:	085b      	lsrs	r3, r3, #1
 800b3a6:	f100 0001 	add.w	r0, r0, #1
 800b3aa:	d003      	beq.n	800b3b4 <__lo0bits+0x56>
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	4770      	bx	lr
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	4770      	bx	lr
 800b3b4:	2020      	movs	r0, #32
 800b3b6:	4770      	bx	lr

0800b3b8 <__i2b>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	2101      	movs	r1, #1
 800b3be:	f7ff febd 	bl	800b13c <_Balloc>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	b928      	cbnz	r0, 800b3d2 <__i2b+0x1a>
 800b3c6:	f240 1145 	movw	r1, #325	@ 0x145
 800b3ca:	4b04      	ldr	r3, [pc, #16]	@ (800b3dc <__i2b+0x24>)
 800b3cc:	4804      	ldr	r0, [pc, #16]	@ (800b3e0 <__i2b+0x28>)
 800b3ce:	f000 fc1b 	bl	800bc08 <__assert_func>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	6144      	str	r4, [r0, #20]
 800b3d6:	6103      	str	r3, [r0, #16]
 800b3d8:	bd10      	pop	{r4, pc}
 800b3da:	bf00      	nop
 800b3dc:	0800c988 	.word	0x0800c988
 800b3e0:	0800ca10 	.word	0x0800ca10

0800b3e4 <__multiply>:
 800b3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e8:	4617      	mov	r7, r2
 800b3ea:	690a      	ldr	r2, [r1, #16]
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	4689      	mov	r9, r1
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	bfa2      	ittt	ge
 800b3f4:	463b      	movge	r3, r7
 800b3f6:	460f      	movge	r7, r1
 800b3f8:	4699      	movge	r9, r3
 800b3fa:	693d      	ldr	r5, [r7, #16]
 800b3fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	6879      	ldr	r1, [r7, #4]
 800b404:	eb05 060a 	add.w	r6, r5, sl
 800b408:	42b3      	cmp	r3, r6
 800b40a:	b085      	sub	sp, #20
 800b40c:	bfb8      	it	lt
 800b40e:	3101      	addlt	r1, #1
 800b410:	f7ff fe94 	bl	800b13c <_Balloc>
 800b414:	b930      	cbnz	r0, 800b424 <__multiply+0x40>
 800b416:	4602      	mov	r2, r0
 800b418:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b41c:	4b40      	ldr	r3, [pc, #256]	@ (800b520 <__multiply+0x13c>)
 800b41e:	4841      	ldr	r0, [pc, #260]	@ (800b524 <__multiply+0x140>)
 800b420:	f000 fbf2 	bl	800bc08 <__assert_func>
 800b424:	f100 0414 	add.w	r4, r0, #20
 800b428:	4623      	mov	r3, r4
 800b42a:	2200      	movs	r2, #0
 800b42c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b430:	4573      	cmp	r3, lr
 800b432:	d320      	bcc.n	800b476 <__multiply+0x92>
 800b434:	f107 0814 	add.w	r8, r7, #20
 800b438:	f109 0114 	add.w	r1, r9, #20
 800b43c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b440:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b444:	9302      	str	r3, [sp, #8]
 800b446:	1beb      	subs	r3, r5, r7
 800b448:	3b15      	subs	r3, #21
 800b44a:	f023 0303 	bic.w	r3, r3, #3
 800b44e:	3304      	adds	r3, #4
 800b450:	3715      	adds	r7, #21
 800b452:	42bd      	cmp	r5, r7
 800b454:	bf38      	it	cc
 800b456:	2304      	movcc	r3, #4
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	9b02      	ldr	r3, [sp, #8]
 800b45c:	9103      	str	r1, [sp, #12]
 800b45e:	428b      	cmp	r3, r1
 800b460:	d80c      	bhi.n	800b47c <__multiply+0x98>
 800b462:	2e00      	cmp	r6, #0
 800b464:	dd03      	ble.n	800b46e <__multiply+0x8a>
 800b466:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d055      	beq.n	800b51a <__multiply+0x136>
 800b46e:	6106      	str	r6, [r0, #16]
 800b470:	b005      	add	sp, #20
 800b472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b476:	f843 2b04 	str.w	r2, [r3], #4
 800b47a:	e7d9      	b.n	800b430 <__multiply+0x4c>
 800b47c:	f8b1 a000 	ldrh.w	sl, [r1]
 800b480:	f1ba 0f00 	cmp.w	sl, #0
 800b484:	d01f      	beq.n	800b4c6 <__multiply+0xe2>
 800b486:	46c4      	mov	ip, r8
 800b488:	46a1      	mov	r9, r4
 800b48a:	2700      	movs	r7, #0
 800b48c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b490:	f8d9 3000 	ldr.w	r3, [r9]
 800b494:	fa1f fb82 	uxth.w	fp, r2
 800b498:	b29b      	uxth	r3, r3
 800b49a:	fb0a 330b 	mla	r3, sl, fp, r3
 800b49e:	443b      	add	r3, r7
 800b4a0:	f8d9 7000 	ldr.w	r7, [r9]
 800b4a4:	0c12      	lsrs	r2, r2, #16
 800b4a6:	0c3f      	lsrs	r7, r7, #16
 800b4a8:	fb0a 7202 	mla	r2, sl, r2, r7
 800b4ac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4b6:	4565      	cmp	r5, ip
 800b4b8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b4bc:	f849 3b04 	str.w	r3, [r9], #4
 800b4c0:	d8e4      	bhi.n	800b48c <__multiply+0xa8>
 800b4c2:	9b01      	ldr	r3, [sp, #4]
 800b4c4:	50e7      	str	r7, [r4, r3]
 800b4c6:	9b03      	ldr	r3, [sp, #12]
 800b4c8:	3104      	adds	r1, #4
 800b4ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b4ce:	f1b9 0f00 	cmp.w	r9, #0
 800b4d2:	d020      	beq.n	800b516 <__multiply+0x132>
 800b4d4:	4647      	mov	r7, r8
 800b4d6:	46a4      	mov	ip, r4
 800b4d8:	f04f 0a00 	mov.w	sl, #0
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	f8b7 b000 	ldrh.w	fp, [r7]
 800b4e2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	fb09 220b 	mla	r2, r9, fp, r2
 800b4ec:	4452      	add	r2, sl
 800b4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4f2:	f84c 3b04 	str.w	r3, [ip], #4
 800b4f6:	f857 3b04 	ldr.w	r3, [r7], #4
 800b4fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b4fe:	f8bc 3000 	ldrh.w	r3, [ip]
 800b502:	42bd      	cmp	r5, r7
 800b504:	fb09 330a 	mla	r3, r9, sl, r3
 800b508:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b50c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b510:	d8e5      	bhi.n	800b4de <__multiply+0xfa>
 800b512:	9a01      	ldr	r2, [sp, #4]
 800b514:	50a3      	str	r3, [r4, r2]
 800b516:	3404      	adds	r4, #4
 800b518:	e79f      	b.n	800b45a <__multiply+0x76>
 800b51a:	3e01      	subs	r6, #1
 800b51c:	e7a1      	b.n	800b462 <__multiply+0x7e>
 800b51e:	bf00      	nop
 800b520:	0800c988 	.word	0x0800c988
 800b524:	0800ca10 	.word	0x0800ca10

0800b528 <__pow5mult>:
 800b528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b52c:	4615      	mov	r5, r2
 800b52e:	f012 0203 	ands.w	r2, r2, #3
 800b532:	4607      	mov	r7, r0
 800b534:	460e      	mov	r6, r1
 800b536:	d007      	beq.n	800b548 <__pow5mult+0x20>
 800b538:	4c25      	ldr	r4, [pc, #148]	@ (800b5d0 <__pow5mult+0xa8>)
 800b53a:	3a01      	subs	r2, #1
 800b53c:	2300      	movs	r3, #0
 800b53e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b542:	f7ff fe5d 	bl	800b200 <__multadd>
 800b546:	4606      	mov	r6, r0
 800b548:	10ad      	asrs	r5, r5, #2
 800b54a:	d03d      	beq.n	800b5c8 <__pow5mult+0xa0>
 800b54c:	69fc      	ldr	r4, [r7, #28]
 800b54e:	b97c      	cbnz	r4, 800b570 <__pow5mult+0x48>
 800b550:	2010      	movs	r0, #16
 800b552:	f000 fb8b 	bl	800bc6c <malloc>
 800b556:	4602      	mov	r2, r0
 800b558:	61f8      	str	r0, [r7, #28]
 800b55a:	b928      	cbnz	r0, 800b568 <__pow5mult+0x40>
 800b55c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b560:	4b1c      	ldr	r3, [pc, #112]	@ (800b5d4 <__pow5mult+0xac>)
 800b562:	481d      	ldr	r0, [pc, #116]	@ (800b5d8 <__pow5mult+0xb0>)
 800b564:	f000 fb50 	bl	800bc08 <__assert_func>
 800b568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b56c:	6004      	str	r4, [r0, #0]
 800b56e:	60c4      	str	r4, [r0, #12]
 800b570:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b578:	b94c      	cbnz	r4, 800b58e <__pow5mult+0x66>
 800b57a:	f240 2171 	movw	r1, #625	@ 0x271
 800b57e:	4638      	mov	r0, r7
 800b580:	f7ff ff1a 	bl	800b3b8 <__i2b>
 800b584:	2300      	movs	r3, #0
 800b586:	4604      	mov	r4, r0
 800b588:	f8c8 0008 	str.w	r0, [r8, #8]
 800b58c:	6003      	str	r3, [r0, #0]
 800b58e:	f04f 0900 	mov.w	r9, #0
 800b592:	07eb      	lsls	r3, r5, #31
 800b594:	d50a      	bpl.n	800b5ac <__pow5mult+0x84>
 800b596:	4631      	mov	r1, r6
 800b598:	4622      	mov	r2, r4
 800b59a:	4638      	mov	r0, r7
 800b59c:	f7ff ff22 	bl	800b3e4 <__multiply>
 800b5a0:	4680      	mov	r8, r0
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4638      	mov	r0, r7
 800b5a6:	f7ff fe09 	bl	800b1bc <_Bfree>
 800b5aa:	4646      	mov	r6, r8
 800b5ac:	106d      	asrs	r5, r5, #1
 800b5ae:	d00b      	beq.n	800b5c8 <__pow5mult+0xa0>
 800b5b0:	6820      	ldr	r0, [r4, #0]
 800b5b2:	b938      	cbnz	r0, 800b5c4 <__pow5mult+0x9c>
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	f7ff ff13 	bl	800b3e4 <__multiply>
 800b5be:	6020      	str	r0, [r4, #0]
 800b5c0:	f8c0 9000 	str.w	r9, [r0]
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	e7e4      	b.n	800b592 <__pow5mult+0x6a>
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ce:	bf00      	nop
 800b5d0:	0800cb28 	.word	0x0800cb28
 800b5d4:	0800c9f9 	.word	0x0800c9f9
 800b5d8:	0800ca10 	.word	0x0800ca10

0800b5dc <__lshift>:
 800b5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e0:	460c      	mov	r4, r1
 800b5e2:	4607      	mov	r7, r0
 800b5e4:	4691      	mov	r9, r2
 800b5e6:	6923      	ldr	r3, [r4, #16]
 800b5e8:	6849      	ldr	r1, [r1, #4]
 800b5ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b5ee:	68a3      	ldr	r3, [r4, #8]
 800b5f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5f4:	f108 0601 	add.w	r6, r8, #1
 800b5f8:	42b3      	cmp	r3, r6
 800b5fa:	db0b      	blt.n	800b614 <__lshift+0x38>
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	f7ff fd9d 	bl	800b13c <_Balloc>
 800b602:	4605      	mov	r5, r0
 800b604:	b948      	cbnz	r0, 800b61a <__lshift+0x3e>
 800b606:	4602      	mov	r2, r0
 800b608:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b60c:	4b27      	ldr	r3, [pc, #156]	@ (800b6ac <__lshift+0xd0>)
 800b60e:	4828      	ldr	r0, [pc, #160]	@ (800b6b0 <__lshift+0xd4>)
 800b610:	f000 fafa 	bl	800bc08 <__assert_func>
 800b614:	3101      	adds	r1, #1
 800b616:	005b      	lsls	r3, r3, #1
 800b618:	e7ee      	b.n	800b5f8 <__lshift+0x1c>
 800b61a:	2300      	movs	r3, #0
 800b61c:	f100 0114 	add.w	r1, r0, #20
 800b620:	f100 0210 	add.w	r2, r0, #16
 800b624:	4618      	mov	r0, r3
 800b626:	4553      	cmp	r3, sl
 800b628:	db33      	blt.n	800b692 <__lshift+0xb6>
 800b62a:	6920      	ldr	r0, [r4, #16]
 800b62c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b630:	f104 0314 	add.w	r3, r4, #20
 800b634:	f019 091f 	ands.w	r9, r9, #31
 800b638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b63c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b640:	d02b      	beq.n	800b69a <__lshift+0xbe>
 800b642:	468a      	mov	sl, r1
 800b644:	2200      	movs	r2, #0
 800b646:	f1c9 0e20 	rsb	lr, r9, #32
 800b64a:	6818      	ldr	r0, [r3, #0]
 800b64c:	fa00 f009 	lsl.w	r0, r0, r9
 800b650:	4310      	orrs	r0, r2
 800b652:	f84a 0b04 	str.w	r0, [sl], #4
 800b656:	f853 2b04 	ldr.w	r2, [r3], #4
 800b65a:	459c      	cmp	ip, r3
 800b65c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b660:	d8f3      	bhi.n	800b64a <__lshift+0x6e>
 800b662:	ebac 0304 	sub.w	r3, ip, r4
 800b666:	3b15      	subs	r3, #21
 800b668:	f023 0303 	bic.w	r3, r3, #3
 800b66c:	3304      	adds	r3, #4
 800b66e:	f104 0015 	add.w	r0, r4, #21
 800b672:	4560      	cmp	r0, ip
 800b674:	bf88      	it	hi
 800b676:	2304      	movhi	r3, #4
 800b678:	50ca      	str	r2, [r1, r3]
 800b67a:	b10a      	cbz	r2, 800b680 <__lshift+0xa4>
 800b67c:	f108 0602 	add.w	r6, r8, #2
 800b680:	3e01      	subs	r6, #1
 800b682:	4638      	mov	r0, r7
 800b684:	4621      	mov	r1, r4
 800b686:	612e      	str	r6, [r5, #16]
 800b688:	f7ff fd98 	bl	800b1bc <_Bfree>
 800b68c:	4628      	mov	r0, r5
 800b68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b692:	f842 0f04 	str.w	r0, [r2, #4]!
 800b696:	3301      	adds	r3, #1
 800b698:	e7c5      	b.n	800b626 <__lshift+0x4a>
 800b69a:	3904      	subs	r1, #4
 800b69c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6a0:	459c      	cmp	ip, r3
 800b6a2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6a6:	d8f9      	bhi.n	800b69c <__lshift+0xc0>
 800b6a8:	e7ea      	b.n	800b680 <__lshift+0xa4>
 800b6aa:	bf00      	nop
 800b6ac:	0800c988 	.word	0x0800c988
 800b6b0:	0800ca10 	.word	0x0800ca10

0800b6b4 <__mcmp>:
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	690a      	ldr	r2, [r1, #16]
 800b6b8:	6900      	ldr	r0, [r0, #16]
 800b6ba:	b530      	push	{r4, r5, lr}
 800b6bc:	1a80      	subs	r0, r0, r2
 800b6be:	d10e      	bne.n	800b6de <__mcmp+0x2a>
 800b6c0:	3314      	adds	r3, #20
 800b6c2:	3114      	adds	r1, #20
 800b6c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b6c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b6cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b6d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b6d4:	4295      	cmp	r5, r2
 800b6d6:	d003      	beq.n	800b6e0 <__mcmp+0x2c>
 800b6d8:	d205      	bcs.n	800b6e6 <__mcmp+0x32>
 800b6da:	f04f 30ff 	mov.w	r0, #4294967295
 800b6de:	bd30      	pop	{r4, r5, pc}
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d3f3      	bcc.n	800b6cc <__mcmp+0x18>
 800b6e4:	e7fb      	b.n	800b6de <__mcmp+0x2a>
 800b6e6:	2001      	movs	r0, #1
 800b6e8:	e7f9      	b.n	800b6de <__mcmp+0x2a>
	...

0800b6ec <__mdiff>:
 800b6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	4689      	mov	r9, r1
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4648      	mov	r0, r9
 800b6f8:	4614      	mov	r4, r2
 800b6fa:	f7ff ffdb 	bl	800b6b4 <__mcmp>
 800b6fe:	1e05      	subs	r5, r0, #0
 800b700:	d112      	bne.n	800b728 <__mdiff+0x3c>
 800b702:	4629      	mov	r1, r5
 800b704:	4630      	mov	r0, r6
 800b706:	f7ff fd19 	bl	800b13c <_Balloc>
 800b70a:	4602      	mov	r2, r0
 800b70c:	b928      	cbnz	r0, 800b71a <__mdiff+0x2e>
 800b70e:	f240 2137 	movw	r1, #567	@ 0x237
 800b712:	4b3e      	ldr	r3, [pc, #248]	@ (800b80c <__mdiff+0x120>)
 800b714:	483e      	ldr	r0, [pc, #248]	@ (800b810 <__mdiff+0x124>)
 800b716:	f000 fa77 	bl	800bc08 <__assert_func>
 800b71a:	2301      	movs	r3, #1
 800b71c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b720:	4610      	mov	r0, r2
 800b722:	b003      	add	sp, #12
 800b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b728:	bfbc      	itt	lt
 800b72a:	464b      	movlt	r3, r9
 800b72c:	46a1      	movlt	r9, r4
 800b72e:	4630      	mov	r0, r6
 800b730:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b734:	bfba      	itte	lt
 800b736:	461c      	movlt	r4, r3
 800b738:	2501      	movlt	r5, #1
 800b73a:	2500      	movge	r5, #0
 800b73c:	f7ff fcfe 	bl	800b13c <_Balloc>
 800b740:	4602      	mov	r2, r0
 800b742:	b918      	cbnz	r0, 800b74c <__mdiff+0x60>
 800b744:	f240 2145 	movw	r1, #581	@ 0x245
 800b748:	4b30      	ldr	r3, [pc, #192]	@ (800b80c <__mdiff+0x120>)
 800b74a:	e7e3      	b.n	800b714 <__mdiff+0x28>
 800b74c:	f100 0b14 	add.w	fp, r0, #20
 800b750:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b754:	f109 0310 	add.w	r3, r9, #16
 800b758:	60c5      	str	r5, [r0, #12]
 800b75a:	f04f 0c00 	mov.w	ip, #0
 800b75e:	f109 0514 	add.w	r5, r9, #20
 800b762:	46d9      	mov	r9, fp
 800b764:	6926      	ldr	r6, [r4, #16]
 800b766:	f104 0e14 	add.w	lr, r4, #20
 800b76a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b76e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	9b01      	ldr	r3, [sp, #4]
 800b776:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b77a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b77e:	b281      	uxth	r1, r0
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	fa1f f38a 	uxth.w	r3, sl
 800b786:	1a5b      	subs	r3, r3, r1
 800b788:	0c00      	lsrs	r0, r0, #16
 800b78a:	4463      	add	r3, ip
 800b78c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b790:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b794:	b29b      	uxth	r3, r3
 800b796:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b79a:	4576      	cmp	r6, lr
 800b79c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b7a0:	f849 3b04 	str.w	r3, [r9], #4
 800b7a4:	d8e6      	bhi.n	800b774 <__mdiff+0x88>
 800b7a6:	1b33      	subs	r3, r6, r4
 800b7a8:	3b15      	subs	r3, #21
 800b7aa:	f023 0303 	bic.w	r3, r3, #3
 800b7ae:	3415      	adds	r4, #21
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	42a6      	cmp	r6, r4
 800b7b4:	bf38      	it	cc
 800b7b6:	2304      	movcc	r3, #4
 800b7b8:	441d      	add	r5, r3
 800b7ba:	445b      	add	r3, fp
 800b7bc:	461e      	mov	r6, r3
 800b7be:	462c      	mov	r4, r5
 800b7c0:	4544      	cmp	r4, r8
 800b7c2:	d30e      	bcc.n	800b7e2 <__mdiff+0xf6>
 800b7c4:	f108 0103 	add.w	r1, r8, #3
 800b7c8:	1b49      	subs	r1, r1, r5
 800b7ca:	f021 0103 	bic.w	r1, r1, #3
 800b7ce:	3d03      	subs	r5, #3
 800b7d0:	45a8      	cmp	r8, r5
 800b7d2:	bf38      	it	cc
 800b7d4:	2100      	movcc	r1, #0
 800b7d6:	440b      	add	r3, r1
 800b7d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7dc:	b199      	cbz	r1, 800b806 <__mdiff+0x11a>
 800b7de:	6117      	str	r7, [r2, #16]
 800b7e0:	e79e      	b.n	800b720 <__mdiff+0x34>
 800b7e2:	46e6      	mov	lr, ip
 800b7e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b7e8:	fa1f fc81 	uxth.w	ip, r1
 800b7ec:	44f4      	add	ip, lr
 800b7ee:	0c08      	lsrs	r0, r1, #16
 800b7f0:	4471      	add	r1, lr
 800b7f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b7f6:	b289      	uxth	r1, r1
 800b7f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b7fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b800:	f846 1b04 	str.w	r1, [r6], #4
 800b804:	e7dc      	b.n	800b7c0 <__mdiff+0xd4>
 800b806:	3f01      	subs	r7, #1
 800b808:	e7e6      	b.n	800b7d8 <__mdiff+0xec>
 800b80a:	bf00      	nop
 800b80c:	0800c988 	.word	0x0800c988
 800b810:	0800ca10 	.word	0x0800ca10

0800b814 <__ulp>:
 800b814:	4b0e      	ldr	r3, [pc, #56]	@ (800b850 <__ulp+0x3c>)
 800b816:	400b      	ands	r3, r1
 800b818:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	dc08      	bgt.n	800b832 <__ulp+0x1e>
 800b820:	425b      	negs	r3, r3
 800b822:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b826:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b82a:	da04      	bge.n	800b836 <__ulp+0x22>
 800b82c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b830:	4113      	asrs	r3, r2
 800b832:	2200      	movs	r2, #0
 800b834:	e008      	b.n	800b848 <__ulp+0x34>
 800b836:	f1a2 0314 	sub.w	r3, r2, #20
 800b83a:	2b1e      	cmp	r3, #30
 800b83c:	bfd6      	itet	le
 800b83e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b842:	2201      	movgt	r2, #1
 800b844:	40da      	lsrle	r2, r3
 800b846:	2300      	movs	r3, #0
 800b848:	4619      	mov	r1, r3
 800b84a:	4610      	mov	r0, r2
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	7ff00000 	.word	0x7ff00000

0800b854 <__b2d>:
 800b854:	6902      	ldr	r2, [r0, #16]
 800b856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b858:	f100 0614 	add.w	r6, r0, #20
 800b85c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b860:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b864:	4f1e      	ldr	r7, [pc, #120]	@ (800b8e0 <__b2d+0x8c>)
 800b866:	4620      	mov	r0, r4
 800b868:	f7ff fd5a 	bl	800b320 <__hi0bits>
 800b86c:	4603      	mov	r3, r0
 800b86e:	f1c0 0020 	rsb	r0, r0, #32
 800b872:	2b0a      	cmp	r3, #10
 800b874:	f1a2 0504 	sub.w	r5, r2, #4
 800b878:	6008      	str	r0, [r1, #0]
 800b87a:	dc12      	bgt.n	800b8a2 <__b2d+0x4e>
 800b87c:	42ae      	cmp	r6, r5
 800b87e:	bf2c      	ite	cs
 800b880:	2200      	movcs	r2, #0
 800b882:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b886:	f1c3 0c0b 	rsb	ip, r3, #11
 800b88a:	3315      	adds	r3, #21
 800b88c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800b890:	fa04 f303 	lsl.w	r3, r4, r3
 800b894:	fa22 f20c 	lsr.w	r2, r2, ip
 800b898:	ea4e 0107 	orr.w	r1, lr, r7
 800b89c:	431a      	orrs	r2, r3
 800b89e:	4610      	mov	r0, r2
 800b8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8a2:	42ae      	cmp	r6, r5
 800b8a4:	bf36      	itet	cc
 800b8a6:	f1a2 0508 	subcc.w	r5, r2, #8
 800b8aa:	2200      	movcs	r2, #0
 800b8ac:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800b8b0:	3b0b      	subs	r3, #11
 800b8b2:	d012      	beq.n	800b8da <__b2d+0x86>
 800b8b4:	f1c3 0720 	rsb	r7, r3, #32
 800b8b8:	fa22 f107 	lsr.w	r1, r2, r7
 800b8bc:	409c      	lsls	r4, r3
 800b8be:	430c      	orrs	r4, r1
 800b8c0:	42b5      	cmp	r5, r6
 800b8c2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800b8c6:	bf94      	ite	ls
 800b8c8:	2400      	movls	r4, #0
 800b8ca:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800b8ce:	409a      	lsls	r2, r3
 800b8d0:	40fc      	lsrs	r4, r7
 800b8d2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800b8d6:	4322      	orrs	r2, r4
 800b8d8:	e7e1      	b.n	800b89e <__b2d+0x4a>
 800b8da:	ea44 0107 	orr.w	r1, r4, r7
 800b8de:	e7de      	b.n	800b89e <__b2d+0x4a>
 800b8e0:	3ff00000 	.word	0x3ff00000

0800b8e4 <__d2b>:
 800b8e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b8e8:	2101      	movs	r1, #1
 800b8ea:	4690      	mov	r8, r2
 800b8ec:	4699      	mov	r9, r3
 800b8ee:	9e08      	ldr	r6, [sp, #32]
 800b8f0:	f7ff fc24 	bl	800b13c <_Balloc>
 800b8f4:	4604      	mov	r4, r0
 800b8f6:	b930      	cbnz	r0, 800b906 <__d2b+0x22>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8fe:	4b23      	ldr	r3, [pc, #140]	@ (800b98c <__d2b+0xa8>)
 800b900:	4823      	ldr	r0, [pc, #140]	@ (800b990 <__d2b+0xac>)
 800b902:	f000 f981 	bl	800bc08 <__assert_func>
 800b906:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b90a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b90e:	b10d      	cbz	r5, 800b914 <__d2b+0x30>
 800b910:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b914:	9301      	str	r3, [sp, #4]
 800b916:	f1b8 0300 	subs.w	r3, r8, #0
 800b91a:	d024      	beq.n	800b966 <__d2b+0x82>
 800b91c:	4668      	mov	r0, sp
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	f7ff fd1d 	bl	800b35e <__lo0bits>
 800b924:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b928:	b1d8      	cbz	r0, 800b962 <__d2b+0x7e>
 800b92a:	f1c0 0320 	rsb	r3, r0, #32
 800b92e:	fa02 f303 	lsl.w	r3, r2, r3
 800b932:	430b      	orrs	r3, r1
 800b934:	40c2      	lsrs	r2, r0
 800b936:	6163      	str	r3, [r4, #20]
 800b938:	9201      	str	r2, [sp, #4]
 800b93a:	9b01      	ldr	r3, [sp, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	bf0c      	ite	eq
 800b940:	2201      	moveq	r2, #1
 800b942:	2202      	movne	r2, #2
 800b944:	61a3      	str	r3, [r4, #24]
 800b946:	6122      	str	r2, [r4, #16]
 800b948:	b1ad      	cbz	r5, 800b976 <__d2b+0x92>
 800b94a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b94e:	4405      	add	r5, r0
 800b950:	6035      	str	r5, [r6, #0]
 800b952:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b958:	6018      	str	r0, [r3, #0]
 800b95a:	4620      	mov	r0, r4
 800b95c:	b002      	add	sp, #8
 800b95e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b962:	6161      	str	r1, [r4, #20]
 800b964:	e7e9      	b.n	800b93a <__d2b+0x56>
 800b966:	a801      	add	r0, sp, #4
 800b968:	f7ff fcf9 	bl	800b35e <__lo0bits>
 800b96c:	9b01      	ldr	r3, [sp, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	6163      	str	r3, [r4, #20]
 800b972:	3020      	adds	r0, #32
 800b974:	e7e7      	b.n	800b946 <__d2b+0x62>
 800b976:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b97a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b97e:	6030      	str	r0, [r6, #0]
 800b980:	6918      	ldr	r0, [r3, #16]
 800b982:	f7ff fccd 	bl	800b320 <__hi0bits>
 800b986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b98a:	e7e4      	b.n	800b956 <__d2b+0x72>
 800b98c:	0800c988 	.word	0x0800c988
 800b990:	0800ca10 	.word	0x0800ca10

0800b994 <__ratio>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	b085      	sub	sp, #20
 800b99a:	e9cd 1000 	strd	r1, r0, [sp]
 800b99e:	a902      	add	r1, sp, #8
 800b9a0:	f7ff ff58 	bl	800b854 <__b2d>
 800b9a4:	468b      	mov	fp, r1
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	460f      	mov	r7, r1
 800b9aa:	9800      	ldr	r0, [sp, #0]
 800b9ac:	a903      	add	r1, sp, #12
 800b9ae:	f7ff ff51 	bl	800b854 <__b2d>
 800b9b2:	460d      	mov	r5, r1
 800b9b4:	9b01      	ldr	r3, [sp, #4]
 800b9b6:	4689      	mov	r9, r1
 800b9b8:	6919      	ldr	r1, [r3, #16]
 800b9ba:	9b00      	ldr	r3, [sp, #0]
 800b9bc:	4604      	mov	r4, r0
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	1ac9      	subs	r1, r1, r3
 800b9c4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b9c8:	1a9b      	subs	r3, r3, r2
 800b9ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	bfcd      	iteet	gt
 800b9d2:	463a      	movgt	r2, r7
 800b9d4:	462a      	movle	r2, r5
 800b9d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b9da:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b9de:	bfd8      	it	le
 800b9e0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b9e4:	464b      	mov	r3, r9
 800b9e6:	4622      	mov	r2, r4
 800b9e8:	4659      	mov	r1, fp
 800b9ea:	f7f4 fe9f 	bl	800072c <__aeabi_ddiv>
 800b9ee:	b005      	add	sp, #20
 800b9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9f4 <__copybits>:
 800b9f4:	3901      	subs	r1, #1
 800b9f6:	b570      	push	{r4, r5, r6, lr}
 800b9f8:	1149      	asrs	r1, r1, #5
 800b9fa:	6914      	ldr	r4, [r2, #16]
 800b9fc:	3101      	adds	r1, #1
 800b9fe:	f102 0314 	add.w	r3, r2, #20
 800ba02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ba06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ba0a:	1f05      	subs	r5, r0, #4
 800ba0c:	42a3      	cmp	r3, r4
 800ba0e:	d30c      	bcc.n	800ba2a <__copybits+0x36>
 800ba10:	1aa3      	subs	r3, r4, r2
 800ba12:	3b11      	subs	r3, #17
 800ba14:	f023 0303 	bic.w	r3, r3, #3
 800ba18:	3211      	adds	r2, #17
 800ba1a:	42a2      	cmp	r2, r4
 800ba1c:	bf88      	it	hi
 800ba1e:	2300      	movhi	r3, #0
 800ba20:	4418      	add	r0, r3
 800ba22:	2300      	movs	r3, #0
 800ba24:	4288      	cmp	r0, r1
 800ba26:	d305      	bcc.n	800ba34 <__copybits+0x40>
 800ba28:	bd70      	pop	{r4, r5, r6, pc}
 800ba2a:	f853 6b04 	ldr.w	r6, [r3], #4
 800ba2e:	f845 6f04 	str.w	r6, [r5, #4]!
 800ba32:	e7eb      	b.n	800ba0c <__copybits+0x18>
 800ba34:	f840 3b04 	str.w	r3, [r0], #4
 800ba38:	e7f4      	b.n	800ba24 <__copybits+0x30>

0800ba3a <__any_on>:
 800ba3a:	f100 0214 	add.w	r2, r0, #20
 800ba3e:	6900      	ldr	r0, [r0, #16]
 800ba40:	114b      	asrs	r3, r1, #5
 800ba42:	4298      	cmp	r0, r3
 800ba44:	b510      	push	{r4, lr}
 800ba46:	db11      	blt.n	800ba6c <__any_on+0x32>
 800ba48:	dd0a      	ble.n	800ba60 <__any_on+0x26>
 800ba4a:	f011 011f 	ands.w	r1, r1, #31
 800ba4e:	d007      	beq.n	800ba60 <__any_on+0x26>
 800ba50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ba54:	fa24 f001 	lsr.w	r0, r4, r1
 800ba58:	fa00 f101 	lsl.w	r1, r0, r1
 800ba5c:	428c      	cmp	r4, r1
 800ba5e:	d10b      	bne.n	800ba78 <__any_on+0x3e>
 800ba60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d803      	bhi.n	800ba70 <__any_on+0x36>
 800ba68:	2000      	movs	r0, #0
 800ba6a:	bd10      	pop	{r4, pc}
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	e7f7      	b.n	800ba60 <__any_on+0x26>
 800ba70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba74:	2900      	cmp	r1, #0
 800ba76:	d0f5      	beq.n	800ba64 <__any_on+0x2a>
 800ba78:	2001      	movs	r0, #1
 800ba7a:	e7f6      	b.n	800ba6a <__any_on+0x30>

0800ba7c <__ascii_wctomb>:
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	4608      	mov	r0, r1
 800ba80:	b141      	cbz	r1, 800ba94 <__ascii_wctomb+0x18>
 800ba82:	2aff      	cmp	r2, #255	@ 0xff
 800ba84:	d904      	bls.n	800ba90 <__ascii_wctomb+0x14>
 800ba86:	228a      	movs	r2, #138	@ 0x8a
 800ba88:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8c:	601a      	str	r2, [r3, #0]
 800ba8e:	4770      	bx	lr
 800ba90:	2001      	movs	r0, #1
 800ba92:	700a      	strb	r2, [r1, #0]
 800ba94:	4770      	bx	lr
	...

0800ba98 <__sflush_r>:
 800ba98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	0716      	lsls	r6, r2, #28
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	d454      	bmi.n	800bb50 <__sflush_r+0xb8>
 800baa6:	684b      	ldr	r3, [r1, #4]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dc02      	bgt.n	800bab2 <__sflush_r+0x1a>
 800baac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd48      	ble.n	800bb44 <__sflush_r+0xac>
 800bab2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bab4:	2e00      	cmp	r6, #0
 800bab6:	d045      	beq.n	800bb44 <__sflush_r+0xac>
 800bab8:	2300      	movs	r3, #0
 800baba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800babe:	682f      	ldr	r7, [r5, #0]
 800bac0:	6a21      	ldr	r1, [r4, #32]
 800bac2:	602b      	str	r3, [r5, #0]
 800bac4:	d030      	beq.n	800bb28 <__sflush_r+0x90>
 800bac6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	0759      	lsls	r1, r3, #29
 800bacc:	d505      	bpl.n	800bada <__sflush_r+0x42>
 800bace:	6863      	ldr	r3, [r4, #4]
 800bad0:	1ad2      	subs	r2, r2, r3
 800bad2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bad4:	b10b      	cbz	r3, 800bada <__sflush_r+0x42>
 800bad6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bad8:	1ad2      	subs	r2, r2, r3
 800bada:	2300      	movs	r3, #0
 800badc:	4628      	mov	r0, r5
 800bade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bae0:	6a21      	ldr	r1, [r4, #32]
 800bae2:	47b0      	blx	r6
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	89a3      	ldrh	r3, [r4, #12]
 800bae8:	d106      	bne.n	800baf8 <__sflush_r+0x60>
 800baea:	6829      	ldr	r1, [r5, #0]
 800baec:	291d      	cmp	r1, #29
 800baee:	d82b      	bhi.n	800bb48 <__sflush_r+0xb0>
 800baf0:	4a28      	ldr	r2, [pc, #160]	@ (800bb94 <__sflush_r+0xfc>)
 800baf2:	40ca      	lsrs	r2, r1
 800baf4:	07d6      	lsls	r6, r2, #31
 800baf6:	d527      	bpl.n	800bb48 <__sflush_r+0xb0>
 800baf8:	2200      	movs	r2, #0
 800bafa:	6062      	str	r2, [r4, #4]
 800bafc:	6922      	ldr	r2, [r4, #16]
 800bafe:	04d9      	lsls	r1, r3, #19
 800bb00:	6022      	str	r2, [r4, #0]
 800bb02:	d504      	bpl.n	800bb0e <__sflush_r+0x76>
 800bb04:	1c42      	adds	r2, r0, #1
 800bb06:	d101      	bne.n	800bb0c <__sflush_r+0x74>
 800bb08:	682b      	ldr	r3, [r5, #0]
 800bb0a:	b903      	cbnz	r3, 800bb0e <__sflush_r+0x76>
 800bb0c:	6560      	str	r0, [r4, #84]	@ 0x54
 800bb0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb10:	602f      	str	r7, [r5, #0]
 800bb12:	b1b9      	cbz	r1, 800bb44 <__sflush_r+0xac>
 800bb14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb18:	4299      	cmp	r1, r3
 800bb1a:	d002      	beq.n	800bb22 <__sflush_r+0x8a>
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	f7fe fecb 	bl	800a8b8 <_free_r>
 800bb22:	2300      	movs	r3, #0
 800bb24:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb26:	e00d      	b.n	800bb44 <__sflush_r+0xac>
 800bb28:	2301      	movs	r3, #1
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	47b0      	blx	r6
 800bb2e:	4602      	mov	r2, r0
 800bb30:	1c50      	adds	r0, r2, #1
 800bb32:	d1c9      	bne.n	800bac8 <__sflush_r+0x30>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d0c6      	beq.n	800bac8 <__sflush_r+0x30>
 800bb3a:	2b1d      	cmp	r3, #29
 800bb3c:	d001      	beq.n	800bb42 <__sflush_r+0xaa>
 800bb3e:	2b16      	cmp	r3, #22
 800bb40:	d11d      	bne.n	800bb7e <__sflush_r+0xe6>
 800bb42:	602f      	str	r7, [r5, #0]
 800bb44:	2000      	movs	r0, #0
 800bb46:	e021      	b.n	800bb8c <__sflush_r+0xf4>
 800bb48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb4c:	b21b      	sxth	r3, r3
 800bb4e:	e01a      	b.n	800bb86 <__sflush_r+0xee>
 800bb50:	690f      	ldr	r7, [r1, #16]
 800bb52:	2f00      	cmp	r7, #0
 800bb54:	d0f6      	beq.n	800bb44 <__sflush_r+0xac>
 800bb56:	0793      	lsls	r3, r2, #30
 800bb58:	bf18      	it	ne
 800bb5a:	2300      	movne	r3, #0
 800bb5c:	680e      	ldr	r6, [r1, #0]
 800bb5e:	bf08      	it	eq
 800bb60:	694b      	ldreq	r3, [r1, #20]
 800bb62:	1bf6      	subs	r6, r6, r7
 800bb64:	600f      	str	r7, [r1, #0]
 800bb66:	608b      	str	r3, [r1, #8]
 800bb68:	2e00      	cmp	r6, #0
 800bb6a:	ddeb      	ble.n	800bb44 <__sflush_r+0xac>
 800bb6c:	4633      	mov	r3, r6
 800bb6e:	463a      	mov	r2, r7
 800bb70:	4628      	mov	r0, r5
 800bb72:	6a21      	ldr	r1, [r4, #32]
 800bb74:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800bb78:	47e0      	blx	ip
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	dc07      	bgt.n	800bb8e <__sflush_r+0xf6>
 800bb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb86:	f04f 30ff 	mov.w	r0, #4294967295
 800bb8a:	81a3      	strh	r3, [r4, #12]
 800bb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb8e:	4407      	add	r7, r0
 800bb90:	1a36      	subs	r6, r6, r0
 800bb92:	e7e9      	b.n	800bb68 <__sflush_r+0xd0>
 800bb94:	20400001 	.word	0x20400001

0800bb98 <_fflush_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	690b      	ldr	r3, [r1, #16]
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	b913      	cbnz	r3, 800bba8 <_fflush_r+0x10>
 800bba2:	2500      	movs	r5, #0
 800bba4:	4628      	mov	r0, r5
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	b118      	cbz	r0, 800bbb2 <_fflush_r+0x1a>
 800bbaa:	6a03      	ldr	r3, [r0, #32]
 800bbac:	b90b      	cbnz	r3, 800bbb2 <_fflush_r+0x1a>
 800bbae:	f7fe fd67 	bl	800a680 <__sinit>
 800bbb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d0f3      	beq.n	800bba2 <_fflush_r+0xa>
 800bbba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbbc:	07d0      	lsls	r0, r2, #31
 800bbbe:	d404      	bmi.n	800bbca <_fflush_r+0x32>
 800bbc0:	0599      	lsls	r1, r3, #22
 800bbc2:	d402      	bmi.n	800bbca <_fflush_r+0x32>
 800bbc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbc6:	f7fe fe60 	bl	800a88a <__retarget_lock_acquire_recursive>
 800bbca:	4628      	mov	r0, r5
 800bbcc:	4621      	mov	r1, r4
 800bbce:	f7ff ff63 	bl	800ba98 <__sflush_r>
 800bbd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	07da      	lsls	r2, r3, #31
 800bbd8:	d4e4      	bmi.n	800bba4 <_fflush_r+0xc>
 800bbda:	89a3      	ldrh	r3, [r4, #12]
 800bbdc:	059b      	lsls	r3, r3, #22
 800bbde:	d4e1      	bmi.n	800bba4 <_fflush_r+0xc>
 800bbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbe2:	f7fe fe53 	bl	800a88c <__retarget_lock_release_recursive>
 800bbe6:	e7dd      	b.n	800bba4 <_fflush_r+0xc>

0800bbe8 <_sbrk_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	2300      	movs	r3, #0
 800bbec:	4d05      	ldr	r5, [pc, #20]	@ (800bc04 <_sbrk_r+0x1c>)
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7f8 fd3c 	bl	8004670 <_sbrk>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_sbrk_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_sbrk_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20000ab0 	.word	0x20000ab0

0800bc08 <__assert_func>:
 800bc08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc0a:	4614      	mov	r4, r2
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	4b09      	ldr	r3, [pc, #36]	@ (800bc34 <__assert_func+0x2c>)
 800bc10:	4605      	mov	r5, r0
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68d8      	ldr	r0, [r3, #12]
 800bc16:	b14c      	cbz	r4, 800bc2c <__assert_func+0x24>
 800bc18:	4b07      	ldr	r3, [pc, #28]	@ (800bc38 <__assert_func+0x30>)
 800bc1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc1e:	9100      	str	r1, [sp, #0]
 800bc20:	462b      	mov	r3, r5
 800bc22:	4906      	ldr	r1, [pc, #24]	@ (800bc3c <__assert_func+0x34>)
 800bc24:	f000 f82a 	bl	800bc7c <fiprintf>
 800bc28:	f000 f83a 	bl	800bca0 <abort>
 800bc2c:	4b04      	ldr	r3, [pc, #16]	@ (800bc40 <__assert_func+0x38>)
 800bc2e:	461c      	mov	r4, r3
 800bc30:	e7f3      	b.n	800bc1a <__assert_func+0x12>
 800bc32:	bf00      	nop
 800bc34:	200001c8 	.word	0x200001c8
 800bc38:	0800ca69 	.word	0x0800ca69
 800bc3c:	0800ca76 	.word	0x0800ca76
 800bc40:	0800caa4 	.word	0x0800caa4

0800bc44 <_calloc_r>:
 800bc44:	b570      	push	{r4, r5, r6, lr}
 800bc46:	fba1 5402 	umull	r5, r4, r1, r2
 800bc4a:	b934      	cbnz	r4, 800bc5a <_calloc_r+0x16>
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	f7ff f9d7 	bl	800b000 <_malloc_r>
 800bc52:	4606      	mov	r6, r0
 800bc54:	b928      	cbnz	r0, 800bc62 <_calloc_r+0x1e>
 800bc56:	4630      	mov	r0, r6
 800bc58:	bd70      	pop	{r4, r5, r6, pc}
 800bc5a:	220c      	movs	r2, #12
 800bc5c:	2600      	movs	r6, #0
 800bc5e:	6002      	str	r2, [r0, #0]
 800bc60:	e7f9      	b.n	800bc56 <_calloc_r+0x12>
 800bc62:	462a      	mov	r2, r5
 800bc64:	4621      	mov	r1, r4
 800bc66:	f7fe fd84 	bl	800a772 <memset>
 800bc6a:	e7f4      	b.n	800bc56 <_calloc_r+0x12>

0800bc6c <malloc>:
 800bc6c:	4b02      	ldr	r3, [pc, #8]	@ (800bc78 <malloc+0xc>)
 800bc6e:	4601      	mov	r1, r0
 800bc70:	6818      	ldr	r0, [r3, #0]
 800bc72:	f7ff b9c5 	b.w	800b000 <_malloc_r>
 800bc76:	bf00      	nop
 800bc78:	200001c8 	.word	0x200001c8

0800bc7c <fiprintf>:
 800bc7c:	b40e      	push	{r1, r2, r3}
 800bc7e:	b503      	push	{r0, r1, lr}
 800bc80:	4601      	mov	r1, r0
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	4805      	ldr	r0, [pc, #20]	@ (800bc9c <fiprintf+0x20>)
 800bc86:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc8a:	6800      	ldr	r0, [r0, #0]
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	f000 f835 	bl	800bcfc <_vfiprintf_r>
 800bc92:	b002      	add	sp, #8
 800bc94:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc98:	b003      	add	sp, #12
 800bc9a:	4770      	bx	lr
 800bc9c:	200001c8 	.word	0x200001c8

0800bca0 <abort>:
 800bca0:	2006      	movs	r0, #6
 800bca2:	b508      	push	{r3, lr}
 800bca4:	f000 fb8e 	bl	800c3c4 <raise>
 800bca8:	2001      	movs	r0, #1
 800bcaa:	f7f8 fc6c 	bl	8004586 <_exit>

0800bcae <__sfputc_r>:
 800bcae:	6893      	ldr	r3, [r2, #8]
 800bcb0:	b410      	push	{r4}
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	6093      	str	r3, [r2, #8]
 800bcb8:	da07      	bge.n	800bcca <__sfputc_r+0x1c>
 800bcba:	6994      	ldr	r4, [r2, #24]
 800bcbc:	42a3      	cmp	r3, r4
 800bcbe:	db01      	blt.n	800bcc4 <__sfputc_r+0x16>
 800bcc0:	290a      	cmp	r1, #10
 800bcc2:	d102      	bne.n	800bcca <__sfputc_r+0x1c>
 800bcc4:	bc10      	pop	{r4}
 800bcc6:	f000 bac1 	b.w	800c24c <__swbuf_r>
 800bcca:	6813      	ldr	r3, [r2, #0]
 800bccc:	1c58      	adds	r0, r3, #1
 800bcce:	6010      	str	r0, [r2, #0]
 800bcd0:	7019      	strb	r1, [r3, #0]
 800bcd2:	4608      	mov	r0, r1
 800bcd4:	bc10      	pop	{r4}
 800bcd6:	4770      	bx	lr

0800bcd8 <__sfputs_r>:
 800bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcda:	4606      	mov	r6, r0
 800bcdc:	460f      	mov	r7, r1
 800bcde:	4614      	mov	r4, r2
 800bce0:	18d5      	adds	r5, r2, r3
 800bce2:	42ac      	cmp	r4, r5
 800bce4:	d101      	bne.n	800bcea <__sfputs_r+0x12>
 800bce6:	2000      	movs	r0, #0
 800bce8:	e007      	b.n	800bcfa <__sfputs_r+0x22>
 800bcea:	463a      	mov	r2, r7
 800bcec:	4630      	mov	r0, r6
 800bcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf2:	f7ff ffdc 	bl	800bcae <__sfputc_r>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	d1f3      	bne.n	800bce2 <__sfputs_r+0xa>
 800bcfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcfc <_vfiprintf_r>:
 800bcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd00:	460d      	mov	r5, r1
 800bd02:	4614      	mov	r4, r2
 800bd04:	4698      	mov	r8, r3
 800bd06:	4606      	mov	r6, r0
 800bd08:	b09d      	sub	sp, #116	@ 0x74
 800bd0a:	b118      	cbz	r0, 800bd14 <_vfiprintf_r+0x18>
 800bd0c:	6a03      	ldr	r3, [r0, #32]
 800bd0e:	b90b      	cbnz	r3, 800bd14 <_vfiprintf_r+0x18>
 800bd10:	f7fe fcb6 	bl	800a680 <__sinit>
 800bd14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd16:	07d9      	lsls	r1, r3, #31
 800bd18:	d405      	bmi.n	800bd26 <_vfiprintf_r+0x2a>
 800bd1a:	89ab      	ldrh	r3, [r5, #12]
 800bd1c:	059a      	lsls	r2, r3, #22
 800bd1e:	d402      	bmi.n	800bd26 <_vfiprintf_r+0x2a>
 800bd20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd22:	f7fe fdb2 	bl	800a88a <__retarget_lock_acquire_recursive>
 800bd26:	89ab      	ldrh	r3, [r5, #12]
 800bd28:	071b      	lsls	r3, r3, #28
 800bd2a:	d501      	bpl.n	800bd30 <_vfiprintf_r+0x34>
 800bd2c:	692b      	ldr	r3, [r5, #16]
 800bd2e:	b99b      	cbnz	r3, 800bd58 <_vfiprintf_r+0x5c>
 800bd30:	4629      	mov	r1, r5
 800bd32:	4630      	mov	r0, r6
 800bd34:	f000 fac8 	bl	800c2c8 <__swsetup_r>
 800bd38:	b170      	cbz	r0, 800bd58 <_vfiprintf_r+0x5c>
 800bd3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd3c:	07dc      	lsls	r4, r3, #31
 800bd3e:	d504      	bpl.n	800bd4a <_vfiprintf_r+0x4e>
 800bd40:	f04f 30ff 	mov.w	r0, #4294967295
 800bd44:	b01d      	add	sp, #116	@ 0x74
 800bd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4a:	89ab      	ldrh	r3, [r5, #12]
 800bd4c:	0598      	lsls	r0, r3, #22
 800bd4e:	d4f7      	bmi.n	800bd40 <_vfiprintf_r+0x44>
 800bd50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd52:	f7fe fd9b 	bl	800a88c <__retarget_lock_release_recursive>
 800bd56:	e7f3      	b.n	800bd40 <_vfiprintf_r+0x44>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5c:	2320      	movs	r3, #32
 800bd5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd62:	2330      	movs	r3, #48	@ 0x30
 800bd64:	f04f 0901 	mov.w	r9, #1
 800bd68:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd6c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bf18 <_vfiprintf_r+0x21c>
 800bd70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd74:	4623      	mov	r3, r4
 800bd76:	469a      	mov	sl, r3
 800bd78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd7c:	b10a      	cbz	r2, 800bd82 <_vfiprintf_r+0x86>
 800bd7e:	2a25      	cmp	r2, #37	@ 0x25
 800bd80:	d1f9      	bne.n	800bd76 <_vfiprintf_r+0x7a>
 800bd82:	ebba 0b04 	subs.w	fp, sl, r4
 800bd86:	d00b      	beq.n	800bda0 <_vfiprintf_r+0xa4>
 800bd88:	465b      	mov	r3, fp
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7ff ffa2 	bl	800bcd8 <__sfputs_r>
 800bd94:	3001      	adds	r0, #1
 800bd96:	f000 80a7 	beq.w	800bee8 <_vfiprintf_r+0x1ec>
 800bd9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd9c:	445a      	add	r2, fp
 800bd9e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bda0:	f89a 3000 	ldrb.w	r3, [sl]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 809f 	beq.w	800bee8 <_vfiprintf_r+0x1ec>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdb4:	f10a 0a01 	add.w	sl, sl, #1
 800bdb8:	9304      	str	r3, [sp, #16]
 800bdba:	9307      	str	r3, [sp, #28]
 800bdbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bdc0:	931a      	str	r3, [sp, #104]	@ 0x68
 800bdc2:	4654      	mov	r4, sl
 800bdc4:	2205      	movs	r2, #5
 800bdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdca:	4853      	ldr	r0, [pc, #332]	@ (800bf18 <_vfiprintf_r+0x21c>)
 800bdcc:	f000 fb16 	bl	800c3fc <memchr>
 800bdd0:	9a04      	ldr	r2, [sp, #16]
 800bdd2:	b9d8      	cbnz	r0, 800be0c <_vfiprintf_r+0x110>
 800bdd4:	06d1      	lsls	r1, r2, #27
 800bdd6:	bf44      	itt	mi
 800bdd8:	2320      	movmi	r3, #32
 800bdda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdde:	0713      	lsls	r3, r2, #28
 800bde0:	bf44      	itt	mi
 800bde2:	232b      	movmi	r3, #43	@ 0x2b
 800bde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bde8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdec:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdee:	d015      	beq.n	800be1c <_vfiprintf_r+0x120>
 800bdf0:	4654      	mov	r4, sl
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	f04f 0c0a 	mov.w	ip, #10
 800bdf8:	9a07      	ldr	r2, [sp, #28]
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be00:	3b30      	subs	r3, #48	@ 0x30
 800be02:	2b09      	cmp	r3, #9
 800be04:	d94b      	bls.n	800be9e <_vfiprintf_r+0x1a2>
 800be06:	b1b0      	cbz	r0, 800be36 <_vfiprintf_r+0x13a>
 800be08:	9207      	str	r2, [sp, #28]
 800be0a:	e014      	b.n	800be36 <_vfiprintf_r+0x13a>
 800be0c:	eba0 0308 	sub.w	r3, r0, r8
 800be10:	fa09 f303 	lsl.w	r3, r9, r3
 800be14:	4313      	orrs	r3, r2
 800be16:	46a2      	mov	sl, r4
 800be18:	9304      	str	r3, [sp, #16]
 800be1a:	e7d2      	b.n	800bdc2 <_vfiprintf_r+0xc6>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1d19      	adds	r1, r3, #4
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	9103      	str	r1, [sp, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfbb      	ittet	lt
 800be28:	425b      	neglt	r3, r3
 800be2a:	f042 0202 	orrlt.w	r2, r2, #2
 800be2e:	9307      	strge	r3, [sp, #28]
 800be30:	9307      	strlt	r3, [sp, #28]
 800be32:	bfb8      	it	lt
 800be34:	9204      	strlt	r2, [sp, #16]
 800be36:	7823      	ldrb	r3, [r4, #0]
 800be38:	2b2e      	cmp	r3, #46	@ 0x2e
 800be3a:	d10a      	bne.n	800be52 <_vfiprintf_r+0x156>
 800be3c:	7863      	ldrb	r3, [r4, #1]
 800be3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be40:	d132      	bne.n	800bea8 <_vfiprintf_r+0x1ac>
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	3402      	adds	r4, #2
 800be46:	1d1a      	adds	r2, r3, #4
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	9203      	str	r2, [sp, #12]
 800be4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be50:	9305      	str	r3, [sp, #20]
 800be52:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bf1c <_vfiprintf_r+0x220>
 800be56:	2203      	movs	r2, #3
 800be58:	4650      	mov	r0, sl
 800be5a:	7821      	ldrb	r1, [r4, #0]
 800be5c:	f000 face 	bl	800c3fc <memchr>
 800be60:	b138      	cbz	r0, 800be72 <_vfiprintf_r+0x176>
 800be62:	2240      	movs	r2, #64	@ 0x40
 800be64:	9b04      	ldr	r3, [sp, #16]
 800be66:	eba0 000a 	sub.w	r0, r0, sl
 800be6a:	4082      	lsls	r2, r0
 800be6c:	4313      	orrs	r3, r2
 800be6e:	3401      	adds	r4, #1
 800be70:	9304      	str	r3, [sp, #16]
 800be72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be76:	2206      	movs	r2, #6
 800be78:	4829      	ldr	r0, [pc, #164]	@ (800bf20 <_vfiprintf_r+0x224>)
 800be7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be7e:	f000 fabd 	bl	800c3fc <memchr>
 800be82:	2800      	cmp	r0, #0
 800be84:	d03f      	beq.n	800bf06 <_vfiprintf_r+0x20a>
 800be86:	4b27      	ldr	r3, [pc, #156]	@ (800bf24 <_vfiprintf_r+0x228>)
 800be88:	bb1b      	cbnz	r3, 800bed2 <_vfiprintf_r+0x1d6>
 800be8a:	9b03      	ldr	r3, [sp, #12]
 800be8c:	3307      	adds	r3, #7
 800be8e:	f023 0307 	bic.w	r3, r3, #7
 800be92:	3308      	adds	r3, #8
 800be94:	9303      	str	r3, [sp, #12]
 800be96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be98:	443b      	add	r3, r7
 800be9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800be9c:	e76a      	b.n	800bd74 <_vfiprintf_r+0x78>
 800be9e:	460c      	mov	r4, r1
 800bea0:	2001      	movs	r0, #1
 800bea2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bea6:	e7a8      	b.n	800bdfa <_vfiprintf_r+0xfe>
 800bea8:	2300      	movs	r3, #0
 800beaa:	f04f 0c0a 	mov.w	ip, #10
 800beae:	4619      	mov	r1, r3
 800beb0:	3401      	adds	r4, #1
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	4620      	mov	r0, r4
 800beb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800beba:	3a30      	subs	r2, #48	@ 0x30
 800bebc:	2a09      	cmp	r2, #9
 800bebe:	d903      	bls.n	800bec8 <_vfiprintf_r+0x1cc>
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d0c6      	beq.n	800be52 <_vfiprintf_r+0x156>
 800bec4:	9105      	str	r1, [sp, #20]
 800bec6:	e7c4      	b.n	800be52 <_vfiprintf_r+0x156>
 800bec8:	4604      	mov	r4, r0
 800beca:	2301      	movs	r3, #1
 800becc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bed0:	e7f0      	b.n	800beb4 <_vfiprintf_r+0x1b8>
 800bed2:	ab03      	add	r3, sp, #12
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	462a      	mov	r2, r5
 800bed8:	4630      	mov	r0, r6
 800beda:	4b13      	ldr	r3, [pc, #76]	@ (800bf28 <_vfiprintf_r+0x22c>)
 800bedc:	a904      	add	r1, sp, #16
 800bede:	f3af 8000 	nop.w
 800bee2:	4607      	mov	r7, r0
 800bee4:	1c78      	adds	r0, r7, #1
 800bee6:	d1d6      	bne.n	800be96 <_vfiprintf_r+0x19a>
 800bee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800beea:	07d9      	lsls	r1, r3, #31
 800beec:	d405      	bmi.n	800befa <_vfiprintf_r+0x1fe>
 800beee:	89ab      	ldrh	r3, [r5, #12]
 800bef0:	059a      	lsls	r2, r3, #22
 800bef2:	d402      	bmi.n	800befa <_vfiprintf_r+0x1fe>
 800bef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bef6:	f7fe fcc9 	bl	800a88c <__retarget_lock_release_recursive>
 800befa:	89ab      	ldrh	r3, [r5, #12]
 800befc:	065b      	lsls	r3, r3, #25
 800befe:	f53f af1f 	bmi.w	800bd40 <_vfiprintf_r+0x44>
 800bf02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf04:	e71e      	b.n	800bd44 <_vfiprintf_r+0x48>
 800bf06:	ab03      	add	r3, sp, #12
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	462a      	mov	r2, r5
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	4b06      	ldr	r3, [pc, #24]	@ (800bf28 <_vfiprintf_r+0x22c>)
 800bf10:	a904      	add	r1, sp, #16
 800bf12:	f000 f87d 	bl	800c010 <_printf_i>
 800bf16:	e7e4      	b.n	800bee2 <_vfiprintf_r+0x1e6>
 800bf18:	0800caa5 	.word	0x0800caa5
 800bf1c:	0800caab 	.word	0x0800caab
 800bf20:	0800caaf 	.word	0x0800caaf
 800bf24:	00000000 	.word	0x00000000
 800bf28:	0800bcd9 	.word	0x0800bcd9

0800bf2c <_printf_common>:
 800bf2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf30:	4616      	mov	r6, r2
 800bf32:	4698      	mov	r8, r3
 800bf34:	688a      	ldr	r2, [r1, #8]
 800bf36:	690b      	ldr	r3, [r1, #16]
 800bf38:	4607      	mov	r7, r0
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	bfb8      	it	lt
 800bf3e:	4613      	movlt	r3, r2
 800bf40:	6033      	str	r3, [r6, #0]
 800bf42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bf46:	460c      	mov	r4, r1
 800bf48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf4c:	b10a      	cbz	r2, 800bf52 <_printf_common+0x26>
 800bf4e:	3301      	adds	r3, #1
 800bf50:	6033      	str	r3, [r6, #0]
 800bf52:	6823      	ldr	r3, [r4, #0]
 800bf54:	0699      	lsls	r1, r3, #26
 800bf56:	bf42      	ittt	mi
 800bf58:	6833      	ldrmi	r3, [r6, #0]
 800bf5a:	3302      	addmi	r3, #2
 800bf5c:	6033      	strmi	r3, [r6, #0]
 800bf5e:	6825      	ldr	r5, [r4, #0]
 800bf60:	f015 0506 	ands.w	r5, r5, #6
 800bf64:	d106      	bne.n	800bf74 <_printf_common+0x48>
 800bf66:	f104 0a19 	add.w	sl, r4, #25
 800bf6a:	68e3      	ldr	r3, [r4, #12]
 800bf6c:	6832      	ldr	r2, [r6, #0]
 800bf6e:	1a9b      	subs	r3, r3, r2
 800bf70:	42ab      	cmp	r3, r5
 800bf72:	dc2b      	bgt.n	800bfcc <_printf_common+0xa0>
 800bf74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bf78:	6822      	ldr	r2, [r4, #0]
 800bf7a:	3b00      	subs	r3, #0
 800bf7c:	bf18      	it	ne
 800bf7e:	2301      	movne	r3, #1
 800bf80:	0692      	lsls	r2, r2, #26
 800bf82:	d430      	bmi.n	800bfe6 <_printf_common+0xba>
 800bf84:	4641      	mov	r1, r8
 800bf86:	4638      	mov	r0, r7
 800bf88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bf8c:	47c8      	blx	r9
 800bf8e:	3001      	adds	r0, #1
 800bf90:	d023      	beq.n	800bfda <_printf_common+0xae>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	6922      	ldr	r2, [r4, #16]
 800bf96:	f003 0306 	and.w	r3, r3, #6
 800bf9a:	2b04      	cmp	r3, #4
 800bf9c:	bf14      	ite	ne
 800bf9e:	2500      	movne	r5, #0
 800bfa0:	6833      	ldreq	r3, [r6, #0]
 800bfa2:	f04f 0600 	mov.w	r6, #0
 800bfa6:	bf08      	it	eq
 800bfa8:	68e5      	ldreq	r5, [r4, #12]
 800bfaa:	f104 041a 	add.w	r4, r4, #26
 800bfae:	bf08      	it	eq
 800bfb0:	1aed      	subeq	r5, r5, r3
 800bfb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bfb6:	bf08      	it	eq
 800bfb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	bfc4      	itt	gt
 800bfc0:	1a9b      	subgt	r3, r3, r2
 800bfc2:	18ed      	addgt	r5, r5, r3
 800bfc4:	42b5      	cmp	r5, r6
 800bfc6:	d11a      	bne.n	800bffe <_printf_common+0xd2>
 800bfc8:	2000      	movs	r0, #0
 800bfca:	e008      	b.n	800bfde <_printf_common+0xb2>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	4652      	mov	r2, sl
 800bfd0:	4641      	mov	r1, r8
 800bfd2:	4638      	mov	r0, r7
 800bfd4:	47c8      	blx	r9
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d103      	bne.n	800bfe2 <_printf_common+0xb6>
 800bfda:	f04f 30ff 	mov.w	r0, #4294967295
 800bfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe2:	3501      	adds	r5, #1
 800bfe4:	e7c1      	b.n	800bf6a <_printf_common+0x3e>
 800bfe6:	2030      	movs	r0, #48	@ 0x30
 800bfe8:	18e1      	adds	r1, r4, r3
 800bfea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bff4:	4422      	add	r2, r4
 800bff6:	3302      	adds	r3, #2
 800bff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bffc:	e7c2      	b.n	800bf84 <_printf_common+0x58>
 800bffe:	2301      	movs	r3, #1
 800c000:	4622      	mov	r2, r4
 800c002:	4641      	mov	r1, r8
 800c004:	4638      	mov	r0, r7
 800c006:	47c8      	blx	r9
 800c008:	3001      	adds	r0, #1
 800c00a:	d0e6      	beq.n	800bfda <_printf_common+0xae>
 800c00c:	3601      	adds	r6, #1
 800c00e:	e7d9      	b.n	800bfc4 <_printf_common+0x98>

0800c010 <_printf_i>:
 800c010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c014:	7e0f      	ldrb	r7, [r1, #24]
 800c016:	4691      	mov	r9, r2
 800c018:	2f78      	cmp	r7, #120	@ 0x78
 800c01a:	4680      	mov	r8, r0
 800c01c:	460c      	mov	r4, r1
 800c01e:	469a      	mov	sl, r3
 800c020:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c026:	d807      	bhi.n	800c038 <_printf_i+0x28>
 800c028:	2f62      	cmp	r7, #98	@ 0x62
 800c02a:	d80a      	bhi.n	800c042 <_printf_i+0x32>
 800c02c:	2f00      	cmp	r7, #0
 800c02e:	f000 80d1 	beq.w	800c1d4 <_printf_i+0x1c4>
 800c032:	2f58      	cmp	r7, #88	@ 0x58
 800c034:	f000 80b8 	beq.w	800c1a8 <_printf_i+0x198>
 800c038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c03c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c040:	e03a      	b.n	800c0b8 <_printf_i+0xa8>
 800c042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c046:	2b15      	cmp	r3, #21
 800c048:	d8f6      	bhi.n	800c038 <_printf_i+0x28>
 800c04a:	a101      	add	r1, pc, #4	@ (adr r1, 800c050 <_printf_i+0x40>)
 800c04c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c050:	0800c0a9 	.word	0x0800c0a9
 800c054:	0800c0bd 	.word	0x0800c0bd
 800c058:	0800c039 	.word	0x0800c039
 800c05c:	0800c039 	.word	0x0800c039
 800c060:	0800c039 	.word	0x0800c039
 800c064:	0800c039 	.word	0x0800c039
 800c068:	0800c0bd 	.word	0x0800c0bd
 800c06c:	0800c039 	.word	0x0800c039
 800c070:	0800c039 	.word	0x0800c039
 800c074:	0800c039 	.word	0x0800c039
 800c078:	0800c039 	.word	0x0800c039
 800c07c:	0800c1bb 	.word	0x0800c1bb
 800c080:	0800c0e7 	.word	0x0800c0e7
 800c084:	0800c175 	.word	0x0800c175
 800c088:	0800c039 	.word	0x0800c039
 800c08c:	0800c039 	.word	0x0800c039
 800c090:	0800c1dd 	.word	0x0800c1dd
 800c094:	0800c039 	.word	0x0800c039
 800c098:	0800c0e7 	.word	0x0800c0e7
 800c09c:	0800c039 	.word	0x0800c039
 800c0a0:	0800c039 	.word	0x0800c039
 800c0a4:	0800c17d 	.word	0x0800c17d
 800c0a8:	6833      	ldr	r3, [r6, #0]
 800c0aa:	1d1a      	adds	r2, r3, #4
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6032      	str	r2, [r6, #0]
 800c0b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c0b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e09c      	b.n	800c1f6 <_printf_i+0x1e6>
 800c0bc:	6833      	ldr	r3, [r6, #0]
 800c0be:	6820      	ldr	r0, [r4, #0]
 800c0c0:	1d19      	adds	r1, r3, #4
 800c0c2:	6031      	str	r1, [r6, #0]
 800c0c4:	0606      	lsls	r6, r0, #24
 800c0c6:	d501      	bpl.n	800c0cc <_printf_i+0xbc>
 800c0c8:	681d      	ldr	r5, [r3, #0]
 800c0ca:	e003      	b.n	800c0d4 <_printf_i+0xc4>
 800c0cc:	0645      	lsls	r5, r0, #25
 800c0ce:	d5fb      	bpl.n	800c0c8 <_printf_i+0xb8>
 800c0d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	da03      	bge.n	800c0e0 <_printf_i+0xd0>
 800c0d8:	232d      	movs	r3, #45	@ 0x2d
 800c0da:	426d      	negs	r5, r5
 800c0dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0e0:	230a      	movs	r3, #10
 800c0e2:	4858      	ldr	r0, [pc, #352]	@ (800c244 <_printf_i+0x234>)
 800c0e4:	e011      	b.n	800c10a <_printf_i+0xfa>
 800c0e6:	6821      	ldr	r1, [r4, #0]
 800c0e8:	6833      	ldr	r3, [r6, #0]
 800c0ea:	0608      	lsls	r0, r1, #24
 800c0ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800c0f0:	d402      	bmi.n	800c0f8 <_printf_i+0xe8>
 800c0f2:	0649      	lsls	r1, r1, #25
 800c0f4:	bf48      	it	mi
 800c0f6:	b2ad      	uxthmi	r5, r5
 800c0f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c0fa:	6033      	str	r3, [r6, #0]
 800c0fc:	bf14      	ite	ne
 800c0fe:	230a      	movne	r3, #10
 800c100:	2308      	moveq	r3, #8
 800c102:	4850      	ldr	r0, [pc, #320]	@ (800c244 <_printf_i+0x234>)
 800c104:	2100      	movs	r1, #0
 800c106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c10a:	6866      	ldr	r6, [r4, #4]
 800c10c:	2e00      	cmp	r6, #0
 800c10e:	60a6      	str	r6, [r4, #8]
 800c110:	db05      	blt.n	800c11e <_printf_i+0x10e>
 800c112:	6821      	ldr	r1, [r4, #0]
 800c114:	432e      	orrs	r6, r5
 800c116:	f021 0104 	bic.w	r1, r1, #4
 800c11a:	6021      	str	r1, [r4, #0]
 800c11c:	d04b      	beq.n	800c1b6 <_printf_i+0x1a6>
 800c11e:	4616      	mov	r6, r2
 800c120:	fbb5 f1f3 	udiv	r1, r5, r3
 800c124:	fb03 5711 	mls	r7, r3, r1, r5
 800c128:	5dc7      	ldrb	r7, [r0, r7]
 800c12a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c12e:	462f      	mov	r7, r5
 800c130:	42bb      	cmp	r3, r7
 800c132:	460d      	mov	r5, r1
 800c134:	d9f4      	bls.n	800c120 <_printf_i+0x110>
 800c136:	2b08      	cmp	r3, #8
 800c138:	d10b      	bne.n	800c152 <_printf_i+0x142>
 800c13a:	6823      	ldr	r3, [r4, #0]
 800c13c:	07df      	lsls	r7, r3, #31
 800c13e:	d508      	bpl.n	800c152 <_printf_i+0x142>
 800c140:	6923      	ldr	r3, [r4, #16]
 800c142:	6861      	ldr	r1, [r4, #4]
 800c144:	4299      	cmp	r1, r3
 800c146:	bfde      	ittt	le
 800c148:	2330      	movle	r3, #48	@ 0x30
 800c14a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c14e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c152:	1b92      	subs	r2, r2, r6
 800c154:	6122      	str	r2, [r4, #16]
 800c156:	464b      	mov	r3, r9
 800c158:	4621      	mov	r1, r4
 800c15a:	4640      	mov	r0, r8
 800c15c:	f8cd a000 	str.w	sl, [sp]
 800c160:	aa03      	add	r2, sp, #12
 800c162:	f7ff fee3 	bl	800bf2c <_printf_common>
 800c166:	3001      	adds	r0, #1
 800c168:	d14a      	bne.n	800c200 <_printf_i+0x1f0>
 800c16a:	f04f 30ff 	mov.w	r0, #4294967295
 800c16e:	b004      	add	sp, #16
 800c170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	f043 0320 	orr.w	r3, r3, #32
 800c17a:	6023      	str	r3, [r4, #0]
 800c17c:	2778      	movs	r7, #120	@ 0x78
 800c17e:	4832      	ldr	r0, [pc, #200]	@ (800c248 <_printf_i+0x238>)
 800c180:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	6831      	ldr	r1, [r6, #0]
 800c188:	061f      	lsls	r7, r3, #24
 800c18a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c18e:	d402      	bmi.n	800c196 <_printf_i+0x186>
 800c190:	065f      	lsls	r7, r3, #25
 800c192:	bf48      	it	mi
 800c194:	b2ad      	uxthmi	r5, r5
 800c196:	6031      	str	r1, [r6, #0]
 800c198:	07d9      	lsls	r1, r3, #31
 800c19a:	bf44      	itt	mi
 800c19c:	f043 0320 	orrmi.w	r3, r3, #32
 800c1a0:	6023      	strmi	r3, [r4, #0]
 800c1a2:	b11d      	cbz	r5, 800c1ac <_printf_i+0x19c>
 800c1a4:	2310      	movs	r3, #16
 800c1a6:	e7ad      	b.n	800c104 <_printf_i+0xf4>
 800c1a8:	4826      	ldr	r0, [pc, #152]	@ (800c244 <_printf_i+0x234>)
 800c1aa:	e7e9      	b.n	800c180 <_printf_i+0x170>
 800c1ac:	6823      	ldr	r3, [r4, #0]
 800c1ae:	f023 0320 	bic.w	r3, r3, #32
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	e7f6      	b.n	800c1a4 <_printf_i+0x194>
 800c1b6:	4616      	mov	r6, r2
 800c1b8:	e7bd      	b.n	800c136 <_printf_i+0x126>
 800c1ba:	6833      	ldr	r3, [r6, #0]
 800c1bc:	6825      	ldr	r5, [r4, #0]
 800c1be:	1d18      	adds	r0, r3, #4
 800c1c0:	6961      	ldr	r1, [r4, #20]
 800c1c2:	6030      	str	r0, [r6, #0]
 800c1c4:	062e      	lsls	r6, r5, #24
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	d501      	bpl.n	800c1ce <_printf_i+0x1be>
 800c1ca:	6019      	str	r1, [r3, #0]
 800c1cc:	e002      	b.n	800c1d4 <_printf_i+0x1c4>
 800c1ce:	0668      	lsls	r0, r5, #25
 800c1d0:	d5fb      	bpl.n	800c1ca <_printf_i+0x1ba>
 800c1d2:	8019      	strh	r1, [r3, #0]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4616      	mov	r6, r2
 800c1d8:	6123      	str	r3, [r4, #16]
 800c1da:	e7bc      	b.n	800c156 <_printf_i+0x146>
 800c1dc:	6833      	ldr	r3, [r6, #0]
 800c1de:	2100      	movs	r1, #0
 800c1e0:	1d1a      	adds	r2, r3, #4
 800c1e2:	6032      	str	r2, [r6, #0]
 800c1e4:	681e      	ldr	r6, [r3, #0]
 800c1e6:	6862      	ldr	r2, [r4, #4]
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	f000 f907 	bl	800c3fc <memchr>
 800c1ee:	b108      	cbz	r0, 800c1f4 <_printf_i+0x1e4>
 800c1f0:	1b80      	subs	r0, r0, r6
 800c1f2:	6060      	str	r0, [r4, #4]
 800c1f4:	6863      	ldr	r3, [r4, #4]
 800c1f6:	6123      	str	r3, [r4, #16]
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1fe:	e7aa      	b.n	800c156 <_printf_i+0x146>
 800c200:	4632      	mov	r2, r6
 800c202:	4649      	mov	r1, r9
 800c204:	4640      	mov	r0, r8
 800c206:	6923      	ldr	r3, [r4, #16]
 800c208:	47d0      	blx	sl
 800c20a:	3001      	adds	r0, #1
 800c20c:	d0ad      	beq.n	800c16a <_printf_i+0x15a>
 800c20e:	6823      	ldr	r3, [r4, #0]
 800c210:	079b      	lsls	r3, r3, #30
 800c212:	d413      	bmi.n	800c23c <_printf_i+0x22c>
 800c214:	68e0      	ldr	r0, [r4, #12]
 800c216:	9b03      	ldr	r3, [sp, #12]
 800c218:	4298      	cmp	r0, r3
 800c21a:	bfb8      	it	lt
 800c21c:	4618      	movlt	r0, r3
 800c21e:	e7a6      	b.n	800c16e <_printf_i+0x15e>
 800c220:	2301      	movs	r3, #1
 800c222:	4632      	mov	r2, r6
 800c224:	4649      	mov	r1, r9
 800c226:	4640      	mov	r0, r8
 800c228:	47d0      	blx	sl
 800c22a:	3001      	adds	r0, #1
 800c22c:	d09d      	beq.n	800c16a <_printf_i+0x15a>
 800c22e:	3501      	adds	r5, #1
 800c230:	68e3      	ldr	r3, [r4, #12]
 800c232:	9903      	ldr	r1, [sp, #12]
 800c234:	1a5b      	subs	r3, r3, r1
 800c236:	42ab      	cmp	r3, r5
 800c238:	dcf2      	bgt.n	800c220 <_printf_i+0x210>
 800c23a:	e7eb      	b.n	800c214 <_printf_i+0x204>
 800c23c:	2500      	movs	r5, #0
 800c23e:	f104 0619 	add.w	r6, r4, #25
 800c242:	e7f5      	b.n	800c230 <_printf_i+0x220>
 800c244:	0800cab6 	.word	0x0800cab6
 800c248:	0800cac7 	.word	0x0800cac7

0800c24c <__swbuf_r>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	460e      	mov	r6, r1
 800c250:	4614      	mov	r4, r2
 800c252:	4605      	mov	r5, r0
 800c254:	b118      	cbz	r0, 800c25e <__swbuf_r+0x12>
 800c256:	6a03      	ldr	r3, [r0, #32]
 800c258:	b90b      	cbnz	r3, 800c25e <__swbuf_r+0x12>
 800c25a:	f7fe fa11 	bl	800a680 <__sinit>
 800c25e:	69a3      	ldr	r3, [r4, #24]
 800c260:	60a3      	str	r3, [r4, #8]
 800c262:	89a3      	ldrh	r3, [r4, #12]
 800c264:	071a      	lsls	r2, r3, #28
 800c266:	d501      	bpl.n	800c26c <__swbuf_r+0x20>
 800c268:	6923      	ldr	r3, [r4, #16]
 800c26a:	b943      	cbnz	r3, 800c27e <__swbuf_r+0x32>
 800c26c:	4621      	mov	r1, r4
 800c26e:	4628      	mov	r0, r5
 800c270:	f000 f82a 	bl	800c2c8 <__swsetup_r>
 800c274:	b118      	cbz	r0, 800c27e <__swbuf_r+0x32>
 800c276:	f04f 37ff 	mov.w	r7, #4294967295
 800c27a:	4638      	mov	r0, r7
 800c27c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c27e:	6823      	ldr	r3, [r4, #0]
 800c280:	6922      	ldr	r2, [r4, #16]
 800c282:	b2f6      	uxtb	r6, r6
 800c284:	1a98      	subs	r0, r3, r2
 800c286:	6963      	ldr	r3, [r4, #20]
 800c288:	4637      	mov	r7, r6
 800c28a:	4283      	cmp	r3, r0
 800c28c:	dc05      	bgt.n	800c29a <__swbuf_r+0x4e>
 800c28e:	4621      	mov	r1, r4
 800c290:	4628      	mov	r0, r5
 800c292:	f7ff fc81 	bl	800bb98 <_fflush_r>
 800c296:	2800      	cmp	r0, #0
 800c298:	d1ed      	bne.n	800c276 <__swbuf_r+0x2a>
 800c29a:	68a3      	ldr	r3, [r4, #8]
 800c29c:	3b01      	subs	r3, #1
 800c29e:	60a3      	str	r3, [r4, #8]
 800c2a0:	6823      	ldr	r3, [r4, #0]
 800c2a2:	1c5a      	adds	r2, r3, #1
 800c2a4:	6022      	str	r2, [r4, #0]
 800c2a6:	701e      	strb	r6, [r3, #0]
 800c2a8:	6962      	ldr	r2, [r4, #20]
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d004      	beq.n	800c2ba <__swbuf_r+0x6e>
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	07db      	lsls	r3, r3, #31
 800c2b4:	d5e1      	bpl.n	800c27a <__swbuf_r+0x2e>
 800c2b6:	2e0a      	cmp	r6, #10
 800c2b8:	d1df      	bne.n	800c27a <__swbuf_r+0x2e>
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4628      	mov	r0, r5
 800c2be:	f7ff fc6b 	bl	800bb98 <_fflush_r>
 800c2c2:	2800      	cmp	r0, #0
 800c2c4:	d0d9      	beq.n	800c27a <__swbuf_r+0x2e>
 800c2c6:	e7d6      	b.n	800c276 <__swbuf_r+0x2a>

0800c2c8 <__swsetup_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4b29      	ldr	r3, [pc, #164]	@ (800c370 <__swsetup_r+0xa8>)
 800c2cc:	4605      	mov	r5, r0
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	460c      	mov	r4, r1
 800c2d2:	b118      	cbz	r0, 800c2dc <__swsetup_r+0x14>
 800c2d4:	6a03      	ldr	r3, [r0, #32]
 800c2d6:	b90b      	cbnz	r3, 800c2dc <__swsetup_r+0x14>
 800c2d8:	f7fe f9d2 	bl	800a680 <__sinit>
 800c2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2e0:	0719      	lsls	r1, r3, #28
 800c2e2:	d422      	bmi.n	800c32a <__swsetup_r+0x62>
 800c2e4:	06da      	lsls	r2, r3, #27
 800c2e6:	d407      	bmi.n	800c2f8 <__swsetup_r+0x30>
 800c2e8:	2209      	movs	r2, #9
 800c2ea:	602a      	str	r2, [r5, #0]
 800c2ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f4:	81a3      	strh	r3, [r4, #12]
 800c2f6:	e033      	b.n	800c360 <__swsetup_r+0x98>
 800c2f8:	0758      	lsls	r0, r3, #29
 800c2fa:	d512      	bpl.n	800c322 <__swsetup_r+0x5a>
 800c2fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c2fe:	b141      	cbz	r1, 800c312 <__swsetup_r+0x4a>
 800c300:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c304:	4299      	cmp	r1, r3
 800c306:	d002      	beq.n	800c30e <__swsetup_r+0x46>
 800c308:	4628      	mov	r0, r5
 800c30a:	f7fe fad5 	bl	800a8b8 <_free_r>
 800c30e:	2300      	movs	r3, #0
 800c310:	6363      	str	r3, [r4, #52]	@ 0x34
 800c312:	89a3      	ldrh	r3, [r4, #12]
 800c314:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c318:	81a3      	strh	r3, [r4, #12]
 800c31a:	2300      	movs	r3, #0
 800c31c:	6063      	str	r3, [r4, #4]
 800c31e:	6923      	ldr	r3, [r4, #16]
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	f043 0308 	orr.w	r3, r3, #8
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	6923      	ldr	r3, [r4, #16]
 800c32c:	b94b      	cbnz	r3, 800c342 <__swsetup_r+0x7a>
 800c32e:	89a3      	ldrh	r3, [r4, #12]
 800c330:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c338:	d003      	beq.n	800c342 <__swsetup_r+0x7a>
 800c33a:	4621      	mov	r1, r4
 800c33c:	4628      	mov	r0, r5
 800c33e:	f000 f890 	bl	800c462 <__smakebuf_r>
 800c342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c346:	f013 0201 	ands.w	r2, r3, #1
 800c34a:	d00a      	beq.n	800c362 <__swsetup_r+0x9a>
 800c34c:	2200      	movs	r2, #0
 800c34e:	60a2      	str	r2, [r4, #8]
 800c350:	6962      	ldr	r2, [r4, #20]
 800c352:	4252      	negs	r2, r2
 800c354:	61a2      	str	r2, [r4, #24]
 800c356:	6922      	ldr	r2, [r4, #16]
 800c358:	b942      	cbnz	r2, 800c36c <__swsetup_r+0xa4>
 800c35a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c35e:	d1c5      	bne.n	800c2ec <__swsetup_r+0x24>
 800c360:	bd38      	pop	{r3, r4, r5, pc}
 800c362:	0799      	lsls	r1, r3, #30
 800c364:	bf58      	it	pl
 800c366:	6962      	ldrpl	r2, [r4, #20]
 800c368:	60a2      	str	r2, [r4, #8]
 800c36a:	e7f4      	b.n	800c356 <__swsetup_r+0x8e>
 800c36c:	2000      	movs	r0, #0
 800c36e:	e7f7      	b.n	800c360 <__swsetup_r+0x98>
 800c370:	200001c8 	.word	0x200001c8

0800c374 <_raise_r>:
 800c374:	291f      	cmp	r1, #31
 800c376:	b538      	push	{r3, r4, r5, lr}
 800c378:	4605      	mov	r5, r0
 800c37a:	460c      	mov	r4, r1
 800c37c:	d904      	bls.n	800c388 <_raise_r+0x14>
 800c37e:	2316      	movs	r3, #22
 800c380:	6003      	str	r3, [r0, #0]
 800c382:	f04f 30ff 	mov.w	r0, #4294967295
 800c386:	bd38      	pop	{r3, r4, r5, pc}
 800c388:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c38a:	b112      	cbz	r2, 800c392 <_raise_r+0x1e>
 800c38c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c390:	b94b      	cbnz	r3, 800c3a6 <_raise_r+0x32>
 800c392:	4628      	mov	r0, r5
 800c394:	f000 f830 	bl	800c3f8 <_getpid_r>
 800c398:	4622      	mov	r2, r4
 800c39a:	4601      	mov	r1, r0
 800c39c:	4628      	mov	r0, r5
 800c39e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3a2:	f000 b817 	b.w	800c3d4 <_kill_r>
 800c3a6:	2b01      	cmp	r3, #1
 800c3a8:	d00a      	beq.n	800c3c0 <_raise_r+0x4c>
 800c3aa:	1c59      	adds	r1, r3, #1
 800c3ac:	d103      	bne.n	800c3b6 <_raise_r+0x42>
 800c3ae:	2316      	movs	r3, #22
 800c3b0:	6003      	str	r3, [r0, #0]
 800c3b2:	2001      	movs	r0, #1
 800c3b4:	e7e7      	b.n	800c386 <_raise_r+0x12>
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c3be:	4798      	blx	r3
 800c3c0:	2000      	movs	r0, #0
 800c3c2:	e7e0      	b.n	800c386 <_raise_r+0x12>

0800c3c4 <raise>:
 800c3c4:	4b02      	ldr	r3, [pc, #8]	@ (800c3d0 <raise+0xc>)
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	6818      	ldr	r0, [r3, #0]
 800c3ca:	f7ff bfd3 	b.w	800c374 <_raise_r>
 800c3ce:	bf00      	nop
 800c3d0:	200001c8 	.word	0x200001c8

0800c3d4 <_kill_r>:
 800c3d4:	b538      	push	{r3, r4, r5, lr}
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	4d06      	ldr	r5, [pc, #24]	@ (800c3f4 <_kill_r+0x20>)
 800c3da:	4604      	mov	r4, r0
 800c3dc:	4608      	mov	r0, r1
 800c3de:	4611      	mov	r1, r2
 800c3e0:	602b      	str	r3, [r5, #0]
 800c3e2:	f7f8 f8c0 	bl	8004566 <_kill>
 800c3e6:	1c43      	adds	r3, r0, #1
 800c3e8:	d102      	bne.n	800c3f0 <_kill_r+0x1c>
 800c3ea:	682b      	ldr	r3, [r5, #0]
 800c3ec:	b103      	cbz	r3, 800c3f0 <_kill_r+0x1c>
 800c3ee:	6023      	str	r3, [r4, #0]
 800c3f0:	bd38      	pop	{r3, r4, r5, pc}
 800c3f2:	bf00      	nop
 800c3f4:	20000ab0 	.word	0x20000ab0

0800c3f8 <_getpid_r>:
 800c3f8:	f7f8 b8ae 	b.w	8004558 <_getpid>

0800c3fc <memchr>:
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	b510      	push	{r4, lr}
 800c400:	b2c9      	uxtb	r1, r1
 800c402:	4402      	add	r2, r0
 800c404:	4293      	cmp	r3, r2
 800c406:	4618      	mov	r0, r3
 800c408:	d101      	bne.n	800c40e <memchr+0x12>
 800c40a:	2000      	movs	r0, #0
 800c40c:	e003      	b.n	800c416 <memchr+0x1a>
 800c40e:	7804      	ldrb	r4, [r0, #0]
 800c410:	3301      	adds	r3, #1
 800c412:	428c      	cmp	r4, r1
 800c414:	d1f6      	bne.n	800c404 <memchr+0x8>
 800c416:	bd10      	pop	{r4, pc}

0800c418 <__swhatbuf_r>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	460c      	mov	r4, r1
 800c41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c420:	4615      	mov	r5, r2
 800c422:	2900      	cmp	r1, #0
 800c424:	461e      	mov	r6, r3
 800c426:	b096      	sub	sp, #88	@ 0x58
 800c428:	da0c      	bge.n	800c444 <__swhatbuf_r+0x2c>
 800c42a:	89a3      	ldrh	r3, [r4, #12]
 800c42c:	2100      	movs	r1, #0
 800c42e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c432:	bf14      	ite	ne
 800c434:	2340      	movne	r3, #64	@ 0x40
 800c436:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c43a:	2000      	movs	r0, #0
 800c43c:	6031      	str	r1, [r6, #0]
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	b016      	add	sp, #88	@ 0x58
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	466a      	mov	r2, sp
 800c446:	f000 f849 	bl	800c4dc <_fstat_r>
 800c44a:	2800      	cmp	r0, #0
 800c44c:	dbed      	blt.n	800c42a <__swhatbuf_r+0x12>
 800c44e:	9901      	ldr	r1, [sp, #4]
 800c450:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c454:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c458:	4259      	negs	r1, r3
 800c45a:	4159      	adcs	r1, r3
 800c45c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c460:	e7eb      	b.n	800c43a <__swhatbuf_r+0x22>

0800c462 <__smakebuf_r>:
 800c462:	898b      	ldrh	r3, [r1, #12]
 800c464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c466:	079d      	lsls	r5, r3, #30
 800c468:	4606      	mov	r6, r0
 800c46a:	460c      	mov	r4, r1
 800c46c:	d507      	bpl.n	800c47e <__smakebuf_r+0x1c>
 800c46e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c472:	6023      	str	r3, [r4, #0]
 800c474:	6123      	str	r3, [r4, #16]
 800c476:	2301      	movs	r3, #1
 800c478:	6163      	str	r3, [r4, #20]
 800c47a:	b003      	add	sp, #12
 800c47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c47e:	466a      	mov	r2, sp
 800c480:	ab01      	add	r3, sp, #4
 800c482:	f7ff ffc9 	bl	800c418 <__swhatbuf_r>
 800c486:	9f00      	ldr	r7, [sp, #0]
 800c488:	4605      	mov	r5, r0
 800c48a:	4639      	mov	r1, r7
 800c48c:	4630      	mov	r0, r6
 800c48e:	f7fe fdb7 	bl	800b000 <_malloc_r>
 800c492:	b948      	cbnz	r0, 800c4a8 <__smakebuf_r+0x46>
 800c494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c498:	059a      	lsls	r2, r3, #22
 800c49a:	d4ee      	bmi.n	800c47a <__smakebuf_r+0x18>
 800c49c:	f023 0303 	bic.w	r3, r3, #3
 800c4a0:	f043 0302 	orr.w	r3, r3, #2
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	e7e2      	b.n	800c46e <__smakebuf_r+0xc>
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4b2:	81a3      	strh	r3, [r4, #12]
 800c4b4:	9b01      	ldr	r3, [sp, #4]
 800c4b6:	6020      	str	r0, [r4, #0]
 800c4b8:	b15b      	cbz	r3, 800c4d2 <__smakebuf_r+0x70>
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4c0:	f000 f81e 	bl	800c500 <_isatty_r>
 800c4c4:	b128      	cbz	r0, 800c4d2 <__smakebuf_r+0x70>
 800c4c6:	89a3      	ldrh	r3, [r4, #12]
 800c4c8:	f023 0303 	bic.w	r3, r3, #3
 800c4cc:	f043 0301 	orr.w	r3, r3, #1
 800c4d0:	81a3      	strh	r3, [r4, #12]
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	431d      	orrs	r5, r3
 800c4d6:	81a5      	strh	r5, [r4, #12]
 800c4d8:	e7cf      	b.n	800c47a <__smakebuf_r+0x18>
	...

0800c4dc <_fstat_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	2300      	movs	r3, #0
 800c4e0:	4d06      	ldr	r5, [pc, #24]	@ (800c4fc <_fstat_r+0x20>)
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	4608      	mov	r0, r1
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	602b      	str	r3, [r5, #0]
 800c4ea:	f7f8 f89b 	bl	8004624 <_fstat>
 800c4ee:	1c43      	adds	r3, r0, #1
 800c4f0:	d102      	bne.n	800c4f8 <_fstat_r+0x1c>
 800c4f2:	682b      	ldr	r3, [r5, #0]
 800c4f4:	b103      	cbz	r3, 800c4f8 <_fstat_r+0x1c>
 800c4f6:	6023      	str	r3, [r4, #0]
 800c4f8:	bd38      	pop	{r3, r4, r5, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000ab0 	.word	0x20000ab0

0800c500 <_isatty_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	2300      	movs	r3, #0
 800c504:	4d05      	ldr	r5, [pc, #20]	@ (800c51c <_isatty_r+0x1c>)
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	f7f8 f899 	bl	8004642 <_isatty>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_isatty_r+0x1a>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_isatty_r+0x1a>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	20000ab0 	.word	0x20000ab0

0800c520 <expf>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	4605      	mov	r5, r0
 800c524:	f000 f892 	bl	800c64c <__ieee754_expf>
 800c528:	4604      	mov	r4, r0
 800c52a:	4628      	mov	r0, r5
 800c52c:	f000 f81e 	bl	800c56c <finitef>
 800c530:	b150      	cbz	r0, 800c548 <expf+0x28>
 800c532:	4628      	mov	r0, r5
 800c534:	490b      	ldr	r1, [pc, #44]	@ (800c564 <expf+0x44>)
 800c536:	f7f4 fda3 	bl	8001080 <__aeabi_fcmpgt>
 800c53a:	b138      	cbz	r0, 800c54c <expf+0x2c>
 800c53c:	f7fe f97a 	bl	800a834 <__errno>
 800c540:	2322      	movs	r3, #34	@ 0x22
 800c542:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 800c546:	6003      	str	r3, [r0, #0]
 800c548:	4620      	mov	r0, r4
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	4628      	mov	r0, r5
 800c54e:	4906      	ldr	r1, [pc, #24]	@ (800c568 <expf+0x48>)
 800c550:	f7f4 fd78 	bl	8001044 <__aeabi_fcmplt>
 800c554:	2800      	cmp	r0, #0
 800c556:	d0f7      	beq.n	800c548 <expf+0x28>
 800c558:	f7fe f96c 	bl	800a834 <__errno>
 800c55c:	2322      	movs	r3, #34	@ 0x22
 800c55e:	2400      	movs	r4, #0
 800c560:	6003      	str	r3, [r0, #0]
 800c562:	e7f1      	b.n	800c548 <expf+0x28>
 800c564:	42b17217 	.word	0x42b17217
 800c568:	c2cff1b5 	.word	0xc2cff1b5

0800c56c <finitef>:
 800c56c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c570:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c574:	bfac      	ite	ge
 800c576:	2000      	movge	r0, #0
 800c578:	2001      	movlt	r0, #1
 800c57a:	4770      	bx	lr

0800c57c <fmaxf>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	4604      	mov	r4, r0
 800c580:	460d      	mov	r5, r1
 800c582:	f000 f825 	bl	800c5d0 <__fpclassifyf>
 800c586:	b910      	cbnz	r0, 800c58e <fmaxf+0x12>
 800c588:	462c      	mov	r4, r5
 800c58a:	4620      	mov	r0, r4
 800c58c:	bd38      	pop	{r3, r4, r5, pc}
 800c58e:	4628      	mov	r0, r5
 800c590:	f000 f81e 	bl	800c5d0 <__fpclassifyf>
 800c594:	2800      	cmp	r0, #0
 800c596:	d0f8      	beq.n	800c58a <fmaxf+0xe>
 800c598:	4629      	mov	r1, r5
 800c59a:	4620      	mov	r0, r4
 800c59c:	f7f4 fd70 	bl	8001080 <__aeabi_fcmpgt>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d0f1      	beq.n	800c588 <fmaxf+0xc>
 800c5a4:	e7f1      	b.n	800c58a <fmaxf+0xe>

0800c5a6 <fminf>:
 800c5a6:	b538      	push	{r3, r4, r5, lr}
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	460d      	mov	r5, r1
 800c5ac:	f000 f810 	bl	800c5d0 <__fpclassifyf>
 800c5b0:	b910      	cbnz	r0, 800c5b8 <fminf+0x12>
 800c5b2:	462c      	mov	r4, r5
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f000 f809 	bl	800c5d0 <__fpclassifyf>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d0f8      	beq.n	800c5b4 <fminf+0xe>
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f7f4 fd3d 	bl	8001044 <__aeabi_fcmplt>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d0f1      	beq.n	800c5b2 <fminf+0xc>
 800c5ce:	e7f1      	b.n	800c5b4 <fminf+0xe>

0800c5d0 <__fpclassifyf>:
 800c5d0:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800c5d4:	d00d      	beq.n	800c5f2 <__fpclassifyf+0x22>
 800c5d6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c5da:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c5de:	d30a      	bcc.n	800c5f6 <__fpclassifyf+0x26>
 800c5e0:	4b07      	ldr	r3, [pc, #28]	@ (800c600 <__fpclassifyf+0x30>)
 800c5e2:	1e42      	subs	r2, r0, #1
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d908      	bls.n	800c5fa <__fpclassifyf+0x2a>
 800c5e8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c5ec:	4258      	negs	r0, r3
 800c5ee:	4158      	adcs	r0, r3
 800c5f0:	4770      	bx	lr
 800c5f2:	2002      	movs	r0, #2
 800c5f4:	4770      	bx	lr
 800c5f6:	2004      	movs	r0, #4
 800c5f8:	4770      	bx	lr
 800c5fa:	2003      	movs	r0, #3
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	007ffffe 	.word	0x007ffffe

0800c604 <roundf>:
 800c604:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c608:	3b7f      	subs	r3, #127	@ 0x7f
 800c60a:	2b16      	cmp	r3, #22
 800c60c:	4601      	mov	r1, r0
 800c60e:	b510      	push	{r4, lr}
 800c610:	dc14      	bgt.n	800c63c <roundf+0x38>
 800c612:	2b00      	cmp	r3, #0
 800c614:	da07      	bge.n	800c626 <roundf+0x22>
 800c616:	3301      	adds	r3, #1
 800c618:	f000 4100 	and.w	r1, r0, #2147483648	@ 0x80000000
 800c61c:	d101      	bne.n	800c622 <roundf+0x1e>
 800c61e:	f041 517e 	orr.w	r1, r1, #1065353216	@ 0x3f800000
 800c622:	4608      	mov	r0, r1
 800c624:	bd10      	pop	{r4, pc}
 800c626:	4a08      	ldr	r2, [pc, #32]	@ (800c648 <roundf+0x44>)
 800c628:	411a      	asrs	r2, r3
 800c62a:	4202      	tst	r2, r0
 800c62c:	d0f9      	beq.n	800c622 <roundf+0x1e>
 800c62e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c632:	4119      	asrs	r1, r3
 800c634:	4401      	add	r1, r0
 800c636:	ea21 0102 	bic.w	r1, r1, r2
 800c63a:	e7f2      	b.n	800c622 <roundf+0x1e>
 800c63c:	2b80      	cmp	r3, #128	@ 0x80
 800c63e:	d1f0      	bne.n	800c622 <roundf+0x1e>
 800c640:	f7f4 fa5a 	bl	8000af8 <__addsf3>
 800c644:	4601      	mov	r1, r0
 800c646:	e7ec      	b.n	800c622 <roundf+0x1e>
 800c648:	007fffff 	.word	0x007fffff

0800c64c <__ieee754_expf>:
 800c64c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c650:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c654:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c658:	4604      	mov	r4, r0
 800c65a:	d904      	bls.n	800c666 <__ieee754_expf+0x1a>
 800c65c:	4601      	mov	r1, r0
 800c65e:	f7f4 fa4b 	bl	8000af8 <__addsf3>
 800c662:	4604      	mov	r4, r0
 800c664:	e005      	b.n	800c672 <__ieee754_expf+0x26>
 800c666:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800c66a:	d105      	bne.n	800c678 <__ieee754_expf+0x2c>
 800c66c:	2e00      	cmp	r6, #0
 800c66e:	f040 80c3 	bne.w	800c7f8 <__ieee754_expf+0x1ac>
 800c672:	4620      	mov	r0, r4
 800c674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c678:	4960      	ldr	r1, [pc, #384]	@ (800c7fc <__ieee754_expf+0x1b0>)
 800c67a:	4288      	cmp	r0, r1
 800c67c:	dd04      	ble.n	800c688 <__ieee754_expf+0x3c>
 800c67e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c682:	2000      	movs	r0, #0
 800c684:	f000 b8f3 	b.w	800c86e <__math_oflowf>
 800c688:	2800      	cmp	r0, #0
 800c68a:	da07      	bge.n	800c69c <__ieee754_expf+0x50>
 800c68c:	4a5c      	ldr	r2, [pc, #368]	@ (800c800 <__ieee754_expf+0x1b4>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d904      	bls.n	800c69c <__ieee754_expf+0x50>
 800c692:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c696:	2000      	movs	r0, #0
 800c698:	f000 b8e5 	b.w	800c866 <__math_uflowf>
 800c69c:	4a59      	ldr	r2, [pc, #356]	@ (800c804 <__ieee754_expf+0x1b8>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d971      	bls.n	800c786 <__ieee754_expf+0x13a>
 800c6a2:	4a59      	ldr	r2, [pc, #356]	@ (800c808 <__ieee754_expf+0x1bc>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d851      	bhi.n	800c74c <__ieee754_expf+0x100>
 800c6a8:	4b58      	ldr	r3, [pc, #352]	@ (800c80c <__ieee754_expf+0x1c0>)
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c6b0:	f7f4 fa20 	bl	8000af4 <__aeabi_fsub>
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	4b56      	ldr	r3, [pc, #344]	@ (800c810 <__ieee754_expf+0x1c4>)
 800c6b8:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800c6bc:	f086 0301 	eor.w	r3, r6, #1
 800c6c0:	eba3 0806 	sub.w	r8, r3, r6
 800c6c4:	4639      	mov	r1, r7
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	f7f4 fa14 	bl	8000af4 <__aeabi_fsub>
 800c6cc:	4604      	mov	r4, r0
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f7f4 fb19 	bl	8000d08 <__aeabi_fmul>
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	494e      	ldr	r1, [pc, #312]	@ (800c814 <__ieee754_expf+0x1c8>)
 800c6da:	f7f4 fb15 	bl	8000d08 <__aeabi_fmul>
 800c6de:	494e      	ldr	r1, [pc, #312]	@ (800c818 <__ieee754_expf+0x1cc>)
 800c6e0:	f7f4 fa08 	bl	8000af4 <__aeabi_fsub>
 800c6e4:	4631      	mov	r1, r6
 800c6e6:	f7f4 fb0f 	bl	8000d08 <__aeabi_fmul>
 800c6ea:	494c      	ldr	r1, [pc, #304]	@ (800c81c <__ieee754_expf+0x1d0>)
 800c6ec:	f7f4 fa04 	bl	8000af8 <__addsf3>
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	f7f4 fb09 	bl	8000d08 <__aeabi_fmul>
 800c6f6:	494a      	ldr	r1, [pc, #296]	@ (800c820 <__ieee754_expf+0x1d4>)
 800c6f8:	f7f4 f9fc 	bl	8000af4 <__aeabi_fsub>
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	f7f4 fb03 	bl	8000d08 <__aeabi_fmul>
 800c702:	4948      	ldr	r1, [pc, #288]	@ (800c824 <__ieee754_expf+0x1d8>)
 800c704:	f7f4 f9f8 	bl	8000af8 <__addsf3>
 800c708:	4631      	mov	r1, r6
 800c70a:	f7f4 fafd 	bl	8000d08 <__aeabi_fmul>
 800c70e:	4601      	mov	r1, r0
 800c710:	4620      	mov	r0, r4
 800c712:	f7f4 f9ef 	bl	8000af4 <__aeabi_fsub>
 800c716:	4601      	mov	r1, r0
 800c718:	4606      	mov	r6, r0
 800c71a:	4620      	mov	r0, r4
 800c71c:	f7f4 faf4 	bl	8000d08 <__aeabi_fmul>
 800c720:	4681      	mov	r9, r0
 800c722:	f1b8 0f00 	cmp.w	r8, #0
 800c726:	d143      	bne.n	800c7b0 <__ieee754_expf+0x164>
 800c728:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800c72c:	4630      	mov	r0, r6
 800c72e:	f7f4 f9e1 	bl	8000af4 <__aeabi_fsub>
 800c732:	4601      	mov	r1, r0
 800c734:	4648      	mov	r0, r9
 800c736:	f7f4 fb9b 	bl	8000e70 <__aeabi_fdiv>
 800c73a:	4621      	mov	r1, r4
 800c73c:	f7f4 f9da 	bl	8000af4 <__aeabi_fsub>
 800c740:	4601      	mov	r1, r0
 800c742:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c746:	f7f4 f9d5 	bl	8000af4 <__aeabi_fsub>
 800c74a:	e78a      	b.n	800c662 <__ieee754_expf+0x16>
 800c74c:	4936      	ldr	r1, [pc, #216]	@ (800c828 <__ieee754_expf+0x1dc>)
 800c74e:	4620      	mov	r0, r4
 800c750:	f7f4 fada 	bl	8000d08 <__aeabi_fmul>
 800c754:	4b35      	ldr	r3, [pc, #212]	@ (800c82c <__ieee754_expf+0x1e0>)
 800c756:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c75a:	f7f4 f9cd 	bl	8000af8 <__addsf3>
 800c75e:	f7f4 fc99 	bl	8001094 <__aeabi_f2iz>
 800c762:	4680      	mov	r8, r0
 800c764:	f7f4 fa7c 	bl	8000c60 <__aeabi_i2f>
 800c768:	4931      	ldr	r1, [pc, #196]	@ (800c830 <__ieee754_expf+0x1e4>)
 800c76a:	4606      	mov	r6, r0
 800c76c:	f7f4 facc 	bl	8000d08 <__aeabi_fmul>
 800c770:	4601      	mov	r1, r0
 800c772:	4620      	mov	r0, r4
 800c774:	f7f4 f9be 	bl	8000af4 <__aeabi_fsub>
 800c778:	492e      	ldr	r1, [pc, #184]	@ (800c834 <__ieee754_expf+0x1e8>)
 800c77a:	4605      	mov	r5, r0
 800c77c:	4630      	mov	r0, r6
 800c77e:	f7f4 fac3 	bl	8000d08 <__aeabi_fmul>
 800c782:	4607      	mov	r7, r0
 800c784:	e79e      	b.n	800c6c4 <__ieee754_expf+0x78>
 800c786:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800c78a:	d20c      	bcs.n	800c7a6 <__ieee754_expf+0x15a>
 800c78c:	492a      	ldr	r1, [pc, #168]	@ (800c838 <__ieee754_expf+0x1ec>)
 800c78e:	4620      	mov	r0, r4
 800c790:	f7f4 f9b2 	bl	8000af8 <__addsf3>
 800c794:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c798:	f7f4 fc72 	bl	8001080 <__aeabi_fcmpgt>
 800c79c:	b130      	cbz	r0, 800c7ac <__ieee754_expf+0x160>
 800c79e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	e75b      	b.n	800c65e <__ieee754_expf+0x12>
 800c7a6:	f04f 0800 	mov.w	r8, #0
 800c7aa:	e790      	b.n	800c6ce <__ieee754_expf+0x82>
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	e78e      	b.n	800c6ce <__ieee754_expf+0x82>
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800c7b6:	f7f4 f99d 	bl	8000af4 <__aeabi_fsub>
 800c7ba:	4601      	mov	r1, r0
 800c7bc:	4648      	mov	r0, r9
 800c7be:	f7f4 fb57 	bl	8000e70 <__aeabi_fdiv>
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	4638      	mov	r0, r7
 800c7c6:	f7f4 f995 	bl	8000af4 <__aeabi_fsub>
 800c7ca:	4629      	mov	r1, r5
 800c7cc:	f7f4 f992 	bl	8000af4 <__aeabi_fsub>
 800c7d0:	4601      	mov	r1, r0
 800c7d2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c7d6:	f7f4 f98d 	bl	8000af4 <__aeabi_fsub>
 800c7da:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800c7de:	db02      	blt.n	800c7e6 <__ieee754_expf+0x19a>
 800c7e0:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 800c7e4:	e745      	b.n	800c672 <__ieee754_expf+0x26>
 800c7e6:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800c7ea:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800c7ee:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800c7f2:	f7f4 fa89 	bl	8000d08 <__aeabi_fmul>
 800c7f6:	e734      	b.n	800c662 <__ieee754_expf+0x16>
 800c7f8:	2400      	movs	r4, #0
 800c7fa:	e73a      	b.n	800c672 <__ieee754_expf+0x26>
 800c7fc:	42b17217 	.word	0x42b17217
 800c800:	42cff1b5 	.word	0x42cff1b5
 800c804:	3eb17218 	.word	0x3eb17218
 800c808:	3f851591 	.word	0x3f851591
 800c80c:	0800cd34 	.word	0x0800cd34
 800c810:	0800cd2c 	.word	0x0800cd2c
 800c814:	3331bb4c 	.word	0x3331bb4c
 800c818:	35ddea0e 	.word	0x35ddea0e
 800c81c:	388ab355 	.word	0x388ab355
 800c820:	3b360b61 	.word	0x3b360b61
 800c824:	3e2aaaab 	.word	0x3e2aaaab
 800c828:	3fb8aa3b 	.word	0x3fb8aa3b
 800c82c:	0800cd3c 	.word	0x0800cd3c
 800c830:	3f317180 	.word	0x3f317180
 800c834:	3717f7d1 	.word	0x3717f7d1
 800c838:	7149f2ca 	.word	0x7149f2ca

0800c83c <with_errnof>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4604      	mov	r4, r0
 800c840:	460d      	mov	r5, r1
 800c842:	f7fd fff7 	bl	800a834 <__errno>
 800c846:	6005      	str	r5, [r0, #0]
 800c848:	4620      	mov	r0, r4
 800c84a:	bd38      	pop	{r3, r4, r5, pc}

0800c84c <xflowf>:
 800c84c:	b508      	push	{r3, lr}
 800c84e:	b140      	cbz	r0, 800c862 <xflowf+0x16>
 800c850:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800c854:	f7f4 fa58 	bl	8000d08 <__aeabi_fmul>
 800c858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c85c:	2122      	movs	r1, #34	@ 0x22
 800c85e:	f7ff bfed 	b.w	800c83c <with_errnof>
 800c862:	4608      	mov	r0, r1
 800c864:	e7f6      	b.n	800c854 <xflowf+0x8>

0800c866 <__math_uflowf>:
 800c866:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800c86a:	f7ff bfef 	b.w	800c84c <xflowf>

0800c86e <__math_oflowf>:
 800c86e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800c872:	f7ff bfeb 	b.w	800c84c <xflowf>
	...

0800c878 <_init>:
 800c878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c87a:	bf00      	nop
 800c87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c87e:	bc08      	pop	{r3}
 800c880:	469e      	mov	lr, r3
 800c882:	4770      	bx	lr

0800c884 <_fini>:
 800c884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c886:	bf00      	nop
 800c888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88a:	bc08      	pop	{r3}
 800c88c:	469e      	mov	lr, r3
 800c88e:	4770      	bx	lr
