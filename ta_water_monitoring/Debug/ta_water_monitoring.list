
ta_water_monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000467c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004788  08004788  00005788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047b4  080047b4  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080047b4  080047b4  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047b4  080047b4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080047bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000010  080047cc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000400  080047cc  00006400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001102f  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ad  00000000  00000000  00017068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00019518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d55  00000000  00000000  0001a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018edf  00000000  00000000  0001b33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001413a  00000000  00000000  0003421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000923ac  00000000  00000000  00048356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da702  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004758  00000000  00000000  000da748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000deea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004770 	.word	0x08004770

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004770 	.word	0x08004770

0800014c <HAL_TIM_PeriodElapsedCallback>:
/******************************************************************************
 * Function Definitions
 *****************************************************************************/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(htim == &htim1)
	{


	}
}
 8000154:	bf00      	nop
 8000156:	370c      	adds	r7, #12
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
	...

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f001 f800 	bl	8001168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f84e 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 fae2 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 8000170:	f000 fa9a 	bl	80006a8 <MX_DMA_Init>
  MX_TIM2_Init();
 8000174:	f000 f968 	bl	8000448 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000178:	f000 fa18 	bl	80005ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800017c:	f000 fa6a 	bl	8000654 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000180:	f000 f8dc 	bl	800033c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000184:	f000 f908 	bl	8000398 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000188:	f000 fa3a 	bl	8000600 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800018c:	f000 f898 	bl	80002c0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000190:	f000 f9be 	bl	8000510 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

//  initSubmersible();

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000194:	213c      	movs	r1, #60	@ 0x3c
 8000196:	4815      	ldr	r0, [pc, #84]	@ (80001ec <main+0x8c>)
 8000198:	f002 ff40 	bl	800301c <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800019c:	2100      	movs	r1, #0
 800019e:	4814      	ldr	r0, [pc, #80]	@ (80001f0 <main+0x90>)
 80001a0:	f002 fdf8 	bl	8002d94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001a4:	2104      	movs	r1, #4
 80001a6:	4812      	ldr	r0, [pc, #72]	@ (80001f0 <main+0x90>)
 80001a8:	f002 fdf4 	bl	8002d94 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lim_sw1_stat = LIMIT_SW1;
 80001ac:	2102      	movs	r1, #2
 80001ae:	4811      	ldr	r0, [pc, #68]	@ (80001f4 <main+0x94>)
 80001b0:	f001 ff18 	bl	8001fe4 <HAL_GPIO_ReadPin>
 80001b4:	4603      	mov	r3, r0
 80001b6:	b21a      	sxth	r2, r3
 80001b8:	4b0f      	ldr	r3, [pc, #60]	@ (80001f8 <main+0x98>)
 80001ba:	801a      	strh	r2, [r3, #0]
	  lim_sw2_stat = LIMIT_SW2;
 80001bc:	2110      	movs	r1, #16
 80001be:	480f      	ldr	r0, [pc, #60]	@ (80001fc <main+0x9c>)
 80001c0:	f001 ff10 	bl	8001fe4 <HAL_GPIO_ReadPin>
 80001c4:	4603      	mov	r3, r0
 80001c6:	b21a      	sxth	r2, r3
 80001c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000200 <main+0xa0>)
 80001ca:	801a      	strh	r2, [r3, #0]
//	  }
//	  if(state == 0)
//	  {
//		  writeMotor(1, -350);
//	  }
	  test_var = 0;
 80001cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000204 <main+0xa4>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(500);
 80001d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001d6:	f001 f829 	bl	800122c <HAL_Delay>
	  test_var = 1;
 80001da:	4b0a      	ldr	r3, [pc, #40]	@ (8000204 <main+0xa4>)
 80001dc:	2201      	movs	r2, #1
 80001de:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(500);
 80001e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001e4:	f001 f822 	bl	800122c <HAL_Delay>
	  lim_sw1_stat = LIMIT_SW1;
 80001e8:	bf00      	nop
 80001ea:	e7df      	b.n	80001ac <main+0x4c>
 80001ec:	200000b4 	.word	0x200000b4
 80001f0:	200000fc 	.word	0x200000fc
 80001f4:	40010c00 	.word	0x40010c00
 80001f8:	20000000 	.word	0x20000000
 80001fc:	40010800 	.word	0x40010800
 8000200:	20000002 	.word	0x20000002
 8000204:	2000002c 	.word	0x2000002c

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b094      	sub	sp, #80	@ 0x50
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000212:	2228      	movs	r2, #40	@ 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f004 fa7e 	bl	8004718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800023c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000240:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000246:	2301      	movs	r3, #1
 8000248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024a:	2302      	movs	r3, #2
 800024c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000252:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000254:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000258:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800025e:	4618      	mov	r0, r3
 8000260:	f002 f834 	bl	80022cc <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026a:	f000 fb0b 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000284:	f107 0314 	add.w	r3, r7, #20
 8000288:	2102      	movs	r1, #2
 800028a:	4618      	mov	r0, r3
 800028c:	f002 faa0 	bl	80027d0 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000296:	f000 faf5 	bl	8000884 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800029a:	2302      	movs	r3, #2
 800029c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800029e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80002a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fc20 	bl	8002aec <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002b2:	f000 fae7 	bl	8000884 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3750      	adds	r7, #80	@ 0x50
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d0:	4b18      	ldr	r3, [pc, #96]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002d2:	4a19      	ldr	r2, [pc, #100]	@ (8000338 <MX_ADC1_Init+0x78>)
 80002d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d6:	4b17      	ldr	r3, [pc, #92]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002dc:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e2:	4b14      	ldr	r3, [pc, #80]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e8:	4b12      	ldr	r3, [pc, #72]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002ea:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <MX_ADC1_Init+0x74>)
 80002fe:	f000 ffb9 	bl	8001274 <HAL_ADC_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 fabc 	bl	8000884 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000310:	2301      	movs	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4805      	ldr	r0, [pc, #20]	@ (8000334 <MX_ADC1_Init+0x74>)
 800031e:	f001 f881 	bl	8001424 <HAL_ADC_ConfigChannel>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000328:	f000 faac 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000030 	.word	0x20000030
 8000338:	40012400 	.word	0x40012400

0800033c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000340:	4b12      	ldr	r3, [pc, #72]	@ (800038c <MX_I2C1_Init+0x50>)
 8000342:	4a13      	ldr	r2, [pc, #76]	@ (8000390 <MX_I2C1_Init+0x54>)
 8000344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000346:	4b11      	ldr	r3, [pc, #68]	@ (800038c <MX_I2C1_Init+0x50>)
 8000348:	4a12      	ldr	r2, [pc, #72]	@ (8000394 <MX_I2C1_Init+0x58>)
 800034a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <MX_I2C1_Init+0x50>)
 800034e:	2200      	movs	r2, #0
 8000350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000352:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <MX_I2C1_Init+0x50>)
 8000354:	2200      	movs	r2, #0
 8000356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <MX_I2C1_Init+0x50>)
 800035a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800035e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <MX_I2C1_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000366:	4b09      	ldr	r3, [pc, #36]	@ (800038c <MX_I2C1_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036c:	4b07      	ldr	r3, [pc, #28]	@ (800038c <MX_I2C1_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000372:	4b06      	ldr	r3, [pc, #24]	@ (800038c <MX_I2C1_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000378:	4804      	ldr	r0, [pc, #16]	@ (800038c <MX_I2C1_Init+0x50>)
 800037a:	f001 fe63 	bl	8002044 <HAL_I2C_Init>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000384:	f000 fa7e 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}
 800038c:	20000060 	.word	0x20000060
 8000390:	40005400 	.word	0x40005400
 8000394:	000186a0 	.word	0x000186a0

08000398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08c      	sub	sp, #48	@ 0x30
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	2224      	movs	r2, #36	@ 0x24
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f004 f9b6 	bl	8004718 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b4:	4b22      	ldr	r3, [pc, #136]	@ (8000440 <MX_TIM1_Init+0xa8>)
 80003b6:	4a23      	ldr	r2, [pc, #140]	@ (8000444 <MX_TIM1_Init+0xac>)
 80003b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003ba:	4b21      	ldr	r3, [pc, #132]	@ (8000440 <MX_TIM1_Init+0xa8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000440 <MX_TIM1_Init+0xa8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000440 <MX_TIM1_Init+0xa8>)
 80003c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000440 <MX_TIM1_Init+0xa8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <MX_TIM1_Init+0xa8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003da:	4b19      	ldr	r3, [pc, #100]	@ (8000440 <MX_TIM1_Init+0xa8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003e0:	2301      	movs	r3, #1
 80003e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003e4:	2300      	movs	r3, #0
 80003e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003e8:	2301      	movs	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80003f0:	2300      	movs	r3, #0
 80003f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003f4:	2300      	movs	r3, #0
 80003f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003f8:	2301      	movs	r3, #1
 80003fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	4619      	mov	r1, r3
 800040a:	480d      	ldr	r0, [pc, #52]	@ (8000440 <MX_TIM1_Init+0xa8>)
 800040c:	f002 fd64 	bl	8002ed8 <HAL_TIM_Encoder_Init>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000416:	f000 fa35 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4619      	mov	r1, r3
 8000426:	4806      	ldr	r0, [pc, #24]	@ (8000440 <MX_TIM1_Init+0xa8>)
 8000428:	f003 fbd4 	bl	8003bd4 <HAL_TIMEx_MasterConfigSynchronization>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000432:	f000 fa27 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	3730      	adds	r7, #48	@ 0x30
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	200000b4 	.word	0x200000b4
 8000444:	40012c00 	.word	0x40012c00

08000448 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b08a      	sub	sp, #40	@ 0x28
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044e:	f107 0320 	add.w	r3, r7, #32
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	601a      	str	r2, [r3, #0]
 800045e:	605a      	str	r2, [r3, #4]
 8000460:	609a      	str	r2, [r3, #8]
 8000462:	60da      	str	r2, [r3, #12]
 8000464:	611a      	str	r2, [r3, #16]
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800046a:	4b28      	ldr	r3, [pc, #160]	@ (800050c <MX_TIM2_Init+0xc4>)
 800046c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000470:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000472:	4b26      	ldr	r3, [pc, #152]	@ (800050c <MX_TIM2_Init+0xc4>)
 8000474:	2247      	movs	r2, #71	@ 0x47
 8000476:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b24      	ldr	r3, [pc, #144]	@ (800050c <MX_TIM2_Init+0xc4>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800047e:	4b23      	ldr	r3, [pc, #140]	@ (800050c <MX_TIM2_Init+0xc4>)
 8000480:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000484:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000486:	4b21      	ldr	r3, [pc, #132]	@ (800050c <MX_TIM2_Init+0xc4>)
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048c:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <MX_TIM2_Init+0xc4>)
 800048e:	2200      	movs	r2, #0
 8000490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000492:	481e      	ldr	r0, [pc, #120]	@ (800050c <MX_TIM2_Init+0xc4>)
 8000494:	f002 fc2f 	bl	8002cf6 <HAL_TIM_PWM_Init>
 8000498:	4603      	mov	r3, r0
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800049e:	f000 f9f1 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a2:	2300      	movs	r3, #0
 80004a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004aa:	f107 0320 	add.w	r3, r7, #32
 80004ae:	4619      	mov	r1, r3
 80004b0:	4816      	ldr	r0, [pc, #88]	@ (800050c <MX_TIM2_Init+0xc4>)
 80004b2:	f003 fb8f 	bl	8003bd4 <HAL_TIMEx_MasterConfigSynchronization>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80004bc:	f000 f9e2 	bl	8000884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004c0:	2360      	movs	r3, #96	@ 0x60
 80004c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80004d0:	1d3b      	adds	r3, r7, #4
 80004d2:	2200      	movs	r2, #0
 80004d4:	4619      	mov	r1, r3
 80004d6:	480d      	ldr	r0, [pc, #52]	@ (800050c <MX_TIM2_Init+0xc4>)
 80004d8:	f002 ff1e 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80004e2:	f000 f9cf 	bl	8000884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2204      	movs	r2, #4
 80004ea:	4619      	mov	r1, r3
 80004ec:	4807      	ldr	r0, [pc, #28]	@ (800050c <MX_TIM2_Init+0xc4>)
 80004ee:	f002 ff13 	bl	8003318 <HAL_TIM_PWM_ConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80004f8:	f000 f9c4 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004fc:	4803      	ldr	r0, [pc, #12]	@ (800050c <MX_TIM2_Init+0xc4>)
 80004fe:	f000 fb27 	bl	8000b50 <HAL_TIM_MspPostInit>

}
 8000502:	bf00      	nop
 8000504:	3728      	adds	r7, #40	@ 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	200000fc 	.word	0x200000fc

08000510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800052c:	4b1d      	ldr	r3, [pc, #116]	@ (80005a4 <MX_TIM4_Init+0x94>)
 800052e:	4a1e      	ldr	r2, [pc, #120]	@ (80005a8 <MX_TIM4_Init+0x98>)
 8000530:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000532:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <MX_TIM4_Init+0x94>)
 8000534:	2247      	movs	r2, #71	@ 0x47
 8000536:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b1a      	ldr	r3, [pc, #104]	@ (80005a4 <MX_TIM4_Init+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800053e:	4b19      	ldr	r3, [pc, #100]	@ (80005a4 <MX_TIM4_Init+0x94>)
 8000540:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000544:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000546:	4b17      	ldr	r3, [pc, #92]	@ (80005a4 <MX_TIM4_Init+0x94>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054c:	4b15      	ldr	r3, [pc, #84]	@ (80005a4 <MX_TIM4_Init+0x94>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000552:	4814      	ldr	r0, [pc, #80]	@ (80005a4 <MX_TIM4_Init+0x94>)
 8000554:	f002 fb80 	bl	8002c58 <HAL_TIM_Base_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800055e:	f000 f991 	bl	8000884 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000562:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000566:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	4619      	mov	r1, r3
 800056e:	480d      	ldr	r0, [pc, #52]	@ (80005a4 <MX_TIM4_Init+0x94>)
 8000570:	f002 ff94 	bl	800349c <HAL_TIM_ConfigClockSource>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800057a:	f000 f983 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800057e:	2300      	movs	r3, #0
 8000580:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <MX_TIM4_Init+0x94>)
 800058c:	f003 fb22 	bl	8003bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000596:	f000 f975 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800059a:	bf00      	nop
 800059c:	3718      	adds	r7, #24
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000144 	.word	0x20000144
 80005a8:	40000800 	.word	0x40000800

080005ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005b2:	4a12      	ldr	r2, [pc, #72]	@ (80005fc <MX_USART1_UART_Init+0x50>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005b6:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005e2:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <MX_USART1_UART_Init+0x4c>)
 80005e4:	f003 fb66 	bl	8003cb4 <HAL_UART_Init>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ee:	f000 f949 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	2000018c 	.word	0x2000018c
 80005fc:	40013800 	.word	0x40013800

08000600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000604:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	@ (8000650 <MX_USART2_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b06      	ldr	r3, [pc, #24]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_USART2_UART_Init+0x4c>)
 8000638:	f003 fb3c 	bl	8003cb4 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000642:	f000 f91f 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200001d4 	.word	0x200001d4
 8000650:	40004400 	.word	0x40004400

08000654 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	@ (80006a4 <MX_USART3_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART3_UART_Init+0x4c>)
 800068c:	f003 fb12 	bl	8003cb4 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f000 f8f5 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	2000021c 	.word	0x2000021c
 80006a4:	40004800 	.word	0x40004800

080006a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ae:	4b20      	ldr	r3, [pc, #128]	@ (8000730 <MX_DMA_Init+0x88>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000730 <MX_DMA_Init+0x88>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6153      	str	r3, [r2, #20]
 80006ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000730 <MX_DMA_Init+0x88>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	200c      	movs	r0, #12
 80006cc:	f001 f8bb 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006d0:	200c      	movs	r0, #12
 80006d2:	f001 f8d4 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	200d      	movs	r0, #13
 80006dc:	f001 f8b3 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80006e0:	200d      	movs	r0, #13
 80006e2:	f001 f8cc 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	200e      	movs	r0, #14
 80006ec:	f001 f8ab 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80006f0:	200e      	movs	r0, #14
 80006f2:	f001 f8c4 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	200f      	movs	r0, #15
 80006fc:	f001 f8a3 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000700:	200f      	movs	r0, #15
 8000702:	f001 f8bc 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2010      	movs	r0, #16
 800070c:	f001 f89b 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000710:	2010      	movs	r0, #16
 8000712:	f001 f8b4 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2011      	movs	r0, #17
 800071c:	f001 f893 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000720:	2011      	movs	r0, #17
 8000722:	f001 f8ac 	bl	800187e <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	4b4a      	ldr	r3, [pc, #296]	@ (8000874 <MX_GPIO_Init+0x140>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a49      	ldr	r2, [pc, #292]	@ (8000874 <MX_GPIO_Init+0x140>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b47      	ldr	r3, [pc, #284]	@ (8000874 <MX_GPIO_Init+0x140>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0310 	and.w	r3, r3, #16
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000760:	4b44      	ldr	r3, [pc, #272]	@ (8000874 <MX_GPIO_Init+0x140>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4a43      	ldr	r2, [pc, #268]	@ (8000874 <MX_GPIO_Init+0x140>)
 8000766:	f043 0320 	orr.w	r3, r3, #32
 800076a:	6193      	str	r3, [r2, #24]
 800076c:	4b41      	ldr	r3, [pc, #260]	@ (8000874 <MX_GPIO_Init+0x140>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	f003 0320 	and.w	r3, r3, #32
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000778:	4b3e      	ldr	r3, [pc, #248]	@ (8000874 <MX_GPIO_Init+0x140>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a3d      	ldr	r2, [pc, #244]	@ (8000874 <MX_GPIO_Init+0x140>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b3b      	ldr	r3, [pc, #236]	@ (8000874 <MX_GPIO_Init+0x140>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000790:	4b38      	ldr	r3, [pc, #224]	@ (8000874 <MX_GPIO_Init+0x140>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a37      	ldr	r2, [pc, #220]	@ (8000874 <MX_GPIO_Init+0x140>)
 8000796:	f043 0308 	orr.w	r3, r3, #8
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b35      	ldr	r3, [pc, #212]	@ (8000874 <MX_GPIO_Init+0x140>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0308 	and.w	r3, r3, #8
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ae:	4832      	ldr	r0, [pc, #200]	@ (8000878 <MX_GPIO_Init+0x144>)
 80007b0:	f001 fc2f 	bl	8002012 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80007ba:	4830      	ldr	r0, [pc, #192]	@ (800087c <MX_GPIO_Init+0x148>)
 80007bc:	f001 fc29 	bl	8002012 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2130      	movs	r1, #48	@ 0x30
 80007c4:	482e      	ldr	r0, [pc, #184]	@ (8000880 <MX_GPIO_Init+0x14c>)
 80007c6:	f001 fc24 	bl	8002012 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2302      	movs	r3, #2
 80007da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4619      	mov	r1, r3
 80007e2:	4825      	ldr	r0, [pc, #148]	@ (8000878 <MX_GPIO_Init+0x144>)
 80007e4:	f001 fa7a 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007e8:	2310      	movs	r3, #16
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	4820      	ldr	r0, [pc, #128]	@ (800087c <MX_GPIO_Init+0x148>)
 80007fc:	f001 fa6e 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000808:	2301      	movs	r3, #1
 800080a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	4619      	mov	r1, r3
 8000812:	481b      	ldr	r0, [pc, #108]	@ (8000880 <MX_GPIO_Init+0x14c>)
 8000814:	f001 fa62 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000818:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0310 	add.w	r3, r7, #16
 800082a:	4619      	mov	r1, r3
 800082c:	4814      	ldr	r0, [pc, #80]	@ (8000880 <MX_GPIO_Init+0x14c>)
 800082e:	f001 fa55 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000832:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2302      	movs	r3, #2
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	f107 0310 	add.w	r3, r7, #16
 8000848:	4619      	mov	r1, r3
 800084a:	480c      	ldr	r0, [pc, #48]	@ (800087c <MX_GPIO_Init+0x148>)
 800084c:	f001 fa46 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000850:	2330      	movs	r3, #48	@ 0x30
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_GPIO_Init+0x14c>)
 8000868:	f001 fa38 	bl	8001cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000
 8000878:	40011000 	.word	0x40011000
 800087c:	40010800 	.word	0x40010800
 8000880:	40010c00 	.word	0x40010c00

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <HAL_MspInit+0x6c>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a18      	ldr	r2, [pc, #96]	@ (80008fc <HAL_MspInit+0x6c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b16      	ldr	r3, [pc, #88]	@ (80008fc <HAL_MspInit+0x6c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b13      	ldr	r3, [pc, #76]	@ (80008fc <HAL_MspInit+0x6c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a12      	ldr	r2, [pc, #72]	@ (80008fc <HAL_MspInit+0x6c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <HAL_MspInit+0x6c>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2005      	movs	r0, #5
 80008cc:	f000 ffbb 	bl	8001846 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80008d0:	2005      	movs	r0, #5
 80008d2:	f000 ffd4 	bl	800187e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <HAL_MspInit+0x70>)
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4a04      	ldr	r2, [pc, #16]	@ (8000900 <HAL_MspInit+0x70>)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010000 	.word	0x40010000

08000904 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <HAL_ADC_MspInit+0x98>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d137      	bne.n	8000994 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000924:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a1d      	ldr	r2, [pc, #116]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 800092a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000938:	617b      	str	r3, [r7, #20]
 800093a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a17      	ldr	r2, [pc, #92]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 8000942:	f043 0304 	orr.w	r3, r3, #4
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f003 0304 	and.w	r3, r3, #4
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	4a11      	ldr	r2, [pc, #68]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 800095a:	f043 0308 	orr.w	r3, r3, #8
 800095e:	6193      	str	r3, [r2, #24]
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <HAL_ADC_MspInit+0x9c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f003 0308 	and.w	r3, r3, #8
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 800096c:	23e3      	movs	r3, #227	@ 0xe3
 800096e:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000970:	2303      	movs	r3, #3
 8000972:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000974:	f107 0318 	add.w	r3, r7, #24
 8000978:	4619      	mov	r1, r3
 800097a:	480a      	ldr	r0, [pc, #40]	@ (80009a4 <HAL_ADC_MspInit+0xa0>)
 800097c:	f001 f9ae 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000984:	2303      	movs	r3, #3
 8000986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000988:	f107 0318 	add.w	r3, r7, #24
 800098c:	4619      	mov	r1, r3
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <HAL_ADC_MspInit+0xa4>)
 8000990:	f001 f9a4 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	@ 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40012400 	.word	0x40012400
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40010800 	.word	0x40010800
 80009a8:	40010c00 	.word	0x40010c00

080009ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a3c <HAL_I2C_MspInit+0x90>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d132      	bne.n	8000a32 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b19      	ldr	r3, [pc, #100]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	613b      	str	r3, [r7, #16]
 80009e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <HAL_I2C_MspInit+0x98>)
 80009fa:	f001 f96f 	bl	8001cdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_I2C_MspInit+0x9c>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a06:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0e:	f043 0302 	orr.w	r3, r3, #2
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a14:	4a0c      	ldr	r2, [pc, #48]	@ (8000a48 <HAL_I2C_MspInit+0x9c>)
 8000a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a18:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a1c:	69db      	ldr	r3, [r3, #28]
 8000a1e:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a24:	61d3      	str	r3, [r2, #28]
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_I2C_MspInit+0x94>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	@ 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	40010000 	.word	0x40010000

08000a4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b088      	sub	sp, #32
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d124      	bne.n	8000ab6 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a84:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a0e      	ldr	r2, [pc, #56]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a8a:	f043 0304 	orr.w	r3, r3, #4
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000ab2:	f001 f913 	bl	8001cdc <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3720      	adds	r7, #32
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40012c00 	.word	0x40012c00
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40010800 	.word	0x40010800

08000acc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000adc:	d10b      	bne.n	8000af6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x34>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x34>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_TIM_PWM_MspInit+0x34>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <HAL_TIM_Base_MspInit+0x44>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d113      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <HAL_TIM_Base_MspInit+0x48>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <HAL_TIM_Base_MspInit+0x48>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	61d3      	str	r3, [r2, #28]
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_TIM_Base_MspInit+0x48>)
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	201e      	movs	r0, #30
 8000b34:	f000 fe87 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b38:	201e      	movs	r0, #30
 8000b3a:	f000 fea0 	bl	800187e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40000800 	.word	0x40000800
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b6e:	d142      	bne.n	8000bf6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <HAL_TIM_MspPostInit+0xb0>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a22      	ldr	r2, [pc, #136]	@ (8000c00 <HAL_TIM_MspPostInit+0xb0>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <HAL_TIM_MspPostInit+0xb0>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f003 0304 	and.w	r3, r3, #4
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b88:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <HAL_TIM_MspPostInit+0xb0>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000c00 <HAL_TIM_MspPostInit+0xb0>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <HAL_TIM_MspPostInit+0xb0>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0308 	and.w	r3, r3, #8
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ba0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2302      	movs	r3, #2
 8000bac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4813      	ldr	r0, [pc, #76]	@ (8000c04 <HAL_TIM_MspPostInit+0xb4>)
 8000bb6:	f001 f891 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480e      	ldr	r0, [pc, #56]	@ (8000c08 <HAL_TIM_MspPostInit+0xb8>)
 8000bce:	f001 f885 	bl	8001cdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_TIM_MspPostInit+0xbc>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bf0:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <HAL_TIM_MspPostInit+0xbc>)
 8000bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3728      	adds	r7, #40	@ 0x28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40010800 	.word	0x40010800
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40010000 	.word	0x40010000

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08e      	sub	sp, #56	@ 0x38
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a91      	ldr	r2, [pc, #580]	@ (8000e70 <HAL_UART_MspInit+0x260>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	f040 8093 	bne.w	8000d58 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c32:	4b90      	ldr	r3, [pc, #576]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a8f      	ldr	r2, [pc, #572]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	4b8a      	ldr	r3, [pc, #552]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a89      	ldr	r2, [pc, #548]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b87      	ldr	r3, [pc, #540]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c62:	2340      	movs	r3, #64	@ 0x40
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4880      	ldr	r0, [pc, #512]	@ (8000e78 <HAL_UART_MspInit+0x268>)
 8000c76:	f001 f831 	bl	8001cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c7a:	2380      	movs	r3, #128	@ 0x80
 8000c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	487a      	ldr	r0, [pc, #488]	@ (8000e78 <HAL_UART_MspInit+0x268>)
 8000c8e:	f001 f825 	bl	8001cdc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8000c92:	4b7a      	ldr	r3, [pc, #488]	@ (8000e7c <HAL_UART_MspInit+0x26c>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c9a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ca8:	4a74      	ldr	r2, [pc, #464]	@ (8000e7c <HAL_UART_MspInit+0x26c>)
 8000caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cac:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000cae:	4b74      	ldr	r3, [pc, #464]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cb0:	4a74      	ldr	r2, [pc, #464]	@ (8000e84 <HAL_UART_MspInit+0x274>)
 8000cb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb4:	4b72      	ldr	r3, [pc, #456]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cba:	4b71      	ldr	r3, [pc, #452]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc0:	4b6f      	ldr	r3, [pc, #444]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cc2:	2280      	movs	r2, #128	@ 0x80
 8000cc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cd2:	4b6b      	ldr	r3, [pc, #428]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd8:	4b69      	ldr	r3, [pc, #420]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cde:	4868      	ldr	r0, [pc, #416]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000ce0:	f000 fde8 	bl	80018b4 <HAL_DMA_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000cea:	f7ff fdcb 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a63      	ldr	r2, [pc, #396]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cf4:	4a62      	ldr	r2, [pc, #392]	@ (8000e80 <HAL_UART_MspInit+0x270>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000cfa:	4b63      	ldr	r3, [pc, #396]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000cfc:	4a63      	ldr	r2, [pc, #396]	@ (8000e8c <HAL_UART_MspInit+0x27c>)
 8000cfe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d00:	4b61      	ldr	r3, [pc, #388]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d02:	2210      	movs	r2, #16
 8000d04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b60      	ldr	r3, [pc, #384]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b5e      	ldr	r3, [pc, #376]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d0e:	2280      	movs	r2, #128	@ 0x80
 8000d10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d12:	4b5d      	ldr	r3, [pc, #372]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d18:	4b5b      	ldr	r3, [pc, #364]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d1e:	4b5a      	ldr	r3, [pc, #360]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d24:	4b58      	ldr	r3, [pc, #352]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d2a:	4857      	ldr	r0, [pc, #348]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d2c:	f000 fdc2 	bl	80018b4 <HAL_DMA_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000d36:	f7ff fda5 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a52      	ldr	r2, [pc, #328]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d40:	4a51      	ldr	r2, [pc, #324]	@ (8000e88 <HAL_UART_MspInit+0x278>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2025      	movs	r0, #37	@ 0x25
 8000d4c:	f000 fd7b 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d50:	2025      	movs	r0, #37	@ 0x25
 8000d52:	f000 fd94 	bl	800187e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d56:	e133      	b.n	8000fc0 <HAL_UART_MspInit+0x3b0>
  else if(huart->Instance==USART2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000e90 <HAL_UART_MspInit+0x280>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	f040 80a2 	bne.w	8000ea8 <HAL_UART_MspInit+0x298>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d64:	4b43      	ldr	r3, [pc, #268]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a42      	ldr	r2, [pc, #264]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d6e:	61d3      	str	r3, [r2, #28]
 8000d70:	4b40      	ldr	r3, [pc, #256]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a3c      	ldr	r2, [pc, #240]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <HAL_UART_MspInit+0x264>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d94:	2304      	movs	r3, #4
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da4:	4619      	mov	r1, r3
 8000da6:	483b      	ldr	r0, [pc, #236]	@ (8000e94 <HAL_UART_MspInit+0x284>)
 8000da8:	f000 ff98 	bl	8001cdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dac:	2308      	movs	r3, #8
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4835      	ldr	r0, [pc, #212]	@ (8000e94 <HAL_UART_MspInit+0x284>)
 8000dc0:	f000 ff8c 	bl	8001cdc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000dc4:	4b34      	ldr	r3, [pc, #208]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000dc6:	4a35      	ldr	r2, [pc, #212]	@ (8000e9c <HAL_UART_MspInit+0x28c>)
 8000dc8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dca:	4b33      	ldr	r3, [pc, #204]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd0:	4b31      	ldr	r3, [pc, #196]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd6:	4b30      	ldr	r3, [pc, #192]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000dd8:	2280      	movs	r2, #128	@ 0x80
 8000dda:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de2:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000de8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dee:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000df4:	4828      	ldr	r0, [pc, #160]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000df6:	f000 fd5d 	bl	80018b4 <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0x1f4>
      Error_Handler();
 8000e00:	f7ff fd40 	bl	8000884 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a24      	ldr	r2, [pc, #144]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000e08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e0a:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <HAL_UART_MspInit+0x288>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000e10:	4b23      	ldr	r3, [pc, #140]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e12:	4a24      	ldr	r2, [pc, #144]	@ (8000ea4 <HAL_UART_MspInit+0x294>)
 8000e14:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e16:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e18:	2210      	movs	r2, #16
 8000e1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e24:	2280      	movs	r2, #128	@ 0x80
 8000e26:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e40:	4817      	ldr	r0, [pc, #92]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e42:	f000 fd37 	bl	80018b4 <HAL_DMA_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8000e4c:	f7ff fd1a 	bl	8000884 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a13      	ldr	r2, [pc, #76]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e54:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e56:	4a12      	ldr	r2, [pc, #72]	@ (8000ea0 <HAL_UART_MspInit+0x290>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2026      	movs	r0, #38	@ 0x26
 8000e62:	f000 fcf0 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e66:	2026      	movs	r0, #38	@ 0x26
 8000e68:	f000 fd09 	bl	800187e <HAL_NVIC_EnableIRQ>
}
 8000e6c:	e0a8      	b.n	8000fc0 <HAL_UART_MspInit+0x3b0>
 8000e6e:	bf00      	nop
 8000e70:	40013800 	.word	0x40013800
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010c00 	.word	0x40010c00
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	20000264 	.word	0x20000264
 8000e84:	40020058 	.word	0x40020058
 8000e88:	200002a8 	.word	0x200002a8
 8000e8c:	40020044 	.word	0x40020044
 8000e90:	40004400 	.word	0x40004400
 8000e94:	40010800 	.word	0x40010800
 8000e98:	200002ec 	.word	0x200002ec
 8000e9c:	4002006c 	.word	0x4002006c
 8000ea0:	20000330 	.word	0x20000330
 8000ea4:	40020080 	.word	0x40020080
  else if(huart->Instance==USART3)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a46      	ldr	r2, [pc, #280]	@ (8000fc8 <HAL_UART_MspInit+0x3b8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	f040 8086 	bne.w	8000fc0 <HAL_UART_MspInit+0x3b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb4:	4b45      	ldr	r3, [pc, #276]	@ (8000fcc <HAL_UART_MspInit+0x3bc>)
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	4a44      	ldr	r2, [pc, #272]	@ (8000fcc <HAL_UART_MspInit+0x3bc>)
 8000eba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ebe:	61d3      	str	r3, [r2, #28]
 8000ec0:	4b42      	ldr	r3, [pc, #264]	@ (8000fcc <HAL_UART_MspInit+0x3bc>)
 8000ec2:	69db      	ldr	r3, [r3, #28]
 8000ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8000fcc <HAL_UART_MspInit+0x3bc>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	4a3e      	ldr	r2, [pc, #248]	@ (8000fcc <HAL_UART_MspInit+0x3bc>)
 8000ed2:	f043 0308 	orr.w	r3, r3, #8
 8000ed6:	6193      	str	r3, [r2, #24]
 8000ed8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fcc <HAL_UART_MspInit+0x3bc>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ee4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4835      	ldr	r0, [pc, #212]	@ (8000fd0 <HAL_UART_MspInit+0x3c0>)
 8000efa:	f000 feef 	bl	8001cdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000efe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	482f      	ldr	r0, [pc, #188]	@ (8000fd0 <HAL_UART_MspInit+0x3c0>)
 8000f14:	f000 fee2 	bl	8001cdc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000f18:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8000fd8 <HAL_UART_MspInit+0x3c8>)
 8000f1c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f24:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f2c:	2280      	movs	r2, #128	@ 0x80
 8000f2e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f30:	4b28      	ldr	r3, [pc, #160]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f36:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000f3c:	4b25      	ldr	r3, [pc, #148]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f42:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f48:	4822      	ldr	r0, [pc, #136]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f4a:	f000 fcb3 	bl	80018b4 <HAL_DMA_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8000f54:	f7ff fc96 	bl	8000884 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fd4 <HAL_UART_MspInit+0x3c4>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f66:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe0 <HAL_UART_MspInit+0x3d0>)
 8000f68:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f78:	2280      	movs	r2, #128	@ 0x80
 8000f7a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000f94:	4811      	ldr	r0, [pc, #68]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000f96:	f000 fc8d 	bl	80018b4 <HAL_DMA_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_UART_MspInit+0x394>
      Error_Handler();
 8000fa0:	f7ff fc70 	bl	8000884 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000fa8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000faa:	4a0c      	ldr	r2, [pc, #48]	@ (8000fdc <HAL_UART_MspInit+0x3cc>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2027      	movs	r0, #39	@ 0x27
 8000fb6:	f000 fc46 	bl	8001846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fba:	2027      	movs	r0, #39	@ 0x27
 8000fbc:	f000 fc5f 	bl	800187e <HAL_NVIC_EnableIRQ>
}
 8000fc0:	bf00      	nop
 8000fc2:	3738      	adds	r7, #56	@ 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40010c00 	.word	0x40010c00
 8000fd4:	20000374 	.word	0x20000374
 8000fd8:	40020030 	.word	0x40020030
 8000fdc:	200003b8 	.word	0x200003b8
 8000fe0:	4002001c 	.word	0x4002001c

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <NMI_Handler+0x4>

08000fec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <HardFault_Handler+0x4>

08000ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <MemManage_Handler+0x4>

08000ffc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <UsageFault_Handler+0x4>

0800100c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f8de 	bl	80011f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800104c:	4802      	ldr	r0, [pc, #8]	@ (8001058 <DMA1_Channel2_IRQHandler+0x10>)
 800104e:	f000 fd3f 	bl	8001ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200003b8 	.word	0x200003b8

0800105c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001060:	4802      	ldr	r0, [pc, #8]	@ (800106c <DMA1_Channel3_IRQHandler+0x10>)
 8001062:	f000 fd35 	bl	8001ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000374 	.word	0x20000374

08001070 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001074:	4802      	ldr	r0, [pc, #8]	@ (8001080 <DMA1_Channel4_IRQHandler+0x10>)
 8001076:	f000 fd2b 	bl	8001ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200002a8 	.word	0x200002a8

08001084 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <DMA1_Channel5_IRQHandler+0x10>)
 800108a:	f000 fd21 	bl	8001ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000264 	.word	0x20000264

08001098 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <DMA1_Channel6_IRQHandler+0x10>)
 800109e:	f000 fd17 	bl	8001ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200002ec 	.word	0x200002ec

080010ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010b0:	4802      	ldr	r0, [pc, #8]	@ (80010bc <DMA1_Channel7_IRQHandler+0x10>)
 80010b2:	f000 fd0d 	bl	8001ad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000330 	.word	0x20000330

080010c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010c4:	4802      	ldr	r0, [pc, #8]	@ (80010d0 <TIM4_IRQHandler+0x10>)
 80010c6:	f002 f837 	bl	8003138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000144 	.word	0x20000144

080010d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010d8:	4802      	ldr	r0, [pc, #8]	@ (80010e4 <USART1_IRQHandler+0x10>)
 80010da:	f002 fe3b 	bl	8003d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000018c 	.word	0x2000018c

080010e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ec:	4802      	ldr	r0, [pc, #8]	@ (80010f8 <USART2_IRQHandler+0x10>)
 80010ee:	f002 fe31 	bl	8003d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001d4 	.word	0x200001d4

080010fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001100:	4802      	ldr	r0, [pc, #8]	@ (800110c <USART3_IRQHandler+0x10>)
 8001102:	f002 fe27 	bl	8003d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000021c 	.word	0x2000021c

08001110 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800111c:	f7ff fff8 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001120:	480b      	ldr	r0, [pc, #44]	@ (8001150 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001122:	490c      	ldr	r1, [pc, #48]	@ (8001154 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001124:	4a0c      	ldr	r2, [pc, #48]	@ (8001158 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001128:	e002      	b.n	8001130 <LoopCopyDataInit>

0800112a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800112c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800112e:	3304      	adds	r3, #4

08001130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001134:	d3f9      	bcc.n	800112a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001136:	4a09      	ldr	r2, [pc, #36]	@ (800115c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001138:	4c09      	ldr	r4, [pc, #36]	@ (8001160 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800113c:	e001      	b.n	8001142 <LoopFillZerobss>

0800113e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800113e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001140:	3204      	adds	r2, #4

08001142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001144:	d3fb      	bcc.n	800113e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001146:	f003 faef 	bl	8004728 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114a:	f7ff f809 	bl	8000160 <main>
  bx lr
 800114e:	4770      	bx	lr
  ldr r0, =_sdata
 8001150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001154:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001158:	080047bc 	.word	0x080047bc
  ldr r2, =_sbss
 800115c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001160:	20000400 	.word	0x20000400

08001164 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001164:	e7fe      	b.n	8001164 <ADC1_2_IRQHandler>
	...

08001168 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	@ (8001190 <HAL_Init+0x28>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <HAL_Init+0x28>)
 8001172:	f043 0310 	orr.w	r3, r3, #16
 8001176:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 fb59 	bl	8001830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	200f      	movs	r0, #15
 8001180:	f000 f808 	bl	8001194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fb84 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_InitTick+0x54>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x58>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fb71 	bl	800189a <HAL_SYSTICK_Config>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e00e      	b.n	80011e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b0f      	cmp	r3, #15
 80011c6:	d80a      	bhi.n	80011de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c8:	2200      	movs	r2, #0
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f000 fb39 	bl	8001846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d4:	4a06      	ldr	r2, [pc, #24]	@ (80011f0 <HAL_InitTick+0x5c>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	e000      	b.n	80011e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000004 	.word	0x20000004
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	20000008 	.word	0x20000008

080011f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <HAL_IncTick+0x1c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_IncTick+0x20>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	@ (8001214 <HAL_IncTick+0x20>)
 8001206:	6013      	str	r3, [r2, #0]
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr
 8001210:	2000000c 	.word	0x2000000c
 8001214:	200003fc 	.word	0x200003fc

08001218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b02      	ldr	r3, [pc, #8]	@ (8001228 <HAL_GetTick+0x10>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr
 8001228:	200003fc 	.word	0x200003fc

0800122c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001234:	f7ff fff0 	bl	8001218 <HAL_GetTick>
 8001238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001244:	d005      	beq.n	8001252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001246:	4b0a      	ldr	r3, [pc, #40]	@ (8001270 <HAL_Delay+0x44>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001252:	bf00      	nop
 8001254:	f7ff ffe0 	bl	8001218 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	429a      	cmp	r2, r3
 8001262:	d8f7      	bhi.n	8001254 <HAL_Delay+0x28>
  {
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000000c 	.word	0x2000000c

08001274 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127c:	2300      	movs	r3, #0
 800127e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e0be      	b.n	8001414 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d109      	bne.n	80012b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fb26 	bl	8000904 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f9ab 	bl	8001614 <ADC_ConversionStop_Disable>
 80012be:	4603      	mov	r3, r0
 80012c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f040 8099 	bne.w	8001402 <HAL_ADC_Init+0x18e>
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f040 8095 	bne.w	8001402 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012e0:	f023 0302 	bic.w	r3, r3, #2
 80012e4:	f043 0202 	orr.w	r2, r3, #2
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012f4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7b1b      	ldrb	r3, [r3, #12]
 80012fa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80012fc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	4313      	orrs	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800130c:	d003      	beq.n	8001316 <HAL_ADC_Init+0xa2>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d102      	bne.n	800131c <HAL_ADC_Init+0xa8>
 8001316:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800131a:	e000      	b.n	800131e <HAL_ADC_Init+0xaa>
 800131c:	2300      	movs	r3, #0
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	7d1b      	ldrb	r3, [r3, #20]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d119      	bne.n	8001360 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7b1b      	ldrb	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d109      	bne.n	8001348 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	3b01      	subs	r3, #1
 800133a:	035a      	lsls	r2, r3, #13
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	e00b      	b.n	8001360 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800134c:	f043 0220 	orr.w	r2, r3, #32
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <HAL_ADC_Init+0x1a8>)
 800137c:	4013      	ands	r3, r2
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	6812      	ldr	r2, [r2, #0]
 8001382:	68b9      	ldr	r1, [r7, #8]
 8001384:	430b      	orrs	r3, r1
 8001386:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001390:	d003      	beq.n	800139a <HAL_ADC_Init+0x126>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d104      	bne.n	80013a4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	3b01      	subs	r3, #1
 80013a0:	051b      	lsls	r3, r3, #20
 80013a2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013aa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <HAL_ADC_Init+0x1ac>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d10b      	bne.n	80013e0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d2:	f023 0303 	bic.w	r3, r3, #3
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80013de:	e018      	b.n	8001412 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e4:	f023 0312 	bic.w	r3, r3, #18
 80013e8:	f043 0210 	orr.w	r2, r3, #16
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f4:	f043 0201 	orr.w	r2, r3, #1
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001400:	e007      	b.n	8001412 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001406:	f043 0210 	orr.w	r2, r3, #16
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001412:	7dfb      	ldrb	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	ffe1f7fd 	.word	0xffe1f7fd
 8001420:	ff1f0efe 	.word	0xff1f0efe

08001424 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x20>
 8001440:	2302      	movs	r3, #2
 8001442:	e0dc      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1da>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b06      	cmp	r3, #6
 8001452:	d81c      	bhi.n	800148e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	3b05      	subs	r3, #5
 8001466:	221f      	movs	r2, #31
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	4019      	ands	r1, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	3b05      	subs	r3, #5
 8001480:	fa00 f203 	lsl.w	r2, r0, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	430a      	orrs	r2, r1
 800148a:	635a      	str	r2, [r3, #52]	@ 0x34
 800148c:	e03c      	b.n	8001508 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b0c      	cmp	r3, #12
 8001494:	d81c      	bhi.n	80014d0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	3b23      	subs	r3, #35	@ 0x23
 80014a8:	221f      	movs	r2, #31
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4019      	ands	r1, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	@ 0x23
 80014c2:	fa00 f203 	lsl.w	r2, r0, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80014ce:	e01b      	b.n	8001508 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b41      	subs	r3, #65	@ 0x41
 80014e2:	221f      	movs	r2, #31
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	4019      	ands	r1, r3
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3b41      	subs	r3, #65	@ 0x41
 80014fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	430a      	orrs	r2, r1
 8001506:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d91c      	bls.n	800154a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68d9      	ldr	r1, [r3, #12]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	3b1e      	subs	r3, #30
 8001522:	2207      	movs	r2, #7
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	43db      	mvns	r3, r3
 800152a:	4019      	ands	r1, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6898      	ldr	r0, [r3, #8]
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	3b1e      	subs	r3, #30
 800153c:	fa00 f203 	lsl.w	r2, r0, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	60da      	str	r2, [r3, #12]
 8001548:	e019      	b.n	800157e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6919      	ldr	r1, [r3, #16]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	2207      	movs	r2, #7
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	4019      	ands	r1, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6898      	ldr	r0, [r3, #8]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	fa00 f203 	lsl.w	r2, r0, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b10      	cmp	r3, #16
 8001584:	d003      	beq.n	800158e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800158a:	2b11      	cmp	r3, #17
 800158c:	d132      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1d      	ldr	r2, [pc, #116]	@ (8001608 <HAL_ADC_ConfigChannel+0x1e4>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d125      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d126      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80015b4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b10      	cmp	r3, #16
 80015bc:	d11a      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <HAL_ADC_ConfigChannel+0x1e8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <HAL_ADC_ConfigChannel+0x1ec>)
 80015c4:	fba2 2303 	umull	r2, r3, r2, r3
 80015c8:	0c9a      	lsrs	r2, r3, #18
 80015ca:	4613      	mov	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015d4:	e002      	b.n	80015dc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	3b01      	subs	r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f9      	bne.n	80015d6 <HAL_ADC_ConfigChannel+0x1b2>
 80015e2:	e007      	b.n	80015f4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e8:	f043 0220 	orr.w	r2, r3, #32
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	40012400 	.word	0x40012400
 800160c:	20000004 	.word	0x20000004
 8001610:	431bde83 	.word	0x431bde83

08001614 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b01      	cmp	r3, #1
 800162c:	d12e      	bne.n	800168c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800163e:	f7ff fdeb 	bl	8001218 <HAL_GetTick>
 8001642:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001644:	e01b      	b.n	800167e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001646:	f7ff fde7 	bl	8001218 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d914      	bls.n	800167e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10d      	bne.n	800167e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001666:	f043 0210 	orr.w	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e007      	b.n	800168e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d0dc      	beq.n	8001646 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f003 0307 	and.w	r3, r3, #7
 80016a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b4:	4013      	ands	r3, r2
 80016b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ca:	4a04      	ldr	r2, [pc, #16]	@ (80016dc <__NVIC_SetPriorityGrouping+0x44>)
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	60d3      	str	r3, [r2, #12]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e4:	4b04      	ldr	r3, [pc, #16]	@ (80016f8 <__NVIC_GetPriorityGrouping+0x18>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	f003 0307 	and.w	r3, r3, #7
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	2b00      	cmp	r3, #0
 800170c:	db0b      	blt.n	8001726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	4906      	ldr	r1, [pc, #24]	@ (8001730 <__NVIC_EnableIRQ+0x34>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	095b      	lsrs	r3, r3, #5
 800171c:	2001      	movs	r0, #1
 800171e:	fa00 f202 	lsl.w	r2, r0, r2
 8001722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100

08001734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	6039      	str	r1, [r7, #0]
 800173e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	db0a      	blt.n	800175e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	b2da      	uxtb	r2, r3
 800174c:	490c      	ldr	r1, [pc, #48]	@ (8001780 <__NVIC_SetPriority+0x4c>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	0112      	lsls	r2, r2, #4
 8001754:	b2d2      	uxtb	r2, r2
 8001756:	440b      	add	r3, r1
 8001758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800175c:	e00a      	b.n	8001774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4908      	ldr	r1, [pc, #32]	@ (8001784 <__NVIC_SetPriority+0x50>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	3b04      	subs	r3, #4
 800176c:	0112      	lsls	r2, r2, #4
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	440b      	add	r3, r1
 8001772:	761a      	strb	r2, [r3, #24]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f1c3 0307 	rsb	r3, r3, #7
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	bf28      	it	cs
 80017a6:	2304      	movcs	r3, #4
 80017a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3304      	adds	r3, #4
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d902      	bls.n	80017b8 <NVIC_EncodePriority+0x30>
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	3b03      	subs	r3, #3
 80017b6:	e000      	b.n	80017ba <NVIC_EncodePriority+0x32>
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017bc:	f04f 32ff 	mov.w	r2, #4294967295
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	401a      	ands	r2, r3
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa01 f303 	lsl.w	r3, r1, r3
 80017da:	43d9      	mvns	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	4313      	orrs	r3, r2
         );
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3724      	adds	r7, #36	@ 0x24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017fc:	d301      	bcc.n	8001802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017fe:	2301      	movs	r3, #1
 8001800:	e00f      	b.n	8001822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <SysTick_Config+0x40>)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800180a:	210f      	movs	r1, #15
 800180c:	f04f 30ff 	mov.w	r0, #4294967295
 8001810:	f7ff ff90 	bl	8001734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001814:	4b05      	ldr	r3, [pc, #20]	@ (800182c <SysTick_Config+0x40>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800181a:	4b04      	ldr	r3, [pc, #16]	@ (800182c <SysTick_Config+0x40>)
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	e000e010 	.word	0xe000e010

08001830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ff2d 	bl	8001698 <__NVIC_SetPriorityGrouping>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	4603      	mov	r3, r0
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001858:	f7ff ff42 	bl	80016e0 <__NVIC_GetPriorityGrouping>
 800185c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	6978      	ldr	r0, [r7, #20]
 8001864:	f7ff ff90 	bl	8001788 <NVIC_EncodePriority>
 8001868:	4602      	mov	r2, r0
 800186a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186e:	4611      	mov	r1, r2
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff ff5f 	bl	8001734 <__NVIC_SetPriority>
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff35 	bl	80016fc <__NVIC_EnableIRQ>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ffa2 	bl	80017ec <SysTick_Config>
 80018a8:	4603      	mov	r3, r0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e043      	b.n	8001952 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b22      	ldr	r3, [pc, #136]	@ (800195c <HAL_DMA_Init+0xa8>)
 80018d2:	4413      	add	r3, r2
 80018d4:	4a22      	ldr	r2, [pc, #136]	@ (8001960 <HAL_DMA_Init+0xac>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	009a      	lsls	r2, r3, #2
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001964 <HAL_DMA_Init+0xb0>)
 80018e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018fe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001902:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800190c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bc80      	pop	{r7}
 800195a:	4770      	bx	lr
 800195c:	bffdfff8 	.word	0xbffdfff8
 8001960:	cccccccd 	.word	0xcccccccd
 8001964:	40020000 	.word	0x40020000

08001968 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d008      	beq.n	8001992 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2204      	movs	r2, #4
 8001984:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e020      	b.n	80019d4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 020e 	bic.w	r2, r2, #14
 80019a0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d005      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2204      	movs	r2, #4
 80019fc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
 8001a02:	e051      	b.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 020e 	bic.w	r2, r2, #14
 8001a12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a22      	ldr	r2, [pc, #136]	@ (8001ab4 <HAL_DMA_Abort_IT+0xd4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d029      	beq.n	8001a82 <HAL_DMA_Abort_IT+0xa2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a21      	ldr	r2, [pc, #132]	@ (8001ab8 <HAL_DMA_Abort_IT+0xd8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d022      	beq.n	8001a7e <HAL_DMA_Abort_IT+0x9e>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001abc <HAL_DMA_Abort_IT+0xdc>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01a      	beq.n	8001a78 <HAL_DMA_Abort_IT+0x98>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac0 <HAL_DMA_Abort_IT+0xe0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d012      	beq.n	8001a72 <HAL_DMA_Abort_IT+0x92>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1c      	ldr	r2, [pc, #112]	@ (8001ac4 <HAL_DMA_Abort_IT+0xe4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00a      	beq.n	8001a6c <HAL_DMA_Abort_IT+0x8c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <HAL_DMA_Abort_IT+0xe8>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d102      	bne.n	8001a66 <HAL_DMA_Abort_IT+0x86>
 8001a60:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a64:	e00e      	b.n	8001a84 <HAL_DMA_Abort_IT+0xa4>
 8001a66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a6a:	e00b      	b.n	8001a84 <HAL_DMA_Abort_IT+0xa4>
 8001a6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a70:	e008      	b.n	8001a84 <HAL_DMA_Abort_IT+0xa4>
 8001a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a76:	e005      	b.n	8001a84 <HAL_DMA_Abort_IT+0xa4>
 8001a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a7c:	e002      	b.n	8001a84 <HAL_DMA_Abort_IT+0xa4>
 8001a7e:	2310      	movs	r3, #16
 8001a80:	e000      	b.n	8001a84 <HAL_DMA_Abort_IT+0xa4>
 8001a82:	2301      	movs	r3, #1
 8001a84:	4a11      	ldr	r2, [pc, #68]	@ (8001acc <HAL_DMA_Abort_IT+0xec>)
 8001a86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
    } 
  }
  return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020008 	.word	0x40020008
 8001ab8:	4002001c 	.word	0x4002001c
 8001abc:	40020030 	.word	0x40020030
 8001ac0:	40020044 	.word	0x40020044
 8001ac4:	40020058 	.word	0x40020058
 8001ac8:	4002006c 	.word	0x4002006c
 8001acc:	40020000 	.word	0x40020000

08001ad0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	2204      	movs	r2, #4
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d04f      	beq.n	8001b98 <HAL_DMA_IRQHandler+0xc8>
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d04a      	beq.n	8001b98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0320 	and.w	r3, r3, #32
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0204 	bic.w	r2, r2, #4
 8001b1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a66      	ldr	r2, [pc, #408]	@ (8001cc0 <HAL_DMA_IRQHandler+0x1f0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d029      	beq.n	8001b7e <HAL_DMA_IRQHandler+0xae>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a65      	ldr	r2, [pc, #404]	@ (8001cc4 <HAL_DMA_IRQHandler+0x1f4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d022      	beq.n	8001b7a <HAL_DMA_IRQHandler+0xaa>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a63      	ldr	r2, [pc, #396]	@ (8001cc8 <HAL_DMA_IRQHandler+0x1f8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d01a      	beq.n	8001b74 <HAL_DMA_IRQHandler+0xa4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a62      	ldr	r2, [pc, #392]	@ (8001ccc <HAL_DMA_IRQHandler+0x1fc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d012      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x9e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a60      	ldr	r2, [pc, #384]	@ (8001cd0 <HAL_DMA_IRQHandler+0x200>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00a      	beq.n	8001b68 <HAL_DMA_IRQHandler+0x98>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd4 <HAL_DMA_IRQHandler+0x204>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d102      	bne.n	8001b62 <HAL_DMA_IRQHandler+0x92>
 8001b5c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b60:	e00e      	b.n	8001b80 <HAL_DMA_IRQHandler+0xb0>
 8001b62:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b66:	e00b      	b.n	8001b80 <HAL_DMA_IRQHandler+0xb0>
 8001b68:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b6c:	e008      	b.n	8001b80 <HAL_DMA_IRQHandler+0xb0>
 8001b6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b72:	e005      	b.n	8001b80 <HAL_DMA_IRQHandler+0xb0>
 8001b74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b78:	e002      	b.n	8001b80 <HAL_DMA_IRQHandler+0xb0>
 8001b7a:	2340      	movs	r3, #64	@ 0x40
 8001b7c:	e000      	b.n	8001b80 <HAL_DMA_IRQHandler+0xb0>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	4a55      	ldr	r2, [pc, #340]	@ (8001cd8 <HAL_DMA_IRQHandler+0x208>)
 8001b82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8094 	beq.w	8001cb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b96:	e08e      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d056      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x186>
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d051      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 020a 	bic.w	r2, r2, #10
 8001bce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a38      	ldr	r2, [pc, #224]	@ (8001cc0 <HAL_DMA_IRQHandler+0x1f0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d029      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x166>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a37      	ldr	r2, [pc, #220]	@ (8001cc4 <HAL_DMA_IRQHandler+0x1f4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x162>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a35      	ldr	r2, [pc, #212]	@ (8001cc8 <HAL_DMA_IRQHandler+0x1f8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01a      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x15c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a34      	ldr	r2, [pc, #208]	@ (8001ccc <HAL_DMA_IRQHandler+0x1fc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d012      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x156>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a32      	ldr	r2, [pc, #200]	@ (8001cd0 <HAL_DMA_IRQHandler+0x200>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00a      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x150>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a31      	ldr	r2, [pc, #196]	@ (8001cd4 <HAL_DMA_IRQHandler+0x204>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d102      	bne.n	8001c1a <HAL_DMA_IRQHandler+0x14a>
 8001c14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c18:	e00e      	b.n	8001c38 <HAL_DMA_IRQHandler+0x168>
 8001c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c1e:	e00b      	b.n	8001c38 <HAL_DMA_IRQHandler+0x168>
 8001c20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c24:	e008      	b.n	8001c38 <HAL_DMA_IRQHandler+0x168>
 8001c26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c2a:	e005      	b.n	8001c38 <HAL_DMA_IRQHandler+0x168>
 8001c2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c30:	e002      	b.n	8001c38 <HAL_DMA_IRQHandler+0x168>
 8001c32:	2320      	movs	r3, #32
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_IRQHandler+0x168>
 8001c36:	2302      	movs	r3, #2
 8001c38:	4a27      	ldr	r2, [pc, #156]	@ (8001cd8 <HAL_DMA_IRQHandler+0x208>)
 8001c3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d034      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c54:	e02f      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d028      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x1e8>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d023      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020e 	bic.w	r2, r2, #14
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c88:	2101      	movs	r1, #1
 8001c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d004      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
    }
  }
  return;
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
}
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40020008 	.word	0x40020008
 8001cc4:	4002001c 	.word	0x4002001c
 8001cc8:	40020030 	.word	0x40020030
 8001ccc:	40020044 	.word	0x40020044
 8001cd0:	40020058 	.word	0x40020058
 8001cd4:	4002006c 	.word	0x4002006c
 8001cd8:	40020000 	.word	0x40020000

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	@ 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	e169      	b.n	8001fc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8158 	bne.w	8001fbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a9a      	ldr	r2, [pc, #616]	@ (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d05e      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a98      	ldr	r2, [pc, #608]	@ (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d875      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d1e:	4a98      	ldr	r2, [pc, #608]	@ (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d058      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d24:	4a96      	ldr	r2, [pc, #600]	@ (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d86f      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d2a:	4a96      	ldr	r2, [pc, #600]	@ (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d052      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d30:	4a94      	ldr	r2, [pc, #592]	@ (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d869      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d36:	4a94      	ldr	r2, [pc, #592]	@ (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04c      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a92      	ldr	r2, [pc, #584]	@ (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d863      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d42:	4a92      	ldr	r2, [pc, #584]	@ (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d046      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d48:	4a90      	ldr	r2, [pc, #576]	@ (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d85d      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d82a      	bhi.n	8001da8 <HAL_GPIO_Init+0xcc>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d859      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d56:	a201      	add	r2, pc, #4	@ (adr r2, 8001d5c <HAL_GPIO_Init+0x80>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001dd7 	.word	0x08001dd7
 8001d60:	08001db1 	.word	0x08001db1
 8001d64:	08001dc3 	.word	0x08001dc3
 8001d68:	08001e05 	.word	0x08001e05
 8001d6c:	08001e0b 	.word	0x08001e0b
 8001d70:	08001e0b 	.word	0x08001e0b
 8001d74:	08001e0b 	.word	0x08001e0b
 8001d78:	08001e0b 	.word	0x08001e0b
 8001d7c:	08001e0b 	.word	0x08001e0b
 8001d80:	08001e0b 	.word	0x08001e0b
 8001d84:	08001e0b 	.word	0x08001e0b
 8001d88:	08001e0b 	.word	0x08001e0b
 8001d8c:	08001e0b 	.word	0x08001e0b
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001e0b 	.word	0x08001e0b
 8001d98:	08001e0b 	.word	0x08001e0b
 8001d9c:	08001e0b 	.word	0x08001e0b
 8001da0:	08001db9 	.word	0x08001db9
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	4a79      	ldr	r2, [pc, #484]	@ (8001f90 <HAL_GPIO_Init+0x2b4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dae:	e02c      	b.n	8001e0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e029      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e024      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e01f      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e01a      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dde:	2304      	movs	r3, #4
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e013      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	611a      	str	r2, [r3, #16]
          break;
 8001df6:	e009      	b.n	8001e0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
          break;
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          break;
 8001e0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	@ 0xff
 8001e10:	d801      	bhi.n	8001e16 <HAL_GPIO_Init+0x13a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_Init+0x13e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2bff      	cmp	r3, #255	@ 0xff
 8001e20:	d802      	bhi.n	8001e28 <HAL_GPIO_Init+0x14c>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x152>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	210f      	movs	r1, #15
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80b1 	beq.w	8001fbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a4c      	ldr	r2, [pc, #304]	@ (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b4a      	ldr	r3, [pc, #296]	@ (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e74:	4a48      	ldr	r2, [pc, #288]	@ (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a40      	ldr	r2, [pc, #256]	@ (8001f9c <HAL_GPIO_Init+0x2c0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_GPIO_Init+0x1ec>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fa0 <HAL_GPIO_Init+0x2c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_GPIO_Init+0x1e8>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d007      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e4>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3d      	ldr	r2, [pc, #244]	@ (8001fa8 <HAL_GPIO_Init+0x2cc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_GPIO_Init+0x1e0>
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e006      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e004      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e002      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_GPIO_Init+0x1ee>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ecc:	f002 0203 	and.w	r2, r2, #3
 8001ed0:	0092      	lsls	r2, r2, #2
 8001ed2:	4093      	lsls	r3, r2
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eda:	492f      	ldr	r1, [pc, #188]	@ (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	3302      	adds	r3, #2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	492c      	ldr	r1, [pc, #176]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f02:	4b2a      	ldr	r3, [pc, #168]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	4928      	ldr	r1, [pc, #160]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f1c:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	4922      	ldr	r1, [pc, #136]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60cb      	str	r3, [r1, #12]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f2a:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	491e      	ldr	r1, [pc, #120]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d006      	beq.n	8001f52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	4918      	ldr	r1, [pc, #96]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
 8001f50:	e006      	b.n	8001f60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f52:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	4914      	ldr	r1, [pc, #80]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d021      	beq.n	8001fb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	490e      	ldr	r1, [pc, #56]	@ (8001fac <HAL_GPIO_Init+0x2d0>)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	600b      	str	r3, [r1, #0]
 8001f78:	e021      	b.n	8001fbe <HAL_GPIO_Init+0x2e2>
 8001f7a:	bf00      	nop
 8001f7c:	10320000 	.word	0x10320000
 8001f80:	10310000 	.word	0x10310000
 8001f84:	10220000 	.word	0x10220000
 8001f88:	10210000 	.word	0x10210000
 8001f8c:	10120000 	.word	0x10120000
 8001f90:	10110000 	.word	0x10110000
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40010000 	.word	0x40010000
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40010c00 	.word	0x40010c00
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	40011400 	.word	0x40011400
 8001fac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	4909      	ldr	r1, [pc, #36]	@ (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	fa22 f303 	lsr.w	r3, r2, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f47f ae8e 	bne.w	8001cf0 <HAL_GPIO_Init+0x14>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	372c      	adds	r7, #44	@ 0x2c
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	40010400 	.word	0x40010400

08001fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e001      	b.n	8002006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	460b      	mov	r3, r1
 800201c:	807b      	strh	r3, [r7, #2]
 800201e:	4613      	mov	r3, r2
 8002020:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002022:	787b      	ldrb	r3, [r7, #1]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002028:	887a      	ldrh	r2, [r7, #2]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800202e:	e003      	b.n	8002038 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002030:	887b      	ldrh	r3, [r7, #2]
 8002032:	041a      	lsls	r2, r3, #16
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	611a      	str	r2, [r3, #16]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
	...

08002044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e12b      	b.n	80022ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fc9e 	bl	80009ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	@ 0x24
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020a8:	f000 fcda 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 80020ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4a81      	ldr	r2, [pc, #516]	@ (80022b8 <HAL_I2C_Init+0x274>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d807      	bhi.n	80020c8 <HAL_I2C_Init+0x84>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a80      	ldr	r2, [pc, #512]	@ (80022bc <HAL_I2C_Init+0x278>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	bf94      	ite	ls
 80020c0:	2301      	movls	r3, #1
 80020c2:	2300      	movhi	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e006      	b.n	80020d6 <HAL_I2C_Init+0x92>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a7d      	ldr	r2, [pc, #500]	@ (80022c0 <HAL_I2C_Init+0x27c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	bf94      	ite	ls
 80020d0:	2301      	movls	r3, #1
 80020d2:	2300      	movhi	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0e7      	b.n	80022ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a78      	ldr	r2, [pc, #480]	@ (80022c4 <HAL_I2C_Init+0x280>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9b      	lsrs	r3, r3, #18
 80020e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a6a      	ldr	r2, [pc, #424]	@ (80022b8 <HAL_I2C_Init+0x274>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d802      	bhi.n	8002118 <HAL_I2C_Init+0xd4>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	e009      	b.n	800212c <HAL_I2C_Init+0xe8>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	4a69      	ldr	r2, [pc, #420]	@ (80022c8 <HAL_I2C_Init+0x284>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	3301      	adds	r3, #1
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800213e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	495c      	ldr	r1, [pc, #368]	@ (80022b8 <HAL_I2C_Init+0x274>)
 8002148:	428b      	cmp	r3, r1
 800214a:	d819      	bhi.n	8002180 <HAL_I2C_Init+0x13c>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e59      	subs	r1, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fbb1 f3f3 	udiv	r3, r1, r3
 800215a:	1c59      	adds	r1, r3, #1
 800215c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002160:	400b      	ands	r3, r1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_I2C_Init+0x138>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1e59      	subs	r1, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fbb1 f3f3 	udiv	r3, r1, r3
 8002174:	3301      	adds	r3, #1
 8002176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217a:	e051      	b.n	8002220 <HAL_I2C_Init+0x1dc>
 800217c:	2304      	movs	r3, #4
 800217e:	e04f      	b.n	8002220 <HAL_I2C_Init+0x1dc>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d111      	bne.n	80021ac <HAL_I2C_Init+0x168>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e58      	subs	r0, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	440b      	add	r3, r1
 8002196:	fbb0 f3f3 	udiv	r3, r0, r3
 800219a:	3301      	adds	r3, #1
 800219c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e012      	b.n	80021d2 <HAL_I2C_Init+0x18e>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	0099      	lsls	r1, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Init+0x196>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e022      	b.n	8002220 <HAL_I2C_Init+0x1dc>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10e      	bne.n	8002200 <HAL_I2C_Init+0x1bc>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e58      	subs	r0, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6859      	ldr	r1, [r3, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	440b      	add	r3, r1
 80021f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021fe:	e00f      	b.n	8002220 <HAL_I2C_Init+0x1dc>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1e58      	subs	r0, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	0099      	lsls	r1, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	fbb0 f3f3 	udiv	r3, r0, r3
 8002216:	3301      	adds	r3, #1
 8002218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	6809      	ldr	r1, [r1, #0]
 8002224:	4313      	orrs	r3, r2
 8002226:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800224e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6911      	ldr	r1, [r2, #16]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68d2      	ldr	r2, [r2, #12]
 800225a:	4311      	orrs	r1, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	430b      	orrs	r3, r1
 8002262:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	000186a0 	.word	0x000186a0
 80022bc:	001e847f 	.word	0x001e847f
 80022c0:	003d08ff 	.word	0x003d08ff
 80022c4:	431bde83 	.word	0x431bde83
 80022c8:	10624dd3 	.word	0x10624dd3

080022cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e272      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 8087 	beq.w	80023fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ec:	4b92      	ldr	r3, [pc, #584]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d00c      	beq.n	8002312 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d112      	bne.n	800232a <HAL_RCC_OscConfig+0x5e>
 8002304:	4b8c      	ldr	r3, [pc, #560]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002310:	d10b      	bne.n	800232a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002312:	4b89      	ldr	r3, [pc, #548]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d06c      	beq.n	80023f8 <HAL_RCC_OscConfig+0x12c>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d168      	bne.n	80023f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e24c      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x76>
 8002334:	4b80      	ldr	r3, [pc, #512]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a7f      	ldr	r2, [pc, #508]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800233a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	e02e      	b.n	80023a0 <HAL_RCC_OscConfig+0xd4>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10c      	bne.n	8002364 <HAL_RCC_OscConfig+0x98>
 800234a:	4b7b      	ldr	r3, [pc, #492]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a7a      	ldr	r2, [pc, #488]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b78      	ldr	r3, [pc, #480]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a77      	ldr	r2, [pc, #476]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800235c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	e01d      	b.n	80023a0 <HAL_RCC_OscConfig+0xd4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0xbc>
 800236e:	4b72      	ldr	r3, [pc, #456]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a71      	ldr	r2, [pc, #452]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002374:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b6f      	ldr	r3, [pc, #444]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6e      	ldr	r2, [pc, #440]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e00b      	b.n	80023a0 <HAL_RCC_OscConfig+0xd4>
 8002388:	4b6b      	ldr	r3, [pc, #428]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a6a      	ldr	r2, [pc, #424]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b68      	ldr	r3, [pc, #416]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a67      	ldr	r2, [pc, #412]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7fe ff36 	bl	8001218 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b0:	f7fe ff32 	bl	8001218 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	@ 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e200      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0xe4>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe ff22 	bl	8001218 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe ff1e 	bl	8001218 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	@ 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1ec      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ea:	4b53      	ldr	r3, [pc, #332]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x10c>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d063      	beq.n	80024ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002406:	4b4c      	ldr	r3, [pc, #304]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002412:	4b49      	ldr	r3, [pc, #292]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b08      	cmp	r3, #8
 800241c:	d11c      	bne.n	8002458 <HAL_RCC_OscConfig+0x18c>
 800241e:	4b46      	ldr	r3, [pc, #280]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d116      	bne.n	8002458 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242a:	4b43      	ldr	r3, [pc, #268]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_RCC_OscConfig+0x176>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1c0      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002442:	4b3d      	ldr	r3, [pc, #244]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4939      	ldr	r1, [pc, #228]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	e03a      	b.n	80024ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002460:	4b36      	ldr	r3, [pc, #216]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 8002462:	2201      	movs	r2, #1
 8002464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fe fed7 	bl	8001218 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246e:	f7fe fed3 	bl	8001218 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e1a1      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002480:	4b2d      	ldr	r3, [pc, #180]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f0      	beq.n	800246e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248c:	4b2a      	ldr	r3, [pc, #168]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4927      	ldr	r1, [pc, #156]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 800249c:	4313      	orrs	r3, r2
 800249e:	600b      	str	r3, [r1, #0]
 80024a0:	e015      	b.n	80024ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <HAL_RCC_OscConfig+0x270>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a8:	f7fe feb6 	bl	8001218 <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b0:	f7fe feb2 	bl	8001218 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e180      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1f0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d03a      	beq.n	8002550 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d019      	beq.n	8002516 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <HAL_RCC_OscConfig+0x274>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7fe fe96 	bl	8001218 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f0:	f7fe fe92 	bl	8001218 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e160      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002502:	4b0d      	ldr	r3, [pc, #52]	@ (8002538 <HAL_RCC_OscConfig+0x26c>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800250e:	2001      	movs	r0, #1
 8002510:	f000 face 	bl	8002ab0 <RCC_Delay>
 8002514:	e01c      	b.n	8002550 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002516:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <HAL_RCC_OscConfig+0x274>)
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe fe7c 	bl	8001218 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002522:	e00f      	b.n	8002544 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002524:	f7fe fe78 	bl	8001218 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d908      	bls.n	8002544 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e146      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	42420000 	.word	0x42420000
 8002540:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002544:	4b92      	ldr	r3, [pc, #584]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e9      	bne.n	8002524 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a6 	beq.w	80026aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002562:	4b8b      	ldr	r3, [pc, #556]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10d      	bne.n	800258a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	4b88      	ldr	r3, [pc, #544]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a87      	ldr	r2, [pc, #540]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]
 800257a:	4b85      	ldr	r3, [pc, #532]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b82      	ldr	r3, [pc, #520]	@ (8002794 <HAL_RCC_OscConfig+0x4c8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d118      	bne.n	80025c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b7f      	ldr	r3, [pc, #508]	@ (8002794 <HAL_RCC_OscConfig+0x4c8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a7e      	ldr	r2, [pc, #504]	@ (8002794 <HAL_RCC_OscConfig+0x4c8>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fe39 	bl	8001218 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe fe35 	bl	8001218 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	@ 0x64
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e103      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4b75      	ldr	r3, [pc, #468]	@ (8002794 <HAL_RCC_OscConfig+0x4c8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x312>
 80025d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	6213      	str	r3, [r2, #32]
 80025dc:	e02d      	b.n	800263a <HAL_RCC_OscConfig+0x36e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x334>
 80025e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a69      	ldr	r2, [pc, #420]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f023 0301 	bic.w	r3, r3, #1
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	4b67      	ldr	r3, [pc, #412]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	4a66      	ldr	r2, [pc, #408]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80025f8:	f023 0304 	bic.w	r3, r3, #4
 80025fc:	6213      	str	r3, [r2, #32]
 80025fe:	e01c      	b.n	800263a <HAL_RCC_OscConfig+0x36e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b05      	cmp	r3, #5
 8002606:	d10c      	bne.n	8002622 <HAL_RCC_OscConfig+0x356>
 8002608:	4b61      	ldr	r3, [pc, #388]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a60      	ldr	r2, [pc, #384]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	4b5e      	ldr	r3, [pc, #376]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a5d      	ldr	r2, [pc, #372]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e00b      	b.n	800263a <HAL_RCC_OscConfig+0x36e>
 8002622:	4b5b      	ldr	r3, [pc, #364]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a5a      	ldr	r2, [pc, #360]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	4b58      	ldr	r3, [pc, #352]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a57      	ldr	r2, [pc, #348]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d015      	beq.n	800266e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe fde9 	bl	8001218 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe fde5 	bl	8001218 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0b1      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	4b4b      	ldr	r3, [pc, #300]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0ee      	beq.n	800264a <HAL_RCC_OscConfig+0x37e>
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266e:	f7fe fdd3 	bl	8001218 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002674:	e00a      	b.n	800268c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fe fdcf 	bl	8001218 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e09b      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	4b40      	ldr	r3, [pc, #256]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ee      	bne.n	8002676 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269e:	4b3c      	ldr	r3, [pc, #240]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 8087 	beq.w	80027c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026b4:	4b36      	ldr	r3, [pc, #216]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 030c 	and.w	r3, r3, #12
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d061      	beq.n	8002784 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d146      	bne.n	8002756 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c8:	4b33      	ldr	r3, [pc, #204]	@ (8002798 <HAL_RCC_OscConfig+0x4cc>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7fe fda3 	bl	8001218 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d6:	f7fe fd9f 	bl	8001218 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e06d      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e8:	4b29      	ldr	r3, [pc, #164]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026fc:	d108      	bne.n	8002710 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026fe:	4b24      	ldr	r3, [pc, #144]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	4921      	ldr	r1, [pc, #132]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	4313      	orrs	r3, r2
 800270e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002710:	4b1f      	ldr	r3, [pc, #124]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a19      	ldr	r1, [r3, #32]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002720:	430b      	orrs	r3, r1
 8002722:	491b      	ldr	r1, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x4cc>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272e:	f7fe fd73 	bl	8001218 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002736:	f7fe fd6f 	bl	8001218 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e03d      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002748:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x46a>
 8002754:	e035      	b.n	80027c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b10      	ldr	r3, [pc, #64]	@ (8002798 <HAL_RCC_OscConfig+0x4cc>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe fd5c 	bl	8001218 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fd58 	bl	8001218 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e026      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002776:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x498>
 8002782:	e01e      	b.n	80027c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d107      	bne.n	800279c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e019      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
 8002790:	40021000 	.word	0x40021000
 8002794:	40007000 	.word	0x40007000
 8002798:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <HAL_RCC_OscConfig+0x500>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000

080027d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0d0      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d910      	bls.n	8002814 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f2:	4b67      	ldr	r3, [pc, #412]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 0207 	bic.w	r2, r3, #7
 80027fa:	4965      	ldr	r1, [pc, #404]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	4313      	orrs	r3, r2
 8002800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002802:	4b63      	ldr	r3, [pc, #396]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d001      	beq.n	8002814 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e0b8      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d020      	beq.n	8002862 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800282c:	4b59      	ldr	r3, [pc, #356]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a58      	ldr	r2, [pc, #352]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002832:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002836:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002844:	4b53      	ldr	r3, [pc, #332]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a52      	ldr	r2, [pc, #328]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800284e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002850:	4b50      	ldr	r3, [pc, #320]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	494d      	ldr	r1, [pc, #308]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d040      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d107      	bne.n	8002886 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	4b47      	ldr	r3, [pc, #284]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d115      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e07f      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288e:	4b41      	ldr	r3, [pc, #260]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e073      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	4b3d      	ldr	r3, [pc, #244]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06b      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ae:	4b39      	ldr	r3, [pc, #228]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f023 0203 	bic.w	r2, r3, #3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	4936      	ldr	r1, [pc, #216]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c0:	f7fe fcaa 	bl	8001218 <HAL_GetTick>
 80028c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c6:	e00a      	b.n	80028de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c8:	f7fe fca6 	bl	8001218 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e053      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	4b2d      	ldr	r3, [pc, #180]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f003 020c 	and.w	r2, r3, #12
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d1eb      	bne.n	80028c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028f0:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0307 	and.w	r3, r3, #7
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d210      	bcs.n	8002920 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fe:	4b24      	ldr	r3, [pc, #144]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 0207 	bic.w	r2, r3, #7
 8002906:	4922      	ldr	r1, [pc, #136]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <HAL_RCC_ClockConfig+0x1c0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e032      	b.n	8002986 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800292c:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4916      	ldr	r1, [pc, #88]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	4313      	orrs	r3, r2
 800293c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800294a:	4b12      	ldr	r3, [pc, #72]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	490e      	ldr	r1, [pc, #56]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800295e:	f000 f821 	bl	80029a4 <HAL_RCC_GetSysClockFreq>
 8002962:	4602      	mov	r2, r0
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	490a      	ldr	r1, [pc, #40]	@ (8002998 <HAL_RCC_ClockConfig+0x1c8>)
 8002970:	5ccb      	ldrb	r3, [r1, r3]
 8002972:	fa22 f303 	lsr.w	r3, r2, r3
 8002976:	4a09      	ldr	r2, [pc, #36]	@ (800299c <HAL_RCC_ClockConfig+0x1cc>)
 8002978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fc08 	bl	8001194 <HAL_InitTick>

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40022000 	.word	0x40022000
 8002994:	40021000 	.word	0x40021000
 8002998:	08004788 	.word	0x08004788
 800299c:	20000004 	.word	0x20000004
 80029a0:	20000008 	.word	0x20000008

080029a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	2300      	movs	r3, #0
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029be:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x30>
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x36>
 80029d2:	e027      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 80029d6:	613b      	str	r3, [r7, #16]
      break;
 80029d8:	e027      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d010      	beq.n	8002a14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f2:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x94>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	0c5b      	lsrs	r3, r3, #17
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	4a11      	ldr	r2, [pc, #68]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a0d      	ldr	r2, [pc, #52]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a06:	fb03 f202 	mul.w	r2, r3, r2
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e004      	b.n	8002a1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a0c      	ldr	r2, [pc, #48]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	613b      	str	r3, [r7, #16]
      break;
 8002a22:	e002      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a24:	4b05      	ldr	r3, [pc, #20]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002a26:	613b      	str	r3, [r7, #16]
      break;
 8002a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2a:	693b      	ldr	r3, [r7, #16]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	371c      	adds	r7, #28
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bc80      	pop	{r7}
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	007a1200 	.word	0x007a1200
 8002a40:	080047a0 	.word	0x080047a0
 8002a44:	080047b0 	.word	0x080047b0
 8002a48:	003d0900 	.word	0x003d0900

08002a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b02      	ldr	r3, [pc, #8]	@ (8002a5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a64:	f7ff fff2 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b05      	ldr	r3, [pc, #20]	@ (8002a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4903      	ldr	r1, [pc, #12]	@ (8002a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08004798 	.word	0x08004798

08002a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a8c:	f7ff ffde 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	0adb      	lsrs	r3, r3, #11
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4903      	ldr	r1, [pc, #12]	@ (8002aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08004798 	.word	0x08004798

08002ab0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <RCC_Delay+0x34>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae8 <RCC_Delay+0x38>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	0a5b      	lsrs	r3, r3, #9
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002acc:	bf00      	nop
  }
  while (Delay --);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e5a      	subs	r2, r3, #1
 8002ad2:	60fa      	str	r2, [r7, #12]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f9      	bne.n	8002acc <RCC_Delay+0x1c>
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	10624dd3 	.word	0x10624dd3

08002aec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d07d      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10d      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b18:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1a:	69db      	ldr	r3, [r3, #28]
 8002b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	61d3      	str	r3, [r2, #28]
 8002b24:	4b49      	ldr	r3, [pc, #292]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	4b46      	ldr	r3, [pc, #280]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d118      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b40:	4b43      	ldr	r3, [pc, #268]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a42      	ldr	r2, [pc, #264]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fb64 	bl	8001218 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b52:	e008      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b54:	f7fe fb60 	bl	8001218 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e06d      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b66:	4b3a      	ldr	r3, [pc, #232]	@ (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d0f0      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b72:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d02e      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d027      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b90:	4b2e      	ldr	r3, [pc, #184]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ba6:	4a29      	ldr	r2, [pc, #164]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d014      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fb2f 	bl	8001218 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe fb2b 	bl	8001218 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e036      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ee      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	4917      	ldr	r1, [pc, #92]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bf2:	7dfb      	ldrb	r3, [r7, #23]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d105      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf8:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	4a13      	ldr	r2, [pc, #76]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c10:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	490b      	ldr	r1, [pc, #44]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d008      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c2e:	4b07      	ldr	r3, [pc, #28]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	4904      	ldr	r1, [pc, #16]	@ (8002c4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40007000 	.word	0x40007000
 8002c54:	42420440 	.word	0x42420440

08002c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e041      	b.n	8002cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd ff40 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	4619      	mov	r1, r3
 8002c96:	4610      	mov	r0, r2
 8002c98:	f000 fcec 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e041      	b.n	8002d8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d106      	bne.n	8002d22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fd fed5 	bl	8000acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f000 fc9d 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <HAL_TIM_PWM_Start+0x24>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e022      	b.n	8002dfe <HAL_TIM_PWM_Start+0x6a>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	d109      	bne.n	8002dd2 <HAL_TIM_PWM_Start+0x3e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	e015      	b.n	8002dfe <HAL_TIM_PWM_Start+0x6a>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d109      	bne.n	8002dec <HAL_TIM_PWM_Start+0x58>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e008      	b.n	8002dfe <HAL_TIM_PWM_Start+0x6a>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e05e      	b.n	8002ec4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d104      	bne.n	8002e16 <HAL_TIM_PWM_Start+0x82>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e14:	e013      	b.n	8002e3e <HAL_TIM_PWM_Start+0xaa>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_PWM_Start+0x92>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e24:	e00b      	b.n	8002e3e <HAL_TIM_PWM_Start+0xaa>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_PWM_Start+0xa2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e34:	e003      	b.n	8002e3e <HAL_TIM_PWM_Start+0xaa>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2202      	movs	r2, #2
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2201      	movs	r2, #1
 8002e44:	6839      	ldr	r1, [r7, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fea0 	bl	8003b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1e      	ldr	r2, [pc, #120]	@ (8002ecc <HAL_TIM_PWM_Start+0x138>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d107      	bne.n	8002e66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a18      	ldr	r2, [pc, #96]	@ (8002ecc <HAL_TIM_PWM_Start+0x138>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d00e      	beq.n	8002e8e <HAL_TIM_PWM_Start+0xfa>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e78:	d009      	beq.n	8002e8e <HAL_TIM_PWM_Start+0xfa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a14      	ldr	r2, [pc, #80]	@ (8002ed0 <HAL_TIM_PWM_Start+0x13c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_TIM_PWM_Start+0xfa>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <HAL_TIM_PWM_Start+0x140>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b06      	cmp	r3, #6
 8002e9e:	d010      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	e007      	b.n	8002ec2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40012c00 	.word	0x40012c00
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800

08002ed8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e093      	b.n	8003014 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fd fda3 	bl	8000a4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002f1c:	f023 0307 	bic.w	r3, r3, #7
 8002f20:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 fba1 	bl	8003674 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f5a:	f023 0303 	bic.w	r3, r3, #3
 8002f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	021b      	lsls	r3, r3, #8
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002f78:	f023 030c 	bic.w	r3, r3, #12
 8002f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	4313      	orrs	r3, r2
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	011a      	lsls	r2, r3, #4
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	031b      	lsls	r3, r3, #12
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002fb6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800302c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003034:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800303c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003044:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d110      	bne.n	800306e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003052:	7b7b      	ldrb	r3, [r7, #13]
 8003054:	2b01      	cmp	r3, #1
 8003056:	d001      	beq.n	800305c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e069      	b.n	8003130 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800306c:	e031      	b.n	80030d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b04      	cmp	r3, #4
 8003072:	d110      	bne.n	8003096 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003074:	7bbb      	ldrb	r3, [r7, #14]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d102      	bne.n	8003080 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800307a:	7b3b      	ldrb	r3, [r7, #12]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d001      	beq.n	8003084 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e055      	b.n	8003130 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003094:	e01d      	b.n	80030d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d108      	bne.n	80030ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800309c:	7bbb      	ldrb	r3, [r7, #14]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d105      	bne.n	80030ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030a2:	7b7b      	ldrb	r3, [r7, #13]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d102      	bne.n	80030ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80030a8:	7b3b      	ldrb	r3, [r7, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d001      	beq.n	80030b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e03e      	b.n	8003130 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2202      	movs	r2, #2
 80030c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d003      	beq.n	80030e0 <HAL_TIM_Encoder_Start+0xc4>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d008      	beq.n	80030f0 <HAL_TIM_Encoder_Start+0xd4>
 80030de:	e00f      	b.n	8003100 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fd4f 	bl	8003b8c <TIM_CCxChannelCmd>
      break;
 80030ee:	e016      	b.n	800311e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2201      	movs	r2, #1
 80030f6:	2104      	movs	r1, #4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 fd47 	bl	8003b8c <TIM_CCxChannelCmd>
      break;
 80030fe:	e00e      	b.n	800311e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	2100      	movs	r1, #0
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fd3f 	bl	8003b8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2201      	movs	r2, #1
 8003114:	2104      	movs	r1, #4
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fd38 	bl	8003b8c <TIM_CCxChannelCmd>
      break;
 800311c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f042 0201 	orr.w	r2, r2, #1
 800312c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d020      	beq.n	800319c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01b      	beq.n	800319c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0202 	mvn.w	r2, #2
 800316c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa5a 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 8003188:	e005      	b.n	8003196 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fa4d 	bl	800362a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fa5c 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d020      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d01b      	beq.n	80031e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0204 	mvn.w	r2, #4
 80031b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2202      	movs	r2, #2
 80031be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa34 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 80031d4:	e005      	b.n	80031e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fa27 	bl	800362a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 fa36 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0308 	and.w	r3, r3, #8
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d020      	beq.n	8003234 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0208 	mvn.w	r2, #8
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2204      	movs	r2, #4
 800320a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fa0e 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fa01 	bl	800362a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fa10 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0210 	mvn.w	r2, #16
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2208      	movs	r2, #8
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f9e8 	bl	800363c <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f9db 	bl	800362a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f9ea 	bl	800364e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00c      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d007      	beq.n	80032a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0201 	mvn.w	r2, #1
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fc ff54 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00c      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80032c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fced 	bl	8003ca2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00c      	beq.n	80032ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d007      	beq.n	80032ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f9ba 	bl	8003660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00c      	beq.n	8003310 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d007      	beq.n	8003310 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0220 	mvn.w	r2, #32
 8003308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fcc0 	bl	8003c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003332:	2302      	movs	r3, #2
 8003334:	e0ae      	b.n	8003494 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	f200 809f 	bhi.w	8003484 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003346:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	08003381 	.word	0x08003381
 8003350:	08003485 	.word	0x08003485
 8003354:	08003485 	.word	0x08003485
 8003358:	08003485 	.word	0x08003485
 800335c:	080033c1 	.word	0x080033c1
 8003360:	08003485 	.word	0x08003485
 8003364:	08003485 	.word	0x08003485
 8003368:	08003485 	.word	0x08003485
 800336c:	08003403 	.word	0x08003403
 8003370:	08003485 	.word	0x08003485
 8003374:	08003485 	.word	0x08003485
 8003378:	08003485 	.word	0x08003485
 800337c:	08003443 	.word	0x08003443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f9e2 	bl	8003750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0208 	orr.w	r2, r2, #8
 800339a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6999      	ldr	r1, [r3, #24]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	619a      	str	r2, [r3, #24]
      break;
 80033be:	e064      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 fa28 	bl	800381c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6999      	ldr	r1, [r3, #24]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	021a      	lsls	r2, r3, #8
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	619a      	str	r2, [r3, #24]
      break;
 8003400:	e043      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fa71 	bl	80038f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0208 	orr.w	r2, r2, #8
 800341c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0204 	bic.w	r2, r2, #4
 800342c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	61da      	str	r2, [r3, #28]
      break;
 8003440:	e023      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fabb 	bl	80039c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800345c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69d9      	ldr	r1, [r3, #28]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	021a      	lsls	r2, r3, #8
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	61da      	str	r2, [r3, #28]
      break;
 8003482:	e002      	b.n	800348a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
      break;
 8003488:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003492:	7dfb      	ldrb	r3, [r7, #23]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_TIM_ConfigClockSource+0x1c>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e0b4      	b.n	8003622 <HAL_TIM_ConfigClockSource+0x186>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f0:	d03e      	beq.n	8003570 <HAL_TIM_ConfigClockSource+0xd4>
 80034f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f6:	f200 8087 	bhi.w	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 80034fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034fe:	f000 8086 	beq.w	800360e <HAL_TIM_ConfigClockSource+0x172>
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003506:	d87f      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003508:	2b70      	cmp	r3, #112	@ 0x70
 800350a:	d01a      	beq.n	8003542 <HAL_TIM_ConfigClockSource+0xa6>
 800350c:	2b70      	cmp	r3, #112	@ 0x70
 800350e:	d87b      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b60      	cmp	r3, #96	@ 0x60
 8003512:	d050      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003514:	2b60      	cmp	r3, #96	@ 0x60
 8003516:	d877      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b50      	cmp	r3, #80	@ 0x50
 800351a:	d03c      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0xfa>
 800351c:	2b50      	cmp	r3, #80	@ 0x50
 800351e:	d873      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d058      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003524:	2b40      	cmp	r3, #64	@ 0x40
 8003526:	d86f      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b30      	cmp	r3, #48	@ 0x30
 800352a:	d064      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x15a>
 800352c:	2b30      	cmp	r3, #48	@ 0x30
 800352e:	d86b      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b20      	cmp	r3, #32
 8003532:	d060      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003534:	2b20      	cmp	r3, #32
 8003536:	d867      	bhi.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05c      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x15a>
 800353c:	2b10      	cmp	r3, #16
 800353e:	d05a      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003540:	e062      	b.n	8003608 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003552:	f000 fafc 	bl	8003b4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	609a      	str	r2, [r3, #8]
      break;
 800356e:	e04f      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003580:	f000 fae5 	bl	8003b4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689a      	ldr	r2, [r3, #8]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003592:	609a      	str	r2, [r3, #8]
      break;
 8003594:	e03c      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035a2:	461a      	mov	r2, r3
 80035a4:	f000 fa5c 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2150      	movs	r1, #80	@ 0x50
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fab3 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 80035b4:	e02c      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035c2:	461a      	mov	r2, r3
 80035c4:	f000 fa7a 	bl	8003abc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2160      	movs	r1, #96	@ 0x60
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 faa3 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 80035d4:	e01c      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e2:	461a      	mov	r2, r3
 80035e4:	f000 fa3c 	bl	8003a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2140      	movs	r1, #64	@ 0x40
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fa93 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 80035f4:	e00c      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f000 fa8a 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 8003606:	e003      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      break;
 800360c:	e000      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800360e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003620:	7bfb      	ldrb	r3, [r7, #15]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800362a:	b480      	push	{r7}
 800362c:	b083      	sub	sp, #12
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	bc80      	pop	{r7}
 800364c:	4770      	bx	lr

0800364e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr

08003660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
	...

08003674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a2f      	ldr	r2, [pc, #188]	@ (8003744 <TIM_Base_SetConfig+0xd0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00b      	beq.n	80036a4 <TIM_Base_SetConfig+0x30>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003692:	d007      	beq.n	80036a4 <TIM_Base_SetConfig+0x30>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a2c      	ldr	r2, [pc, #176]	@ (8003748 <TIM_Base_SetConfig+0xd4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0x30>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a2b      	ldr	r2, [pc, #172]	@ (800374c <TIM_Base_SetConfig+0xd8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a22      	ldr	r2, [pc, #136]	@ (8003744 <TIM_Base_SetConfig+0xd0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c4:	d007      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003748 <TIM_Base_SetConfig+0xd4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_Base_SetConfig+0x62>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1e      	ldr	r2, [pc, #120]	@ (800374c <TIM_Base_SetConfig+0xd8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d108      	bne.n	80036e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0d      	ldr	r2, [pc, #52]	@ (8003744 <TIM_Base_SetConfig+0xd0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d103      	bne.n	800371c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	611a      	str	r2, [r3, #16]
  }
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800

08003750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f023 0201 	bic.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 0302 	bic.w	r3, r3, #2
 8003798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003818 <TIM_OC1_SetConfig+0xc8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d10c      	bne.n	80037c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0308 	bic.w	r3, r3, #8
 80037b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a13      	ldr	r2, [pc, #76]	@ (8003818 <TIM_OC1_SetConfig+0xc8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d111      	bne.n	80037f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00

0800381c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f023 0210 	bic.w	r2, r3, #16
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0320 	bic.w	r3, r3, #32
 8003866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <TIM_OC2_SetConfig+0xd0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d10d      	bne.n	8003898 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a14      	ldr	r2, [pc, #80]	@ (80038ec <TIM_OC2_SetConfig+0xd0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d113      	bne.n	80038c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	40012c00 	.word	0x40012c00

080038f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800391e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1d      	ldr	r2, [pc, #116]	@ (80039c0 <TIM_OC3_SetConfig+0xd0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d10d      	bne.n	800396a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a14      	ldr	r2, [pc, #80]	@ (80039c0 <TIM_OC3_SetConfig+0xd0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d113      	bne.n	800399a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40012c00 	.word	0x40012c00

080039c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003a5c <TIM_OC4_SetConfig+0x98>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d109      	bne.n	8003a38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00

08003a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f023 0201 	bic.w	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	f023 030a 	bic.w	r3, r3, #10
 8003a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	031b      	lsls	r3, r3, #12
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003af8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	621a      	str	r2, [r3, #32]
}
 8003b10:	bf00      	nop
 8003b12:	371c      	adds	r7, #28
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f043 0307 	orr.w	r3, r3, #7
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b087      	sub	sp, #28
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	609a      	str	r2, [r3, #8]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f003 031f 	and.w	r3, r3, #31
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1a      	ldr	r2, [r3, #32]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	401a      	ands	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
}
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e046      	b.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a16      	ldr	r2, [pc, #88]	@ (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00e      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c38:	d009      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a12      	ldr	r2, [pc, #72]	@ (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d004      	beq.n	8003c4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a10      	ldr	r2, [pc, #64]	@ (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d10c      	bne.n	8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800

08003c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e042      	b.n	8003d4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fc ff98 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2224      	movs	r2, #36	@ 0x24
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fc7f 	bl	80045fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691a      	ldr	r2, [r3, #16]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695a      	ldr	r2, [r3, #20]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3708      	adds	r7, #8
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b0ba      	sub	sp, #232	@ 0xe8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_UART_IRQHandler+0x66>
 8003da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fb63 	bl	800447e <UART_Receive_IT>
      return;
 8003db8:	e25b      	b.n	8004272 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80de 	beq.w	8003f80 <HAL_UART_IRQHandler+0x22c>
 8003dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80d1 	beq.w	8003f80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_UART_IRQHandler+0xae>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfa:	f043 0201 	orr.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_UART_IRQHandler+0xd2>
 8003e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	f043 0202 	orr.w	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_UART_IRQHandler+0xf6>
 8003e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d011      	beq.n	8003e7a <HAL_UART_IRQHandler+0x126>
 8003e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d105      	bne.n	8003e6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f043 0208 	orr.w	r2, r3, #8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 81f2 	beq.w	8004268 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x14e>
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 faee 	bl	800447e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf14      	ite	ne
 8003eb0:	2301      	movne	r3, #1
 8003eb2:	2300      	moveq	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <HAL_UART_IRQHandler+0x17a>
 8003ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d04f      	beq.n	8003f6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f9f8 	bl	80042c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d041      	beq.n	8003f66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1d9      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d013      	beq.n	8003f5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004134 <HAL_UART_IRQHandler+0x3e0>)
 8003f3c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd fd4c 	bl	80019e0 <HAL_DMA_Abort_IT>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00e      	b.n	8003f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f99c 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e00a      	b.n	8003f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f998 	bl	800429c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e006      	b.n	8003f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f994 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003f7a:	e175      	b.n	8004268 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	bf00      	nop
    return;
 8003f7e:	e173      	b.n	8004268 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	f040 814f 	bne.w	8004228 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8148 	beq.w	8004228 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 8141 	beq.w	8004228 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80b6 	beq.w	8004138 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8145 	beq.w	800426c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003fea:	429a      	cmp	r2, r3
 8003fec:	f080 813e 	bcs.w	800426c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ff6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	f000 8088 	beq.w	8004114 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004012:	e853 3f00 	ldrex	r3, [r3]
 8004016:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800401a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800401e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004022:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004030:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800403c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004048:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1d9      	bne.n	8004004 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3314      	adds	r3, #20
 8004056:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004074:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004078:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800407c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004080:	e841 2300 	strex	r3, r2, [r1]
 8004084:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004086:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e1      	bne.n	8004050 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800409c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800409e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3314      	adds	r3, #20
 80040ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80040b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80040b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80040b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80040b8:	e841 2300 	strex	r3, r2, [r1]
 80040bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80040be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1e3      	bne.n	800408c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	330c      	adds	r3, #12
 80040d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80040e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80040e4:	f023 0310 	bic.w	r3, r3, #16
 80040e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80040f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80040fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004104:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e3      	bne.n	80040d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410e:	4618      	mov	r0, r3
 8004110:	f7fd fc2a 	bl	8001968 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004122:	b29b      	uxth	r3, r3
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	b29b      	uxth	r3, r3
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f8bf 	bl	80042ae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004130:	e09c      	b.n	800426c <HAL_UART_IRQHandler+0x518>
 8004132:	bf00      	nop
 8004134:	08004389 	.word	0x08004389
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004140:	b29b      	uxth	r3, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 808e 	beq.w	8004270 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8089 	beq.w	8004270 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800416e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004182:	647a      	str	r2, [r7, #68]	@ 0x44
 8004184:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e3      	bne.n	800415e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3314      	adds	r3, #20
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	e853 3f00 	ldrex	r3, [r3]
 80041a4:	623b      	str	r3, [r7, #32]
   return(result);
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3314      	adds	r3, #20
 80041b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80041ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80041bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e3      	bne.n	8004196 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0310 	bic.w	r3, r3, #16
 80041f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004200:	61fa      	str	r2, [r7, #28]
 8004202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	69b9      	ldr	r1, [r7, #24]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	617b      	str	r3, [r7, #20]
   return(result);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e3      	bne.n	80041dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800421a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800421e:	4619      	mov	r1, r3
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f844 	bl	80042ae <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004226:	e023      	b.n	8004270 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800422c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d009      	beq.n	8004248 <HAL_UART_IRQHandler+0x4f4>
 8004234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f8b5 	bl	80043b0 <UART_Transmit_IT>
    return;
 8004246:	e014      	b.n	8004272 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800424c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <HAL_UART_IRQHandler+0x51e>
 8004254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8f4 	bl	800444e <UART_EndTransmit_IT>
    return;
 8004266:	e004      	b.n	8004272 <HAL_UART_IRQHandler+0x51e>
    return;
 8004268:	bf00      	nop
 800426a:	e002      	b.n	8004272 <HAL_UART_IRQHandler+0x51e>
      return;
 800426c:	bf00      	nop
 800426e:	e000      	b.n	8004272 <HAL_UART_IRQHandler+0x51e>
      return;
 8004270:	bf00      	nop
  }
}
 8004272:	37e8      	adds	r7, #232	@ 0xe8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bc80      	pop	{r7}
 80042ac:	4770      	bx	lr

080042ae <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b083      	sub	sp, #12
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
 80042b6:	460b      	mov	r3, r1
 80042b8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr

080042c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b095      	sub	sp, #84	@ 0x54
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d6:	e853 3f00 	ldrex	r3, [r3]
 80042da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80042ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80042ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042f4:	e841 2300 	strex	r3, r2, [r1]
 80042f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1e5      	bne.n	80042cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6a3b      	ldr	r3, [r7, #32]
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3314      	adds	r3, #20
 800431e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004320:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004324:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004328:	e841 2300 	strex	r3, r2, [r1]
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800432e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1e5      	bne.n	8004300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004338:	2b01      	cmp	r3, #1
 800433a:	d119      	bne.n	8004370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	330c      	adds	r3, #12
 8004342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	60bb      	str	r3, [r7, #8]
   return(result);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f023 0310 	bic.w	r3, r3, #16
 8004352:	647b      	str	r3, [r7, #68]	@ 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	330c      	adds	r3, #12
 800435a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800435c:	61ba      	str	r2, [r7, #24]
 800435e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6979      	ldr	r1, [r7, #20]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	613b      	str	r3, [r7, #16]
   return(result);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800437e:	bf00      	nop
 8004380:	3754      	adds	r7, #84	@ 0x54
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff ff7a 	bl	800429c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b21      	cmp	r3, #33	@ 0x21
 80043c2:	d13e      	bne.n	8004442 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043cc:	d114      	bne.n	80043f8 <UART_Transmit_IT+0x48>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d110      	bne.n	80043f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	1c9a      	adds	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]
 80043f6:	e008      	b.n	800440a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6211      	str	r1, [r2, #32]
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4619      	mov	r1, r3
 8004418:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800442c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800443c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff ff02 	bl	8004278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b08c      	sub	sp, #48	@ 0x30
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b22      	cmp	r3, #34	@ 0x22
 8004490:	f040 80ae 	bne.w	80045f0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449c:	d117      	bne.n	80044ce <UART_Receive_IT+0x50>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d113      	bne.n	80044ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044bc:	b29a      	uxth	r2, r3
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c6:	1c9a      	adds	r2, r3, #2
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80044cc:	e026      	b.n	800451c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044e0:	d007      	beq.n	80044f2 <UART_Receive_IT+0x74>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <UART_Receive_IT+0x82>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e008      	b.n	8004512 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800450c:	b2da      	uxtb	r2, r3
 800450e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004510:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29b      	uxth	r3, r3
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4619      	mov	r1, r3
 800452a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800452c:	2b00      	cmp	r3, #0
 800452e:	d15d      	bne.n	80045ec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0220 	bic.w	r2, r2, #32
 800453e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800454e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004572:	2b01      	cmp	r3, #1
 8004574:	d135      	bne.n	80045e2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	613b      	str	r3, [r7, #16]
   return(result);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459c:	623a      	str	r2, [r7, #32]
 800459e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	6a3a      	ldr	r2, [r7, #32]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	d10a      	bne.n	80045d4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7ff fe67 	bl	80042ae <HAL_UARTEx_RxEventCallback>
 80045e0:	e002      	b.n	80045e8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fe51 	bl	800428a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	e002      	b.n	80045f2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	e000      	b.n	80045f2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3730      	adds	r7, #48	@ 0x30
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004636:	f023 030c 	bic.w	r3, r3, #12
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6812      	ldr	r2, [r2, #0]
 800463e:	68b9      	ldr	r1, [r7, #8]
 8004640:	430b      	orrs	r3, r1
 8004642:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a2c      	ldr	r2, [pc, #176]	@ (8004710 <UART_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d103      	bne.n	800466c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004664:	f7fe fa10 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	e002      	b.n	8004672 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800466c:	f7fe f9f8 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 8004670:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009a      	lsls	r2, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	fbb2 f3f3 	udiv	r3, r2, r3
 8004688:	4a22      	ldr	r2, [pc, #136]	@ (8004714 <UART_SetConfig+0x118>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	095b      	lsrs	r3, r3, #5
 8004690:	0119      	lsls	r1, r3, #4
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004714 <UART_SetConfig+0x118>)
 80046aa:	fba3 0302 	umull	r0, r3, r3, r2
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2064      	movs	r0, #100	@ 0x64
 80046b2:	fb00 f303 	mul.w	r3, r0, r3
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	3332      	adds	r3, #50	@ 0x32
 80046bc:	4a15      	ldr	r2, [pc, #84]	@ (8004714 <UART_SetConfig+0x118>)
 80046be:	fba2 2303 	umull	r2, r3, r2, r3
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046c8:	4419      	add	r1, r3
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009a      	lsls	r2, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <UART_SetConfig+0x118>)
 80046e2:	fba3 0302 	umull	r0, r3, r3, r2
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	2064      	movs	r0, #100	@ 0x64
 80046ea:	fb00 f303 	mul.w	r3, r0, r3
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	3332      	adds	r3, #50	@ 0x32
 80046f4:	4a07      	ldr	r2, [pc, #28]	@ (8004714 <UART_SetConfig+0x118>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	095b      	lsrs	r3, r3, #5
 80046fc:	f003 020f 	and.w	r2, r3, #15
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	440a      	add	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40013800 	.word	0x40013800
 8004714:	51eb851f 	.word	0x51eb851f

08004718 <memset>:
 8004718:	4603      	mov	r3, r0
 800471a:	4402      	add	r2, r0
 800471c:	4293      	cmp	r3, r2
 800471e:	d100      	bne.n	8004722 <memset+0xa>
 8004720:	4770      	bx	lr
 8004722:	f803 1b01 	strb.w	r1, [r3], #1
 8004726:	e7f9      	b.n	800471c <memset+0x4>

08004728 <__libc_init_array>:
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	2600      	movs	r6, #0
 800472c:	4d0c      	ldr	r5, [pc, #48]	@ (8004760 <__libc_init_array+0x38>)
 800472e:	4c0d      	ldr	r4, [pc, #52]	@ (8004764 <__libc_init_array+0x3c>)
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	42a6      	cmp	r6, r4
 8004736:	d109      	bne.n	800474c <__libc_init_array+0x24>
 8004738:	f000 f81a 	bl	8004770 <_init>
 800473c:	2600      	movs	r6, #0
 800473e:	4d0a      	ldr	r5, [pc, #40]	@ (8004768 <__libc_init_array+0x40>)
 8004740:	4c0a      	ldr	r4, [pc, #40]	@ (800476c <__libc_init_array+0x44>)
 8004742:	1b64      	subs	r4, r4, r5
 8004744:	10a4      	asrs	r4, r4, #2
 8004746:	42a6      	cmp	r6, r4
 8004748:	d105      	bne.n	8004756 <__libc_init_array+0x2e>
 800474a:	bd70      	pop	{r4, r5, r6, pc}
 800474c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004750:	4798      	blx	r3
 8004752:	3601      	adds	r6, #1
 8004754:	e7ee      	b.n	8004734 <__libc_init_array+0xc>
 8004756:	f855 3b04 	ldr.w	r3, [r5], #4
 800475a:	4798      	blx	r3
 800475c:	3601      	adds	r6, #1
 800475e:	e7f2      	b.n	8004746 <__libc_init_array+0x1e>
 8004760:	080047b4 	.word	0x080047b4
 8004764:	080047b4 	.word	0x080047b4
 8004768:	080047b4 	.word	0x080047b4
 800476c:	080047b8 	.word	0x080047b8

08004770 <_init>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr

0800477c <_fini>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr
